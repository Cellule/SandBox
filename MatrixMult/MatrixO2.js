// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = (typeof Module !== 'undefined' ? Module : null) || {};

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function';
var ENVIRONMENT_IS_WEB = typeof window === 'object';
var ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  if (!Module['print']) Module['print'] = function print(x) {
    process['stdout'].write(x + '\n');
  };
  if (!Module['printErr']) Module['printErr'] = function printErr(x) {
    process['stderr'].write(x + '\n');
  };

  var nodeFS = require('fs');
  var nodePath = require('path');

  Module['read'] = function read(filename, binary) {
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    // The path is absolute if the normalized version is the same as the resolved.
    if (!ret && filename != nodePath['resolve'](filename)) {
      filename = path.join(__dirname, '..', 'src', filename);
      ret = nodeFS['readFileSync'](filename);
    }
    if (ret && !binary) ret = ret.toString();
    return ret;
  };

  Module['readBinary'] = function readBinary(filename) { return Module['read'](filename, true) };

  Module['load'] = function load(f) {
    globalEval(read(f));
  };

  Module['arguments'] = process['argv'].slice(2);

  module['exports'] = Module;
}
else if (ENVIRONMENT_IS_SHELL) {
  if (!Module['print']) Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function read() { throw 'no read() available (jsc?)' };
  }

  Module['readBinary'] = function readBinary(f) {
    return read(f, 'binary');
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  this['Module'] = Module;

  eval("if (typeof gc === 'function' && gc.toString().indexOf('[native code]') > 0) var gc = undefined"); // wipe out the SpiderMonkey shell 'gc' function, which can confuse closure (uses it as a minified name, and it is then initted to a non-falsey value unexpectedly)
}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function read(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof console !== 'undefined') {
    if (!Module['print']) Module['print'] = function print(x) {
      console.log(x);
    };
    if (!Module['printErr']) Module['printErr'] = function printErr(x) {
      console.log(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  if (ENVIRONMENT_IS_WEB) {
    window['Module'] = Module;
  } else {
    Module['load'] = importScripts;
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] == 'undefined' && Module['read']) {
  Module['load'] = function load(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];

// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}



// === Auto-generated preamble library stuff ===

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  forceAlign: function (target, quantum) {
    quantum = quantum || 4;
    if (quantum == 1) return target;
    if (isNumber(target) && isNumber(quantum)) {
      return Math.ceil(target/quantum)*quantum;
    } else if (isNumber(quantum) && isPowerOfTwo(quantum)) {
      return '(((' +target + ')+' + (quantum-1) + ')&' + -quantum + ')';
    }
    return 'Math.ceil((' + target + ')/' + quantum + ')*' + quantum;
  },
  isNumberType: function (type) {
    return type in Runtime.INT_TYPES || type in Runtime.FLOAT_TYPES;
  },
  isPointerType: function isPointerType(type) {
  return type[type.length-1] == '*';
},
  isStructType: function isStructType(type) {
  if (isPointerType(type)) return false;
  if (isArrayType(type)) return true;
  if (/<?\{ ?[^}]* ?\}>?/.test(type)) return true; // { i32, i8 } etc. - anonymous struct types
  // See comment in isStructPointerType()
  return type[0] == '%';
},
  INT_TYPES: {"i1":0,"i8":0,"i16":0,"i32":0,"i64":0},
  FLOAT_TYPES: {"float":0,"double":0},
  or64: function (x, y) {
    var l = (x | 0) | (y | 0);
    var h = (Math.round(x / 4294967296) | Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  and64: function (x, y) {
    var l = (x | 0) & (y | 0);
    var h = (Math.round(x / 4294967296) & Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  xor64: function (x, y) {
    var l = (x | 0) ^ (y | 0);
    var h = (Math.round(x / 4294967296) ^ Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  dedup: function dedup(items, ident) {
  var seen = {};
  if (ident) {
    return items.filter(function(item) {
      if (seen[item[ident]]) return false;
      seen[item[ident]] = true;
      return true;
    });
  } else {
    return items.filter(function(item) {
      if (seen[item]) return false;
      seen[item] = true;
      return true;
    });
  }
},
  set: function set() {
  var args = typeof arguments[0] === 'object' ? arguments[0] : arguments;
  var ret = {};
  for (var i = 0; i < args.length; i++) {
    ret[args[i]] = 0;
  }
  return ret;
},
  STACK_ALIGN: 8,
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (!vararg && (type == 'i64' || type == 'double')) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  calculateStructAlignment: function calculateStructAlignment(type) {
    type.flatSize = 0;
    type.alignSize = 0;
    var diffs = [];
    var prev = -1;
    var index = 0;
    type.flatIndexes = type.fields.map(function(field) {
      index++;
      var size, alignSize;
      if (Runtime.isNumberType(field) || Runtime.isPointerType(field)) {
        size = Runtime.getNativeTypeSize(field); // pack char; char; in structs, also char[X]s.
        alignSize = Runtime.getAlignSize(field, size);
      } else if (Runtime.isStructType(field)) {
        if (field[1] === '0') {
          // this is [0 x something]. When inside another structure like here, it must be at the end,
          // and it adds no size
          // XXX this happens in java-nbody for example... assert(index === type.fields.length, 'zero-length in the middle!');
          size = 0;
          if (Types.types[field]) {
            alignSize = Runtime.getAlignSize(null, Types.types[field].alignSize);
          } else {
            alignSize = type.alignSize || QUANTUM_SIZE;
          }
        } else {
          size = Types.types[field].flatSize;
          alignSize = Runtime.getAlignSize(null, Types.types[field].alignSize);
        }
      } else if (field[0] == 'b') {
        // bN, large number field, like a [N x i8]
        size = field.substr(1)|0;
        alignSize = 1;
      } else if (field[0] === '<') {
        // vector type
        size = alignSize = Types.types[field].flatSize; // fully aligned
      } else if (field[0] === 'i') {
        // illegal integer field, that could not be legalized because it is an internal structure field
        // it is ok to have such fields, if we just use them as markers of field size and nothing more complex
        size = alignSize = parseInt(field.substr(1))/8;
        assert(size % 1 === 0, 'cannot handle non-byte-size field ' + field);
      } else {
        assert(false, 'invalid type for calculateStructAlignment');
      }
      if (type.packed) alignSize = 1;
      type.alignSize = Math.max(type.alignSize, alignSize);
      var curr = Runtime.alignMemory(type.flatSize, alignSize); // if necessary, place this on aligned memory
      type.flatSize = curr + size;
      if (prev >= 0) {
        diffs.push(curr-prev);
      }
      prev = curr;
      return curr;
    });
    if (type.name_ && type.name_[0] === '[') {
      // arrays have 2 elements, so we get the proper difference. then we scale here. that way we avoid
      // allocating a potentially huge array for [999999 x i8] etc.
      type.flatSize = parseInt(type.name_.substr(1))*type.flatSize/2;
    }
    type.flatSize = Runtime.alignMemory(type.flatSize, type.alignSize);
    if (diffs.length == 0) {
      type.flatFactor = type.flatSize;
    } else if (Runtime.dedup(diffs).length == 1) {
      type.flatFactor = diffs[0];
    }
    type.needsFlattening = (type.flatFactor != 1);
    return type.flatIndexes;
  },
  generateStructInfo: function (struct, typeName, offset) {
    var type, alignment;
    if (typeName) {
      offset = offset || 0;
      type = (typeof Types === 'undefined' ? Runtime.typeInfo : Types.types)[typeName];
      if (!type) return null;
      if (type.fields.length != struct.length) {
        printErr('Number of named fields must match the type for ' + typeName + ': possibly duplicate struct names. Cannot return structInfo');
        return null;
      }
      alignment = type.flatIndexes;
    } else {
      var type = { fields: struct.map(function(item) { return item[0] }) };
      alignment = Runtime.calculateStructAlignment(type);
    }
    var ret = {
      __size__: type.flatSize
    };
    if (typeName) {
      struct.forEach(function(item, i) {
        if (typeof item === 'string') {
          ret[item] = alignment[i] + offset;
        } else {
          // embedded struct
          var key;
          for (var k in item) key = k;
          ret[key] = Runtime.generateStructInfo(item[key], type.fields[i], alignment[i]);
        }
      });
    } else {
      struct.forEach(function(item, i) {
        ret[item[1]] = alignment[i];
      });
    }
    return ret;
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      if (!args.splice) args = Array.prototype.slice.call(args);
      args.splice(0, 0, ptr);
      return Module['dynCall_' + sig].apply(null, args);
    } else {
      return Module['dynCall_' + sig].call(null, ptr);
    }
  },
  functionPointers: [],
  addFunction: function (func) {
    for (var i = 0; i < Runtime.functionPointers.length; i++) {
      if (!Runtime.functionPointers[i]) {
        Runtime.functionPointers[i] = func;
        return 2*(1 + i);
      }
    }
    throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
  },
  removeFunction: function (index) {
    Runtime.functionPointers[(index-2)/2] = null;
  },
  getAsmConst: function (code, numArgs) {
    // code is a constant string on the heap, so we can cache these
    if (!Runtime.asmConstCache) Runtime.asmConstCache = {};
    var func = Runtime.asmConstCache[code];
    if (func) return func;
    var args = [];
    for (var i = 0; i < numArgs; i++) {
      args.push(String.fromCharCode(36) + i); // $0, $1 etc
    }
    var source = Pointer_stringify(code);
    if (source[0] === '"') {
      // tolerate EM_ASM("..code..") even though EM_ASM(..code..) is correct
      if (source.indexOf('"', 1) === source.length-1) {
        source = source.substr(1, source.length-2);
      } else {
        // something invalid happened, e.g. EM_ASM("..code($0)..", input)
        abort('invalid EM_ASM input |' + source + '|. Please use EM_ASM(..code..) (no quotes) or EM_ASM({ ..code($0).. }, input) (to input values)');
      }
    }
    try {
      var evalled = eval('(function(' + args.join(',') + '){ ' + source + ' })'); // new Function does not allow upvars in node
    } catch(e) {
      Module.printErr('error in executing inline EM_ASM code: ' + e + ' on: \n\n' + source + '\n\nwith args |' + args + '| (make sure to use the right one out of EM_ASM, EM_ASM_ARGS, etc.)');
      throw e;
    }
    return Runtime.asmConstCache[code] = evalled;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[func]) {
      Runtime.funcWrappers[func] = function dynCall_wrapper() {
        return Runtime.dynCall(sig, func, arguments);
      };
    }
    return Runtime.funcWrappers[func];
  },
  UTF8Processor: function () {
    var buffer = [];
    var needed = 0;
    this.processCChar = function (code) {
      code = code & 0xFF;

      if (buffer.length == 0) {
        if ((code & 0x80) == 0x00) {        // 0xxxxxxx
          return String.fromCharCode(code);
        }
        buffer.push(code);
        if ((code & 0xE0) == 0xC0) {        // 110xxxxx
          needed = 1;
        } else if ((code & 0xF0) == 0xE0) { // 1110xxxx
          needed = 2;
        } else {                            // 11110xxx
          needed = 3;
        }
        return '';
      }

      if (needed) {
        buffer.push(code);
        needed--;
        if (needed > 0) return '';
      }

      var c1 = buffer[0];
      var c2 = buffer[1];
      var c3 = buffer[2];
      var c4 = buffer[3];
      var ret;
      if (buffer.length == 2) {
        ret = String.fromCharCode(((c1 & 0x1F) << 6)  | (c2 & 0x3F));
      } else if (buffer.length == 3) {
        ret = String.fromCharCode(((c1 & 0x0F) << 12) | ((c2 & 0x3F) << 6)  | (c3 & 0x3F));
      } else {
        // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
        var codePoint = ((c1 & 0x07) << 18) | ((c2 & 0x3F) << 12) |
                        ((c3 & 0x3F) << 6)  | (c4 & 0x3F);
        ret = String.fromCharCode(
          Math.floor((codePoint - 0x10000) / 0x400) + 0xD800,
          (codePoint - 0x10000) % 0x400 + 0xDC00);
      }
      buffer.length = 0;
      return ret;
    }
    this.processJSString = function processJSString(string) {
      /* TODO: use TextEncoder when present,
        var encoder = new TextEncoder();
        encoder['encoding'] = "utf-8";
        var utf8Array = encoder['encode'](aMsg.data);
      */
      string = unescape(encodeURIComponent(string));
      var ret = [];
      for (var i = 0; i < string.length; i++) {
        ret.push(string.charCodeAt(i));
      }
      return ret;
    }
  },
  getCompilerSetting: function (name) {
    throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work';
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+7)&-8); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + size)|0;STATICTOP = (((STATICTOP)+7)&-8); return ret; },
  dynamicAlloc: function (size) { var ret = DYNAMICTOP;DYNAMICTOP = (DYNAMICTOP + size)|0;DYNAMICTOP = (((DYNAMICTOP)+7)&-8); if (DYNAMICTOP >= TOTAL_MEMORY) enlargeMemory();; return ret; },
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 8))*(quantum ? quantum : 8); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((+((low>>>0)))+((+((high>>>0)))*(+4294967296))) : ((+((low>>>0)))+((+((high|0)))*(+4294967296)))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}


Module['Runtime'] = Runtime;









//========================================
// Runtime essentials
//========================================

var __THREW__ = 0; // Used in checking for thrown exceptions.

var ABORT = false; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

var undef = 0;
// tempInt is used for 32-bit signed values or smaller. tempBigInt is used
// for 32-bit unsigned values or more than 32 bits. TODO: audit all uses of tempInt
var tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD, tempDouble, tempFloat;
var tempI64, tempI64b;
var tempRet0, tempRet1, tempRet2, tempRet3, tempRet4, tempRet5, tempRet6, tempRet7, tempRet8, tempRet9;

function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// C calling interface. A convenient way to call C functions (in C files, or
// defined with extern "C").
//
// Note: LLVM optimizations can inline and remove functions, after which you will not be
//       able to call them. Closure can also do so. To avoid that, add your function to
//       the exports using something like
//
//         -s EXPORTED_FUNCTIONS='["_main", "_myfunc"]'
//
// @param ident      The name of the C function (note that C++ functions will be name-mangled - use extern "C")
// @param returnType The return type of the function, one of the JS types 'number', 'string' or 'array' (use 'number' for any C pointer, and
//                   'array' for JavaScript arrays and typed arrays; note that arrays are 8-bit).
// @param argTypes   An array of the types of arguments for the function (if there are no arguments, this can be ommitted). Types are as in returnType,
//                   except that 'array' is not possible (there is no way for us to know the length of the array)
// @param args       An array of the arguments to the function, as native JS values (as in returnType)
//                   Note that string arguments will be stored on the stack (the JS string will become a C string on the stack).
// @return           The return value, as a native JS value (as in returnType)
function ccall(ident, returnType, argTypes, args) {
  return ccallFunc(getCFunc(ident), returnType, argTypes, args);
}
Module["ccall"] = ccall;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  try {
    var func = Module['_' + ident]; // closure exported function
    if (!func) func = eval('_' + ident); // explicit lookup
  } catch(e) {
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

// Internal function that does a C call using a function, not an identifier
function ccallFunc(func, returnType, argTypes, args) {
  var stack = 0;
  function toC(value, type) {
    if (type == 'string') {
      if (value === null || value === undefined || value === 0) return 0; // null string
      value = intArrayFromString(value);
      type = 'array';
    }
    if (type == 'array') {
      if (!stack) stack = Runtime.stackSave();
      var ret = Runtime.stackAlloc(value.length);
      writeArrayToMemory(value, ret);
      return ret;
    }
    return value;
  }
  function fromC(value, type) {
    if (type == 'string') {
      return Pointer_stringify(value);
    }
    assert(type != 'array');
    return value;
  }
  var i = 0;
  var cArgs = args ? args.map(function(arg) {
    return toC(arg, argTypes[i++]);
  }) : [];
  var ret = fromC(func.apply(null, cArgs), returnType);
  if (stack) Runtime.stackRestore(stack);
  return ret;
}

// Returns a native JS wrapper for a C function. This is similar to ccall, but
// returns a function you can call repeatedly in a normal way. For example:
//
//   var my_function = cwrap('my_c_function', 'number', ['number', 'number']);
//   alert(my_function(5, 22));
//   alert(my_function(99, 12));
//
function cwrap(ident, returnType, argTypes) {
  var func = getCFunc(ident);
  return function() {
    return ccallFunc(func, returnType, argTypes, Array.prototype.slice.call(arguments));
  }
}
Module["cwrap"] = cwrap;

// Sets a value in memory in a dynamic way at run-time. Uses the
// type data. This is the same as makeSetValue, except that
// makeSetValue is done at compile-time and generates the needed
// code then, whereas this function picks the right code at
// run-time.
// Note that setValue and getValue only do *aligned* writes and reads!
// Note that ccall uses JS types as for defining types, while setValue and
// getValue need LLVM types ('i8', 'i32') - this is a lower-level operation
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[(ptr)]=value; break;
      case 'i8': HEAP8[(ptr)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= (+1) ? (tempDouble > (+0) ? ((Math_min((+(Math_floor((tempDouble)/(+4294967296)))), (+4294967295)))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/(+4294967296))))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module['setValue'] = setValue;

// Parallel to setValue.
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[(ptr)];
      case 'i8': return HEAP8[(ptr)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module['getValue'] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module['ALLOC_NORMAL'] = ALLOC_NORMAL;
Module['ALLOC_STACK'] = ALLOC_STACK;
Module['ALLOC_STATIC'] = ALLOC_STATIC;
Module['ALLOC_DYNAMIC'] = ALLOC_DYNAMIC;
Module['ALLOC_NONE'] = ALLOC_NONE;

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)|0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(slab, ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}
Module['allocate'] = allocate;

function Pointer_stringify(ptr, /* optional */ length) {
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = false;
  var t;
  var i = 0;
  while (1) {
    t = HEAPU8[(((ptr)+(i))|0)];
    if (t >= 128) hasUtf = true;
    else if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (!hasUtf) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }

  var utf8 = new Runtime.UTF8Processor();
  for (i = 0; i < length; i++) {
    t = HEAPU8[(((ptr)+(i))|0)];
    ret += utf8.processCChar(t);
  }
  return ret;
}
Module['Pointer_stringify'] = Pointer_stringify;

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.
function UTF16ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
    if (codeUnit == 0)
      return str;
    ++i;
    // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
    str += String.fromCharCode(codeUnit);
  }
}
Module['UTF16ToString'] = UTF16ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16LE form. The copy will require at most (str.length*2+1)*2 bytes of space in the HEAP.
function stringToUTF16(str, outPtr) {
  for(var i = 0; i < str.length; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[(((outPtr)+(i*2))>>1)]=codeUnit;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[(((outPtr)+(str.length*2))>>1)]=0;
}
Module['stringToUTF16'] = stringToUTF16;

// Given a pointer 'ptr' to a null-terminated UTF32LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.
function UTF32ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}
Module['UTF32ToString'] = UTF32ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32LE form. The copy will require at most (str.length+1)*4 bytes of space in the HEAP,
// but can use less, since str.length does not return the number of characters in the string, but the number of UTF-16 code units in the string.
function stringToUTF32(str, outPtr) {
  var iChar = 0;
  for(var iCodeUnit = 0; iCodeUnit < str.length; ++iCodeUnit) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    var codeUnit = str.charCodeAt(iCodeUnit); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++iCodeUnit);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[(((outPtr)+(iChar*4))>>2)]=codeUnit;
    ++iChar;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[(((outPtr)+(iChar*4))>>2)]=0;
}
Module['stringToUTF32'] = stringToUTF32;

function demangle(func) {
  var i = 3;
  // params, etc.
  var basicTypes = {
    'v': 'void',
    'b': 'bool',
    'c': 'char',
    's': 'short',
    'i': 'int',
    'l': 'long',
    'f': 'float',
    'd': 'double',
    'w': 'wchar_t',
    'a': 'signed char',
    'h': 'unsigned char',
    't': 'unsigned short',
    'j': 'unsigned int',
    'm': 'unsigned long',
    'x': 'long long',
    'y': 'unsigned long long',
    'z': '...'
  };
  var subs = [];
  var first = true;
  function dump(x) {
    //return;
    if (x) Module.print(x);
    Module.print(func);
    var pre = '';
    for (var a = 0; a < i; a++) pre += ' ';
    Module.print (pre + '^');
  }
  function parseNested() {
    i++;
    if (func[i] === 'K') i++; // ignore const
    var parts = [];
    while (func[i] !== 'E') {
      if (func[i] === 'S') { // substitution
        i++;
        var next = func.indexOf('_', i);
        var num = func.substring(i, next) || 0;
        parts.push(subs[num] || '?');
        i = next+1;
        continue;
      }
      if (func[i] === 'C') { // constructor
        parts.push(parts[parts.length-1]);
        i += 2;
        continue;
      }
      var size = parseInt(func.substr(i));
      var pre = size.toString().length;
      if (!size || !pre) { i--; break; } // counter i++ below us
      var curr = func.substr(i + pre, size);
      parts.push(curr);
      subs.push(curr);
      i += pre + size;
    }
    i++; // skip E
    return parts;
  }
  function parse(rawList, limit, allowVoid) { // main parser
    limit = limit || Infinity;
    var ret = '', list = [];
    function flushList() {
      return '(' + list.join(', ') + ')';
    }
    var name;
    if (func[i] === 'N') {
      // namespaced N-E
      name = parseNested().join('::');
      limit--;
      if (limit === 0) return rawList ? [name] : name;
    } else {
      // not namespaced
      if (func[i] === 'K' || (first && func[i] === 'L')) i++; // ignore const and first 'L'
      var size = parseInt(func.substr(i));
      if (size) {
        var pre = size.toString().length;
        name = func.substr(i + pre, size);
        i += pre + size;
      }
    }
    first = false;
    if (func[i] === 'I') {
      i++;
      var iList = parse(true);
      var iRet = parse(true, 1, true);
      ret += iRet[0] + ' ' + name + '<' + iList.join(', ') + '>';
    } else {
      ret = name;
    }
    paramLoop: while (i < func.length && limit-- > 0) {
      //dump('paramLoop');
      var c = func[i++];
      if (c in basicTypes) {
        list.push(basicTypes[c]);
      } else {
        switch (c) {
          case 'P': list.push(parse(true, 1, true)[0] + '*'); break; // pointer
          case 'R': list.push(parse(true, 1, true)[0] + '&'); break; // reference
          case 'L': { // literal
            i++; // skip basic type
            var end = func.indexOf('E', i);
            var size = end - i;
            list.push(func.substr(i, size));
            i += size + 2; // size + 'EE'
            break;
          }
          case 'A': { // array
            var size = parseInt(func.substr(i));
            i += size.toString().length;
            if (func[i] !== '_') throw '?';
            i++; // skip _
            list.push(parse(true, 1, true)[0] + ' [' + size + ']');
            break;
          }
          case 'E': break paramLoop;
          default: ret += '?' + c; break paramLoop;
        }
      }
    }
    if (!allowVoid && list.length === 1 && list[0] === 'void') list = []; // avoid (void)
    if (rawList) {
      if (ret) {
        list.push(ret + '?');
      }
      return list;
    } else {
      return ret + flushList();
    }
  }
  try {
    // Special-case the entry point, since its name differs from other name mangling.
    if (func == 'Object._main' || func == '_main') {
      return 'main()';
    }
    if (typeof func === 'number') func = Pointer_stringify(func);
    if (func[0] !== '_') return func;
    if (func[1] !== '_') return func; // C function
    if (func[2] !== 'Z') return func;
    switch (func[3]) {
      case 'n': return 'operator new()';
      case 'd': return 'operator delete()';
    }
    return parse();
  } catch(e) {
    return func;
  }
}

function demangleAll(text) {
  return text.replace(/__Z[\w\d_]+/g, function(x) { var y = demangle(x); return x === y ? x : (x + ' [' + y + ']') });
}

function stackTrace() {
  var stack = new Error().stack;
  return stack ? demangleAll(stack) : '(no stack trace available)'; // Stack trace is not available at least on IE10 and Safari 6.
}

// Memory management

var PAGE_SIZE = 4096;
function alignMemoryPage(x) {
  return (x+4095)&-4096;
}

var HEAP;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

var STATIC_BASE = 0, STATICTOP = 0, staticSealed = false; // static area
var STACK_BASE = 0, STACKTOP = 0, STACK_MAX = 0; // stack area
var DYNAMIC_BASE = 0, DYNAMICTOP = 0; // dynamic area handled by sbrk

function enlargeMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with -s TOTAL_MEMORY=X with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with ALLOW_MEMORY_GROWTH which adjusts the size at runtime but prevents some optimizations, or (3) set Module.TOTAL_MEMORY before the program runs.');
}

var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 67108864;
var FAST_MEMORY = Module['FAST_MEMORY'] || 2097152;

var totalMemory = 4096;
while (totalMemory < TOTAL_MEMORY || totalMemory < 2*TOTAL_STACK) {
  if (totalMemory < 16*1024*1024) {
    totalMemory *= 2;
  } else {
    totalMemory += 16*1024*1024
  }
}
if (totalMemory !== TOTAL_MEMORY) {
  Module.printErr('increasing TOTAL_MEMORY to ' + totalMemory + ' to be more reasonable');
  TOTAL_MEMORY = totalMemory;
}

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
       'JS engine does not provide full typed array support');

var buffer = new ArrayBuffer(TOTAL_MEMORY);
HEAP8 = new Int8Array(buffer);
HEAP16 = new Int16Array(buffer);
HEAP32 = new Int32Array(buffer);
HEAPU8 = new Uint8Array(buffer);
HEAPU16 = new Uint16Array(buffer);
HEAPU32 = new Uint32Array(buffer);
HEAPF32 = new Float32Array(buffer);
HEAPF64 = new Float64Array(buffer);

// Endianness check (note: assumes compiler arch was little-endian)
HEAP32[0] = 255;
assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, 'Typed arrays 2 must be run on a little-endian system');

Module['HEAP'] = HEAP;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Runtime.dynCall('v', func);
      } else {
        Runtime.dynCall('vi', func, [callback.arg]);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;

function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  callRuntimeCallbacks(__ATEXIT__);
}

function postRun() {
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module['addOnPreRun'] = Module.addOnPreRun = addOnPreRun;

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module['addOnInit'] = Module.addOnInit = addOnInit;

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module['addOnPreMain'] = Module.addOnPreMain = addOnPreMain;

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module['addOnExit'] = Module.addOnExit = addOnExit;

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module['addOnPostRun'] = Module.addOnPostRun = addOnPostRun;

// Tools

// This processes a JS string into a C-line array of numbers, 0-terminated.
// For LLVM-originating strings, see parser.js:parseLLVMString function
function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var ret = (new Runtime.UTF8Processor()).processJSString(stringy);
  if (length) {
    ret.length = length;
  }
  if (!dontAddNull) {
    ret.push(0);
  }
  return ret;
}
Module['intArrayFromString'] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module['intArrayToString'] = intArrayToString;

// Write a Javascript array to somewhere in the heap
function writeStringToMemory(string, buffer, dontAddNull) {
  var array = intArrayFromString(string, dontAddNull);
  var i = 0;
  while (i < array.length) {
    var chr = array[i];
    HEAP8[(((buffer)+(i))|0)]=chr;
    i = i + 1;
  }
}
Module['writeStringToMemory'] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  for (var i = 0; i < array.length; i++) {
    HEAP8[(((buffer)+(i))|0)]=array[i];
  }
}
Module['writeArrayToMemory'] = writeArrayToMemory;

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; i++) {
    HEAP8[(((buffer)+(i))|0)]=str.charCodeAt(i);
  }
  if (!dontAddNull) HEAP8[(((buffer)+(str.length))|0)]=0;
}
Module['writeAsciiToMemory'] = writeAsciiToMemory;

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}

// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
Math['imul'] = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];


var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_min = Math.min;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
}
Module['addRunDependency'] = addRunDependency;
function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module['removeRunDependency'] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data


var memoryInitializer = null;

// === Body ===
var __ZTVN10__cxxabiv117__class_type_infoE = 13920;
var __ZTVN10__cxxabiv120__si_class_type_infoE = 13960;




STATIC_BASE = 8;

STATICTOP = STATIC_BASE + Runtime.alignMemory(14787);
/* global initializers */ __ATINIT__.push({ func: function() { __GLOBAL__I_a() } });


/* memory initializer */ allocate([10,0,0,0,0,0,0,0,9,0,0,0,0,0,0,0,32,32,0,0,0,0,0,0,128,0,0,0,0,0,0,0,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,80,114,101,115,115,32,97,110,121,32,107,101,121,32,116,111,32,99,111,110,116,105,110,117,101,10,0,0,0,0,0,0,84,101,115,116,32,83,117,109,32,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,10,10,0,0,0,84,101,115,116,32,83,117,98,32,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,10,10,0,0,0,69,82,82,79,82,32,105,110,32,115,117,98,124,115,117,109,10,10,0,0,0,0,0,0,84,101,115,116,32,83,117,98,77,97,116,114,105,120,32,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,10,10,0,0,0,0,0,84,101,115,116,32,77,117,108,116,105,112,108,105,99,97,116,105,111,110,32,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,10,10,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,2,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,3,0,0,0,2,0,0,0,1,0,0,0,2,0,0,0,4,0,0,0,3,0,0,0,2,0,0,0,1,0,0,0,4,0,0,0,3,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,4,0,0,0,3,0,0,0,2,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,3,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,20,0,0,0,28,0,0,0,32,0,0,0,30,0,0,0,18,0,0,0,22,0,0,0,24,0,0,0,22,0,0,0,22,0,0,0,24,0,0,0,22,0,0,0,18,0,0,0,30,0,0,0,32,0,0,0,28,0,0,0,20,0,0,0,69,82,82,79,82,32,105,110,32,66,97,115,105,99,32,77,117,108,116,105,112,108,105,99,97,116,105,111,110,0,0,0,69,82,82,79,82,32,105,110,32,83,116,114,97,115,115,101,110,32,77,117,108,116,105,112,108,105,99,97,116,105,111,110,0,0,0,0,0,0,0,0,67,117,116,79,102,102,32,61,32,37,100,10,116,105,109,101,61,37,102,10,112,114,101,118,105,111,117,115,61,37,102,10,10,0,0,0,0,0,0,0,116,101,115,116,115,0,0,0,99,117,116,111,102,102,0,0,45,112,0,0,0,0,0,0,45,102,0,0,0,0,0,0,77,105,115,115,105,110,103,32,37,100,32,97,114,103,117,109,101,110,116,115,32,111,110,32,45,102,32,102,108,97,103,10,0,0,0,0,0,0,0,0,45,99,0,0,0,0,0,0,45,110,0,0,0,0,0,0,66,97,115,105,99,10,9,84,105,109,101,32,61,32,37,102,115,10,0,0,0,0,0,0,83,116,114,97,115,115,101,110,32,67,117,116,79,102,102,32,61,32,37,100,10,9,84,105,109,101,32,61,32,37,102,115,10,0,0,0,0,0,0,0,108,0,0,0,0,0,0,0,72,3,0,0,1,0,0,0,2,0,0,0,148,255,255,255,148,255,255,255,72,3,0,0,3,0,0,0,4,0,0,0,78,83,116,51,95,95,49,49,52,98,97,115,105,99,95,105,102,115,116,114,101,97,109,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,144,54,0,0,24,3,0,0,56,15,0,0,0,0,0,0,108,0,0,0,0,0,0,0,56,15,0,0,5,0,0,0,6,0,0,0,148,255,255,255,148,255,255,255,56,15,0,0,7,0,0,0,8,0,0,0,0,0,0,0,240,3,0,0,9,0,0,0,10,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,1,0,0,0,3,0,0,0,2,0,0,0,78,83,116,51,95,95,49,49,51,98,97,115,105,99,95,102,105,108,101,98,117,102,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,0,144,54,0,0,192,3,0,0,192,14,0,0,0,0,0,0,114,0,0,0,0,0,0,0,77,105,115,115,105,110,103,32,97,114,103,117,109,101,110,116,115,32,111,110,32,45,102,32,102,108,97,103,0,0,0,0,77,97,116,114,105,120,32,111,102,32,100,105,102,102,101,114,101,110,116,32,115,105,122,101], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE);
/* memory initializer */ allocate([208,8,0,0,11,0,0,0,12,0,0,0,2,0,0,0,4,0,0,0,2,0,0,0,2,0,0,0,5,0,0,0,6,0,0,0,5,0,0,0,7,0,0,0,8,0,0,0,3,0,0,0,6,0,0,0,4,0,0,0,78,83,116,51,95,95,49,49,49,95,95,115,116,100,111,117,116,98,117,102,73,119,69,69,0,0,0,0,0,0,0,0,144,54,0,0,176,8,0,0,0,15,0,0,0,0,0,0,0,0,0,0,56,9,0,0,13,0,0,0,14,0,0,0,3,0,0,0,4,0,0,0,2,0,0,0,2,0,0,0,9,0,0,0,6,0,0,0,5,0,0,0,10,0,0,0,11,0,0,0,5,0,0,0,7,0,0,0,6,0,0,0,78,83,116,51,95,95,49,49,48,95,95,115,116,100,105,110,98,117,102,73,119,69,69,0,144,54,0,0,32,9,0,0,0,15,0,0,0,0,0,0,117,110,115,117,112,112,111,114,116,101,100,32,108,111,99,97,108,101,32,102,111,114,32,115,116,97,110,100,97,114,100,32,105,110,112,117,116,0,0,0,0,0,0,0,208,9,0,0,15,0,0,0,16,0,0,0,4,0,0,0,8,0,0,0,3,0,0,0,3,0,0,0,12,0,0,0,2,0,0,0,2,0,0,0,13,0,0,0,4,0,0,0,7,0,0,0,9,0,0,0,8,0,0,0,78,83,116,51,95,95,49,49,49,95,95,115,116,100,111,117,116,98,117,102,73,99,69,69,0,0,0,0,0,0,0,0,144,54,0,0,176,9,0,0,192,14,0,0,0,0,0,0,0,0,0,0,56,10,0,0,17,0,0,0,18,0,0,0,5,0,0,0,8,0,0,0,3,0,0,0,3,0,0,0,14,0,0,0,2,0,0,0,2,0,0,0,15,0,0,0,16,0,0,0,9,0,0,0,3,0,0,0,10,0,0,0,78,83,116,51,95,95,49,49,48,95,95,115,116,100,105,110,98,117,102,73,99,69,69,0,144,54,0,0,32,10,0,0,192,14,0,0,0,0,0,0,78,83,116,51,95,95,49,49,52,95,95,115,104,97,114,101,100,95,99,111,117,110,116,69,0,0,0,0,0,0,0,0,104,54,0,0,72,10,0,0,0,0,0,0,176,10,0,0,19,0,0,0,20,0,0,0,17,0,0,0,0,0,0,0,0,0,0,0,24,11,0,0,21,0,0,0,22,0,0,0,18,0,0,0,0,0,0,0,83,116,49,49,108,111,103,105,99,95,101,114,114,111,114,0,144,54,0,0,160,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,10,0,0,19,0,0,0,23,0,0,0,17,0,0,0,0,0,0,0,83,116,49,50,108,101,110,103,116,104,95,101,114,114,111,114,0,0,0,0,0,0,0,0,144,54,0,0,216,10,0,0,176,10,0,0,0,0,0,0,83,116,49,51,114,117,110,116,105,109,101,95,101,114,114,111,114,0,0,0,0,0,0,0,144,54,0,0,0,11,0,0,0,0,0,0,0,0,0,0,58,32,0,0,0,0,0,0,0,0,0,0,96,11,0,0,24,0,0,0,25,0,0,0,18,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,50,115,121,115,116,101,109,95,101,114,114,111,114,69,0,0,144,54,0,0,72,11,0,0,24,11,0,0,0,0,0,0,78,83,116,51,95,95,49,49,52,101,114,114,111,114,95,99,97,116,101,103,111,114,121,69,0,0,0,0,0,0,0,0,104,54,0,0,112,11,0,0,78,83,116,51,95,95,49,49,50,95,95,100,111,95,109,101,115,115,97,103,101,69,0,0,144,54,0,0,152,11,0,0,144,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,98,97,115,105,99,95,115,116,114,105,110,103,0,0,0,0,0,0,0,0,192,14,0,0,26,0,0,0,27,0,0,0,6,0,0,0,8,0,0,0,3,0,0,0,3,0,0,0,14,0,0,0,2,0,0,0,2,0,0,0,13,0,0,0,4,0,0,0,7,0,0,0,3,0,0,0,10,0,0,0,0,0,0,0,0,15,0,0,28,0,0,0,29,0,0,0,7,0,0,0,4,0,0,0,2,0,0,0,2,0,0,0,9,0,0,0,6,0,0,0,5,0,0,0,7,0,0,0,8,0,0,0,3,0,0,0,7,0,0,0,6,0,0,0,8,0,0,0,0,0,0,0,56,15,0,0,5,0,0,0,6,0,0,0,248,255,255,255,248,255,255,255,56,15,0,0,7,0,0,0,8,0,0,0,8,0,0,0,0,0,0,0,128,15,0,0,30,0,0,0,31,0,0,0,248,255,255,255,248,255,255,255,128,15,0,0,32,0,0,0,33,0,0,0,4,0,0,0,0,0,0,0,200,15,0,0,34,0,0,0,35,0,0,0,252,255,255,255,252,255,255,255,200,15,0,0,36,0,0,0,37,0,0,0,4,0,0,0,0,0,0,0,16,16,0,0,38,0,0,0,39,0,0,0,252,255,255,255,252,255,255,255,16,16,0,0,40,0,0,0,41,0,0,0,105,111,115,116,114,101,97,109,0,0,0,0,0,0,0,0,117,110,115,112,101,99,105,102,105,101,100,32,105,111,115,116,114,101,97,109,95,99,97,116,101,103,111,114,121,32,101,114,114,111,114,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,216,13,0,0,42,0,0,0,43,0,0,0,18,0,0,0,0,0,0,0,0,0,0,0,0,14,0,0,44,0,0,0,45,0,0,0,105,111,115,95,98,97,115,101,58,58,99,108,101,97,114,0,78,83,116,51,95,95,49,56,105,111,115,95,98,97,115,101,55,102,97,105,108,117,114,101,69,0,0,0,0,0,0,0,144,54,0,0,184,13,0,0,96,11,0,0,0,0,0,0,78,83,116,51,95,95,49,56,105,111,115,95,98,97,115,101,69,0,0,0,0,0,0,0,104,54,0,0,232,13,0,0,78,83,116,51,95,95,49,57,98,97,115,105,99,95,105,111,115,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,0,0,0,0,0,0,144,54,0,0,8,14,0,0,0,14,0,0,0,0,0,0,78,83,116,51,95,95,49,57,98,97,115,105,99,95,105,111,115,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,0,0,0,0,0,0,0,144,54,0,0,72,14,0,0,0,14,0,0,0,0,0,0,78,83,116,51,95,95,49,49,53,98,97,115,105,99,95,115,116,114,101,97,109,98,117,102,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,0,0,0,0,0,0,0,104,54,0,0,136,14,0,0,78,83,116,51,95,95,49,49,53,98,97,115,105,99,95,115,116,114,101,97,109,98,117,102,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,0,0,0,0,0,0,0,0,104,54,0,0,200,14,0,0,78,83,116,51,95,95,49,49,51,98,97,115,105,99,95,105,115,116,114,101,97,109,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,0,240,54,0,0,8,15,0,0,0,0,0,0,1,0,0,0,56,14,0,0,3,244,255,255,78,83,116,51,95,95,49,49,51,98,97,115,105,99,95,105,115,116,114,101,97,109,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,0,0,240,54,0,0,80,15,0,0,0,0,0,0,1,0,0,0,120,14,0,0,3,244,255,255,78,83,116,51,95,95,49,49,51,98,97,115,105,99,95,111,115,116,114,101,97,109,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,0,240,54,0,0,152,15,0,0,0,0,0,0,1,0,0,0,56,14,0,0,3,244,255,255,78,83,116,51,95,95,49,49,51,98,97,115,105,99,95,111,115,116,114,101,97,109,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,0,0,240,54,0,0,224,15,0,0,0,0,0,0,1,0,0,0,120,14,0,0,3,244,255,255,0,0,0,0,112,16,0,0,46,0,0,0,47,0,0,0,19,0,0,0,1,0,0,0,10,0,0,0,11,0,0,0,2,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,57,95,95,105,111,115,116,114,101,97,109,95,99,97,116,101,103,111,114,121,69,0,0,0,144,54,0,0,80,16,0,0,176,11,0,0,0,0,0,0,0,0,0,0,152,30,0,0,48,0,0,0,49,0,0,0,50,0,0,0,1,0,0,0,4,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,30,0,0,51,0,0,0,52,0,0,0,50,0,0,0,2,0,0,0,5,0,0,0,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,112,35,0,0,53,0,0,0,54,0,0,0,50,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,8,0,0,0,9,0,0,0,10,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,48,49,50,51,52,53,54,55,56,57,97,98,99,100,101,102,65,66,67,68,69,70,120,88,43,45,112,80,105,73,110,78,0,0,0,0,0,0,0,0,37,112,0,0,0,0,0,0,0,0,0,0,8,36,0,0,55,0,0,0,56,0,0,0,50,0,0,0,12,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,16,0,0,0,17,0,0,0,18,0,0,0,19,0,0,0,20,0,0,0,21,0,0,0,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,200,36,0,0,57,0,0,0,58,0,0,0,50,0,0,0,4,0,0,0,5,0,0,0,23,0,0,0,6,0,0,0,24,0,0,0,1,0,0,0,2,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,96,37,0,0,59,0,0,0,60,0,0,0,50,0,0,0,8,0,0,0,9,0,0,0,25,0,0,0,10,0,0,0,26,0,0,0,3,0,0,0,4,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,0,0,0,0,0,0,0,37,112,0,0,0,0,0,0,0,0,0,0,136,32,0,0,61,0,0,0,62,0,0,0,50,0,0,0,20,0,0,0,27,0,0,0,28,0,0,0,29,0,0,0,30,0,0,0,31,0,0,0,1,0,0,0,248,255,255,255,136,32,0,0,21,0,0,0,22,0,0,0,23,0,0,0,24,0,0,0,25,0,0,0,26,0,0,0,27,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,72,58,37,77,58,37,83,37,109,47,37,100,47,37,121,37,89,45,37,109,45,37,100,37,73,58,37,77,58,37,83,32,37,112,0,0,0,0,0,37,72,58,37,77,0,0,0,37,72,58,37,77,58,37,83,0,0,0,0,40,33,0,0,63,0,0,0,64,0,0,0,50,0,0,0,28,0,0,0,32,0,0,0,33,0,0,0,34,0,0,0,35,0,0,0,36,0,0,0,2,0,0,0,248,255,255,255,40,33,0,0,29,0,0,0,30,0,0,0,31,0,0,0,32,0,0,0,33,0,0,0,34,0,0,0,35,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,37,0,0,0,109,0,0,0,47,0,0,0,37,0,0,0,100,0,0,0,47,0,0,0,37,0,0,0,121,0,0,0,37,0,0,0,89,0,0,0,45,0,0,0,37,0,0,0,109,0,0,0,45,0,0,0,37,0,0,0,100,0,0,0,37,0,0,0,73,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,32,0,0,0,37,0,0,0,112,0,0,0,0,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,0,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,0,0,0,0,184,33,0,0,65,0,0,0,66,0,0,0,50,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,34,0,0,67,0,0,0,68,0,0,0,50,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,31,0,0,69,0,0,0,70,0,0,0,50,0,0,0,36,0,0,0,37,0,0,0,8,0,0,0,9,0,0,0,10,0,0,0,11,0,0,0,38,0,0,0,12,0,0,0,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,80,31,0,0,71,0,0,0,72,0,0,0,50,0,0,0,39,0,0,0,40,0,0,0,14,0,0,0,15,0,0,0,16,0,0,0,17,0,0,0,41,0,0,0,18,0,0,0,19,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,144,31,0,0,73,0,0,0,74,0,0,0,50,0,0,0,42,0,0,0,43,0,0,0,20,0,0,0,21,0,0,0,22,0,0,0,23,0,0,0,44,0,0,0,24,0,0,0,25,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,208,31,0,0,75,0,0,0,76,0,0,0,50,0,0,0,45,0,0,0,46,0,0,0,26,0,0,0,27,0,0,0,28,0,0,0,29,0,0,0,47,0,0,0,30,0,0,0,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,37,0,0,77,0,0,0,78,0,0,0,50,0,0,0,3,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,49,50,51,52,53,54,55,56,57,0,0,0,0,0,0,37,76,102,0,0,0,0,0,109,111,110,101,121,95,103,101,116,32,101,114,114,111,114,0,0,0,0,0,128,38,0,0,79,0,0,0,80,0,0,0,50,0,0,0,5,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,49,50,51,52,53,54,55,56,57,0,0,0,0,0,0,0,0,0,0,16,39,0,0,81,0,0,0,82,0,0,0,50,0,0,0,1,0,0,0,37,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,46,48,76,102,0,0,0,0,0,0,0,160,39,0,0,83,0,0,0,84,0,0,0,50,0,0,0,2,0,0,0,38,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,120,34,0,0,85,0,0,0,86,0,0,0,50,0,0,0,14,0,0,0,12,0,0,0,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,176,34,0,0,87,0,0,0,88,0,0,0,50,0,0,0,15,0,0,0,13,0,0,0,33,0,0,0,0,0,0,0,0,0,0,0,118,101,99,116,111,114,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,67,0,0,0,0,0,0,0,0,0,0,0,112,30,0,0,89,0,0,0,90,0,0,0,50,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,27,0,0,91,0,0,0,92,0,0,0,50,0,0,0,11,0,0,0,16,0,0,0,12,0,0,0,17,0,0,0,13,0,0,0,1,0,0,0,18,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40,28,0,0,93,0,0,0,94,0,0,0,50,0,0,0,1,0,0,0,2,0,0,0,4,0,0,0,48,0,0,0,49,0,0,0,5,0,0,0,50,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,30,0,0,95,0,0,0,96,0,0,0,50,0,0,0,51,0,0,0,52,0,0,0,34,0,0,0,35,0,0,0,36,0,0,0,0,0,0,0,72,30,0,0,97,0,0,0,98,0,0,0,50,0,0,0,53,0,0,0,54,0,0,0,37,0,0,0,38,0,0,0,39,0,0,0,116,114,117,101,0,0,0,0,116,0,0,0,114,0,0,0,117,0,0,0,101,0,0,0,0,0,0,0,0,0,0,0,102,97,108,115,101,0,0,0,102,0,0,0,97,0,0,0,108,0,0,0,115,0,0,0,101,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,109,47,37,100,47,37,121,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,0,0,0,109,0,0,0,47,0,0,0,37,0,0,0,100,0,0,0,47,0,0,0,37,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,72,58,37,77,58,37,83,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,97,32,37,98,32,37,100,32,37,72,58,37,77,58,37,83,32,37,89,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,0,0,0,97,0,0,0,32,0,0,0,37,0,0,0,98,0,0,0,32,0,0,0,37,0,0,0,100,0,0,0,32,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,32,0,0,0,37,0,0,0,89,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,73,58,37,77,58,37,83,32,37,112,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,0,0,0,73,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,32,0,0,0,37,0,0,0,112,0,0,0,0,0,0,0,108,111,99,97,108,101,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,0,0,0,0,0,0,0,128,26,0,0,99,0,0,0,100,0,0,0,50,0,0,0,0,0,0,0,78,83,116,51,95,95,49,54,108,111,99,97,108,101,53,102,97,99,101,116,69,0,0,0,144,54,0,0,104,26,0,0,104,10,0,0,0,0,0,0,0,0,0,0,16,27,0,0,99,0,0,0,101,0,0,0,50,0,0,0,19,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,14,0,0,0,20,0,0,0,15,0,0,0,21,0,0,0,16,0,0,0,5,0,0,0,22,0,0,0,6,0,0,0,0,0,0,0,78,83,116,51,95,95,49,53,99,116,121,112,101,73,119,69,69,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,48,99,116,121,112,101,95,98,97,115,101,69,0,0,0,0,104,54,0,0,240,26,0,0,240,54,0,0,216,26,0,0,0,0,0,0,2,0,0,0,128,26,0,0,2,0,0,0,8,27,0,0,2,0,0,0,78,83,116,51,95,95,49,53,99,116,121,112,101,73,99,69,69,0,0,0,0,0,0,0,240,54,0,0,48,27,0,0,0,0,0,0,2,0,0,0,128,26,0,0,2,0,0,0,8,27,0,0,2,0,0,0,0,0,0,0,224,27,0,0,99,0,0,0,102,0,0,0,50,0,0,0,3,0,0,0,4,0,0,0,7,0,0,0,55,0,0,0,56,0,0,0,8,0,0,0,57,0,0,0,78,83,116,51,95,95,49,55,99,111,100,101,99,118,116,73,99,99,49,49,95,95,109,98,115,116,97,116,101,95,116,69,69,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,50,99,111,100,101,99,118,116,95,98,97,115,101,69,0,0,104,54,0,0,192,27,0,0,240,54,0,0,152,27,0,0,0,0,0,0,2,0,0,0,128,26,0,0,2,0,0,0,216,27,0,0,2,0,0,0,78,83,116,51,95,95,49,55,99,111,100,101,99,118,116,73,119,99,49,49,95,95,109,98,115,116,97,116,101,95,116,69,69,0,0,0,0,0,0,0,240,54,0,0,0,28,0,0,0,0,0,0,2,0,0,0,128,26,0,0,2,0,0,0,216,27,0,0,2,0,0,0,0,0,0,0,160,28,0,0,99,0,0,0,103,0,0,0,50,0,0,0,5,0,0,0,6,0,0,0,9,0,0,0,58,0,0,0,59,0,0,0,10,0,0,0,60,0,0,0,78,83,116,51,95,95,49,55,99,111,100,101,99,118,116,73,68,115,99,49,49,95,95,109,98,115,116,97,116,101,95,116,69,69,0,0,0,0,0,0,240,54,0,0,120,28,0,0,0,0,0,0,2,0,0,0,128,26,0,0,2,0,0,0,216,27,0,0,2,0,0,0,0,0,0,0,24,29,0,0,99,0,0,0,104,0,0,0,50,0,0,0,7,0,0,0,8,0,0,0,11,0,0,0,61,0,0,0,62,0,0,0,12,0,0,0,63,0,0,0,78,83,116,51,95,95,49,55,99,111,100,101,99,118,116,73,68,105,99,49,49,95,95,109,98,115,116,97,116,101,95,116,69,69,0,0,0,0,0,0,240,54,0,0,240,28,0,0,0,0,0,0,2,0,0,0,128,26,0,0,2,0,0,0,216,27,0,0,2,0,0,0,0,0,0,0,144,29,0,0,99,0,0,0,105,0,0,0,50,0,0,0,7,0,0,0,8,0,0,0,11,0,0,0,61,0,0,0,62,0,0,0,12,0,0,0,63,0,0,0,78,83,116,51,95,95,49,49,54,95,95,110,97,114,114,111,119,95,116,111,95,117,116,102,56,73,76,106,51,50,69,69,69,0,0,0,0,0,0,0,144,54,0,0,104,29,0,0,24,29,0,0,0,0,0,0,0,0,0,0,248,29,0,0,99,0,0,0,106,0,0,0,50,0,0,0,7,0,0,0,8,0,0,0,11,0,0,0,61,0,0,0,62,0,0,0,12,0,0,0,63,0,0,0,78,83,116,51,95,95,49,49,55,95,95,119,105,100,101,110,95,102,114,111,109,95,117,116,102,56,73,76,106,51,50,69,69,69,0,0,0,0,0,0,144,54,0,0,208,29,0,0,24,29,0,0,0,0,0,0,78,83,116,51,95,95,49,56,110,117,109,112,117,110,99,116,73,99,69,69,0,0,0,0,144,54,0,0,8,30,0,0,128,26,0,0,0,0,0,0,78,83,116,51,95,95,49,56,110,117,109,112,117,110,99,116,73,119,69,69,0,0,0,0,144,54,0,0,48,30,0,0,128,26,0,0,0,0,0,0,78,83,116,51,95,95,49,54,108,111,99,97,108,101,53,95,95,105,109,112,69,0,0,0,144,54,0,0,88,30,0,0,128,26,0,0,0,0,0,0,78,83,116,51,95,95,49,55,99,111,108,108,97,116,101,73,99,69,69,0,0,0,0,0,144,54,0,0,128,30,0,0,128,26,0,0,0,0,0,0,78,83,116,51,95,95,49,55,99,111,108,108,97,116,101,73,119,69,69,0,0,0,0,0,144,54,0,0,168,30,0,0,128,26,0,0,0,0,0,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,112,117,110,99,116,73,99,76,98,48,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,95,98,97,115,101,69,0,0,0,0,104,54,0,0,240,30,0,0,240,54,0,0,208,30,0,0,0,0,0,0,2,0,0,0,128,26,0,0,2,0,0,0,8,31,0,0,2,0,0,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,112,117,110,99,116,73,99,76,98,49,69,69,69,0,0,0,0,0,240,54,0,0,48,31,0,0,0,0,0,0,2,0,0,0,128,26,0,0,2,0,0,0,8,31,0,0,2,0,0,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,112,117,110,99,116,73,119,76,98,48,69,69,69,0,0,0,0,0,240,54,0,0,112,31,0,0,0,0,0,0,2,0,0,0,128,26,0,0,2,0,0,0,8,31,0,0,2,0,0,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,112,117,110,99,116,73,119,76,98,49,69,69,69,0,0,0,0,0,240,54,0,0,176,31,0,0,0,0,0,0,2,0,0,0,128,26,0,0,2,0,0,0,8,31,0,0,2,0,0,0,78,83,116,51,95,95,49,56,116,105,109,101,95,103,101,116,73,99,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,0,78,83,116,51,95,95,49,57,116,105,109,101,95,98,97,115,101,69,0,0,0,0,0,0,104,54,0,0,56,32,0,0,78,83,116,51,95,95,49,50,48,95,95,116,105,109,101,95,103,101,116,95,99,95,115,116,111,114,97,103,101,73,99,69,69,0,0,0,0,0,0,0,104,54,0,0,88,32,0,0,240,54,0,0,240,31,0,0,0,0,0,0,3,0,0,0,128,26,0,0,2,0,0,0,80,32,0,0,2,0,0,0,128,32,0,0,0,8,0,0,78,83,116,51,95,95,49,56,116,105,109,101,95,103,101,116,73,119,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,0,78,83,116,51,95,95,49,50,48,95,95,116,105,109,101,95,103,101,116,95,99,95,115,116,111,114,97,103,101,73,119,69,69,0,0,0,0,0,0,0,104,54,0,0,248,32,0,0,240,54,0,0,176,32,0,0,0,0,0,0,3,0,0,0,128,26,0,0,2,0,0,0,80,32,0,0,2,0,0,0,32,33,0,0,0,8,0,0,78,83,116,51,95,95,49,56,116,105,109,101,95,112,117,116,73,99,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,0,78,83,116,51,95,95,49,49,48,95,95,116,105,109,101,95,112,117,116,69,0,0,0,0,104,54,0,0,152,33,0,0,240,54,0,0,80,33,0,0,0,0,0,0,2,0,0,0,128,26,0,0,2,0,0,0,176,33,0,0,0,8,0,0,78,83,116,51,95,95,49,56,116,105,109,101,95,112,117,116,73,119,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,0,240,54,0,0,216,33,0,0,0,0,0,0,2,0,0,0,128,26,0,0,2,0,0,0,176,33,0,0,0,8,0,0,78,83,116,51,95,95,49,56,109,101,115,115,97,103,101,115,73,99,69,69,0,0,0,0,78,83,116,51,95,95,49,49,51,109,101,115,115,97,103,101,115,95,98,97,115,101,69,0,104,54,0,0,88,34,0,0,240,54,0,0,64,34,0,0,0,0,0,0,2,0,0,0,128,26,0,0,2,0,0,0,112,34,0,0,2,0,0,0,78,83,116,51,95,95,49,56,109,101,115,115,97,103,101,115,73,119,69,69,0,0,0,0,240,54,0,0,152,34,0,0,0,0,0,0,2,0,0,0,128,26,0,0,2,0,0,0,112,34,0,0,2,0,0,0,78,83,116,51,95,95,49,55,110,117,109,95,103,101,116,73,99,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,57,95,95,110,117,109,95,103,101,116,73,99,69,69,0,0,0,78,83,116,51,95,95,49,49,52,95,95,110,117,109,95,103,101,116,95,98,97,115,101,69,0,0,0,0,0,0,0,0,104,54,0,0,48,35,0,0,240,54,0,0,24,35,0,0,0,0,0,0,1,0,0,0,80,35,0,0,0,0,0,0,240,54,0,0,208,34,0,0,0,0,0,0,2,0,0,0,128,26,0,0,2,0,0,0,88,35,0,0,0,0,0,0,78,83,116,51,95,95,49,55,110,117,109,95,103,101,116,73,119,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,57,95,95,110,117,109,95,103,101,116,73,119,69,69,0,0,0,240,54,0,0,216,35,0,0,0,0,0,0,1,0,0,0,80,35,0,0,0,0,0,0,240,54,0,0,144,35,0,0,0,0,0,0,2,0,0,0,128,26,0,0,2,0,0,0,240,35,0,0,0,0,0,0,78,83,116,51,95,95,49,55,110,117,109,95,112,117,116,73,99,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,57,95,95,110,117,109,95,112,117,116,73,99,69,69,0,0,0,78,83,116,51,95,95,49,49,52,95,95,110,117,109,95,112,117,116,95,98,97,115,101,69,0,0,0,0,0,0,0,0,104,54,0,0,136,36,0,0,240,54,0,0,112,36,0,0,0,0,0,0,1,0,0,0,168,36,0,0,0,0,0,0,240,54,0,0,40,36,0,0,0,0,0,0,2,0,0,0,128,26,0,0,2,0,0,0,176,36,0,0,0,0,0,0,78,83,116,51,95,95,49,55,110,117,109,95,112,117,116,73,119,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,57,95,95,110,117,109,95,112,117,116,73,119,69,69,0,0,0,240,54,0,0,48,37,0,0,0,0,0,0,1,0,0,0,168,36,0,0,0,0,0,0,240,54,0,0,232,36,0,0,0,0,0,0,2,0,0,0,128,26,0,0,2,0,0,0,72,37,0,0,0,0,0,0,78,83,116,51,95,95,49,57,109,111,110,101,121,95,103,101,116,73,99,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,78,83,116,51,95,95,49,49,49,95,95,109,111,110,101,121,95,103,101,116,73,99,69,69,0,0,0,0,0,0,0,0,104,54,0,0,200,37,0,0,240,54,0,0,128,37,0,0,0,0,0,0,2,0,0,0,128,26,0,0,2,0,0,0,232,37,0,0,0,0,0,0,78,83,116,51,95,95,49,57,109,111,110,101,121,95,103,101,116,73,119,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,78,83,116,51,95,95,49,49,49,95,95,109,111,110,101,121,95,103,101,116,73,119,69,69,0,0,0,0,0,0,0,0,104,54,0,0,88,38,0,0,240,54,0,0,16,38,0,0,0,0,0,0,2,0,0,0,128,26,0,0,2,0,0,0,120,38,0,0,0,0,0,0,78,83,116,51,95,95,49,57,109,111,110,101,121,95,112,117,116,73,99,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,78,83,116,51,95,95,49,49,49,95,95,109,111,110,101,121,95,112,117,116,73,99,69,69,0,0,0,0,0,0,0,0,104,54,0,0,232,38,0,0,240,54,0,0,160,38,0,0,0,0,0,0,2,0,0,0,128,26,0,0,2,0,0,0,8,39,0,0,0,0,0,0,78,83,116,51,95,95,49,57,109,111,110,101,121,95,112,117,116,73,119,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,78,83,116,51,95,95,49,49,49,95,95,109,111,110,101,121,95,112,117,116,73,119,69,69,0,0,0,0,0,0,0,0,104,54,0,0,120,39,0,0,240,54,0,0,48,39,0,0,0,0,0,0,2,0,0,0,128,26,0,0,2,0,0,0,152,39,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,65,0,0,0,77,0,0,0,0,0,0,0,0,0,0,0,80,0,0,0,77,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,65,77,0,0,0,0,0,0,80,77,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,74,0,0,0,97,0,0,0,110,0,0,0,117,0,0,0,97,0,0,0,114,0,0,0,121,0,0,0,0,0,0,0,70,0,0,0,101,0,0,0,98,0,0,0,114,0,0,0,117,0,0,0,97,0,0,0,114,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,77,0,0,0,97,0,0,0,114,0,0,0,99,0,0,0,104,0,0,0,0,0,0,0,65,0,0,0,112,0,0,0,114,0,0,0,105,0,0,0,108,0,0,0,0,0,0,0,74,0,0,0,117,0,0,0,110,0,0,0,101,0,0,0,0,0,0,0,0,0,0,0,74,0,0,0,117,0,0,0,108,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,65,0,0,0,117,0,0,0,103,0,0,0,117,0,0,0,115,0,0,0,116,0,0,0,0,0,0,0,0,0,0,0,83,0,0,0,101,0,0,0,112,0,0,0,116,0,0,0,101,0,0,0,109,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,79,0,0,0,99,0,0,0,116,0,0,0,111,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,78,0,0,0,111,0,0,0,118,0,0,0,101,0,0,0,109,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,0,0,0,0,68,0,0,0,101,0,0,0,99,0,0,0,101,0,0,0,109,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,0,0,0,0,74,0,0,0,97,0,0,0,110,0,0,0,0,0,0,0,70,0,0,0,101,0,0,0,98,0,0,0,0,0,0,0,77,0,0,0,97,0,0,0,114,0,0,0,0,0,0,0,65,0,0,0,112,0,0,0,114,0,0,0,0,0,0,0,77,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,74,0,0,0,117,0,0,0,110,0,0,0,0,0,0,0,74,0,0,0,117,0,0,0,108,0,0,0,0,0,0,0,65,0,0,0,117,0,0,0,103,0,0,0,0,0,0,0,83,0,0,0,101,0,0,0,112,0,0,0,0,0,0,0,79,0,0,0,99,0,0,0,116,0,0,0,0,0,0,0,78,0,0,0,111,0,0,0,118,0,0,0,0,0,0,0,68,0,0,0,101,0,0,0,99], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+2156);
/* memory initializer */ allocate([74,97,110,117,97,114,121,0,70,101,98,114,117,97,114,121,0,0,0,0,0,0,0,0,77,97,114,99,104,0,0,0,65,112,114,105,108,0,0,0,77,97,121,0,0,0,0,0,74,117,110,101,0,0,0,0,74,117,108,121,0,0,0,0,65,117,103,117,115,116,0,0,83,101,112,116,101,109,98,101,114,0,0,0,0,0,0,0,79,99,116,111,98,101,114,0,78,111,118,101,109,98,101,114,0,0,0,0,0,0,0,0,68,101,99,101,109,98,101,114,0,0,0,0,0,0,0,0,74,97,110,0,0,0,0,0,70,101,98,0,0,0,0,0,77,97,114,0,0,0,0,0,65,112,114,0,0,0,0,0,74,117,110,0,0,0,0,0,74,117,108,0,0,0,0,0,65,117,103,0,0,0,0,0,83,101,112,0,0,0,0,0,79,99,116,0,0,0,0,0,78,111,118,0,0,0,0,0,68,101,99,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,83,0,0,0,117,0,0,0,110,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,77,0,0,0,111,0,0,0,110,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,84,0,0,0,117,0,0,0,101,0,0,0,115,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,87,0,0,0,101,0,0,0,100,0,0,0,110,0,0,0,101,0,0,0,115,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,84,0,0,0,104,0,0,0,117,0,0,0,114,0,0,0,115,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,70,0,0,0,114,0,0,0,105,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,83,0,0,0,97,0,0,0,116,0,0,0,117,0,0,0,114,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,83,0,0,0,117,0,0,0,110,0,0,0,0,0,0,0,77,0,0,0,111,0,0,0,110,0,0,0,0,0,0,0,84,0,0,0,117,0,0,0,101,0,0,0,0,0,0,0,87,0,0,0,101,0,0,0,100,0,0,0,0,0,0,0,84,0,0,0,104,0,0,0,117,0,0,0,0,0,0,0,70,0,0,0,114,0,0,0,105,0,0,0,0,0,0,0,83,0,0,0,97,0,0,0,116,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,83,117,110,100,97,121,0,0,77,111,110,100,97,121,0,0,84,117,101,115,100,97,121,0,87,101,100,110,101,115,100,97,121,0,0,0,0,0,0,0,84,104,117,114,115,100,97,121,0,0,0,0,0,0,0,0,70,114,105,100,97,121,0,0,83,97,116,117,114,100,97,121,0,0,0,0,0,0,0,0,83,117,110,0,0,0,0,0,77,111,110,0,0,0,0,0,84,117,101,0,0,0,0,0,87,101,100,0,0,0,0,0,84,104,117,0,0,0,0,0,70,114,105,0,0,0,0,0,83,97,116,0,0,0,0,0,2,0,0,192,3,0,0,192,4,0,0,192,5,0,0,192,6,0,0,192,7,0,0,192,8,0,0,192,9,0,0,192,10,0,0,192,11,0,0,192,12,0,0,192,13,0,0,192,14,0,0,192,15,0,0,192,16,0,0,192,17,0,0,192,18,0,0,192,19,0,0,192,20,0,0,192,21,0,0,192,22,0,0,192,23,0,0,192,24,0,0,192,25,0,0,192,26,0,0,192,27,0,0,192,28,0,0,192,29,0,0,192,30,0,0,192,31,0,0,192,0,0,0,179,1,0,0,195,2,0,0,195,3,0,0,195,4,0,0,195,5,0,0,195,6,0,0,195,7,0,0,195,8,0,0,195,9,0,0,195,10,0,0,195,11,0,0,195,12,0,0,195,13,0,0,211,14,0,0,195,15,0,0,195,0,0,12,187,1,0,12,195,2,0,12,195,3,0,12,195,4,0,12,211,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,53,0,0,107,0,0,0,108,0,0,0,64,0,0,0,0,0,0,0,115,116,100,58,58,98,97,100,95,99,97,115,116,0,0,0,83,116,57,116,121,112,101,95,105,110,102,111,0,0,0,0,104,54,0,0,184,53,0,0,83,116,56,98,97,100,95,99,97,115,116,0,0,0,0,0,144,54,0,0,208,53,0,0,0,0,0,0,0,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,54,95,95,115,104,105,109,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,0,0,0,0,144,54,0,0,240,53,0,0,200,53,0,0,0,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,55,95,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,0,0,0,144,54,0,0,40,54,0,0,24,54,0,0,0,0,0,0,0,0,0,0,80,54,0,0,109,0,0,0,110,0,0,0,111,0,0,0,112,0,0,0,23,0,0,0,14,0,0,0,1,0,0,0,6,0,0,0,0,0,0,0,216,54,0,0,109,0,0,0,113,0,0,0,111,0,0,0,112,0,0,0,23,0,0,0,15,0,0,0,2,0,0,0,7,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,48,95,95,115,105,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,144,54,0,0,176,54,0,0,80,54,0,0,0,0,0,0,0,0,0,0,56,55,0,0,109,0,0,0,114,0,0,0,111,0,0,0,112,0,0,0,23,0,0,0,16,0,0,0,3,0,0,0,8,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,49,95,95,118,109,105,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,0,0,144,54,0,0,16,55,0,0,80,54,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,120,57,0,0,115,0,0,0,116,0,0,0,65,0,0,0,0,0,0,0,115,116,100,58,58,98,97,100,95,97,108,108,111,99,0,0,83,116,57,98,97,100,95,97,108,108,111,99,0,0,0,0,144,54,0,0,104,57,0,0,0,0,0,0,0,0,0,0,105,110,102,105,110,105,116,121,0,0,0,0,0,0,0,0,110,97,110,0,0,0,0,0,95,112,137,0,255,9,47,15,10,0,0,0,100,0,0,0,232,3,0,0,16,39,0,0,160,134,1,0,64,66,15,0,128,150,152,0,0,225,245,5], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+12416);




var tempDoublePtr = Runtime.alignMemory(allocate(12, "i8", ALLOC_STATIC), 8);

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}


  
  function _atexit(func, arg) {
      __ATEXIT__.unshift({ func: func, arg: arg });
    }var ___cxa_atexit=_atexit;

  
   
  Module["_rand_r"] = _rand_r;
  
  var ___rand_seed=allocate([0x0273459b, 0, 0, 0], "i32", ALLOC_STATIC); 
  Module["_rand"] = _rand;

  
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  
  
  var ___errno_state=0;function ___setErrNo(value) {
      // For convenient setting and returning of errno.
      HEAP32[((___errno_state)>>2)]=value;
      return value;
    }
  
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up--; up) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            continue;
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          if (stream.tty.output.length) {
            stream.tty.ops.put_char(stream.tty, 10);
          }
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              result = process['stdin']['read']();
              if (!result) {
                if (process['stdin']['_readableState'] && process['stdin']['_readableState']['ended']) {
                  return null;  // EOF
                }
                return undefined;  // no data available
              }
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['print'](tty.output.join(''));
            tty.output = [];
          } else {
            tty.output.push(TTY.utf8.processCChar(val));
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](tty.output.join(''));
            tty.output = [];
          } else {
            tty.output.push(TTY.utf8.processCChar(val));
          }
        }}};
  
  var MEMFS={ops_table:null,CONTENT_OWNING:1,CONTENT_FLEXIBLE:2,CONTENT_FIXED:3,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            },
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.contents = [];
          node.contentMode = MEMFS.CONTENT_FLEXIBLE;
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },ensureFlexible:function (node) {
        if (node.contentMode !== MEMFS.CONTENT_FLEXIBLE) {
          var contents = node.contents;
          node.contents = Array.prototype.slice.call(contents);
          node.contentMode = MEMFS.CONTENT_FLEXIBLE;
        }
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.contents.length;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.ensureFlexible(node);
            var contents = node.contents;
            if (attr.size < contents.length) contents.length = attr.size;
            else while (attr.size > contents.length) contents.push(0);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else
          {
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          var node = stream.node;
          node.timestamp = Date.now();
          var contents = node.contents;
          if (length && contents.length === 0 && position === 0 && buffer.subarray) {
            // just replace it with the new data
            if (canOwn && offset === 0) {
              node.contents = buffer; // this could be a subarray of Emscripten HEAP, or allocated from some other source.
              node.contentMode = (buffer.buffer === HEAP8.buffer) ? MEMFS.CONTENT_OWNING : MEMFS.CONTENT_FIXED;
            } else {
              node.contents = new Uint8Array(buffer.subarray(offset, offset+length));
              node.contentMode = MEMFS.CONTENT_FIXED;
            }
            return length;
          }
          MEMFS.ensureFlexible(node);
          var contents = node.contents;
          while (contents.length < position) contents.push(0);
          for (var i = 0; i < length; i++) {
            contents[position + i] = buffer[offset + i];
          }
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.contents.length;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          stream.ungotten = [];
          stream.position = position;
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.ensureFlexible(stream.node);
          var contents = stream.node.contents;
          var limit = offset + length;
          while (limit > contents.length) contents.push(0);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < contents.length) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        }}};
  
  var IDBFS={dbs:{},indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          fileStore.createIndex('timestamp', 'timestamp', { unique: false });
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function() {
          callback(this.error);
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
          transaction.onerror = function() { callback(this.error); };
  
          var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
          var index = store.index('timestamp');
  
          index.openKeyCursor().onsuccess = function(event) {
            var cursor = event.target.result;
  
            if (!cursor) {
              return callback(null, { type: 'remote', db: db, entries: entries });
            }
  
            entries[cursor.primaryKey] = { timestamp: cursor.key };
  
            cursor.continue();
          };
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { encoding: 'binary', canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function() { callback(this.error); };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function() { callback(this.error); };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function() { callback(this.error); };
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function() { done(this.error); };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // On Windows, directories return permission bits 'rw-rw-rw-', even though they have 'rwxrwxrwx', so 
            // propagate write bits to execute bits.
            stat.mode = stat.mode | ((stat.mode & 146) >> 1);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsToPermissionStringMap:{0:"r",1:"r+",2:"r+",64:"r",65:"r+",66:"r+",129:"rx+",193:"rx+",514:"w+",577:"w",578:"w+",705:"wx",706:"wx+",1024:"a",1025:"a",1026:"a+",1089:"a",1090:"a+",1153:"ax",1154:"ax+",1217:"ax",1218:"ax+",4096:"rs",4098:"rs+"},flagsToPermissionString:function (flags) {
        if (flags in NODEFS.flagsToPermissionStringMap) {
          return NODEFS.flagsToPermissionStringMap[flags];
        } else {
          return flags;
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsToPermissionString(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(length);
          var res;
          try {
            res = fs.readSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          if (res > 0) {
            for (var i = 0; i < res; i++) {
              buffer[offset + i] = nbuffer[i];
            }
          }
          return res;
        },write:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(buffer.subarray(offset, offset + length));
          var res;
          try {
            res = fs.writeSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return res;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
  
          stream.position = position;
          return position;
        }}};
  
  var _stdin=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stdout=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stderr=allocate(1, "i32*", ALLOC_STATIC);
  
  function _fflush(stream) {
      // int fflush(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fflush.html
      // we don't currently perform any user-space buffering of data
    }var FS={root:null,mounts:[],devices:[null],streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,ErrnoError:null,genericErrors:{},handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
              
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); },
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); },
            },
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var accmode = flag & 2097155;
        var perms = ['r', 'w', 'rw'][accmode];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        return FS.nodePermissions(dir, 'x');
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if ((flags & 2097155) !== 0 ||  // opening for write
              (flags & 512)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },getStreamFromPtr:function (ptr) {
        return FS.streams[ptr - 1];
      },getPtrForStream:function (stream) {
        return stream ? stream.fd + 1 : 0;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            callback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // POSIX says unlink should set EPERM, not EISDIR
          if (err === ERRNO_CODES.EISDIR) err = ERRNO_CODES.EPERM;
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return link.node_ops.readlink(link);
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // check permissions
        var err = FS.mayOpen(node, flags);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            Module['printErr']('read file: ' + path);
          }
        }
        return stream;
      },close:function (stream) {
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
      },llseek:function (stream, offset, whence) {
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        return stream.stream_ops.llseek(stream, offset, whence);
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = '';
          var utf8 = new Runtime.UTF8Processor();
          for (var i = 0; i < length; i++) {
            ret += utf8.processCChar(buf[i]);
          }
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        opts.encoding = opts.encoding || 'utf8';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var stream = FS.open(path, opts.flags, opts.mode);
        if (opts.encoding === 'utf8') {
          var utf8 = new Runtime.UTF8Processor();
          var buf = new Uint8Array(utf8.processJSString(data));
          FS.write(stream, buf, 0, buf.length, 0, opts.canOwn);
        } else if (opts.encoding === 'binary') {
          FS.write(stream, data, 0, data.length, 0, opts.canOwn);
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function() { return 0; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        HEAP32[((_stdin)>>2)]=FS.getPtrForStream(stdin);
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
  
        var stdout = FS.open('/dev/stdout', 'w');
        HEAP32[((_stdout)>>2)]=FS.getPtrForStream(stdout);
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
  
        var stderr = FS.open('/dev/stderr', 'w');
        HEAP32[((_stderr)>>2)]=FS.getPtrForStream(stderr);
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno) {
          this.errno = errno;
          for (var key in ERRNO_CODES) {
            if (ERRNO_CODES[key] === errno) {
              this.code = key;
              break;
            }
          }
          this.message = ERRNO_MESSAGES[errno];
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = Math.floor(idx / this.chunkSize);
          return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
            // Find length
            var xhr = new XMLHttpRequest();
            xhr.open('HEAD', url, false);
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            var datalength = Number(xhr.getResponseHeader("Content-length"));
            var header;
            var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
            var chunkSize = 1024*1024; // Chunk size in bytes
  
            if (!hasByteServing) chunkSize = datalength;
  
            // Function to get a range from the remote URL.
            var doXHR = (function(from, to) {
              if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
              if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
              // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
              var xhr = new XMLHttpRequest();
              xhr.open('GET', url, false);
              if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
              // Some hints to the browser that we want binary data.
              if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
              if (xhr.overrideMimeType) {
                xhr.overrideMimeType('text/plain; charset=x-user-defined');
              }
  
              xhr.send(null);
              if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
              if (xhr.response !== undefined) {
                return new Uint8Array(xhr.response || []);
              } else {
                return intArrayFromString(xhr.responseText || '', true);
              }
            });
            var lazyArray = this;
            lazyArray.setDataGetter(function(chunkNum) {
              var start = chunkNum * chunkSize;
              var end = (chunkNum+1) * chunkSize - 1; // including this byte
              end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
              if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
                lazyArray.chunks[chunkNum] = doXHR(start, end);
              }
              if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
              return lazyArray.chunks[chunkNum];
            });
  
            this._length = datalength;
            this._chunkSize = chunkSize;
            this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperty(lazyArray, "length", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._length;
              }
          });
          Object.defineProperty(lazyArray, "chunkSize", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._chunkSize;
              }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn) {
        Browser.init();
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        function processData(byteArray) {
          function finish(byteArray) {
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency('cp ' + fullname);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency('cp ' + fullname);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency('cp ' + fullname);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};
  
  function _lseek(fildes, offset, whence) {
      // off_t lseek(int fildes, off_t offset, int whence);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/lseek.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        return FS.llseek(stream, offset, whence);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }
  
  function _fileno(stream) {
      // int fileno(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fileno.html
      stream = FS.getStreamFromPtr(stream);
      if (!stream) return -1;
      return stream.fd;
    }function _fseek(stream, offset, whence) {
      // int fseek(FILE *stream, long offset, int whence);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fseek.html
      var fd = _fileno(stream);
      var ret = _lseek(fd, offset, whence);
      if (ret == -1) {
        return -1;
      }
      stream = FS.getStreamFromPtr(stream);
      stream.eof = false;
      return 0;
    }

   
  Module["_i64Subtract"] = _i64Subtract;

   
  Module["_i64Add"] = _i64Add;

  
  function __ZSt18uncaught_exceptionv() { // std::uncaught_exception()
      return !!__ZSt18uncaught_exceptionv.uncaught_exception;
    }
  
  
  
  function ___cxa_is_number_type(type) {
      var isNumber = false;
      try { if (type == __ZTIi) isNumber = true } catch(e){}
      try { if (type == __ZTIj) isNumber = true } catch(e){}
      try { if (type == __ZTIl) isNumber = true } catch(e){}
      try { if (type == __ZTIm) isNumber = true } catch(e){}
      try { if (type == __ZTIx) isNumber = true } catch(e){}
      try { if (type == __ZTIy) isNumber = true } catch(e){}
      try { if (type == __ZTIf) isNumber = true } catch(e){}
      try { if (type == __ZTId) isNumber = true } catch(e){}
      try { if (type == __ZTIe) isNumber = true } catch(e){}
      try { if (type == __ZTIc) isNumber = true } catch(e){}
      try { if (type == __ZTIa) isNumber = true } catch(e){}
      try { if (type == __ZTIh) isNumber = true } catch(e){}
      try { if (type == __ZTIs) isNumber = true } catch(e){}
      try { if (type == __ZTIt) isNumber = true } catch(e){}
      return isNumber;
    }function ___cxa_does_inherit(definiteType, possibilityType, possibility) {
      if (possibility == 0) return false;
      if (possibilityType == 0 || possibilityType == definiteType)
        return true;
      var possibility_type_info;
      if (___cxa_is_number_type(possibilityType)) {
        possibility_type_info = possibilityType;
      } else {
        var possibility_type_infoAddr = HEAP32[((possibilityType)>>2)] - 8;
        possibility_type_info = HEAP32[((possibility_type_infoAddr)>>2)];
      }
      switch (possibility_type_info) {
      case 0: // possibility is a pointer
        // See if definite type is a pointer
        var definite_type_infoAddr = HEAP32[((definiteType)>>2)] - 8;
        var definite_type_info = HEAP32[((definite_type_infoAddr)>>2)];
        if (definite_type_info == 0) {
          // Also a pointer; compare base types of pointers
          var defPointerBaseAddr = definiteType+8;
          var defPointerBaseType = HEAP32[((defPointerBaseAddr)>>2)];
          var possPointerBaseAddr = possibilityType+8;
          var possPointerBaseType = HEAP32[((possPointerBaseAddr)>>2)];
          return ___cxa_does_inherit(defPointerBaseType, possPointerBaseType, possibility);
        } else
          return false; // one pointer and one non-pointer
      case 1: // class with no base class
        return false;
      case 2: // class with base class
        var parentTypeAddr = possibilityType + 8;
        var parentType = HEAP32[((parentTypeAddr)>>2)];
        return ___cxa_does_inherit(definiteType, parentType, possibility);
      default:
        return false; // some unencountered type
      }
    }
  
  
  
  var ___cxa_last_thrown_exception=0;function ___resumeException(ptr) {
      if (!___cxa_last_thrown_exception) { ___cxa_last_thrown_exception = ptr; }
      throw ptr + " - Exception catching is disabled, this exception cannot be caught. Compile with -s DISABLE_EXCEPTION_CATCHING=0 or DISABLE_EXCEPTION_CATCHING=2 to catch.";
    }
  
  var ___cxa_exception_header_size=8;function ___cxa_find_matching_catch(thrown, throwntype) {
      if (thrown == -1) thrown = ___cxa_last_thrown_exception;
      header = thrown - ___cxa_exception_header_size;
      if (throwntype == -1) throwntype = HEAP32[((header)>>2)];
      var typeArray = Array.prototype.slice.call(arguments, 2);
  
      // If throwntype is a pointer, this means a pointer has been
      // thrown. When a pointer is thrown, actually what's thrown
      // is a pointer to the pointer. We'll dereference it.
      if (throwntype != 0 && !___cxa_is_number_type(throwntype)) {
        var throwntypeInfoAddr= HEAP32[((throwntype)>>2)] - 8;
        var throwntypeInfo= HEAP32[((throwntypeInfoAddr)>>2)];
        if (throwntypeInfo == 0)
          thrown = HEAP32[((thrown)>>2)];
      }
      // The different catch blocks are denoted by different types.
      // Due to inheritance, those types may not precisely match the
      // type of the thrown object. Find one which matches, and
      // return the type of the catch block which should be called.
      for (var i = 0; i < typeArray.length; i++) {
        if (___cxa_does_inherit(typeArray[i], throwntype, thrown))
          return ((asm["setTempRet0"](typeArray[i]),thrown)|0);
      }
      // Shouldn't happen unless we have bogus data in typeArray
      // or encounter a type for which emscripten doesn't have suitable
      // typeinfo defined. Best-efforts match just in case.
      return ((asm["setTempRet0"](throwntype),thrown)|0);
    }function ___cxa_throw(ptr, type, destructor) {
      if (!___cxa_throw.initialized) {
        try {
          HEAP32[((__ZTVN10__cxxabiv119__pointer_type_infoE)>>2)]=0; // Workaround for libcxxabi integration bug
        } catch(e){}
        try {
          HEAP32[((__ZTVN10__cxxabiv117__class_type_infoE)>>2)]=1; // Workaround for libcxxabi integration bug
        } catch(e){}
        try {
          HEAP32[((__ZTVN10__cxxabiv120__si_class_type_infoE)>>2)]=2; // Workaround for libcxxabi integration bug
        } catch(e){}
        ___cxa_throw.initialized = true;
      }
      var header = ptr - ___cxa_exception_header_size;
      HEAP32[((header)>>2)]=type;
      HEAP32[(((header)+(4))>>2)]=destructor;
      ___cxa_last_thrown_exception = ptr;
      if (!("uncaught_exception" in __ZSt18uncaught_exceptionv)) {
        __ZSt18uncaught_exceptionv.uncaught_exception = 1;
      } else {
        __ZSt18uncaught_exceptionv.uncaught_exception++;
      }
      throw ptr + " - Exception catching is disabled, this exception cannot be caught. Compile with -s DISABLE_EXCEPTION_CATCHING=0 or DISABLE_EXCEPTION_CATCHING=2 to catch.";
    }

  
  function _close(fildes) {
      // int close(int fildes);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/close.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        FS.close(stream);
        return 0;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }
  
  function _fsync(fildes) {
      // int fsync(int fildes);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fsync.html
      var stream = FS.getStream(fildes);
      if (stream) {
        // We write directly to the file system, so there's nothing to do here.
        return 0;
      } else {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
    }function _fclose(stream) {
      // int fclose(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fclose.html
      var fd = _fileno(stream);
      _fsync(fd);
      return _close(fd);
    }

  function _pthread_mutex_lock() {}

  
  
  
  
  
  
  function _mkport() { throw 'TODO' }var SOCKFS={mount:function (mount) {
        return FS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createSocket:function (family, type, protocol) {
        var streaming = type == 1;
        if (protocol) {
          assert(streaming == (protocol == 6)); // if SOCK_STREAM, must be tcp
        }
  
        // create our internal socket structure
        var sock = {
          family: family,
          type: type,
          protocol: protocol,
          server: null,
          peers: {},
          pending: [],
          recv_queue: [],
          sock_ops: SOCKFS.websocket_sock_ops
        };
  
        // create the filesystem node to store the socket structure
        var name = SOCKFS.nextname();
        var node = FS.createNode(SOCKFS.root, name, 49152, 0);
        node.sock = sock;
  
        // and the wrapping stream that enables library functions such
        // as read and write to indirectly interact with the socket
        var stream = FS.createStream({
          path: name,
          node: node,
          flags: FS.modeStringToFlags('r+'),
          seekable: false,
          stream_ops: SOCKFS.stream_ops
        });
  
        // map the new stream to the socket structure (sockets have a 1:1
        // relationship with a stream)
        sock.stream = stream;
  
        return sock;
      },getSocket:function (fd) {
        var stream = FS.getStream(fd);
        if (!stream || !FS.isSocket(stream.node.mode)) {
          return null;
        }
        return stream.node.sock;
      },stream_ops:{poll:function (stream) {
          var sock = stream.node.sock;
          return sock.sock_ops.poll(sock);
        },ioctl:function (stream, request, varargs) {
          var sock = stream.node.sock;
          return sock.sock_ops.ioctl(sock, request, varargs);
        },read:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          var msg = sock.sock_ops.recvmsg(sock, length);
          if (!msg) {
            // socket is closed
            return 0;
          }
          buffer.set(msg.buffer, offset);
          return msg.buffer.length;
        },write:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          return sock.sock_ops.sendmsg(sock, buffer, offset, length);
        },close:function (stream) {
          var sock = stream.node.sock;
          sock.sock_ops.close(sock);
        }},nextname:function () {
        if (!SOCKFS.nextname.current) {
          SOCKFS.nextname.current = 0;
        }
        return 'socket[' + (SOCKFS.nextname.current++) + ']';
      },websocket_sock_ops:{createPeer:function (sock, addr, port) {
          var ws;
  
          if (typeof addr === 'object') {
            ws = addr;
            addr = null;
            port = null;
          }
  
          if (ws) {
            // for sockets that've already connected (e.g. we're the server)
            // we can inspect the _socket property for the address
            if (ws._socket) {
              addr = ws._socket.remoteAddress;
              port = ws._socket.remotePort;
            }
            // if we're just now initializing a connection to the remote,
            // inspect the url property
            else {
              var result = /ws[s]?:\/\/([^:]+):(\d+)/.exec(ws.url);
              if (!result) {
                throw new Error('WebSocket URL must be in the format ws(s)://address:port');
              }
              addr = result[1];
              port = parseInt(result[2], 10);
            }
          } else {
            // create the actual websocket object and connect
            try {
              // runtimeConfig gets set to true if WebSocket runtime configuration is available.
              var runtimeConfig = (Module['websocket'] && ('object' === typeof Module['websocket']));
  
              // The default value is 'ws://' the replace is needed because the compiler replaces "//" comments with '#'
              // comments without checking context, so we'd end up with ws:#, the replace swaps the "#" for "//" again.
              var url = 'ws:#'.replace('#', '//');
  
              if (runtimeConfig) {
                if ('string' === typeof Module['websocket']['url']) {
                  url = Module['websocket']['url']; // Fetch runtime WebSocket URL config.
                }
              }
  
              if (url === 'ws://' || url === 'wss://') { // Is the supplied URL config just a prefix, if so complete it.
                url = url + addr + ':' + port;
              }
  
              // Make the WebSocket subprotocol (Sec-WebSocket-Protocol) default to binary if no configuration is set.
              var subProtocols = 'binary'; // The default value is 'binary'
  
              if (runtimeConfig) {
                if ('string' === typeof Module['websocket']['subprotocol']) {
                  subProtocols = Module['websocket']['subprotocol']; // Fetch runtime WebSocket subprotocol config.
                }
              }
  
              // The regex trims the string (removes spaces at the beginning and end, then splits the string by
              // <any space>,<any space> into an Array. Whitespace removal is important for Websockify and ws.
              subProtocols = subProtocols.replace(/^ +| +$/g,"").split(/ *, */);
  
              // The node ws library API for specifying optional subprotocol is slightly different than the browser's.
              var opts = ENVIRONMENT_IS_NODE ? {'protocol': subProtocols.toString()} : subProtocols;
  
              // If node we use the ws library.
              var WebSocket = ENVIRONMENT_IS_NODE ? require('ws') : window['WebSocket'];
              ws = new WebSocket(url, opts);
              ws.binaryType = 'arraybuffer';
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EHOSTUNREACH);
            }
          }
  
  
          var peer = {
            addr: addr,
            port: port,
            socket: ws,
            dgram_send_queue: []
          };
  
          SOCKFS.websocket_sock_ops.addPeer(sock, peer);
          SOCKFS.websocket_sock_ops.handlePeerEvents(sock, peer);
  
          // if this is a bound dgram socket, send the port number first to allow
          // us to override the ephemeral port reported to us by remotePort on the
          // remote end.
          if (sock.type === 2 && typeof sock.sport !== 'undefined') {
            peer.dgram_send_queue.push(new Uint8Array([
                255, 255, 255, 255,
                'p'.charCodeAt(0), 'o'.charCodeAt(0), 'r'.charCodeAt(0), 't'.charCodeAt(0),
                ((sock.sport & 0xff00) >> 8) , (sock.sport & 0xff)
            ]));
          }
  
          return peer;
        },getPeer:function (sock, addr, port) {
          return sock.peers[addr + ':' + port];
        },addPeer:function (sock, peer) {
          sock.peers[peer.addr + ':' + peer.port] = peer;
        },removePeer:function (sock, peer) {
          delete sock.peers[peer.addr + ':' + peer.port];
        },handlePeerEvents:function (sock, peer) {
          var first = true;
  
          var handleOpen = function () {
            try {
              var queued = peer.dgram_send_queue.shift();
              while (queued) {
                peer.socket.send(queued);
                queued = peer.dgram_send_queue.shift();
              }
            } catch (e) {
              // not much we can do here in the way of proper error handling as we've already
              // lied and said this data was sent. shut it down.
              peer.socket.close();
            }
          };
  
          function handleMessage(data) {
            assert(typeof data !== 'string' && data.byteLength !== undefined);  // must receive an ArrayBuffer
            data = new Uint8Array(data);  // make a typed array view on the array buffer
  
  
            // if this is the port message, override the peer's port with it
            var wasfirst = first;
            first = false;
            if (wasfirst &&
                data.length === 10 &&
                data[0] === 255 && data[1] === 255 && data[2] === 255 && data[3] === 255 &&
                data[4] === 'p'.charCodeAt(0) && data[5] === 'o'.charCodeAt(0) && data[6] === 'r'.charCodeAt(0) && data[7] === 't'.charCodeAt(0)) {
              // update the peer's port and it's key in the peer map
              var newport = ((data[8] << 8) | data[9]);
              SOCKFS.websocket_sock_ops.removePeer(sock, peer);
              peer.port = newport;
              SOCKFS.websocket_sock_ops.addPeer(sock, peer);
              return;
            }
  
            sock.recv_queue.push({ addr: peer.addr, port: peer.port, data: data });
          };
  
          if (ENVIRONMENT_IS_NODE) {
            peer.socket.on('open', handleOpen);
            peer.socket.on('message', function(data, flags) {
              if (!flags.binary) {
                return;
              }
              handleMessage((new Uint8Array(data)).buffer);  // copy from node Buffer -> ArrayBuffer
            });
            peer.socket.on('error', function() {
              // don't throw
            });
          } else {
            peer.socket.onopen = handleOpen;
            peer.socket.onmessage = function peer_socket_onmessage(event) {
              handleMessage(event.data);
            };
          }
        },poll:function (sock) {
          if (sock.type === 1 && sock.server) {
            // listen sockets should only say they're available for reading
            // if there are pending clients.
            return sock.pending.length ? (64 | 1) : 0;
          }
  
          var mask = 0;
          var dest = sock.type === 1 ?  // we only care about the socket state for connection-based sockets
            SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport) :
            null;
  
          if (sock.recv_queue.length ||
              !dest ||  // connection-less sockets are always ready to read
              (dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {  // let recv return 0 once closed
            mask |= (64 | 1);
          }
  
          if (!dest ||  // connection-less sockets are always ready to write
              (dest && dest.socket.readyState === dest.socket.OPEN)) {
            mask |= 4;
          }
  
          if ((dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {
            mask |= 16;
          }
  
          return mask;
        },ioctl:function (sock, request, arg) {
          switch (request) {
            case 21531:
              var bytes = 0;
              if (sock.recv_queue.length) {
                bytes = sock.recv_queue[0].data.length;
              }
              HEAP32[((arg)>>2)]=bytes;
              return 0;
            default:
              return ERRNO_CODES.EINVAL;
          }
        },close:function (sock) {
          // if we've spawned a listen server, close it
          if (sock.server) {
            try {
              sock.server.close();
            } catch (e) {
            }
            sock.server = null;
          }
          // close any peer connections
          var peers = Object.keys(sock.peers);
          for (var i = 0; i < peers.length; i++) {
            var peer = sock.peers[peers[i]];
            try {
              peer.socket.close();
            } catch (e) {
            }
            SOCKFS.websocket_sock_ops.removePeer(sock, peer);
          }
          return 0;
        },bind:function (sock, addr, port) {
          if (typeof sock.saddr !== 'undefined' || typeof sock.sport !== 'undefined') {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already bound
          }
          sock.saddr = addr;
          sock.sport = port || _mkport();
          // in order to emulate dgram sockets, we need to launch a listen server when
          // binding on a connection-less socket
          // note: this is only required on the server side
          if (sock.type === 2) {
            // close the existing server if it exists
            if (sock.server) {
              sock.server.close();
              sock.server = null;
            }
            // swallow error operation not supported error that occurs when binding in the
            // browser where this isn't supported
            try {
              sock.sock_ops.listen(sock, 0);
            } catch (e) {
              if (!(e instanceof FS.ErrnoError)) throw e;
              if (e.errno !== ERRNO_CODES.EOPNOTSUPP) throw e;
            }
          }
        },connect:function (sock, addr, port) {
          if (sock.server) {
            throw new FS.ErrnoError(ERRNO_CODS.EOPNOTSUPP);
          }
  
          // TODO autobind
          // if (!sock.addr && sock.type == 2) {
          // }
  
          // early out if we're already connected / in the middle of connecting
          if (typeof sock.daddr !== 'undefined' && typeof sock.dport !== 'undefined') {
            var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
            if (dest) {
              if (dest.socket.readyState === dest.socket.CONNECTING) {
                throw new FS.ErrnoError(ERRNO_CODES.EALREADY);
              } else {
                throw new FS.ErrnoError(ERRNO_CODES.EISCONN);
              }
            }
          }
  
          // add the socket to our peer list and set our
          // destination address / port to match
          var peer = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
          sock.daddr = peer.addr;
          sock.dport = peer.port;
  
          // always "fail" in non-blocking mode
          throw new FS.ErrnoError(ERRNO_CODES.EINPROGRESS);
        },listen:function (sock, backlog) {
          if (!ENVIRONMENT_IS_NODE) {
            throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
          }
          if (sock.server) {
             throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already listening
          }
          var WebSocketServer = require('ws').Server;
          var host = sock.saddr;
          sock.server = new WebSocketServer({
            host: host,
            port: sock.sport
            // TODO support backlog
          });
  
          sock.server.on('connection', function(ws) {
            if (sock.type === 1) {
              var newsock = SOCKFS.createSocket(sock.family, sock.type, sock.protocol);
  
              // create a peer on the new socket
              var peer = SOCKFS.websocket_sock_ops.createPeer(newsock, ws);
              newsock.daddr = peer.addr;
              newsock.dport = peer.port;
  
              // push to queue for accept to pick up
              sock.pending.push(newsock);
            } else {
              // create a peer on the listen socket so calling sendto
              // with the listen socket and an address will resolve
              // to the correct client
              SOCKFS.websocket_sock_ops.createPeer(sock, ws);
            }
          });
          sock.server.on('closed', function() {
            sock.server = null;
          });
          sock.server.on('error', function() {
            // don't throw
          });
        },accept:function (listensock) {
          if (!listensock.server) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          var newsock = listensock.pending.shift();
          newsock.stream.flags = listensock.stream.flags;
          return newsock;
        },getname:function (sock, peer) {
          var addr, port;
          if (peer) {
            if (sock.daddr === undefined || sock.dport === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            }
            addr = sock.daddr;
            port = sock.dport;
          } else {
            // TODO saddr and sport will be set for bind()'d UDP sockets, but what
            // should we be returning for TCP sockets that've been connect()'d?
            addr = sock.saddr || 0;
            port = sock.sport || 0;
          }
          return { addr: addr, port: port };
        },sendmsg:function (sock, buffer, offset, length, addr, port) {
          if (sock.type === 2) {
            // connection-less sockets will honor the message address,
            // and otherwise fall back to the bound destination address
            if (addr === undefined || port === undefined) {
              addr = sock.daddr;
              port = sock.dport;
            }
            // if there was no address to fall back to, error out
            if (addr === undefined || port === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.EDESTADDRREQ);
            }
          } else {
            // connection-based sockets will only use the bound
            addr = sock.daddr;
            port = sock.dport;
          }
  
          // find the peer for the destination address
          var dest = SOCKFS.websocket_sock_ops.getPeer(sock, addr, port);
  
          // early out if not connected with a connection-based socket
          if (sock.type === 1) {
            if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            } else if (dest.socket.readyState === dest.socket.CONNECTING) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // create a copy of the incoming data to send, as the WebSocket API
          // doesn't work entirely with an ArrayBufferView, it'll just send
          // the entire underlying buffer
          var data;
          if (buffer instanceof Array || buffer instanceof ArrayBuffer) {
            data = buffer.slice(offset, offset + length);
          } else {  // ArrayBufferView
            data = buffer.buffer.slice(buffer.byteOffset + offset, buffer.byteOffset + offset + length);
          }
  
          // if we're emulating a connection-less dgram socket and don't have
          // a cached connection, queue the buffer to send upon connect and
          // lie, saying the data was sent now.
          if (sock.type === 2) {
            if (!dest || dest.socket.readyState !== dest.socket.OPEN) {
              // if we're not connected, open a new connection
              if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                dest = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
              }
              dest.dgram_send_queue.push(data);
              return length;
            }
          }
  
          try {
            // send the actual data
            dest.socket.send(data);
            return length;
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
        },recvmsg:function (sock, length) {
          // http://pubs.opengroup.org/onlinepubs/7908799/xns/recvmsg.html
          if (sock.type === 1 && sock.server) {
            // tcp servers should not be recv()'ing on the listen socket
            throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
          }
  
          var queued = sock.recv_queue.shift();
          if (!queued) {
            if (sock.type === 1) {
              var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
  
              if (!dest) {
                // if we have a destination address but are not connected, error out
                throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
              }
              else if (dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                // return null if the socket has closed
                return null;
              }
              else {
                // else, our socket is in a valid state but truly has nothing available
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
            } else {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // queued.data will be an ArrayBuffer if it's unadulterated, but if it's
          // requeued TCP data it'll be an ArrayBufferView
          var queuedLength = queued.data.byteLength || queued.data.length;
          var queuedOffset = queued.data.byteOffset || 0;
          var queuedBuffer = queued.data.buffer || queued.data;
          var bytesRead = Math.min(length, queuedLength);
          var res = {
            buffer: new Uint8Array(queuedBuffer, queuedOffset, bytesRead),
            addr: queued.addr,
            port: queued.port
          };
  
  
          // push back any unread data for TCP connections
          if (sock.type === 1 && bytesRead < queuedLength) {
            var bytesRemaining = queuedLength - bytesRead;
            queued.data = new Uint8Array(queuedBuffer, queuedOffset + bytesRead, bytesRemaining);
            sock.recv_queue.unshift(queued);
          }
  
          return res;
        }}};function _send(fd, buf, len, flags) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      // TODO honor flags
      return _write(fd, buf, len);
    }
  
  function _pwrite(fildes, buf, nbyte, offset) {
      // ssize_t pwrite(int fildes, const void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte, offset);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _write(fildes, buf, nbyte) {
      // ssize_t write(int fildes, const void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
  
  
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fwrite(ptr, size, nitems, stream) {
      // size_t fwrite(const void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fwrite.html
      var bytesToWrite = nitems * size;
      if (bytesToWrite == 0) return 0;
      var fd = _fileno(stream);
      var bytesWritten = _write(fd, ptr, bytesToWrite);
      if (bytesWritten == -1) {
        var streamObj = FS.getStreamFromPtr(stream);
        if (streamObj) streamObj.error = true;
        return 0;
      } else {
        return Math.floor(bytesWritten / size);
      }
    }
  
  
   
  Module["_strlen"] = _strlen;
  
  function __reallyNegative(x) {
      return x < 0 || (x === 0 && (1/x) === -Infinity);
    }function __formatString(format, varargs) {
      var textIndex = format;
      var argIndex = 0;
      function getNextArg(type) {
        // NOTE: Explicitly ignoring type safety. Otherwise this fails:
        //       int x = 4; printf("%c\n", (char)x);
        var ret;
        if (type === 'double') {
          ret = (HEAP32[((tempDoublePtr)>>2)]=HEAP32[(((varargs)+(argIndex))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((varargs)+((argIndex)+(4)))>>2)],(+(HEAPF64[(tempDoublePtr)>>3])));
        } else if (type == 'i64') {
          ret = [HEAP32[(((varargs)+(argIndex))>>2)],
                 HEAP32[(((varargs)+(argIndex+4))>>2)]];
  
        } else {
          type = 'i32'; // varargs are always i32, i64, or double
          ret = HEAP32[(((varargs)+(argIndex))>>2)];
        }
        argIndex += Runtime.getNativeFieldSize(type);
        return ret;
      }
  
      var ret = [];
      var curr, next, currArg;
      while(1) {
        var startTextIndex = textIndex;
        curr = HEAP8[(textIndex)];
        if (curr === 0) break;
        next = HEAP8[((textIndex+1)|0)];
        if (curr == 37) {
          // Handle flags.
          var flagAlwaysSigned = false;
          var flagLeftAlign = false;
          var flagAlternative = false;
          var flagZeroPad = false;
          var flagPadSign = false;
          flagsLoop: while (1) {
            switch (next) {
              case 43:
                flagAlwaysSigned = true;
                break;
              case 45:
                flagLeftAlign = true;
                break;
              case 35:
                flagAlternative = true;
                break;
              case 48:
                if (flagZeroPad) {
                  break flagsLoop;
                } else {
                  flagZeroPad = true;
                  break;
                }
              case 32:
                flagPadSign = true;
                break;
              default:
                break flagsLoop;
            }
            textIndex++;
            next = HEAP8[((textIndex+1)|0)];
          }
  
          // Handle width.
          var width = 0;
          if (next == 42) {
            width = getNextArg('i32');
            textIndex++;
            next = HEAP8[((textIndex+1)|0)];
          } else {
            while (next >= 48 && next <= 57) {
              width = width * 10 + (next - 48);
              textIndex++;
              next = HEAP8[((textIndex+1)|0)];
            }
          }
  
          // Handle precision.
          var precisionSet = false, precision = -1;
          if (next == 46) {
            precision = 0;
            precisionSet = true;
            textIndex++;
            next = HEAP8[((textIndex+1)|0)];
            if (next == 42) {
              precision = getNextArg('i32');
              textIndex++;
            } else {
              while(1) {
                var precisionChr = HEAP8[((textIndex+1)|0)];
                if (precisionChr < 48 ||
                    precisionChr > 57) break;
                precision = precision * 10 + (precisionChr - 48);
                textIndex++;
              }
            }
            next = HEAP8[((textIndex+1)|0)];
          }
          if (precision < 0) {
            precision = 6; // Standard default.
            precisionSet = false;
          }
  
          // Handle integer sizes. WARNING: These assume a 32-bit architecture!
          var argSize;
          switch (String.fromCharCode(next)) {
            case 'h':
              var nextNext = HEAP8[((textIndex+2)|0)];
              if (nextNext == 104) {
                textIndex++;
                argSize = 1; // char (actually i32 in varargs)
              } else {
                argSize = 2; // short (actually i32 in varargs)
              }
              break;
            case 'l':
              var nextNext = HEAP8[((textIndex+2)|0)];
              if (nextNext == 108) {
                textIndex++;
                argSize = 8; // long long
              } else {
                argSize = 4; // long
              }
              break;
            case 'L': // long long
            case 'q': // int64_t
            case 'j': // intmax_t
              argSize = 8;
              break;
            case 'z': // size_t
            case 't': // ptrdiff_t
            case 'I': // signed ptrdiff_t or unsigned size_t
              argSize = 4;
              break;
            default:
              argSize = null;
          }
          if (argSize) textIndex++;
          next = HEAP8[((textIndex+1)|0)];
  
          // Handle type specifier.
          switch (String.fromCharCode(next)) {
            case 'd': case 'i': case 'u': case 'o': case 'x': case 'X': case 'p': {
              // Integer.
              var signed = next == 100 || next == 105;
              argSize = argSize || 4;
              var currArg = getNextArg('i' + (argSize * 8));
              var origArg = currArg;
              var argText;
              // Flatten i64-1 [low, high] into a (slightly rounded) double
              if (argSize == 8) {
                currArg = Runtime.makeBigInt(currArg[0], currArg[1], next == 117);
              }
              // Truncate to requested size.
              if (argSize <= 4) {
                var limit = Math.pow(256, argSize) - 1;
                currArg = (signed ? reSign : unSign)(currArg & limit, argSize * 8);
              }
              // Format the number.
              var currAbsArg = Math.abs(currArg);
              var prefix = '';
              if (next == 100 || next == 105) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], null); else
                argText = reSign(currArg, 8 * argSize, 1).toString(10);
              } else if (next == 117) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], true); else
                argText = unSign(currArg, 8 * argSize, 1).toString(10);
                currArg = Math.abs(currArg);
              } else if (next == 111) {
                argText = (flagAlternative ? '0' : '') + currAbsArg.toString(8);
              } else if (next == 120 || next == 88) {
                prefix = (flagAlternative && currArg != 0) ? '0x' : '';
                if (argSize == 8 && i64Math) {
                  if (origArg[1]) {
                    argText = (origArg[1]>>>0).toString(16);
                    var lower = (origArg[0]>>>0).toString(16);
                    while (lower.length < 8) lower = '0' + lower;
                    argText += lower;
                  } else {
                    argText = (origArg[0]>>>0).toString(16);
                  }
                } else
                if (currArg < 0) {
                  // Represent negative numbers in hex as 2's complement.
                  currArg = -currArg;
                  argText = (currAbsArg - 1).toString(16);
                  var buffer = [];
                  for (var i = 0; i < argText.length; i++) {
                    buffer.push((0xF - parseInt(argText[i], 16)).toString(16));
                  }
                  argText = buffer.join('');
                  while (argText.length < argSize * 2) argText = 'f' + argText;
                } else {
                  argText = currAbsArg.toString(16);
                }
                if (next == 88) {
                  prefix = prefix.toUpperCase();
                  argText = argText.toUpperCase();
                }
              } else if (next == 112) {
                if (currAbsArg === 0) {
                  argText = '(nil)';
                } else {
                  prefix = '0x';
                  argText = currAbsArg.toString(16);
                }
              }
              if (precisionSet) {
                while (argText.length < precision) {
                  argText = '0' + argText;
                }
              }
  
              // Add sign if needed
              if (currArg >= 0) {
                if (flagAlwaysSigned) {
                  prefix = '+' + prefix;
                } else if (flagPadSign) {
                  prefix = ' ' + prefix;
                }
              }
  
              // Move sign to prefix so we zero-pad after the sign
              if (argText.charAt(0) == '-') {
                prefix = '-' + prefix;
                argText = argText.substr(1);
              }
  
              // Add padding.
              while (prefix.length + argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad) {
                    argText = '0' + argText;
                  } else {
                    prefix = ' ' + prefix;
                  }
                }
              }
  
              // Insert the result into the buffer.
              argText = prefix + argText;
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 'f': case 'F': case 'e': case 'E': case 'g': case 'G': {
              // Float.
              var currArg = getNextArg('double');
              var argText;
              if (isNaN(currArg)) {
                argText = 'nan';
                flagZeroPad = false;
              } else if (!isFinite(currArg)) {
                argText = (currArg < 0 ? '-' : '') + 'inf';
                flagZeroPad = false;
              } else {
                var isGeneral = false;
                var effectivePrecision = Math.min(precision, 20);
  
                // Convert g/G to f/F or e/E, as per:
                // http://pubs.opengroup.org/onlinepubs/9699919799/functions/printf.html
                if (next == 103 || next == 71) {
                  isGeneral = true;
                  precision = precision || 1;
                  var exponent = parseInt(currArg.toExponential(effectivePrecision).split('e')[1], 10);
                  if (precision > exponent && exponent >= -4) {
                    next = ((next == 103) ? 'f' : 'F').charCodeAt(0);
                    precision -= exponent + 1;
                  } else {
                    next = ((next == 103) ? 'e' : 'E').charCodeAt(0);
                    precision--;
                  }
                  effectivePrecision = Math.min(precision, 20);
                }
  
                if (next == 101 || next == 69) {
                  argText = currArg.toExponential(effectivePrecision);
                  // Make sure the exponent has at least 2 digits.
                  if (/[eE][-+]\d$/.test(argText)) {
                    argText = argText.slice(0, -1) + '0' + argText.slice(-1);
                  }
                } else if (next == 102 || next == 70) {
                  argText = currArg.toFixed(effectivePrecision);
                  if (currArg === 0 && __reallyNegative(currArg)) {
                    argText = '-' + argText;
                  }
                }
  
                var parts = argText.split('e');
                if (isGeneral && !flagAlternative) {
                  // Discard trailing zeros and periods.
                  while (parts[0].length > 1 && parts[0].indexOf('.') != -1 &&
                         (parts[0].slice(-1) == '0' || parts[0].slice(-1) == '.')) {
                    parts[0] = parts[0].slice(0, -1);
                  }
                } else {
                  // Make sure we have a period in alternative mode.
                  if (flagAlternative && argText.indexOf('.') == -1) parts[0] += '.';
                  // Zero pad until required precision.
                  while (precision > effectivePrecision++) parts[0] += '0';
                }
                argText = parts[0] + (parts.length > 1 ? 'e' + parts[1] : '');
  
                // Capitalize 'E' if needed.
                if (next == 69) argText = argText.toUpperCase();
  
                // Add sign.
                if (currArg >= 0) {
                  if (flagAlwaysSigned) {
                    argText = '+' + argText;
                  } else if (flagPadSign) {
                    argText = ' ' + argText;
                  }
                }
              }
  
              // Add padding.
              while (argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad && (argText[0] == '-' || argText[0] == '+')) {
                    argText = argText[0] + '0' + argText.slice(1);
                  } else {
                    argText = (flagZeroPad ? '0' : ' ') + argText;
                  }
                }
              }
  
              // Adjust case.
              if (next < 97) argText = argText.toUpperCase();
  
              // Insert the result into the buffer.
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 's': {
              // String.
              var arg = getNextArg('i8*');
              var argLength = arg ? _strlen(arg) : '(null)'.length;
              if (precisionSet) argLength = Math.min(argLength, precision);
              if (!flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              if (arg) {
                for (var i = 0; i < argLength; i++) {
                  ret.push(HEAPU8[((arg++)|0)]);
                }
              } else {
                ret = ret.concat(intArrayFromString('(null)'.substr(0, argLength), true));
              }
              if (flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              break;
            }
            case 'c': {
              // Character.
              if (flagLeftAlign) ret.push(getNextArg('i8'));
              while (--width > 0) {
                ret.push(32);
              }
              if (!flagLeftAlign) ret.push(getNextArg('i8'));
              break;
            }
            case 'n': {
              // Write the length written so far to the next parameter.
              var ptr = getNextArg('i32*');
              HEAP32[((ptr)>>2)]=ret.length;
              break;
            }
            case '%': {
              // Literal percent sign.
              ret.push(curr);
              break;
            }
            default: {
              // Unknown specifiers remain untouched.
              for (var i = startTextIndex; i < textIndex + 2; i++) {
                ret.push(HEAP8[(i)]);
              }
            }
          }
          textIndex += 2;
          // TODO: Support a/A (hex float) and m (last error) specifiers.
          // TODO: Support %1${specifier} for arg selection.
        } else {
          ret.push(curr);
          textIndex += 1;
        }
      }
      return ret;
    }function _fprintf(stream, format, varargs) {
      // int fprintf(FILE *restrict stream, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var result = __formatString(format, varargs);
      var stack = Runtime.stackSave();
      var ret = _fwrite(allocate(result, 'i8', ALLOC_STACK), 1, result.length, stream);
      Runtime.stackRestore(stack);
      return ret;
    }function _printf(format, varargs) {
      // int printf(const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var stdout = HEAP32[((_stdout)>>2)];
      return _fprintf(stdout, format, varargs);
    }


  
  function _open(path, oflag, varargs) {
      // int open(const char *path, int oflag, ...);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/open.html
      var mode = HEAP32[((varargs)>>2)];
      path = Pointer_stringify(path);
      try {
        var stream = FS.open(path, oflag, mode);
        return stream.fd;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fopen(filename, mode) {
      // FILE *fopen(const char *restrict filename, const char *restrict mode);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fopen.html
      var flags;
      mode = Pointer_stringify(mode);
      if (mode[0] == 'r') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 0;
        }
      } else if (mode[0] == 'w') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 1;
        }
        flags |= 64;
        flags |= 512;
      } else if (mode[0] == 'a') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 1;
        }
        flags |= 64;
        flags |= 1024;
      } else {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return 0;
      }
      var fd = _open(filename, flags, allocate([0x1FF, 0, 0, 0], 'i32', ALLOC_STACK));  // All creation permissions.
      return fd === -1 ? 0 : FS.getPtrForStream(FS.getStream(fd));
    }

  
  
  
  function _isspace(chr) {
      return (chr == 32) || (chr >= 9 && chr <= 13);
    }
  function __parseInt64(str, endptr, base, min, max, unsign) {
      var isNegative = false;
      // Skip space.
      while (_isspace(HEAP8[(str)])) str++;
  
      // Check for a plus/minus sign.
      if (HEAP8[(str)] == 45) {
        str++;
        isNegative = true;
      } else if (HEAP8[(str)] == 43) {
        str++;
      }
  
      // Find base.
      var ok = false;
      var finalBase = base;
      if (!finalBase) {
        if (HEAP8[(str)] == 48) {
          if (HEAP8[((str+1)|0)] == 120 ||
              HEAP8[((str+1)|0)] == 88) {
            finalBase = 16;
            str += 2;
          } else {
            finalBase = 8;
            ok = true; // we saw an initial zero, perhaps the entire thing is just "0"
          }
        }
      } else if (finalBase==16) {
        if (HEAP8[(str)] == 48) {
          if (HEAP8[((str+1)|0)] == 120 ||
              HEAP8[((str+1)|0)] == 88) {
            str += 2;
          }
        }
      }
      if (!finalBase) finalBase = 10;
      var start = str;
  
      // Get digits.
      var chr;
      while ((chr = HEAP8[(str)]) != 0) {
        var digit = parseInt(String.fromCharCode(chr), finalBase);
        if (isNaN(digit)) {
          break;
        } else {
          str++;
          ok = true;
        }
      }
  
      if (!ok) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return ((asm["setTempRet0"](0),0)|0);
      }
  
      // Set end pointer.
      if (endptr) {
        HEAP32[((endptr)>>2)]=str;
      }
  
      try {
        var numberString = isNegative ? '-'+Pointer_stringify(start, str - start) : Pointer_stringify(start, str - start);
        i64Math.fromString(numberString, finalBase, min, max, unsign);
      } catch(e) {
        ___setErrNo(ERRNO_CODES.ERANGE); // not quite correct
      }
  
      return ((asm["setTempRet0"](((HEAP32[(((tempDoublePtr)+(4))>>2)])|0)),((HEAP32[((tempDoublePtr)>>2)])|0))|0);
    }function _strtoull(str, endptr, base) {
      return __parseInt64(str, endptr, base, 0, '18446744073709551615', true);  // ULONG_MAX.
    }function _strtoull_l(str, endptr, base) {
      return _strtoull(str, endptr, base); // no locale support yet
    }

  function _sysconf(name) {
      // long sysconf(int name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html
      switch(name) {
        case 30: return PAGE_SIZE;
        case 132:
        case 133:
        case 12:
        case 137:
        case 138:
        case 15:
        case 235:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 149:
        case 13:
        case 10:
        case 236:
        case 153:
        case 9:
        case 21:
        case 22:
        case 159:
        case 154:
        case 14:
        case 77:
        case 78:
        case 139:
        case 80:
        case 81:
        case 79:
        case 82:
        case 68:
        case 67:
        case 164:
        case 11:
        case 29:
        case 47:
        case 48:
        case 95:
        case 52:
        case 51:
        case 46:
          return 200809;
        case 27:
        case 246:
        case 127:
        case 128:
        case 23:
        case 24:
        case 160:
        case 161:
        case 181:
        case 182:
        case 242:
        case 183:
        case 184:
        case 243:
        case 244:
        case 245:
        case 165:
        case 178:
        case 179:
        case 49:
        case 50:
        case 168:
        case 169:
        case 175:
        case 170:
        case 171:
        case 172:
        case 97:
        case 76:
        case 32:
        case 173:
        case 35:
          return -1;
        case 176:
        case 177:
        case 7:
        case 155:
        case 8:
        case 157:
        case 125:
        case 126:
        case 92:
        case 93:
        case 129:
        case 130:
        case 131:
        case 94:
        case 91:
          return 1;
        case 74:
        case 60:
        case 69:
        case 70:
        case 4:
          return 1024;
        case 31:
        case 42:
        case 72:
          return 32;
        case 87:
        case 26:
        case 33:
          return 2147483647;
        case 34:
        case 1:
          return 47839;
        case 38:
        case 36:
          return 99;
        case 43:
        case 37:
          return 2048;
        case 0: return 2097152;
        case 3: return 65536;
        case 28: return 32768;
        case 44: return 32767;
        case 75: return 16384;
        case 39: return 1000;
        case 89: return 700;
        case 71: return 256;
        case 40: return 255;
        case 2: return 100;
        case 180: return 64;
        case 25: return 20;
        case 5: return 16;
        case 6: return 6;
        case 73: return 4;
        case 84: return 1;
      }
      ___setErrNo(ERRNO_CODES.EINVAL);
      return -1;
    }

  
  function _fputs(s, stream) {
      // int fputs(const char *restrict s, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fputs.html
      var fd = _fileno(stream);
      return _write(fd, s, _strlen(s));
    }
  
  function _fputc(c, stream) {
      // int fputc(int c, FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fputc.html
      var chr = unSign(c & 0xFF);
      HEAP8[((_fputc.ret)|0)]=chr;
      var fd = _fileno(stream);
      var ret = _write(fd, _fputc.ret, 1);
      if (ret == -1) {
        var streamObj = FS.getStreamFromPtr(stream);
        if (streamObj) streamObj.error = true;
        return -1;
      } else {
        return chr;
      }
    }function _puts(s) {
      // int puts(const char *s);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/puts.html
      // NOTE: puts() always writes an extra newline.
      var stdout = HEAP32[((_stdout)>>2)];
      var ret = _fputs(s, stdout);
      if (ret < 0) {
        return ret;
      } else {
        var newlineRet = _fputc(10, stdout);
        return (newlineRet < 0) ? -1 : ret + 1;
      }
    }


  
  function _strtoll(str, endptr, base) {
      return __parseInt64(str, endptr, base, '-9223372036854775808', '9223372036854775807');  // LLONG_MIN, LLONG_MAX.
    }function _strtoll_l(str, endptr, base) {
      return _strtoll(str, endptr, base); // no locale support yet
    }


   
  Module["_memset"] = _memset;

  function _pthread_cond_broadcast() {
      return 0;
    }

  
  
  function __exit(status) {
      // void _exit(int status);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/exit.html
      Module['exit'](status);
    }function _exit(status) {
      __exit(status);
    }function __ZSt9terminatev() {
      _exit(-1234);
    }

  function _pthread_mutex_unlock() {}

  
  function _isxdigit(chr) {
      return (chr >= 48 && chr <= 57) ||
             (chr >= 97 && chr <= 102) ||
             (chr >= 65 && chr <= 70);
    }function _isxdigit_l(chr) {
      return _isxdigit(chr); // no locale support yet
    }

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 
  Module["_memcpy"] = _memcpy;

  function _sbrk(bytes) {
      // Implement a Linux-like 'memory area' for our 'process'.
      // Changes the size of the memory area by |bytes|; returns the
      // address of the previous top ('break') of the memory area
      // We control the "dynamic" memory - DYNAMIC_BASE to DYNAMICTOP
      var self = _sbrk;
      if (!self.called) {
        DYNAMICTOP = alignMemoryPage(DYNAMICTOP); // make sure we start out aligned
        self.called = true;
        assert(Runtime.dynamicAlloc);
        self.alloc = Runtime.dynamicAlloc;
        Runtime.dynamicAlloc = function() { abort('cannot dynamically allocate, sbrk now has control') };
      }
      var ret = DYNAMICTOP;
      if (bytes != 0) self.alloc(bytes);
      return ret;  // Previous break location.
    }


  
  function _malloc(bytes) {
      /* Over-allocate to make sure it is byte-aligned by 8.
       * This will leak memory, but this is only the dummy
       * implementation (replaced by dlmalloc normally) so
       * not an issue.
       */
      var ptr = Runtime.dynamicAlloc(bytes + 8);
      return (ptr+8) & 0xFFFFFFF8;
    }
  Module["_malloc"] = _malloc;function _newlocale(mask, locale, base) {
      return _malloc(4);
    }

   
  Module["_memmove"] = _memmove;

  function ___errno_location() {
      return ___errno_state;
    }

  var _BItoD=true;

  function _catclose(catd) {
      // int catclose (nl_catd catd)
      return 0;
    }

  
  
  
  function _free() {
  }
  Module["_free"] = _free;function ___cxa_free_exception(ptr) {
      try {
        return _free(ptr - ___cxa_exception_header_size);
      } catch(e) { // XXX FIXME
      }
    }
  
  var ___cxa_caught_exceptions=[];function ___cxa_end_catch() {
      if (___cxa_end_catch.rethrown) {
        ___cxa_end_catch.rethrown = false;
        return;
      }
      // Clear state flag.
      asm['setThrew'](0);
      // Call destructor if one is registered then clear it.
      var ptr = ___cxa_caught_exceptions.pop();
      if (ptr) {
        header = ptr - ___cxa_exception_header_size;
        var destructor = HEAP32[(((header)+(4))>>2)];
        if (destructor) {
          Runtime.dynCall('vi', destructor, [ptr]);
          HEAP32[(((header)+(4))>>2)]=0;
        }
        ___cxa_free_exception(ptr);
        ___cxa_last_thrown_exception = 0;
      }
    }function ___cxa_rethrow() {
      ___cxa_end_catch.rethrown = true;
      var ptr = ___cxa_caught_exceptions.pop();
      throw ptr + " - Exception catching is disabled, this exception cannot be caught. Compile with -s DISABLE_EXCEPTION_CATCHING=0 or DISABLE_EXCEPTION_CATCHING=2 to catch.";
    }

  function _fmod(x, y) {
      return x % y;
    }

  function ___cxa_guard_release() {}

  function _ungetc(c, stream) {
      // int ungetc(int c, FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/ungetc.html
      stream = FS.getStreamFromPtr(stream);
      if (!stream) {
        return -1;
      }
      if (c === -1) {
        // do nothing for EOF character
        return c;
      }
      c = unSign(c & 0xFF);
      stream.ungotten.push(c);
      stream.eof = false;
      return c;
    }

  function _uselocale(locale) {
      return 0;
    }

  
  function _snprintf(s, n, format, varargs) {
      // int snprintf(char *restrict s, size_t n, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var result = __formatString(format, varargs);
      var limit = (n === undefined) ? result.length
                                    : Math.min(result.length, Math.max(n - 1, 0));
      if (s < 0) {
        s = -s;
        var buf = _malloc(limit+1);
        HEAP32[((s)>>2)]=buf;
        s = buf;
      }
      for (var i = 0; i < limit; i++) {
        HEAP8[(((s)+(i))|0)]=result[i];
      }
      if (limit < n || (n === undefined)) HEAP8[(((s)+(i))|0)]=0;
      return result.length;
    }function _vsnprintf(s, n, format, va_arg) {
      return _snprintf(s, n, format, HEAP32[((va_arg)>>2)]);
    }

  
  
  
  function __getFloat(text) {
      return /^[+-]?[0-9]*\.?[0-9]+([eE][+-]?[0-9]+)?/.exec(text);
    }function __scanString(format, get, unget, varargs) {
      if (!__scanString.whiteSpace) {
        __scanString.whiteSpace = {};
        __scanString.whiteSpace[32] = 1;
        __scanString.whiteSpace[9] = 1;
        __scanString.whiteSpace[10] = 1;
        __scanString.whiteSpace[11] = 1;
        __scanString.whiteSpace[12] = 1;
        __scanString.whiteSpace[13] = 1;
      }
      // Supports %x, %4x, %d.%d, %lld, %s, %f, %lf.
      // TODO: Support all format specifiers.
      format = Pointer_stringify(format);
      var soFar = 0;
      if (format.indexOf('%n') >= 0) {
        // need to track soFar
        var _get = get;
        get = function get() {
          soFar++;
          return _get();
        }
        var _unget = unget;
        unget = function unget() {
          soFar--;
          return _unget();
        }
      }
      var formatIndex = 0;
      var argsi = 0;
      var fields = 0;
      var argIndex = 0;
      var next;
  
      mainLoop:
      for (var formatIndex = 0; formatIndex < format.length;) {
        if (format[formatIndex] === '%' && format[formatIndex+1] == 'n') {
          var argPtr = HEAP32[(((varargs)+(argIndex))>>2)];
          argIndex += Runtime.getAlignSize('void*', null, true);
          HEAP32[((argPtr)>>2)]=soFar;
          formatIndex += 2;
          continue;
        }
  
        if (format[formatIndex] === '%') {
          var nextC = format.indexOf('c', formatIndex+1);
          if (nextC > 0) {
            var maxx = 1;
            if (nextC > formatIndex+1) {
              var sub = format.substring(formatIndex+1, nextC);
              maxx = parseInt(sub);
              if (maxx != sub) maxx = 0;
            }
            if (maxx) {
              var argPtr = HEAP32[(((varargs)+(argIndex))>>2)];
              argIndex += Runtime.getAlignSize('void*', null, true);
              fields++;
              for (var i = 0; i < maxx; i++) {
                next = get();
                HEAP8[((argPtr++)|0)]=next;
                if (next === 0) return i > 0 ? fields : fields-1; // we failed to read the full length of this field
              }
              formatIndex += nextC - formatIndex + 1;
              continue;
            }
          }
        }
  
        // handle %[...]
        if (format[formatIndex] === '%' && format.indexOf('[', formatIndex+1) > 0) {
          var match = /\%([0-9]*)\[(\^)?(\]?[^\]]*)\]/.exec(format.substring(formatIndex));
          if (match) {
            var maxNumCharacters = parseInt(match[1]) || Infinity;
            var negateScanList = (match[2] === '^');
            var scanList = match[3];
  
            // expand "middle" dashs into character sets
            var middleDashMatch;
            while ((middleDashMatch = /([^\-])\-([^\-])/.exec(scanList))) {
              var rangeStartCharCode = middleDashMatch[1].charCodeAt(0);
              var rangeEndCharCode = middleDashMatch[2].charCodeAt(0);
              for (var expanded = ''; rangeStartCharCode <= rangeEndCharCode; expanded += String.fromCharCode(rangeStartCharCode++));
              scanList = scanList.replace(middleDashMatch[1] + '-' + middleDashMatch[2], expanded);
            }
  
            var argPtr = HEAP32[(((varargs)+(argIndex))>>2)];
            argIndex += Runtime.getAlignSize('void*', null, true);
            fields++;
  
            for (var i = 0; i < maxNumCharacters; i++) {
              next = get();
              if (negateScanList) {
                if (scanList.indexOf(String.fromCharCode(next)) < 0) {
                  HEAP8[((argPtr++)|0)]=next;
                } else {
                  unget();
                  break;
                }
              } else {
                if (scanList.indexOf(String.fromCharCode(next)) >= 0) {
                  HEAP8[((argPtr++)|0)]=next;
                } else {
                  unget();
                  break;
                }
              }
            }
  
            // write out null-terminating character
            HEAP8[((argPtr++)|0)]=0;
            formatIndex += match[0].length;
            
            continue;
          }
        }      
        // remove whitespace
        while (1) {
          next = get();
          if (next == 0) return fields;
          if (!(next in __scanString.whiteSpace)) break;
        }
        unget();
  
        if (format[formatIndex] === '%') {
          formatIndex++;
          var suppressAssignment = false;
          if (format[formatIndex] == '*') {
            suppressAssignment = true;
            formatIndex++;
          }
          var maxSpecifierStart = formatIndex;
          while (format[formatIndex].charCodeAt(0) >= 48 &&
                 format[formatIndex].charCodeAt(0) <= 57) {
            formatIndex++;
          }
          var max_;
          if (formatIndex != maxSpecifierStart) {
            max_ = parseInt(format.slice(maxSpecifierStart, formatIndex), 10);
          }
          var long_ = false;
          var half = false;
          var longLong = false;
          if (format[formatIndex] == 'l') {
            long_ = true;
            formatIndex++;
            if (format[formatIndex] == 'l') {
              longLong = true;
              formatIndex++;
            }
          } else if (format[formatIndex] == 'h') {
            half = true;
            formatIndex++;
          }
          var type = format[formatIndex];
          formatIndex++;
          var curr = 0;
          var buffer = [];
          // Read characters according to the format. floats are trickier, they may be in an unfloat state in the middle, then be a valid float later
          if (type == 'f' || type == 'e' || type == 'g' ||
              type == 'F' || type == 'E' || type == 'G') {
            next = get();
            while (next > 0 && (!(next in __scanString.whiteSpace)))  {
              buffer.push(String.fromCharCode(next));
              next = get();
            }
            var m = __getFloat(buffer.join(''));
            var last = m ? m[0].length : 0;
            for (var i = 0; i < buffer.length - last + 1; i++) {
              unget();
            }
            buffer.length = last;
          } else {
            next = get();
            var first = true;
            
            // Strip the optional 0x prefix for %x.
            if ((type == 'x' || type == 'X') && (next == 48)) {
              var peek = get();
              if (peek == 120 || peek == 88) {
                next = get();
              } else {
                unget();
              }
            }
            
            while ((curr < max_ || isNaN(max_)) && next > 0) {
              if (!(next in __scanString.whiteSpace) && // stop on whitespace
                  (type == 's' ||
                   ((type === 'd' || type == 'u' || type == 'i') && ((next >= 48 && next <= 57) ||
                                                                     (first && next == 45))) ||
                   ((type === 'x' || type === 'X') && (next >= 48 && next <= 57 ||
                                     next >= 97 && next <= 102 ||
                                     next >= 65 && next <= 70))) &&
                  (formatIndex >= format.length || next !== format[formatIndex].charCodeAt(0))) { // Stop when we read something that is coming up
                buffer.push(String.fromCharCode(next));
                next = get();
                curr++;
                first = false;
              } else {
                break;
              }
            }
            unget();
          }
          if (buffer.length === 0) return 0;  // Failure.
          if (suppressAssignment) continue;
  
          var text = buffer.join('');
          var argPtr = HEAP32[(((varargs)+(argIndex))>>2)];
          argIndex += Runtime.getAlignSize('void*', null, true);
          switch (type) {
            case 'd': case 'u': case 'i':
              if (half) {
                HEAP16[((argPtr)>>1)]=parseInt(text, 10);
              } else if (longLong) {
                (tempI64 = [parseInt(text, 10)>>>0,(tempDouble=parseInt(text, 10),(+(Math_abs(tempDouble))) >= (+1) ? (tempDouble > (+0) ? ((Math_min((+(Math_floor((tempDouble)/(+4294967296)))), (+4294967295)))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/(+4294967296))))))>>>0) : 0)],HEAP32[((argPtr)>>2)]=tempI64[0],HEAP32[(((argPtr)+(4))>>2)]=tempI64[1]);
              } else {
                HEAP32[((argPtr)>>2)]=parseInt(text, 10);
              }
              break;
            case 'X':
            case 'x':
              HEAP32[((argPtr)>>2)]=parseInt(text, 16);
              break;
            case 'F':
            case 'f':
            case 'E':
            case 'e':
            case 'G':
            case 'g':
            case 'E':
              // fallthrough intended
              if (long_) {
                HEAPF64[((argPtr)>>3)]=parseFloat(text);
              } else {
                HEAPF32[((argPtr)>>2)]=parseFloat(text);
              }
              break;
            case 's':
              var array = intArrayFromString(text);
              for (var j = 0; j < array.length; j++) {
                HEAP8[(((argPtr)+(j))|0)]=array[j];
              }
              break;
          }
          fields++;
        } else if (format[formatIndex].charCodeAt(0) in __scanString.whiteSpace) {
          next = get();
          while (next in __scanString.whiteSpace) {
            if (next <= 0) break mainLoop;  // End of input.
            next = get();
          }
          unget(next);
          formatIndex++;
        } else {
          // Not a specifier.
          next = get();
          if (format[formatIndex].charCodeAt(0) !== next) {
            unget(next);
            break mainLoop;
          }
          formatIndex++;
        }
      }
      return fields;
    }function _sscanf(s, format, varargs) {
      // int sscanf(const char *restrict s, const char *restrict format, ... );
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/scanf.html
      var index = 0;
      function get() { return HEAP8[(((s)+(index++))|0)]; };
      function unget() { index--; };
      return __scanString(format, get, unget, varargs);
    }function _vsscanf(s, format, va_arg) {
      return _sscanf(s, format, HEAP32[((va_arg)>>2)]);
    }



  
  
  
  function _recv(fd, buf, len, flags) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      // TODO honor flags
      return _read(fd, buf, len);
    }
  
  function _pread(fildes, buf, nbyte, offset) {
      // ssize_t pread(int fildes, void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.read(stream, slab, buf, nbyte, offset);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _read(fildes, buf, nbyte) {
      // ssize_t read(int fildes, void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
  
  
      try {
        var slab = HEAP8;
        return FS.read(stream, slab, buf, nbyte);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fread(ptr, size, nitems, stream) {
      // size_t fread(void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fread.html
      var bytesToRead = nitems * size;
      if (bytesToRead == 0) {
        return 0;
      }
      var bytesRead = 0;
      var streamObj = FS.getStreamFromPtr(stream);
      if (!streamObj) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return 0;
      }
      while (streamObj.ungotten.length && bytesToRead > 0) {
        HEAP8[((ptr++)|0)]=streamObj.ungotten.pop();
        bytesToRead--;
        bytesRead++;
      }
      var err = _read(streamObj.fd, ptr, bytesToRead);
      if (err == -1) {
        if (streamObj) streamObj.error = true;
        return 0;
      }
      bytesRead += err;
      if (bytesRead < bytesToRead) streamObj.eof = true;
      return Math.floor(bytesRead / size);
    }function _fgetc(stream) {
      // int fgetc(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fgetc.html
      var streamObj = FS.getStreamFromPtr(stream);
      if (!streamObj) return -1;
      if (streamObj.eof || streamObj.error) return -1;
      var ret = _fread(_fgetc.ret, 1, 1, stream);
      if (ret == 0) {
        return -1;
      } else if (ret == -1) {
        streamObj.error = true;
        return -1;
      } else {
        return HEAPU8[((_fgetc.ret)|0)];
      }
    }


  
  function _ftell(stream) {
      // long ftell(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/ftell.html
      stream = FS.getStreamFromPtr(stream);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      if (FS.isChrdev(stream.node.mode)) {
        ___setErrNo(ERRNO_CODES.ESPIPE);
        return -1;
      } else {
        return stream.position;
      }
    }var _ftello=_ftell;

  
  function _strerror_r(errnum, strerrbuf, buflen) {
      if (errnum in ERRNO_MESSAGES) {
        if (ERRNO_MESSAGES[errnum].length > buflen - 1) {
          return ___setErrNo(ERRNO_CODES.ERANGE);
        } else {
          var msg = ERRNO_MESSAGES[errnum];
          writeAsciiToMemory(msg, strerrbuf);
          return 0;
        }
      } else {
        return ___setErrNo(ERRNO_CODES.EINVAL);
      }
    }function _strerror(errnum) {
      if (!_strerror.buffer) _strerror.buffer = _malloc(256);
      _strerror_r(errnum, _strerror.buffer, 256);
      return _strerror.buffer;
    }

  
  
  function __isLeapYear(year) {
        return year%4 === 0 && (year%100 !== 0 || year%400 === 0);
    }
  
  function __arraySum(array, index) {
      var sum = 0;
      for (var i = 0; i <= index; sum += array[i++]);
      return sum;
    }
  
  
  var __MONTH_DAYS_LEAP=[31,29,31,30,31,30,31,31,30,31,30,31];
  
  var __MONTH_DAYS_REGULAR=[31,28,31,30,31,30,31,31,30,31,30,31];function __addDays(date, days) {
      var newDate = new Date(date.getTime());
      while(days > 0) {
        var leap = __isLeapYear(newDate.getFullYear());
        var currentMonth = newDate.getMonth();
        var daysInCurrentMonth = (leap ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR)[currentMonth];
  
        if (days > daysInCurrentMonth-newDate.getDate()) {
          // we spill over to next month
          days -= (daysInCurrentMonth-newDate.getDate()+1);
          newDate.setDate(1);
          if (currentMonth < 11) {
            newDate.setMonth(currentMonth+1)
          } else {
            newDate.setMonth(0);
            newDate.setFullYear(newDate.getFullYear()+1);
          }
        } else {
          // we stay in current month 
          newDate.setDate(newDate.getDate()+days);
          return newDate;
        }
      }
  
      return newDate;
    }function _strftime(s, maxsize, format, tm) {
      // size_t strftime(char *restrict s, size_t maxsize, const char *restrict format, const struct tm *restrict timeptr);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/strftime.html
      
      var date = {
        tm_sec: HEAP32[((tm)>>2)],
        tm_min: HEAP32[(((tm)+(4))>>2)],
        tm_hour: HEAP32[(((tm)+(8))>>2)],
        tm_mday: HEAP32[(((tm)+(12))>>2)],
        tm_mon: HEAP32[(((tm)+(16))>>2)],
        tm_year: HEAP32[(((tm)+(20))>>2)],
        tm_wday: HEAP32[(((tm)+(24))>>2)],
        tm_yday: HEAP32[(((tm)+(28))>>2)],
        tm_isdst: HEAP32[(((tm)+(32))>>2)]
      };
  
      var pattern = Pointer_stringify(format);
  
      // expand format
      var EXPANSION_RULES_1 = {
        '%c': '%a %b %d %H:%M:%S %Y',     // Replaced by the locale's appropriate date and time representation - e.g., Mon Aug  3 14:02:01 2013
        '%D': '%m/%d/%y',                 // Equivalent to %m / %d / %y
        '%F': '%Y-%m-%d',                 // Equivalent to %Y - %m - %d
        '%h': '%b',                       // Equivalent to %b
        '%r': '%I:%M:%S %p',              // Replaced by the time in a.m. and p.m. notation
        '%R': '%H:%M',                    // Replaced by the time in 24-hour notation
        '%T': '%H:%M:%S',                 // Replaced by the time
        '%x': '%m/%d/%y',                 // Replaced by the locale's appropriate date representation
        '%X': '%H:%M:%S',                 // Replaced by the locale's appropriate date representation
      };
      for (var rule in EXPANSION_RULES_1) {
        pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_1[rule]);
      }
  
      var WEEKDAYS = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
      var MONTHS = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
  
      function leadingSomething(value, digits, character) {
        var str = typeof value === 'number' ? value.toString() : (value || '');
        while (str.length < digits) {
          str = character[0]+str;
        }
        return str;
      };
  
      function leadingNulls(value, digits) {
        return leadingSomething(value, digits, '0');
      };
  
      function compareByDay(date1, date2) {
        function sgn(value) {
          return value < 0 ? -1 : (value > 0 ? 1 : 0);
        };
  
        var compare;
        if ((compare = sgn(date1.getFullYear()-date2.getFullYear())) === 0) {
          if ((compare = sgn(date1.getMonth()-date2.getMonth())) === 0) {
            compare = sgn(date1.getDate()-date2.getDate());
          }
        }
        return compare;
      };
  
      function getFirstWeekStartDate(janFourth) {
          switch (janFourth.getDay()) {
            case 0: // Sunday
              return new Date(janFourth.getFullYear()-1, 11, 29);
            case 1: // Monday
              return janFourth;
            case 2: // Tuesday
              return new Date(janFourth.getFullYear(), 0, 3);
            case 3: // Wednesday
              return new Date(janFourth.getFullYear(), 0, 2);
            case 4: // Thursday
              return new Date(janFourth.getFullYear(), 0, 1);
            case 5: // Friday
              return new Date(janFourth.getFullYear()-1, 11, 31);
            case 6: // Saturday
              return new Date(janFourth.getFullYear()-1, 11, 30);
          }
      };
  
      function getWeekBasedYear(date) {
          var thisDate = __addDays(new Date(date.tm_year+1900, 0, 1), date.tm_yday);
  
          var janFourthThisYear = new Date(thisDate.getFullYear(), 0, 4);
          var janFourthNextYear = new Date(thisDate.getFullYear()+1, 0, 4);
  
          var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
          var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
  
          if (compareByDay(firstWeekStartThisYear, thisDate) <= 0) {
            // this date is after the start of the first week of this year
            if (compareByDay(firstWeekStartNextYear, thisDate) <= 0) {
              return thisDate.getFullYear()+1;
            } else {
              return thisDate.getFullYear();
            }
          } else { 
            return thisDate.getFullYear()-1;
          }
      };
  
      var EXPANSION_RULES_2 = {
        '%a': function(date) {
          return WEEKDAYS[date.tm_wday].substring(0,3);
        },
        '%A': function(date) {
          return WEEKDAYS[date.tm_wday];
        },
        '%b': function(date) {
          return MONTHS[date.tm_mon].substring(0,3);
        },
        '%B': function(date) {
          return MONTHS[date.tm_mon];
        },
        '%C': function(date) {
          var year = date.tm_year+1900;
          return leadingNulls(Math.floor(year/100),2);
        },
        '%d': function(date) {
          return leadingNulls(date.tm_mday, 2);
        },
        '%e': function(date) {
          return leadingSomething(date.tm_mday, 2, ' ');
        },
        '%g': function(date) {
          // %g, %G, and %V give values according to the ISO 8601:2000 standard week-based year. 
          // In this system, weeks begin on a Monday and week 1 of the year is the week that includes 
          // January 4th, which is also the week that includes the first Thursday of the year, and 
          // is also the first week that contains at least four days in the year. 
          // If the first Monday of January is the 2nd, 3rd, or 4th, the preceding days are part of 
          // the last week of the preceding year; thus, for Saturday 2nd January 1999, 
          // %G is replaced by 1998 and %V is replaced by 53. If December 29th, 30th, 
          // or 31st is a Monday, it and any following days are part of week 1 of the following year. 
          // Thus, for Tuesday 30th December 1997, %G is replaced by 1998 and %V is replaced by 01.
          
          return getWeekBasedYear(date).toString().substring(2);
        },
        '%G': function(date) {
          return getWeekBasedYear(date);
        },
        '%H': function(date) {
          return leadingNulls(date.tm_hour, 2);
        },
        '%I': function(date) {
          return leadingNulls(date.tm_hour < 13 ? date.tm_hour : date.tm_hour-12, 2);
        },
        '%j': function(date) {
          // Day of the year (001-366)
          return leadingNulls(date.tm_mday+__arraySum(__isLeapYear(date.tm_year+1900) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, date.tm_mon-1), 3);
        },
        '%m': function(date) {
          return leadingNulls(date.tm_mon+1, 2);
        },
        '%M': function(date) {
          return leadingNulls(date.tm_min, 2);
        },
        '%n': function() {
          return '\n';
        },
        '%p': function(date) {
          if (date.tm_hour > 0 && date.tm_hour < 13) {
            return 'AM';
          } else {
            return 'PM';
          }
        },
        '%S': function(date) {
          return leadingNulls(date.tm_sec, 2);
        },
        '%t': function() {
          return '\t';
        },
        '%u': function(date) {
          var day = new Date(date.tm_year+1900, date.tm_mon+1, date.tm_mday, 0, 0, 0, 0);
          return day.getDay() || 7;
        },
        '%U': function(date) {
          // Replaced by the week number of the year as a decimal number [00,53]. 
          // The first Sunday of January is the first day of week 1; 
          // days in the new year before this are in week 0. [ tm_year, tm_wday, tm_yday]
          var janFirst = new Date(date.tm_year+1900, 0, 1);
          var firstSunday = janFirst.getDay() === 0 ? janFirst : __addDays(janFirst, 7-janFirst.getDay());
          var endDate = new Date(date.tm_year+1900, date.tm_mon, date.tm_mday);
          
          // is target date after the first Sunday?
          if (compareByDay(firstSunday, endDate) < 0) {
            // calculate difference in days between first Sunday and endDate
            var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth()-1)-31;
            var firstSundayUntilEndJanuary = 31-firstSunday.getDate();
            var days = firstSundayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();
            return leadingNulls(Math.ceil(days/7), 2);
          }
  
          return compareByDay(firstSunday, janFirst) === 0 ? '01': '00';
        },
        '%V': function(date) {
          // Replaced by the week number of the year (Monday as the first day of the week) 
          // as a decimal number [01,53]. If the week containing 1 January has four 
          // or more days in the new year, then it is considered week 1. 
          // Otherwise, it is the last week of the previous year, and the next week is week 1. 
          // Both January 4th and the first Thursday of January are always in week 1. [ tm_year, tm_wday, tm_yday]
          var janFourthThisYear = new Date(date.tm_year+1900, 0, 4);
          var janFourthNextYear = new Date(date.tm_year+1901, 0, 4);
  
          var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
          var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
  
          var endDate = __addDays(new Date(date.tm_year+1900, 0, 1), date.tm_yday);
  
          if (compareByDay(endDate, firstWeekStartThisYear) < 0) {
            // if given date is before this years first week, then it belongs to the 53rd week of last year
            return '53';
          } 
  
          if (compareByDay(firstWeekStartNextYear, endDate) <= 0) {
            // if given date is after next years first week, then it belongs to the 01th week of next year
            return '01';
          }
  
          // given date is in between CW 01..53 of this calendar year
          var daysDifference;
          if (firstWeekStartThisYear.getFullYear() < date.tm_year+1900) {
            // first CW of this year starts last year
            daysDifference = date.tm_yday+32-firstWeekStartThisYear.getDate()
          } else {
            // first CW of this year starts this year
            daysDifference = date.tm_yday+1-firstWeekStartThisYear.getDate();
          }
          return leadingNulls(Math.ceil(daysDifference/7), 2);
        },
        '%w': function(date) {
          var day = new Date(date.tm_year+1900, date.tm_mon+1, date.tm_mday, 0, 0, 0, 0);
          return day.getDay();
        },
        '%W': function(date) {
          // Replaced by the week number of the year as a decimal number [00,53]. 
          // The first Monday of January is the first day of week 1; 
          // days in the new year before this are in week 0. [ tm_year, tm_wday, tm_yday]
          var janFirst = new Date(date.tm_year, 0, 1);
          var firstMonday = janFirst.getDay() === 1 ? janFirst : __addDays(janFirst, janFirst.getDay() === 0 ? 1 : 7-janFirst.getDay()+1);
          var endDate = new Date(date.tm_year+1900, date.tm_mon, date.tm_mday);
  
          // is target date after the first Monday?
          if (compareByDay(firstMonday, endDate) < 0) {
            var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth()-1)-31;
            var firstMondayUntilEndJanuary = 31-firstMonday.getDate();
            var days = firstMondayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();
            return leadingNulls(Math.ceil(days/7), 2);
          }
          return compareByDay(firstMonday, janFirst) === 0 ? '01': '00';
        },
        '%y': function(date) {
          // Replaced by the last two digits of the year as a decimal number [00,99]. [ tm_year]
          return (date.tm_year+1900).toString().substring(2);
        },
        '%Y': function(date) {
          // Replaced by the year as a decimal number (for example, 1997). [ tm_year]
          return date.tm_year+1900;
        },
        '%z': function(date) {
          // Replaced by the offset from UTC in the ISO 8601:2000 standard format ( +hhmm or -hhmm ),
          // or by no characters if no timezone is determinable. 
          // For example, "-0430" means 4 hours 30 minutes behind UTC (west of Greenwich). 
          // If tm_isdst is zero, the standard time offset is used. 
          // If tm_isdst is greater than zero, the daylight savings time offset is used. 
          // If tm_isdst is negative, no characters are returned. 
          // FIXME: we cannot determine time zone (or can we?)
          return '';
        },
        '%Z': function(date) {
          // Replaced by the timezone name or abbreviation, or by no bytes if no timezone information exists. [ tm_isdst]
          // FIXME: we cannot determine time zone (or can we?)
          return '';
        },
        '%%': function() {
          return '%';
        }
      };
      for (var rule in EXPANSION_RULES_2) {
        if (pattern.indexOf(rule) >= 0) {
          pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_2[rule](date));
        }
      }
  
      var bytes = intArrayFromString(pattern, false);
      if (bytes.length > maxsize) {
        return 0;
      } 
  
      writeArrayToMemory(bytes, s);
      return bytes.length-1;
    }function _strftime_l(s, maxsize, format, tm) {
      return _strftime(s, maxsize, format, tm); // no locale support yet
    }

  function _abort() {
      Module['abort']();
    }

  function _isdigit(chr) {
      return chr >= 48 && chr <= 57;
    }


  function _pthread_cond_wait() {
      return 0;
    }

  function _isdigit_l(chr) {
      return _isdigit(chr); // no locale support yet
    }

  var _fabs=Math_abs;

  function _clock() {
      if (_clock.start === undefined) _clock.start = Date.now();
      return Math.floor((Date.now() - _clock.start) * (1000000/1000));
    }

  var _getc=_fgetc;


  var Browser={mainLoop:{scheduler:null,method:"",shouldPause:false,paused:false,queue:[],pause:function () {
          Browser.mainLoop.shouldPause = true;
        },resume:function () {
          if (Browser.mainLoop.paused) {
            Browser.mainLoop.paused = false;
            Browser.mainLoop.scheduler();
          }
          Browser.mainLoop.shouldPause = false;
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        }},isFullScreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
  
        if (Browser.initted || ENVIRONMENT_IS_WORKER) return;
        Browser.initted = true;
  
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              Runtime.warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          var img = new Image();
          img.onload = function img_onload() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function img_onerror(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function audio_onerror(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
  
        // Canvas event setup
  
        var canvas = Module['canvas'];
        
        // forced aspect ratio can be enabled by defining 'forcedAspectRatio' on Module
        // Module['forcedAspectRatio'] = 4 / 3;
        
        canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                    canvas['mozRequestPointerLock'] ||
                                    canvas['webkitRequestPointerLock'] ||
                                    canvas['msRequestPointerLock'] ||
                                    function(){};
        canvas.exitPointerLock = document['exitPointerLock'] ||
                                 document['mozExitPointerLock'] ||
                                 document['webkitExitPointerLock'] ||
                                 document['msExitPointerLock'] ||
                                 function(){}; // no-op if function does not exist
        canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
  
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === canvas ||
                                document['mozPointerLockElement'] === canvas ||
                                document['webkitPointerLockElement'] === canvas ||
                                document['msPointerLockElement'] === canvas;
        }
  
        document.addEventListener('pointerlockchange', pointerLockChange, false);
        document.addEventListener('mozpointerlockchange', pointerLockChange, false);
        document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
        document.addEventListener('mspointerlockchange', pointerLockChange, false);
  
        if (Module['elementPointerLock']) {
          canvas.addEventListener("click", function(ev) {
            if (!Browser.pointerLock && canvas.requestPointerLock) {
              canvas.requestPointerLock();
              ev.preventDefault();
            }
          }, false);
        }
      },createContext:function (canvas, useWebGL, setInModule, webGLContextAttributes) {
        var ctx;
        var errorInfo = '?';
        function onContextCreationError(event) {
          errorInfo = event.statusMessage || errorInfo;
        }
        try {
          if (useWebGL) {
            var contextAttributes = {
              antialias: false,
              alpha: false
            };
  
            if (webGLContextAttributes) {
              for (var attribute in webGLContextAttributes) {
                contextAttributes[attribute] = webGLContextAttributes[attribute];
              }
            }
  
  
            canvas.addEventListener('webglcontextcreationerror', onContextCreationError, false);
            try {
              ['experimental-webgl', 'webgl'].some(function(webglId) {
                return ctx = canvas.getContext(webglId, contextAttributes);
              });
            } finally {
              canvas.removeEventListener('webglcontextcreationerror', onContextCreationError, false);
            }
          } else {
            ctx = canvas.getContext('2d');
          }
          if (!ctx) throw ':(';
        } catch (e) {
          Module.print('Could not create canvas: ' + [errorInfo, e]);
          return null;
        }
        if (useWebGL) {
          // Set the background of the WebGL canvas to black
          canvas.style.backgroundColor = "black";
  
          // Warn on context loss
          canvas.addEventListener('webglcontextlost', function(event) {
            alert('WebGL context lost. You will need to reload the page.');
          }, false);
        }
        if (setInModule) {
          GLctx = Module.ctx = ctx;
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},fullScreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullScreen:function (lockPointer, resizeCanvas) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
  
        var canvas = Module['canvas'];
        function fullScreenChange() {
          Browser.isFullScreen = false;
          var canvasContainer = canvas.parentNode;
          if ((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
               document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
               document['fullScreenElement'] || document['fullscreenElement'] ||
               document['msFullScreenElement'] || document['msFullscreenElement'] ||
               document['webkitCurrentFullScreenElement']) === canvasContainer) {
            canvas.cancelFullScreen = document['cancelFullScreen'] ||
                                      document['mozCancelFullScreen'] ||
                                      document['webkitCancelFullScreen'] ||
                                      document['msExitFullscreen'] ||
                                      document['exitFullscreen'] ||
                                      function() {};
            canvas.cancelFullScreen = canvas.cancelFullScreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullScreen = true;
            if (Browser.resizeCanvas) Browser.setFullScreenCanvasSize();
          } else {
            
            // remove the full screen specific parent of the canvas again to restore the HTML structure from before going full screen
            canvasContainer.parentNode.insertBefore(canvas, canvasContainer);
            canvasContainer.parentNode.removeChild(canvasContainer);
            
            if (Browser.resizeCanvas) Browser.setWindowedCanvasSize();
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullScreen);
          Browser.updateCanvasDimensions(canvas);
        }
  
        if (!Browser.fullScreenHandlersInstalled) {
          Browser.fullScreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullScreenChange, false);
          document.addEventListener('mozfullscreenchange', fullScreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullScreenChange, false);
          document.addEventListener('MSFullscreenChange', fullScreenChange, false);
        }
  
        // create a new parent to ensure the canvas has no siblings. this allows browsers to optimize full screen performance when its parent is the full screen root
        var canvasContainer = document.createElement("div");
        canvas.parentNode.insertBefore(canvasContainer, canvas);
        canvasContainer.appendChild(canvas);
        
        // use parent of canvas as full screen root to allow aspect ratio correction (Firefox stretches the root to screen size)
        canvasContainer.requestFullScreen = canvasContainer['requestFullScreen'] ||
                                            canvasContainer['mozRequestFullScreen'] ||
                                            canvasContainer['msRequestFullscreen'] ||
                                           (canvasContainer['webkitRequestFullScreen'] ? function() { canvasContainer['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
        canvasContainer.requestFullScreen();
      },requestAnimationFrame:function requestAnimationFrame(func) {
        if (typeof window === 'undefined') { // Provide fallback to setTimeout if window is undefined (e.g. in Node.js)
          setTimeout(func, 1000/60);
        } else {
          if (!window.requestAnimationFrame) {
            window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                           window['mozRequestAnimationFrame'] ||
                                           window['webkitRequestAnimationFrame'] ||
                                           window['msRequestAnimationFrame'] ||
                                           window['oRequestAnimationFrame'] ||
                                           window['setTimeout'];
          }
          window.requestAnimationFrame(func);
        }
      },safeCallback:function (func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },safeRequestAnimationFrame:function (func) {
        return Browser.requestAnimationFrame(function() {
          if (!ABORT) func();
        });
      },safeSetTimeout:function (func, timeout) {
        return setTimeout(function() {
          if (!ABORT) func();
        }, timeout);
      },safeSetInterval:function (func, timeout) {
        return setInterval(function() {
          if (!ABORT) func();
        }, timeout);
      },getMimetype:function (name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function (func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },getMouseWheelDelta:function (event) {
        return Math.max(-1, Math.min(1, event.type === 'DOMMouseScroll' ? event.detail : -event.wheelDelta));
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,touches:{},lastTouches:{},calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
          
          // check if SDL is available
          if (typeof SDL != "undefined") {
          	Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
          	Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
          	// just add the mouse delta to the current absolut mouse position
          	// FIXME: ideally this should be clamped against the canvas size and zero
          	Browser.mouseX += Browser.mouseMovementX;
          	Browser.mouseY += Browser.mouseMovementY;
          }        
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
  
          // Neither .scrollX or .pageXOffset are defined in a spec, but
          // we prefer .scrollX because it is currently in a spec draft.
          // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)
          var scrollX = ((typeof window.scrollX !== 'undefined') ? window.scrollX : window.pageXOffset);
          var scrollY = ((typeof window.scrollY !== 'undefined') ? window.scrollY : window.pageYOffset);
  
          if (event.type === 'touchstart' || event.type === 'touchend' || event.type === 'touchmove') {
            var touch = event.touch;
            if (touch === undefined) {
              return; // the "touch" property is only defined in SDL
  
            }
            var adjustedX = touch.pageX - (scrollX + rect.left);
            var adjustedY = touch.pageY - (scrollY + rect.top);
  
            adjustedX = adjustedX * (cw / rect.width);
            adjustedY = adjustedY * (ch / rect.height);
  
            var coords = { x: adjustedX, y: adjustedY };
            
            if (event.type === 'touchstart') {
              Browser.lastTouches[touch.identifier] = coords;
              Browser.touches[touch.identifier] = coords;
            } else if (event.type === 'touchend' || event.type === 'touchmove') {
              Browser.lastTouches[touch.identifier] = Browser.touches[touch.identifier];
              Browser.touches[touch.identifier] = { x: adjustedX, y: adjustedY };
            } 
            return;
          }
  
          var x = event.pageX - (scrollX + rect.left);
          var y = event.pageY - (scrollY + rect.top);
  
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
  
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },xhrLoad:function (url, onload, onerror) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, true);
        xhr.responseType = 'arraybuffer';
        xhr.onload = function xhr_onload() {
          if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
            onload(xhr.response);
          } else {
            onerror();
          }
        };
        xhr.onerror = onerror;
        xhr.send(null);
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        Browser.xhrLoad(url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (!noRunDep) removeRunDependency('al ' + url);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (!noRunDep) addRunDependency('al ' + url);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        Browser.updateCanvasDimensions(canvas, width, height);
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullScreenCanvasSize:function () {
        // check if SDL is available   
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function () {
        // check if SDL is available       
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },updateCanvasDimensions:function (canvas, wNative, hNative) {
        if (wNative && hNative) {
          canvas.widthNative = wNative;
          canvas.heightNative = hNative;
        } else {
          wNative = canvas.widthNative;
          hNative = canvas.heightNative;
        }
        var w = wNative;
        var h = hNative;
        if (Module['forcedAspectRatio'] && Module['forcedAspectRatio'] > 0) {
          if (w/h < Module['forcedAspectRatio']) {
            w = Math.round(h * Module['forcedAspectRatio']);
          } else {
            h = Math.round(w / Module['forcedAspectRatio']);
          }
        }
        if (((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
             document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
             document['fullScreenElement'] || document['fullscreenElement'] ||
             document['msFullScreenElement'] || document['msFullscreenElement'] ||
             document['webkitCurrentFullScreenElement']) === canvas.parentNode) && (typeof screen != 'undefined')) {
           var factor = Math.min(screen.width / w, screen.height / h);
           w = Math.round(w * factor);
           h = Math.round(h * factor);
        }
        if (Browser.resizeCanvas) {
          if (canvas.width  != w) canvas.width  = w;
          if (canvas.height != h) canvas.height = h;
          if (typeof canvas.style != 'undefined') {
            canvas.style.removeProperty( "width");
            canvas.style.removeProperty("height");
          }
        } else {
          if (canvas.width  != wNative) canvas.width  = wNative;
          if (canvas.height != hNative) canvas.height = hNative;
          if (typeof canvas.style != 'undefined') {
            if (w != wNative || h != hNative) {
              canvas.style.setProperty( "width", w + "px", "important");
              canvas.style.setProperty("height", h + "px", "important");
            } else {
              canvas.style.removeProperty( "width");
              canvas.style.removeProperty("height");
            }
          }
        }
      }};

  function ___ctype_b_loc() {
      // http://refspecs.freestandards.org/LSB_3.0.0/LSB-Core-generic/LSB-Core-generic/baselib---ctype-b-loc.html
      var me = ___ctype_b_loc;
      if (!me.ret) {
        var values = [
          0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
          0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
          0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,8195,8194,8194,8194,8194,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,24577,49156,49156,49156,
          49156,49156,49156,49156,49156,49156,49156,49156,49156,49156,49156,49156,55304,55304,55304,55304,55304,55304,55304,55304,
          55304,55304,49156,49156,49156,49156,49156,49156,49156,54536,54536,54536,54536,54536,54536,50440,50440,50440,50440,50440,
          50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,49156,49156,49156,49156,49156,
          49156,54792,54792,54792,54792,54792,54792,50696,50696,50696,50696,50696,50696,50696,50696,50696,50696,50696,50696,50696,
          50696,50696,50696,50696,50696,50696,50696,49156,49156,49156,49156,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
          0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
          0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
        ];
        var i16size = 2;
        var arr = _malloc(values.length * i16size);
        for (var i = 0; i < values.length; i++) {
          HEAP16[(((arr)+(i * i16size))>>1)]=values[i];
        }
        me.ret = allocate([arr + 128 * i16size], 'i16*', ALLOC_NORMAL);
      }
      return me.ret;
    }

  function _freelocale(locale) {
      _free(locale);
    }

  function ___cxa_allocate_exception(size) {
      var ptr = _malloc(size + ___cxa_exception_header_size);
      return ptr + ___cxa_exception_header_size;
    }

  var _fmodl=_fmod;

  function _catopen(name, oflag) {
      // nl_catd catopen (const char *name, int oflag)
      return -1;
    }

  function _catgets(catd, set_id, msg_id, s) {
      // char *catgets (nl_catd catd, int set_id, int msg_id, const char *s)
      return s;
    }

  
  
  function _sprintf(s, format, varargs) {
      // int sprintf(char *restrict s, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      return _snprintf(s, undefined, format, varargs);
    }function _asprintf(s, format, varargs) {
      return _sprintf(-s, format, varargs);
    }function _vasprintf(s, format, va_arg) {
      return _asprintf(s, format, HEAP32[((va_arg)>>2)]);
    }

  function _time(ptr) {
      var ret = Math.floor(Date.now()/1000);
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret;
      }
      return ret;
    }

  function _copysign(a, b) {
      return __reallyNegative(a) === __reallyNegative(b) ? a : -a;
    }

  function ___ctype_toupper_loc() {
      // http://refspecs.freestandards.org/LSB_3.1.1/LSB-Core-generic/LSB-Core-generic/libutil---ctype-toupper-loc.html
      var me = ___ctype_toupper_loc;
      if (!me.ret) {
        var values = [
          128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,
          158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,
          188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,
          218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,
          248,249,250,251,252,253,254,-1,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,
          33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,
          73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,
          81,82,83,84,85,86,87,88,89,90,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,
          145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,
          175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,
          205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,
          235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255
        ];
        var i32size = 4;
        var arr = _malloc(values.length * i32size);
        for (var i = 0; i < values.length; i++) {
          HEAP32[(((arr)+(i * i32size))>>2)]=values[i];
        }
        me.ret = allocate([arr + 128 * i32size], 'i32*', ALLOC_NORMAL);
      }
      return me.ret;
    }

  function ___cxa_guard_acquire(variable) {
      if (!HEAP8[(variable)]) { // ignore SAFE_HEAP stuff because llvm mixes i64 and i8 here
        HEAP8[(variable)]=1;
        return 1;
      }
      return 0;
    }

  function ___ctype_tolower_loc() {
      // http://refspecs.freestandards.org/LSB_3.1.1/LSB-Core-generic/LSB-Core-generic/libutil---ctype-tolower-loc.html
      var me = ___ctype_tolower_loc;
      if (!me.ret) {
        var values = [
          128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,
          158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,
          188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,
          218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,
          248,249,250,251,252,253,254,-1,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,
          33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,97,98,99,100,101,102,103,
          104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,91,92,93,94,95,96,97,98,99,100,101,102,103,
          104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,
          134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,
          164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,
          194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,
          224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,
          254,255
        ];
        var i32size = 4;
        var arr = _malloc(values.length * i32size);
        for (var i = 0; i < values.length; i++) {
          HEAP32[(((arr)+(i * i32size))>>2)]=values[i];
        }
        me.ret = allocate([arr + 128 * i32size], 'i32*', ALLOC_NORMAL);
      }
      return me.ret;
    }

  function ___cxa_begin_catch(ptr) {
      __ZSt18uncaught_exceptionv.uncaught_exception--;
      ___cxa_caught_exceptions.push(___cxa_last_thrown_exception);
      return ptr;
    }

   
  Module["_bitshift64Shl"] = _bitshift64Shl;


  var _fseeko=_fseek;

  function __ZNSt9exceptionD2Ev() {}

  var _copysignl=_copysign;

  var __ZTISt9exception=allocate([allocate([1,0,0,0,0,0,0], "i8", ALLOC_STATIC)+8, 0], "i32", ALLOC_STATIC);

  var ___dso_handle=allocate(1, "i32*", ALLOC_STATIC);



FS.staticInit();__ATINIT__.unshift({ func: function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() } });__ATMAIN__.push({ func: function() { FS.ignorePermissions = false } });__ATEXIT__.push({ func: function() { FS.quit() } });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;
___errno_state = Runtime.staticAlloc(4); HEAP32[((___errno_state)>>2)]=0;
__ATINIT__.unshift({ func: function() { TTY.init() } });__ATEXIT__.push({ func: function() { TTY.shutdown() } });TTY.utf8 = new Runtime.UTF8Processor();
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); NODEFS.staticInit(); }
__ATINIT__.push({ func: function() { SOCKFS.root = FS.mount(SOCKFS, {}, null); } });
_fputc.ret = allocate([0], "i8", ALLOC_STATIC);
_fgetc.ret = allocate([0], "i8", ALLOC_STATIC);
Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas) { Browser.requestFullScreen(lockPointer, resizeCanvas) };
  Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) };
  Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
  Module["pauseMainLoop"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function Module_getUserMedia() { Browser.getUserMedia() }
STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);

staticSealed = true; // seal the static portion of memory

STACK_MAX = STACK_BASE + 5242880;

DYNAMIC_BASE = DYNAMICTOP = Runtime.alignMemory(STACK_MAX);

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");

 var ctlz_i8 = allocate([8,7,6,6,5,5,5,5,4,4,4,4,4,4,4,4,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_DYNAMIC);
 var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_DYNAMIC);

var Math_min = Math.min;
function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
  try {
    Module["dynCall_viiiiiii"](index,a1,a2,a3,a4,a5,a6,a7);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiii(index,a1,a2,a3,a4,a5) {
  try {
    Module["dynCall_viiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vi(index,a1) {
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vii(index,a1,a2) {
  try {
    Module["dynCall_vii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9) {
  try {
    Module["dynCall_viiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiiid(index,a1,a2,a3,a4,a5,a6,a7) {
  try {
    Module["dynCall_viiiiiid"](index,a1,a2,a3,a4,a5,a6,a7);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viii(index,a1,a2,a3) {
  try {
    Module["dynCall_viii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiid(index,a1,a2,a3,a4,a5,a6) {
  try {
    Module["dynCall_viiiiid"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_v(index) {
  try {
    Module["dynCall_v"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8) {
  try {
    return Module["dynCall_iiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiii(index,a1,a2,a3,a4) {
  try {
    return Module["dynCall_iiiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8) {
  try {
    Module["dynCall_viiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    Module["dynCall_viiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiii(index,a1,a2,a3,a4,a5) {
  try {
    return Module["dynCall_iiiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiii(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_viiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function asmPrintInt(x, y) {
  Module.print('int ' + x + ',' + y);// + ' ' + new Error().stack);
}
function asmPrintFloat(x, y) {
  Module.print('float ' + x + ',' + y);// + ' ' + new Error().stack);
}
// EMSCRIPTEN_START_ASM
var asm = (function(global, env, buffer) {
  'use asm';
  var HEAP8 = new global.Int8Array(buffer);
  var HEAP16 = new global.Int16Array(buffer);
  var HEAP32 = new global.Int32Array(buffer);
  var HEAPU8 = new global.Uint8Array(buffer);
  var HEAPU16 = new global.Uint16Array(buffer);
  var HEAPU32 = new global.Uint32Array(buffer);
  var HEAPF32 = new global.Float32Array(buffer);
  var HEAPF64 = new global.Float64Array(buffer);

  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var cttz_i8=env.cttz_i8|0;
  var ctlz_i8=env.ctlz_i8|0;
  var ___rand_seed=env.___rand_seed|0;
  var __ZTISt9exception=env.__ZTISt9exception|0;
  var ___dso_handle=env.___dso_handle|0;
  var _stderr=env._stderr|0;
  var _stdin=env._stdin|0;
  var _stdout=env._stdout|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = +env.NaN, inf = +env.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntP = 0, tempBigIntS = 0, tempBigIntR = 0.0, tempBigIntI = 0, tempBigIntD = 0, tempValue = 0, tempDouble = 0.0;

  var tempRet0 = 0;
  var tempRet1 = 0;
  var tempRet2 = 0;
  var tempRet3 = 0;
  var tempRet4 = 0;
  var tempRet5 = 0;
  var tempRet6 = 0;
  var tempRet7 = 0;
  var tempRet8 = 0;
  var tempRet9 = 0;
  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var abort=env.abort;
  var assert=env.assert;
  var asmPrintInt=env.asmPrintInt;
  var asmPrintFloat=env.asmPrintFloat;
  var Math_min=env.min;
  var invoke_iiii=env.invoke_iiii;
  var invoke_viiiiiii=env.invoke_viiiiiii;
  var invoke_viiiii=env.invoke_viiiii;
  var invoke_vi=env.invoke_vi;
  var invoke_vii=env.invoke_vii;
  var invoke_viiiiiiiii=env.invoke_viiiiiiiii;
  var invoke_ii=env.invoke_ii;
  var invoke_viiiiiid=env.invoke_viiiiiid;
  var invoke_viii=env.invoke_viii;
  var invoke_viiiiid=env.invoke_viiiiid;
  var invoke_v=env.invoke_v;
  var invoke_iiiiiiiii=env.invoke_iiiiiiiii;
  var invoke_iiiii=env.invoke_iiiii;
  var invoke_viiiiiiii=env.invoke_viiiiiiii;
  var invoke_viiiiii=env.invoke_viiiiii;
  var invoke_iii=env.invoke_iii;
  var invoke_iiiiii=env.invoke_iiiiii;
  var invoke_viiii=env.invoke_viiii;
  var _fabs=env._fabs;
  var _vsscanf=env._vsscanf;
  var __ZSt9terminatev=env.__ZSt9terminatev;
  var ___cxa_guard_acquire=env.___cxa_guard_acquire;
  var _sscanf=env._sscanf;
  var __ZSt18uncaught_exceptionv=env.__ZSt18uncaught_exceptionv;
  var ___ctype_toupper_loc=env.___ctype_toupper_loc;
  var __addDays=env.__addDays;
  var _fsync=env._fsync;
  var _sbrk=env._sbrk;
  var ___cxa_begin_catch=env.___cxa_begin_catch;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var _sysconf=env._sysconf;
  var _close=env._close;
  var _clock=env._clock;
  var _fileno=env._fileno;
  var _fread=env._fread;
  var _puts=env._puts;
  var _write=env._write;
  var __isLeapYear=env.__isLeapYear;
  var _ftell=env._ftell;
  var __ZNSt9exceptionD2Ev=env.__ZNSt9exceptionD2Ev;
  var ___cxa_does_inherit=env.___cxa_does_inherit;
  var __exit=env.__exit;
  var ___cxa_rethrow=env.___cxa_rethrow;
  var _catclose=env._catclose;
  var _send=env._send;
  var ___cxa_is_number_type=env.___cxa_is_number_type;
  var ___cxa_free_exception=env.___cxa_free_exception;
  var ___cxa_find_matching_catch=env.___cxa_find_matching_catch;
  var _isxdigit_l=env._isxdigit_l;
  var ___cxa_guard_release=env.___cxa_guard_release;
  var _strerror_r=env._strerror_r;
  var ___setErrNo=env.___setErrNo;
  var _newlocale=env._newlocale;
  var _isdigit_l=env._isdigit_l;
  var ___resumeException=env.___resumeException;
  var _freelocale=env._freelocale;
  var _printf=env._printf;
  var _sprintf=env._sprintf;
  var _vasprintf=env._vasprintf;
  var _vsnprintf=env._vsnprintf;
  var _strtoull_l=env._strtoull_l;
  var _read=env._read;
  var _fwrite=env._fwrite;
  var _time=env._time;
  var _pthread_mutex_lock=env._pthread_mutex_lock;
  var _catopen=env._catopen;
  var _exit=env._exit;
  var ___ctype_b_loc=env.___ctype_b_loc;
  var _fmod=env._fmod;
  var _lseek=env._lseek;
  var ___cxa_allocate_exception=env.___cxa_allocate_exception;
  var _strtoll=env._strtoll;
  var _pwrite=env._pwrite;
  var _open=env._open;
  var _uselocale=env._uselocale;
  var _snprintf=env._snprintf;
  var __scanString=env.__scanString;
  var ___cxa_end_catch=env.___cxa_end_catch;
  var _strtoull=env._strtoull;
  var _strftime=env._strftime;
  var _fseek=env._fseek;
  var _isxdigit=env._isxdigit;
  var _fclose=env._fclose;
  var _pthread_cond_broadcast=env._pthread_cond_broadcast;
  var _recv=env._recv;
  var _fgetc=env._fgetc;
  var __parseInt64=env.__parseInt64;
  var __getFloat=env.__getFloat;
  var _abort=env._abort;
  var _isspace=env._isspace;
  var _fopen=env._fopen;
  var _pthread_cond_wait=env._pthread_cond_wait;
  var _ungetc=env._ungetc;
  var _fflush=env._fflush;
  var _strftime_l=env._strftime_l;
  var _fprintf=env._fprintf;
  var __reallyNegative=env.__reallyNegative;
  var _catgets=env._catgets;
  var _asprintf=env._asprintf;
  var _strtoll_l=env._strtoll_l;
  var __arraySum=env.__arraySum;
  var ___ctype_tolower_loc=env.___ctype_tolower_loc;
  var _fputs=env._fputs;
  var _pthread_mutex_unlock=env._pthread_mutex_unlock;
  var _pread=env._pread;
  var _mkport=env._mkport;
  var ___errno_location=env.___errno_location;
  var _copysign=env._copysign;
  var _fputc=env._fputc;
  var ___cxa_throw=env.___cxa_throw;
  var _isdigit=env._isdigit;
  var _strerror=env._strerror;
  var __formatString=env.__formatString;
  var _atexit=env._atexit;
  var tempFloat = 0.0;

// EMSCRIPTEN_START_FUNCS
function _malloc(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0, i49 = 0, i50 = 0, i51 = 0, i52 = 0, i53 = 0, i54 = 0, i55 = 0, i56 = 0, i57 = 0, i58 = 0, i59 = 0, i60 = 0, i61 = 0, i62 = 0, i63 = 0, i64 = 0, i65 = 0, i66 = 0, i67 = 0, i68 = 0, i69 = 0, i70 = 0, i71 = 0, i72 = 0, i73 = 0, i74 = 0, i75 = 0, i76 = 0, i77 = 0, i78 = 0, i79 = 0, i80 = 0, i81 = 0, i82 = 0, i83 = 0, i84 = 0, i85 = 0, i86 = 0, i87 = 0, i88 = 0, i89 = 0;
 i2 = STACKTOP;
 do {
  if (i1 >>> 0 < 245) {
   if (i1 >>> 0 < 11) {
    i3 = 16;
   } else {
    i3 = i1 + 11 & -8;
   }
   i4 = i3 >>> 3;
   i5 = HEAP32[3538] | 0;
   i6 = i5 >>> i4;
   if ((i6 & 3 | 0) != 0) {
    i7 = (i6 & 1 ^ 1) + i4 | 0;
    i8 = i7 << 1;
    i9 = 14192 + (i8 << 2) | 0;
    i10 = 14192 + (i8 + 2 << 2) | 0;
    i8 = HEAP32[i10 >> 2] | 0;
    i11 = i8 + 8 | 0;
    i12 = HEAP32[i11 >> 2] | 0;
    do {
     if ((i9 | 0) == (i12 | 0)) {
      HEAP32[3538] = i5 & ~(1 << i7);
     } else {
      if (i12 >>> 0 < (HEAP32[14168 >> 2] | 0) >>> 0) {
       _abort();
      }
      i13 = i12 + 12 | 0;
      if ((HEAP32[i13 >> 2] | 0) == (i8 | 0)) {
       HEAP32[i13 >> 2] = i9;
       HEAP32[i10 >> 2] = i12;
       break;
      } else {
       _abort();
      }
     }
    } while (0);
    i12 = i7 << 3;
    HEAP32[i8 + 4 >> 2] = i12 | 3;
    i10 = i8 + (i12 | 4) | 0;
    HEAP32[i10 >> 2] = HEAP32[i10 >> 2] | 1;
    i14 = i11;
    STACKTOP = i2;
    return i14 | 0;
   }
   if (i3 >>> 0 > (HEAP32[14160 >> 2] | 0) >>> 0) {
    if ((i6 | 0) != 0) {
     i10 = 2 << i4;
     i12 = i6 << i4 & (i10 | 0 - i10);
     i10 = (i12 & 0 - i12) + -1 | 0;
     i12 = i10 >>> 12 & 16;
     i9 = i10 >>> i12;
     i10 = i9 >>> 5 & 8;
     i13 = i9 >>> i10;
     i9 = i13 >>> 2 & 4;
     i15 = i13 >>> i9;
     i13 = i15 >>> 1 & 2;
     i16 = i15 >>> i13;
     i15 = i16 >>> 1 & 1;
     i17 = (i10 | i12 | i9 | i13 | i15) + (i16 >>> i15) | 0;
     i15 = i17 << 1;
     i16 = 14192 + (i15 << 2) | 0;
     i13 = 14192 + (i15 + 2 << 2) | 0;
     i15 = HEAP32[i13 >> 2] | 0;
     i9 = i15 + 8 | 0;
     i12 = HEAP32[i9 >> 2] | 0;
     do {
      if ((i16 | 0) == (i12 | 0)) {
       HEAP32[3538] = i5 & ~(1 << i17);
      } else {
       if (i12 >>> 0 < (HEAP32[14168 >> 2] | 0) >>> 0) {
        _abort();
       }
       i10 = i12 + 12 | 0;
       if ((HEAP32[i10 >> 2] | 0) == (i15 | 0)) {
        HEAP32[i10 >> 2] = i16;
        HEAP32[i13 >> 2] = i12;
        break;
       } else {
        _abort();
       }
      }
     } while (0);
     i12 = i17 << 3;
     i13 = i12 - i3 | 0;
     HEAP32[i15 + 4 >> 2] = i3 | 3;
     i16 = i15 + i3 | 0;
     HEAP32[i15 + (i3 | 4) >> 2] = i13 | 1;
     HEAP32[i15 + i12 >> 2] = i13;
     i12 = HEAP32[14160 >> 2] | 0;
     if ((i12 | 0) != 0) {
      i5 = HEAP32[14172 >> 2] | 0;
      i4 = i12 >>> 3;
      i12 = i4 << 1;
      i6 = 14192 + (i12 << 2) | 0;
      i11 = HEAP32[3538] | 0;
      i8 = 1 << i4;
      if ((i11 & i8 | 0) == 0) {
       HEAP32[3538] = i11 | i8;
       i18 = 14192 + (i12 + 2 << 2) | 0;
       i19 = i6;
      } else {
       i8 = 14192 + (i12 + 2 << 2) | 0;
       i12 = HEAP32[i8 >> 2] | 0;
       if (i12 >>> 0 < (HEAP32[14168 >> 2] | 0) >>> 0) {
        _abort();
       } else {
        i18 = i8;
        i19 = i12;
       }
      }
      HEAP32[i18 >> 2] = i5;
      HEAP32[i19 + 12 >> 2] = i5;
      HEAP32[i5 + 8 >> 2] = i19;
      HEAP32[i5 + 12 >> 2] = i6;
     }
     HEAP32[14160 >> 2] = i13;
     HEAP32[14172 >> 2] = i16;
     i14 = i9;
     STACKTOP = i2;
     return i14 | 0;
    }
    i16 = HEAP32[14156 >> 2] | 0;
    if ((i16 | 0) == 0) {
     i20 = i3;
    } else {
     i13 = (i16 & 0 - i16) + -1 | 0;
     i16 = i13 >>> 12 & 16;
     i6 = i13 >>> i16;
     i13 = i6 >>> 5 & 8;
     i5 = i6 >>> i13;
     i6 = i5 >>> 2 & 4;
     i12 = i5 >>> i6;
     i5 = i12 >>> 1 & 2;
     i8 = i12 >>> i5;
     i12 = i8 >>> 1 & 1;
     i11 = HEAP32[14456 + ((i13 | i16 | i6 | i5 | i12) + (i8 >>> i12) << 2) >> 2] | 0;
     i12 = (HEAP32[i11 + 4 >> 2] & -8) - i3 | 0;
     i8 = i11;
     i5 = i11;
     while (1) {
      i11 = HEAP32[i8 + 16 >> 2] | 0;
      if ((i11 | 0) == 0) {
       i6 = HEAP32[i8 + 20 >> 2] | 0;
       if ((i6 | 0) == 0) {
        break;
       } else {
        i21 = i6;
       }
      } else {
       i21 = i11;
      }
      i11 = (HEAP32[i21 + 4 >> 2] & -8) - i3 | 0;
      i6 = i11 >>> 0 < i12 >>> 0;
      i12 = i6 ? i11 : i12;
      i8 = i21;
      i5 = i6 ? i21 : i5;
     }
     i8 = HEAP32[14168 >> 2] | 0;
     if (i5 >>> 0 < i8 >>> 0) {
      _abort();
     }
     i9 = i5 + i3 | 0;
     if (!(i5 >>> 0 < i9 >>> 0)) {
      _abort();
     }
     i15 = HEAP32[i5 + 24 >> 2] | 0;
     i17 = HEAP32[i5 + 12 >> 2] | 0;
     do {
      if ((i17 | 0) == (i5 | 0)) {
       i6 = i5 + 20 | 0;
       i11 = HEAP32[i6 >> 2] | 0;
       if ((i11 | 0) == 0) {
        i16 = i5 + 16 | 0;
        i13 = HEAP32[i16 >> 2] | 0;
        if ((i13 | 0) == 0) {
         i22 = 0;
         break;
        } else {
         i23 = i13;
         i24 = i16;
        }
       } else {
        i23 = i11;
        i24 = i6;
       }
       while (1) {
        i6 = i23 + 20 | 0;
        i11 = HEAP32[i6 >> 2] | 0;
        if ((i11 | 0) != 0) {
         i23 = i11;
         i24 = i6;
         continue;
        }
        i6 = i23 + 16 | 0;
        i11 = HEAP32[i6 >> 2] | 0;
        if ((i11 | 0) == 0) {
         break;
        } else {
         i23 = i11;
         i24 = i6;
        }
       }
       if (i24 >>> 0 < i8 >>> 0) {
        _abort();
       } else {
        HEAP32[i24 >> 2] = 0;
        i22 = i23;
        break;
       }
      } else {
       i6 = HEAP32[i5 + 8 >> 2] | 0;
       if (i6 >>> 0 < i8 >>> 0) {
        _abort();
       }
       i11 = i6 + 12 | 0;
       if ((HEAP32[i11 >> 2] | 0) != (i5 | 0)) {
        _abort();
       }
       i16 = i17 + 8 | 0;
       if ((HEAP32[i16 >> 2] | 0) == (i5 | 0)) {
        HEAP32[i11 >> 2] = i17;
        HEAP32[i16 >> 2] = i6;
        i22 = i17;
        break;
       } else {
        _abort();
       }
      }
     } while (0);
     do {
      if ((i15 | 0) != 0) {
       i17 = HEAP32[i5 + 28 >> 2] | 0;
       i8 = 14456 + (i17 << 2) | 0;
       if ((i5 | 0) == (HEAP32[i8 >> 2] | 0)) {
        HEAP32[i8 >> 2] = i22;
        if ((i22 | 0) == 0) {
         HEAP32[14156 >> 2] = HEAP32[14156 >> 2] & ~(1 << i17);
         break;
        }
       } else {
        if (i15 >>> 0 < (HEAP32[14168 >> 2] | 0) >>> 0) {
         _abort();
        }
        i17 = i15 + 16 | 0;
        if ((HEAP32[i17 >> 2] | 0) == (i5 | 0)) {
         HEAP32[i17 >> 2] = i22;
        } else {
         HEAP32[i15 + 20 >> 2] = i22;
        }
        if ((i22 | 0) == 0) {
         break;
        }
       }
       if (i22 >>> 0 < (HEAP32[14168 >> 2] | 0) >>> 0) {
        _abort();
       }
       HEAP32[i22 + 24 >> 2] = i15;
       i17 = HEAP32[i5 + 16 >> 2] | 0;
       do {
        if ((i17 | 0) != 0) {
         if (i17 >>> 0 < (HEAP32[14168 >> 2] | 0) >>> 0) {
          _abort();
         } else {
          HEAP32[i22 + 16 >> 2] = i17;
          HEAP32[i17 + 24 >> 2] = i22;
          break;
         }
        }
       } while (0);
       i17 = HEAP32[i5 + 20 >> 2] | 0;
       if ((i17 | 0) != 0) {
        if (i17 >>> 0 < (HEAP32[14168 >> 2] | 0) >>> 0) {
         _abort();
        } else {
         HEAP32[i22 + 20 >> 2] = i17;
         HEAP32[i17 + 24 >> 2] = i22;
         break;
        }
       }
      }
     } while (0);
     if (i12 >>> 0 < 16) {
      i15 = i12 + i3 | 0;
      HEAP32[i5 + 4 >> 2] = i15 | 3;
      i17 = i5 + (i15 + 4) | 0;
      HEAP32[i17 >> 2] = HEAP32[i17 >> 2] | 1;
     } else {
      HEAP32[i5 + 4 >> 2] = i3 | 3;
      HEAP32[i5 + (i3 | 4) >> 2] = i12 | 1;
      HEAP32[i5 + (i12 + i3) >> 2] = i12;
      i17 = HEAP32[14160 >> 2] | 0;
      if ((i17 | 0) != 0) {
       i15 = HEAP32[14172 >> 2] | 0;
       i8 = i17 >>> 3;
       i17 = i8 << 1;
       i6 = 14192 + (i17 << 2) | 0;
       i16 = HEAP32[3538] | 0;
       i11 = 1 << i8;
       if ((i16 & i11 | 0) == 0) {
        HEAP32[3538] = i16 | i11;
        i25 = 14192 + (i17 + 2 << 2) | 0;
        i26 = i6;
       } else {
        i11 = 14192 + (i17 + 2 << 2) | 0;
        i17 = HEAP32[i11 >> 2] | 0;
        if (i17 >>> 0 < (HEAP32[14168 >> 2] | 0) >>> 0) {
         _abort();
        } else {
         i25 = i11;
         i26 = i17;
        }
       }
       HEAP32[i25 >> 2] = i15;
       HEAP32[i26 + 12 >> 2] = i15;
       HEAP32[i15 + 8 >> 2] = i26;
       HEAP32[i15 + 12 >> 2] = i6;
      }
      HEAP32[14160 >> 2] = i12;
      HEAP32[14172 >> 2] = i9;
     }
     i14 = i5 + 8 | 0;
     STACKTOP = i2;
     return i14 | 0;
    }
   } else {
    i20 = i3;
   }
  } else {
   if (i1 >>> 0 > 4294967231) {
    i20 = -1;
   } else {
    i6 = i1 + 11 | 0;
    i15 = i6 & -8;
    i17 = HEAP32[14156 >> 2] | 0;
    if ((i17 | 0) == 0) {
     i20 = i15;
    } else {
     i11 = 0 - i15 | 0;
     i16 = i6 >>> 8;
     if ((i16 | 0) == 0) {
      i27 = 0;
     } else {
      if (i15 >>> 0 > 16777215) {
       i27 = 31;
      } else {
       i6 = (i16 + 1048320 | 0) >>> 16 & 8;
       i8 = i16 << i6;
       i16 = (i8 + 520192 | 0) >>> 16 & 4;
       i13 = i8 << i16;
       i8 = (i13 + 245760 | 0) >>> 16 & 2;
       i4 = 14 - (i16 | i6 | i8) + (i13 << i8 >>> 15) | 0;
       i27 = i15 >>> (i4 + 7 | 0) & 1 | i4 << 1;
      }
     }
     i4 = HEAP32[14456 + (i27 << 2) >> 2] | 0;
     L126 : do {
      if ((i4 | 0) == 0) {
       i28 = i11;
       i29 = 0;
       i30 = 0;
      } else {
       if ((i27 | 0) == 31) {
        i31 = 0;
       } else {
        i31 = 25 - (i27 >>> 1) | 0;
       }
       i8 = i11;
       i13 = 0;
       i6 = i15 << i31;
       i16 = i4;
       i7 = 0;
       while (1) {
        i10 = HEAP32[i16 + 4 >> 2] & -8;
        i32 = i10 - i15 | 0;
        if (i32 >>> 0 < i8 >>> 0) {
         if ((i10 | 0) == (i15 | 0)) {
          i28 = i32;
          i29 = i16;
          i30 = i16;
          break L126;
         } else {
          i33 = i32;
          i34 = i16;
         }
        } else {
         i33 = i8;
         i34 = i7;
        }
        i32 = HEAP32[i16 + 20 >> 2] | 0;
        i10 = HEAP32[i16 + (i6 >>> 31 << 2) + 16 >> 2] | 0;
        i35 = (i32 | 0) == 0 | (i32 | 0) == (i10 | 0) ? i13 : i32;
        if ((i10 | 0) == 0) {
         i28 = i33;
         i29 = i35;
         i30 = i34;
         break;
        } else {
         i8 = i33;
         i13 = i35;
         i6 = i6 << 1;
         i16 = i10;
         i7 = i34;
        }
       }
      }
     } while (0);
     if ((i29 | 0) == 0 & (i30 | 0) == 0) {
      i4 = 2 << i27;
      i11 = i17 & (i4 | 0 - i4);
      if ((i11 | 0) == 0) {
       i20 = i15;
       break;
      }
      i4 = (i11 & 0 - i11) + -1 | 0;
      i11 = i4 >>> 12 & 16;
      i5 = i4 >>> i11;
      i4 = i5 >>> 5 & 8;
      i9 = i5 >>> i4;
      i5 = i9 >>> 2 & 4;
      i12 = i9 >>> i5;
      i9 = i12 >>> 1 & 2;
      i7 = i12 >>> i9;
      i12 = i7 >>> 1 & 1;
      i36 = HEAP32[14456 + ((i4 | i11 | i5 | i9 | i12) + (i7 >>> i12) << 2) >> 2] | 0;
     } else {
      i36 = i29;
     }
     if ((i36 | 0) == 0) {
      i37 = i28;
      i38 = i30;
     } else {
      i12 = i28;
      i7 = i36;
      i9 = i30;
      while (1) {
       i5 = (HEAP32[i7 + 4 >> 2] & -8) - i15 | 0;
       i11 = i5 >>> 0 < i12 >>> 0;
       i4 = i11 ? i5 : i12;
       i5 = i11 ? i7 : i9;
       i11 = HEAP32[i7 + 16 >> 2] | 0;
       if ((i11 | 0) != 0) {
        i12 = i4;
        i7 = i11;
        i9 = i5;
        continue;
       }
       i11 = HEAP32[i7 + 20 >> 2] | 0;
       if ((i11 | 0) == 0) {
        i37 = i4;
        i38 = i5;
        break;
       } else {
        i12 = i4;
        i7 = i11;
        i9 = i5;
       }
      }
     }
     if ((i38 | 0) == 0) {
      i20 = i15;
     } else {
      if (i37 >>> 0 < ((HEAP32[14160 >> 2] | 0) - i15 | 0) >>> 0) {
       i9 = HEAP32[14168 >> 2] | 0;
       if (i38 >>> 0 < i9 >>> 0) {
        _abort();
       }
       i7 = i38 + i15 | 0;
       if (!(i38 >>> 0 < i7 >>> 0)) {
        _abort();
       }
       i12 = HEAP32[i38 + 24 >> 2] | 0;
       i17 = HEAP32[i38 + 12 >> 2] | 0;
       do {
        if ((i17 | 0) == (i38 | 0)) {
         i5 = i38 + 20 | 0;
         i11 = HEAP32[i5 >> 2] | 0;
         if ((i11 | 0) == 0) {
          i4 = i38 + 16 | 0;
          i16 = HEAP32[i4 >> 2] | 0;
          if ((i16 | 0) == 0) {
           i39 = 0;
           break;
          } else {
           i40 = i16;
           i41 = i4;
          }
         } else {
          i40 = i11;
          i41 = i5;
         }
         while (1) {
          i5 = i40 + 20 | 0;
          i11 = HEAP32[i5 >> 2] | 0;
          if ((i11 | 0) != 0) {
           i40 = i11;
           i41 = i5;
           continue;
          }
          i5 = i40 + 16 | 0;
          i11 = HEAP32[i5 >> 2] | 0;
          if ((i11 | 0) == 0) {
           break;
          } else {
           i40 = i11;
           i41 = i5;
          }
         }
         if (i41 >>> 0 < i9 >>> 0) {
          _abort();
         } else {
          HEAP32[i41 >> 2] = 0;
          i39 = i40;
          break;
         }
        } else {
         i5 = HEAP32[i38 + 8 >> 2] | 0;
         if (i5 >>> 0 < i9 >>> 0) {
          _abort();
         }
         i11 = i5 + 12 | 0;
         if ((HEAP32[i11 >> 2] | 0) != (i38 | 0)) {
          _abort();
         }
         i4 = i17 + 8 | 0;
         if ((HEAP32[i4 >> 2] | 0) == (i38 | 0)) {
          HEAP32[i11 >> 2] = i17;
          HEAP32[i4 >> 2] = i5;
          i39 = i17;
          break;
         } else {
          _abort();
         }
        }
       } while (0);
       do {
        if ((i12 | 0) != 0) {
         i17 = HEAP32[i38 + 28 >> 2] | 0;
         i9 = 14456 + (i17 << 2) | 0;
         if ((i38 | 0) == (HEAP32[i9 >> 2] | 0)) {
          HEAP32[i9 >> 2] = i39;
          if ((i39 | 0) == 0) {
           HEAP32[14156 >> 2] = HEAP32[14156 >> 2] & ~(1 << i17);
           break;
          }
         } else {
          if (i12 >>> 0 < (HEAP32[14168 >> 2] | 0) >>> 0) {
           _abort();
          }
          i17 = i12 + 16 | 0;
          if ((HEAP32[i17 >> 2] | 0) == (i38 | 0)) {
           HEAP32[i17 >> 2] = i39;
          } else {
           HEAP32[i12 + 20 >> 2] = i39;
          }
          if ((i39 | 0) == 0) {
           break;
          }
         }
         if (i39 >>> 0 < (HEAP32[14168 >> 2] | 0) >>> 0) {
          _abort();
         }
         HEAP32[i39 + 24 >> 2] = i12;
         i17 = HEAP32[i38 + 16 >> 2] | 0;
         do {
          if ((i17 | 0) != 0) {
           if (i17 >>> 0 < (HEAP32[14168 >> 2] | 0) >>> 0) {
            _abort();
           } else {
            HEAP32[i39 + 16 >> 2] = i17;
            HEAP32[i17 + 24 >> 2] = i39;
            break;
           }
          }
         } while (0);
         i17 = HEAP32[i38 + 20 >> 2] | 0;
         if ((i17 | 0) != 0) {
          if (i17 >>> 0 < (HEAP32[14168 >> 2] | 0) >>> 0) {
           _abort();
          } else {
           HEAP32[i39 + 20 >> 2] = i17;
           HEAP32[i17 + 24 >> 2] = i39;
           break;
          }
         }
        }
       } while (0);
       L204 : do {
        if (i37 >>> 0 < 16) {
         i12 = i37 + i15 | 0;
         HEAP32[i38 + 4 >> 2] = i12 | 3;
         i17 = i38 + (i12 + 4) | 0;
         HEAP32[i17 >> 2] = HEAP32[i17 >> 2] | 1;
        } else {
         HEAP32[i38 + 4 >> 2] = i15 | 3;
         HEAP32[i38 + (i15 | 4) >> 2] = i37 | 1;
         HEAP32[i38 + (i37 + i15) >> 2] = i37;
         i17 = i37 >>> 3;
         if (i37 >>> 0 < 256) {
          i12 = i17 << 1;
          i9 = 14192 + (i12 << 2) | 0;
          i5 = HEAP32[3538] | 0;
          i4 = 1 << i17;
          if ((i5 & i4 | 0) == 0) {
           HEAP32[3538] = i5 | i4;
           i42 = 14192 + (i12 + 2 << 2) | 0;
           i43 = i9;
          } else {
           i4 = 14192 + (i12 + 2 << 2) | 0;
           i12 = HEAP32[i4 >> 2] | 0;
           if (i12 >>> 0 < (HEAP32[14168 >> 2] | 0) >>> 0) {
            _abort();
           } else {
            i42 = i4;
            i43 = i12;
           }
          }
          HEAP32[i42 >> 2] = i7;
          HEAP32[i43 + 12 >> 2] = i7;
          HEAP32[i38 + (i15 + 8) >> 2] = i43;
          HEAP32[i38 + (i15 + 12) >> 2] = i9;
          break;
         }
         i9 = i37 >>> 8;
         if ((i9 | 0) == 0) {
          i44 = 0;
         } else {
          if (i37 >>> 0 > 16777215) {
           i44 = 31;
          } else {
           i12 = (i9 + 1048320 | 0) >>> 16 & 8;
           i4 = i9 << i12;
           i9 = (i4 + 520192 | 0) >>> 16 & 4;
           i5 = i4 << i9;
           i4 = (i5 + 245760 | 0) >>> 16 & 2;
           i17 = 14 - (i9 | i12 | i4) + (i5 << i4 >>> 15) | 0;
           i44 = i37 >>> (i17 + 7 | 0) & 1 | i17 << 1;
          }
         }
         i17 = 14456 + (i44 << 2) | 0;
         HEAP32[i38 + (i15 + 28) >> 2] = i44;
         HEAP32[i38 + (i15 + 20) >> 2] = 0;
         HEAP32[i38 + (i15 + 16) >> 2] = 0;
         i4 = HEAP32[14156 >> 2] | 0;
         i5 = 1 << i44;
         if ((i4 & i5 | 0) == 0) {
          HEAP32[14156 >> 2] = i4 | i5;
          HEAP32[i17 >> 2] = i7;
          HEAP32[i38 + (i15 + 24) >> 2] = i17;
          HEAP32[i38 + (i15 + 12) >> 2] = i7;
          HEAP32[i38 + (i15 + 8) >> 2] = i7;
          break;
         }
         i5 = HEAP32[i17 >> 2] | 0;
         if ((i44 | 0) == 31) {
          i45 = 0;
         } else {
          i45 = 25 - (i44 >>> 1) | 0;
         }
         L225 : do {
          if ((HEAP32[i5 + 4 >> 2] & -8 | 0) == (i37 | 0)) {
           i46 = i5;
          } else {
           i17 = i37 << i45;
           i4 = i5;
           while (1) {
            i47 = i4 + (i17 >>> 31 << 2) + 16 | 0;
            i12 = HEAP32[i47 >> 2] | 0;
            if ((i12 | 0) == 0) {
             break;
            }
            if ((HEAP32[i12 + 4 >> 2] & -8 | 0) == (i37 | 0)) {
             i46 = i12;
             break L225;
            } else {
             i17 = i17 << 1;
             i4 = i12;
            }
           }
           if (i47 >>> 0 < (HEAP32[14168 >> 2] | 0) >>> 0) {
            _abort();
           } else {
            HEAP32[i47 >> 2] = i7;
            HEAP32[i38 + (i15 + 24) >> 2] = i4;
            HEAP32[i38 + (i15 + 12) >> 2] = i7;
            HEAP32[i38 + (i15 + 8) >> 2] = i7;
            break L204;
           }
          }
         } while (0);
         i5 = i46 + 8 | 0;
         i17 = HEAP32[i5 >> 2] | 0;
         i12 = HEAP32[14168 >> 2] | 0;
         if (i46 >>> 0 < i12 >>> 0) {
          _abort();
         }
         if (i17 >>> 0 < i12 >>> 0) {
          _abort();
         } else {
          HEAP32[i17 + 12 >> 2] = i7;
          HEAP32[i5 >> 2] = i7;
          HEAP32[i38 + (i15 + 8) >> 2] = i17;
          HEAP32[i38 + (i15 + 12) >> 2] = i46;
          HEAP32[i38 + (i15 + 24) >> 2] = 0;
          break;
         }
        }
       } while (0);
       i14 = i38 + 8 | 0;
       STACKTOP = i2;
       return i14 | 0;
      } else {
       i20 = i15;
      }
     }
    }
   }
  }
 } while (0);
 i38 = HEAP32[14160 >> 2] | 0;
 if (!(i20 >>> 0 > i38 >>> 0)) {
  i46 = i38 - i20 | 0;
  i47 = HEAP32[14172 >> 2] | 0;
  if (i46 >>> 0 > 15) {
   HEAP32[14172 >> 2] = i47 + i20;
   HEAP32[14160 >> 2] = i46;
   HEAP32[i47 + (i20 + 4) >> 2] = i46 | 1;
   HEAP32[i47 + i38 >> 2] = i46;
   HEAP32[i47 + 4 >> 2] = i20 | 3;
  } else {
   HEAP32[14160 >> 2] = 0;
   HEAP32[14172 >> 2] = 0;
   HEAP32[i47 + 4 >> 2] = i38 | 3;
   i46 = i47 + (i38 + 4) | 0;
   HEAP32[i46 >> 2] = HEAP32[i46 >> 2] | 1;
  }
  i14 = i47 + 8 | 0;
  STACKTOP = i2;
  return i14 | 0;
 }
 i47 = HEAP32[14164 >> 2] | 0;
 if (i20 >>> 0 < i47 >>> 0) {
  i46 = i47 - i20 | 0;
  HEAP32[14164 >> 2] = i46;
  i47 = HEAP32[14176 >> 2] | 0;
  HEAP32[14176 >> 2] = i47 + i20;
  HEAP32[i47 + (i20 + 4) >> 2] = i46 | 1;
  HEAP32[i47 + 4 >> 2] = i20 | 3;
  i14 = i47 + 8 | 0;
  STACKTOP = i2;
  return i14 | 0;
 }
 do {
  if ((HEAP32[3656] | 0) == 0) {
   i47 = _sysconf(30) | 0;
   if ((i47 + -1 & i47 | 0) == 0) {
    HEAP32[14632 >> 2] = i47;
    HEAP32[14628 >> 2] = i47;
    HEAP32[14636 >> 2] = -1;
    HEAP32[14640 >> 2] = -1;
    HEAP32[14644 >> 2] = 0;
    HEAP32[14596 >> 2] = 0;
    HEAP32[3656] = (_time(0) | 0) & -16 ^ 1431655768;
    break;
   } else {
    _abort();
   }
  }
 } while (0);
 i47 = i20 + 48 | 0;
 i46 = HEAP32[14632 >> 2] | 0;
 i38 = i20 + 47 | 0;
 i37 = i46 + i38 | 0;
 i45 = 0 - i46 | 0;
 i46 = i37 & i45;
 if (!(i46 >>> 0 > i20 >>> 0)) {
  i14 = 0;
  STACKTOP = i2;
  return i14 | 0;
 }
 i44 = HEAP32[14592 >> 2] | 0;
 if ((i44 | 0) != 0) {
  i43 = HEAP32[14584 >> 2] | 0;
  i42 = i43 + i46 | 0;
  if (i42 >>> 0 <= i43 >>> 0 | i42 >>> 0 > i44 >>> 0) {
   i14 = 0;
   STACKTOP = i2;
   return i14 | 0;
  }
 }
 L269 : do {
  if ((HEAP32[14596 >> 2] & 4 | 0) == 0) {
   i44 = HEAP32[14176 >> 2] | 0;
   L271 : do {
    if ((i44 | 0) == 0) {
     i48 = 182;
    } else {
     i42 = 14600 | 0;
     while (1) {
      i43 = HEAP32[i42 >> 2] | 0;
      if (!(i43 >>> 0 > i44 >>> 0)) {
       i49 = i42 + 4 | 0;
       if ((i43 + (HEAP32[i49 >> 2] | 0) | 0) >>> 0 > i44 >>> 0) {
        break;
       }
      }
      i43 = HEAP32[i42 + 8 >> 2] | 0;
      if ((i43 | 0) == 0) {
       i48 = 182;
       break L271;
      } else {
       i42 = i43;
      }
     }
     if ((i42 | 0) == 0) {
      i48 = 182;
     } else {
      i43 = i37 - (HEAP32[14164 >> 2] | 0) & i45;
      if (i43 >>> 0 < 2147483647) {
       i39 = _sbrk(i43 | 0) | 0;
       i40 = (i39 | 0) == ((HEAP32[i42 >> 2] | 0) + (HEAP32[i49 >> 2] | 0) | 0);
       i50 = i39;
       i51 = i43;
       i52 = i40 ? i39 : -1;
       i53 = i40 ? i43 : 0;
       i48 = 191;
      } else {
       i54 = 0;
      }
     }
    }
   } while (0);
   do {
    if ((i48 | 0) == 182) {
     i44 = _sbrk(0) | 0;
     if ((i44 | 0) == (-1 | 0)) {
      i54 = 0;
     } else {
      i15 = i44;
      i43 = HEAP32[14628 >> 2] | 0;
      i40 = i43 + -1 | 0;
      if ((i40 & i15 | 0) == 0) {
       i55 = i46;
      } else {
       i55 = i46 - i15 + (i40 + i15 & 0 - i43) | 0;
      }
      i43 = HEAP32[14584 >> 2] | 0;
      i15 = i43 + i55 | 0;
      if (i55 >>> 0 > i20 >>> 0 & i55 >>> 0 < 2147483647) {
       i40 = HEAP32[14592 >> 2] | 0;
       if ((i40 | 0) != 0) {
        if (i15 >>> 0 <= i43 >>> 0 | i15 >>> 0 > i40 >>> 0) {
         i54 = 0;
         break;
        }
       }
       i40 = _sbrk(i55 | 0) | 0;
       i15 = (i40 | 0) == (i44 | 0);
       i50 = i40;
       i51 = i55;
       i52 = i15 ? i44 : -1;
       i53 = i15 ? i55 : 0;
       i48 = 191;
      } else {
       i54 = 0;
      }
     }
    }
   } while (0);
   L291 : do {
    if ((i48 | 0) == 191) {
     i15 = 0 - i51 | 0;
     if ((i52 | 0) != (-1 | 0)) {
      i56 = i52;
      i57 = i53;
      i48 = 202;
      break L269;
     }
     do {
      if ((i50 | 0) != (-1 | 0) & i51 >>> 0 < 2147483647 & i51 >>> 0 < i47 >>> 0) {
       i44 = HEAP32[14632 >> 2] | 0;
       i40 = i38 - i51 + i44 & 0 - i44;
       if (i40 >>> 0 < 2147483647) {
        if ((_sbrk(i40 | 0) | 0) == (-1 | 0)) {
         _sbrk(i15 | 0) | 0;
         i54 = i53;
         break L291;
        } else {
         i58 = i40 + i51 | 0;
         break;
        }
       } else {
        i58 = i51;
       }
      } else {
       i58 = i51;
      }
     } while (0);
     if ((i50 | 0) == (-1 | 0)) {
      i54 = i53;
     } else {
      i56 = i50;
      i57 = i58;
      i48 = 202;
      break L269;
     }
    }
   } while (0);
   HEAP32[14596 >> 2] = HEAP32[14596 >> 2] | 4;
   i59 = i54;
   i48 = 199;
  } else {
   i59 = 0;
   i48 = 199;
  }
 } while (0);
 if ((i48 | 0) == 199) {
  if (i46 >>> 0 < 2147483647) {
   i54 = _sbrk(i46 | 0) | 0;
   i46 = _sbrk(0) | 0;
   if ((i46 | 0) != (-1 | 0) & (i54 | 0) != (-1 | 0) & i54 >>> 0 < i46 >>> 0) {
    i58 = i46 - i54 | 0;
    i46 = i58 >>> 0 > (i20 + 40 | 0) >>> 0;
    if (i46) {
     i56 = i54;
     i57 = i46 ? i58 : i59;
     i48 = 202;
    }
   }
  }
 }
 if ((i48 | 0) == 202) {
  i59 = (HEAP32[14584 >> 2] | 0) + i57 | 0;
  HEAP32[14584 >> 2] = i59;
  if (i59 >>> 0 > (HEAP32[14588 >> 2] | 0) >>> 0) {
   HEAP32[14588 >> 2] = i59;
  }
  i59 = HEAP32[14176 >> 2] | 0;
  L311 : do {
   if ((i59 | 0) == 0) {
    i58 = HEAP32[14168 >> 2] | 0;
    if ((i58 | 0) == 0 | i56 >>> 0 < i58 >>> 0) {
     HEAP32[14168 >> 2] = i56;
    }
    HEAP32[14600 >> 2] = i56;
    HEAP32[14604 >> 2] = i57;
    HEAP32[14612 >> 2] = 0;
    HEAP32[14188 >> 2] = HEAP32[3656];
    HEAP32[14184 >> 2] = -1;
    i58 = 0;
    do {
     i46 = i58 << 1;
     i54 = 14192 + (i46 << 2) | 0;
     HEAP32[14192 + (i46 + 3 << 2) >> 2] = i54;
     HEAP32[14192 + (i46 + 2 << 2) >> 2] = i54;
     i58 = i58 + 1 | 0;
    } while ((i58 | 0) != 32);
    i58 = i56 + 8 | 0;
    if ((i58 & 7 | 0) == 0) {
     i60 = 0;
    } else {
     i60 = 0 - i58 & 7;
    }
    i58 = i57 + -40 - i60 | 0;
    HEAP32[14176 >> 2] = i56 + i60;
    HEAP32[14164 >> 2] = i58;
    HEAP32[i56 + (i60 + 4) >> 2] = i58 | 1;
    HEAP32[i56 + (i57 + -36) >> 2] = 40;
    HEAP32[14180 >> 2] = HEAP32[14640 >> 2];
   } else {
    i58 = 14600 | 0;
    while (1) {
     i61 = HEAP32[i58 >> 2] | 0;
     i62 = i58 + 4 | 0;
     i63 = HEAP32[i62 >> 2] | 0;
     if ((i56 | 0) == (i61 + i63 | 0)) {
      i48 = 214;
      break;
     }
     i54 = HEAP32[i58 + 8 >> 2] | 0;
     if ((i54 | 0) == 0) {
      break;
     } else {
      i58 = i54;
     }
    }
    if ((i48 | 0) == 214) {
     if ((HEAP32[i58 + 12 >> 2] & 8 | 0) == 0) {
      if (i59 >>> 0 >= i61 >>> 0 & i59 >>> 0 < i56 >>> 0) {
       HEAP32[i62 >> 2] = i63 + i57;
       i54 = (HEAP32[14164 >> 2] | 0) + i57 | 0;
       i46 = i59 + 8 | 0;
       if ((i46 & 7 | 0) == 0) {
        i64 = 0;
       } else {
        i64 = 0 - i46 & 7;
       }
       i46 = i54 - i64 | 0;
       HEAP32[14176 >> 2] = i59 + i64;
       HEAP32[14164 >> 2] = i46;
       HEAP32[i59 + (i64 + 4) >> 2] = i46 | 1;
       HEAP32[i59 + (i54 + 4) >> 2] = 40;
       HEAP32[14180 >> 2] = HEAP32[14640 >> 2];
       break;
      }
     }
    }
    if (i56 >>> 0 < (HEAP32[14168 >> 2] | 0) >>> 0) {
     HEAP32[14168 >> 2] = i56;
    }
    i54 = i56 + i57 | 0;
    i46 = 14600 | 0;
    while (1) {
     if ((HEAP32[i46 >> 2] | 0) == (i54 | 0)) {
      i48 = 224;
      break;
     }
     i50 = HEAP32[i46 + 8 >> 2] | 0;
     if ((i50 | 0) == 0) {
      break;
     } else {
      i46 = i50;
     }
    }
    if ((i48 | 0) == 224) {
     if ((HEAP32[i46 + 12 >> 2] & 8 | 0) == 0) {
      HEAP32[i46 >> 2] = i56;
      i54 = i46 + 4 | 0;
      HEAP32[i54 >> 2] = (HEAP32[i54 >> 2] | 0) + i57;
      i54 = i56 + 8 | 0;
      if ((i54 & 7 | 0) == 0) {
       i65 = 0;
      } else {
       i65 = 0 - i54 & 7;
      }
      i54 = i56 + (i57 + 8) | 0;
      if ((i54 & 7 | 0) == 0) {
       i66 = 0;
      } else {
       i66 = 0 - i54 & 7;
      }
      i54 = i56 + (i66 + i57) | 0;
      i58 = i65 + i20 | 0;
      i50 = i56 + i58 | 0;
      i53 = i54 - (i56 + i65) - i20 | 0;
      HEAP32[i56 + (i65 + 4) >> 2] = i20 | 3;
      L348 : do {
       if ((i54 | 0) == (HEAP32[14176 >> 2] | 0)) {
        i51 = (HEAP32[14164 >> 2] | 0) + i53 | 0;
        HEAP32[14164 >> 2] = i51;
        HEAP32[14176 >> 2] = i50;
        HEAP32[i56 + (i58 + 4) >> 2] = i51 | 1;
       } else {
        if ((i54 | 0) == (HEAP32[14172 >> 2] | 0)) {
         i51 = (HEAP32[14160 >> 2] | 0) + i53 | 0;
         HEAP32[14160 >> 2] = i51;
         HEAP32[14172 >> 2] = i50;
         HEAP32[i56 + (i58 + 4) >> 2] = i51 | 1;
         HEAP32[i56 + (i51 + i58) >> 2] = i51;
         break;
        }
        i51 = i57 + 4 | 0;
        i38 = HEAP32[i56 + (i51 + i66) >> 2] | 0;
        if ((i38 & 3 | 0) == 1) {
         i47 = i38 & -8;
         i52 = i38 >>> 3;
         do {
          if (i38 >>> 0 < 256) {
           i55 = HEAP32[i56 + ((i66 | 8) + i57) >> 2] | 0;
           i49 = HEAP32[i56 + (i57 + 12 + i66) >> 2] | 0;
           i45 = 14192 + (i52 << 1 << 2) | 0;
           if ((i55 | 0) != (i45 | 0)) {
            if (i55 >>> 0 < (HEAP32[14168 >> 2] | 0) >>> 0) {
             _abort();
            }
            if ((HEAP32[i55 + 12 >> 2] | 0) != (i54 | 0)) {
             _abort();
            }
           }
           if ((i49 | 0) == (i55 | 0)) {
            HEAP32[3538] = HEAP32[3538] & ~(1 << i52);
            break;
           }
           if ((i49 | 0) == (i45 | 0)) {
            i67 = i49 + 8 | 0;
           } else {
            if (i49 >>> 0 < (HEAP32[14168 >> 2] | 0) >>> 0) {
             _abort();
            }
            i45 = i49 + 8 | 0;
            if ((HEAP32[i45 >> 2] | 0) == (i54 | 0)) {
             i67 = i45;
            } else {
             _abort();
            }
           }
           HEAP32[i55 + 12 >> 2] = i49;
           HEAP32[i67 >> 2] = i55;
          } else {
           i55 = HEAP32[i56 + ((i66 | 24) + i57) >> 2] | 0;
           i49 = HEAP32[i56 + (i57 + 12 + i66) >> 2] | 0;
           do {
            if ((i49 | 0) == (i54 | 0)) {
             i45 = i66 | 16;
             i37 = i56 + (i51 + i45) | 0;
             i15 = HEAP32[i37 >> 2] | 0;
             if ((i15 | 0) == 0) {
              i42 = i56 + (i45 + i57) | 0;
              i45 = HEAP32[i42 >> 2] | 0;
              if ((i45 | 0) == 0) {
               i68 = 0;
               break;
              } else {
               i69 = i45;
               i70 = i42;
              }
             } else {
              i69 = i15;
              i70 = i37;
             }
             while (1) {
              i37 = i69 + 20 | 0;
              i15 = HEAP32[i37 >> 2] | 0;
              if ((i15 | 0) != 0) {
               i69 = i15;
               i70 = i37;
               continue;
              }
              i37 = i69 + 16 | 0;
              i15 = HEAP32[i37 >> 2] | 0;
              if ((i15 | 0) == 0) {
               break;
              } else {
               i69 = i15;
               i70 = i37;
              }
             }
             if (i70 >>> 0 < (HEAP32[14168 >> 2] | 0) >>> 0) {
              _abort();
             } else {
              HEAP32[i70 >> 2] = 0;
              i68 = i69;
              break;
             }
            } else {
             i37 = HEAP32[i56 + ((i66 | 8) + i57) >> 2] | 0;
             if (i37 >>> 0 < (HEAP32[14168 >> 2] | 0) >>> 0) {
              _abort();
             }
             i15 = i37 + 12 | 0;
             if ((HEAP32[i15 >> 2] | 0) != (i54 | 0)) {
              _abort();
             }
             i42 = i49 + 8 | 0;
             if ((HEAP32[i42 >> 2] | 0) == (i54 | 0)) {
              HEAP32[i15 >> 2] = i49;
              HEAP32[i42 >> 2] = i37;
              i68 = i49;
              break;
             } else {
              _abort();
             }
            }
           } while (0);
           if ((i55 | 0) != 0) {
            i49 = HEAP32[i56 + (i57 + 28 + i66) >> 2] | 0;
            i4 = 14456 + (i49 << 2) | 0;
            if ((i54 | 0) == (HEAP32[i4 >> 2] | 0)) {
             HEAP32[i4 >> 2] = i68;
             if ((i68 | 0) == 0) {
              HEAP32[14156 >> 2] = HEAP32[14156 >> 2] & ~(1 << i49);
              break;
             }
            } else {
             if (i55 >>> 0 < (HEAP32[14168 >> 2] | 0) >>> 0) {
              _abort();
             }
             i49 = i55 + 16 | 0;
             if ((HEAP32[i49 >> 2] | 0) == (i54 | 0)) {
              HEAP32[i49 >> 2] = i68;
             } else {
              HEAP32[i55 + 20 >> 2] = i68;
             }
             if ((i68 | 0) == 0) {
              break;
             }
            }
            if (i68 >>> 0 < (HEAP32[14168 >> 2] | 0) >>> 0) {
             _abort();
            }
            HEAP32[i68 + 24 >> 2] = i55;
            i49 = i66 | 16;
            i4 = HEAP32[i56 + (i49 + i57) >> 2] | 0;
            do {
             if ((i4 | 0) != 0) {
              if (i4 >>> 0 < (HEAP32[14168 >> 2] | 0) >>> 0) {
               _abort();
              } else {
               HEAP32[i68 + 16 >> 2] = i4;
               HEAP32[i4 + 24 >> 2] = i68;
               break;
              }
             }
            } while (0);
            i4 = HEAP32[i56 + (i51 + i49) >> 2] | 0;
            if ((i4 | 0) != 0) {
             if (i4 >>> 0 < (HEAP32[14168 >> 2] | 0) >>> 0) {
              _abort();
             } else {
              HEAP32[i68 + 20 >> 2] = i4;
              HEAP32[i4 + 24 >> 2] = i68;
              break;
             }
            }
           }
          }
         } while (0);
         i71 = i56 + ((i47 | i66) + i57) | 0;
         i72 = i47 + i53 | 0;
        } else {
         i71 = i54;
         i72 = i53;
        }
        i51 = i71 + 4 | 0;
        HEAP32[i51 >> 2] = HEAP32[i51 >> 2] & -2;
        HEAP32[i56 + (i58 + 4) >> 2] = i72 | 1;
        HEAP32[i56 + (i72 + i58) >> 2] = i72;
        i51 = i72 >>> 3;
        if (i72 >>> 0 < 256) {
         i52 = i51 << 1;
         i38 = 14192 + (i52 << 2) | 0;
         i4 = HEAP32[3538] | 0;
         i55 = 1 << i51;
         if ((i4 & i55 | 0) == 0) {
          HEAP32[3538] = i4 | i55;
          i73 = 14192 + (i52 + 2 << 2) | 0;
          i74 = i38;
         } else {
          i55 = 14192 + (i52 + 2 << 2) | 0;
          i52 = HEAP32[i55 >> 2] | 0;
          if (i52 >>> 0 < (HEAP32[14168 >> 2] | 0) >>> 0) {
           _abort();
          } else {
           i73 = i55;
           i74 = i52;
          }
         }
         HEAP32[i73 >> 2] = i50;
         HEAP32[i74 + 12 >> 2] = i50;
         HEAP32[i56 + (i58 + 8) >> 2] = i74;
         HEAP32[i56 + (i58 + 12) >> 2] = i38;
         break;
        }
        i38 = i72 >>> 8;
        if ((i38 | 0) == 0) {
         i75 = 0;
        } else {
         if (i72 >>> 0 > 16777215) {
          i75 = 31;
         } else {
          i52 = (i38 + 1048320 | 0) >>> 16 & 8;
          i55 = i38 << i52;
          i38 = (i55 + 520192 | 0) >>> 16 & 4;
          i4 = i55 << i38;
          i55 = (i4 + 245760 | 0) >>> 16 & 2;
          i51 = 14 - (i38 | i52 | i55) + (i4 << i55 >>> 15) | 0;
          i75 = i72 >>> (i51 + 7 | 0) & 1 | i51 << 1;
         }
        }
        i51 = 14456 + (i75 << 2) | 0;
        HEAP32[i56 + (i58 + 28) >> 2] = i75;
        HEAP32[i56 + (i58 + 20) >> 2] = 0;
        HEAP32[i56 + (i58 + 16) >> 2] = 0;
        i55 = HEAP32[14156 >> 2] | 0;
        i4 = 1 << i75;
        if ((i55 & i4 | 0) == 0) {
         HEAP32[14156 >> 2] = i55 | i4;
         HEAP32[i51 >> 2] = i50;
         HEAP32[i56 + (i58 + 24) >> 2] = i51;
         HEAP32[i56 + (i58 + 12) >> 2] = i50;
         HEAP32[i56 + (i58 + 8) >> 2] = i50;
         break;
        }
        i4 = HEAP32[i51 >> 2] | 0;
        if ((i75 | 0) == 31) {
         i76 = 0;
        } else {
         i76 = 25 - (i75 >>> 1) | 0;
        }
        L445 : do {
         if ((HEAP32[i4 + 4 >> 2] & -8 | 0) == (i72 | 0)) {
          i77 = i4;
         } else {
          i51 = i72 << i76;
          i55 = i4;
          while (1) {
           i78 = i55 + (i51 >>> 31 << 2) + 16 | 0;
           i52 = HEAP32[i78 >> 2] | 0;
           if ((i52 | 0) == 0) {
            break;
           }
           if ((HEAP32[i52 + 4 >> 2] & -8 | 0) == (i72 | 0)) {
            i77 = i52;
            break L445;
           } else {
            i51 = i51 << 1;
            i55 = i52;
           }
          }
          if (i78 >>> 0 < (HEAP32[14168 >> 2] | 0) >>> 0) {
           _abort();
          } else {
           HEAP32[i78 >> 2] = i50;
           HEAP32[i56 + (i58 + 24) >> 2] = i55;
           HEAP32[i56 + (i58 + 12) >> 2] = i50;
           HEAP32[i56 + (i58 + 8) >> 2] = i50;
           break L348;
          }
         }
        } while (0);
        i4 = i77 + 8 | 0;
        i47 = HEAP32[i4 >> 2] | 0;
        i51 = HEAP32[14168 >> 2] | 0;
        if (i77 >>> 0 < i51 >>> 0) {
         _abort();
        }
        if (i47 >>> 0 < i51 >>> 0) {
         _abort();
        } else {
         HEAP32[i47 + 12 >> 2] = i50;
         HEAP32[i4 >> 2] = i50;
         HEAP32[i56 + (i58 + 8) >> 2] = i47;
         HEAP32[i56 + (i58 + 12) >> 2] = i77;
         HEAP32[i56 + (i58 + 24) >> 2] = 0;
         break;
        }
       }
      } while (0);
      i14 = i56 + (i65 | 8) | 0;
      STACKTOP = i2;
      return i14 | 0;
     }
    }
    i58 = 14600 | 0;
    while (1) {
     i79 = HEAP32[i58 >> 2] | 0;
     if (!(i79 >>> 0 > i59 >>> 0)) {
      i80 = HEAP32[i58 + 4 >> 2] | 0;
      i81 = i79 + i80 | 0;
      if (i81 >>> 0 > i59 >>> 0) {
       break;
      }
     }
     i58 = HEAP32[i58 + 8 >> 2] | 0;
    }
    i58 = i79 + (i80 + -39) | 0;
    if ((i58 & 7 | 0) == 0) {
     i82 = 0;
    } else {
     i82 = 0 - i58 & 7;
    }
    i58 = i79 + (i80 + -47 + i82) | 0;
    i50 = i58 >>> 0 < (i59 + 16 | 0) >>> 0 ? i59 : i58;
    i58 = i50 + 8 | 0;
    i53 = i56 + 8 | 0;
    if ((i53 & 7 | 0) == 0) {
     i83 = 0;
    } else {
     i83 = 0 - i53 & 7;
    }
    i53 = i57 + -40 - i83 | 0;
    HEAP32[14176 >> 2] = i56 + i83;
    HEAP32[14164 >> 2] = i53;
    HEAP32[i56 + (i83 + 4) >> 2] = i53 | 1;
    HEAP32[i56 + (i57 + -36) >> 2] = 40;
    HEAP32[14180 >> 2] = HEAP32[14640 >> 2];
    HEAP32[i50 + 4 >> 2] = 27;
    HEAP32[i58 + 0 >> 2] = HEAP32[14600 >> 2];
    HEAP32[i58 + 4 >> 2] = HEAP32[14604 >> 2];
    HEAP32[i58 + 8 >> 2] = HEAP32[14608 >> 2];
    HEAP32[i58 + 12 >> 2] = HEAP32[14612 >> 2];
    HEAP32[14600 >> 2] = i56;
    HEAP32[14604 >> 2] = i57;
    HEAP32[14612 >> 2] = 0;
    HEAP32[14608 >> 2] = i58;
    i58 = i50 + 28 | 0;
    HEAP32[i58 >> 2] = 7;
    if ((i50 + 32 | 0) >>> 0 < i81 >>> 0) {
     i53 = i58;
     while (1) {
      i58 = i53 + 4 | 0;
      HEAP32[i58 >> 2] = 7;
      if ((i53 + 8 | 0) >>> 0 < i81 >>> 0) {
       i53 = i58;
      } else {
       break;
      }
     }
    }
    if ((i50 | 0) != (i59 | 0)) {
     i53 = i50 - i59 | 0;
     i58 = i59 + (i53 + 4) | 0;
     HEAP32[i58 >> 2] = HEAP32[i58 >> 2] & -2;
     HEAP32[i59 + 4 >> 2] = i53 | 1;
     HEAP32[i59 + i53 >> 2] = i53;
     i58 = i53 >>> 3;
     if (i53 >>> 0 < 256) {
      i54 = i58 << 1;
      i46 = 14192 + (i54 << 2) | 0;
      i47 = HEAP32[3538] | 0;
      i4 = 1 << i58;
      if ((i47 & i4 | 0) == 0) {
       HEAP32[3538] = i47 | i4;
       i84 = 14192 + (i54 + 2 << 2) | 0;
       i85 = i46;
      } else {
       i4 = 14192 + (i54 + 2 << 2) | 0;
       i54 = HEAP32[i4 >> 2] | 0;
       if (i54 >>> 0 < (HEAP32[14168 >> 2] | 0) >>> 0) {
        _abort();
       } else {
        i84 = i4;
        i85 = i54;
       }
      }
      HEAP32[i84 >> 2] = i59;
      HEAP32[i85 + 12 >> 2] = i59;
      HEAP32[i59 + 8 >> 2] = i85;
      HEAP32[i59 + 12 >> 2] = i46;
      break;
     }
     i46 = i53 >>> 8;
     if ((i46 | 0) == 0) {
      i86 = 0;
     } else {
      if (i53 >>> 0 > 16777215) {
       i86 = 31;
      } else {
       i54 = (i46 + 1048320 | 0) >>> 16 & 8;
       i4 = i46 << i54;
       i46 = (i4 + 520192 | 0) >>> 16 & 4;
       i47 = i4 << i46;
       i4 = (i47 + 245760 | 0) >>> 16 & 2;
       i58 = 14 - (i46 | i54 | i4) + (i47 << i4 >>> 15) | 0;
       i86 = i53 >>> (i58 + 7 | 0) & 1 | i58 << 1;
      }
     }
     i58 = 14456 + (i86 << 2) | 0;
     HEAP32[i59 + 28 >> 2] = i86;
     HEAP32[i59 + 20 >> 2] = 0;
     HEAP32[i59 + 16 >> 2] = 0;
     i4 = HEAP32[14156 >> 2] | 0;
     i47 = 1 << i86;
     if ((i4 & i47 | 0) == 0) {
      HEAP32[14156 >> 2] = i4 | i47;
      HEAP32[i58 >> 2] = i59;
      HEAP32[i59 + 24 >> 2] = i58;
      HEAP32[i59 + 12 >> 2] = i59;
      HEAP32[i59 + 8 >> 2] = i59;
      break;
     }
     i47 = HEAP32[i58 >> 2] | 0;
     if ((i86 | 0) == 31) {
      i87 = 0;
     } else {
      i87 = 25 - (i86 >>> 1) | 0;
     }
     L499 : do {
      if ((HEAP32[i47 + 4 >> 2] & -8 | 0) == (i53 | 0)) {
       i88 = i47;
      } else {
       i58 = i53 << i87;
       i4 = i47;
       while (1) {
        i89 = i4 + (i58 >>> 31 << 2) + 16 | 0;
        i54 = HEAP32[i89 >> 2] | 0;
        if ((i54 | 0) == 0) {
         break;
        }
        if ((HEAP32[i54 + 4 >> 2] & -8 | 0) == (i53 | 0)) {
         i88 = i54;
         break L499;
        } else {
         i58 = i58 << 1;
         i4 = i54;
        }
       }
       if (i89 >>> 0 < (HEAP32[14168 >> 2] | 0) >>> 0) {
        _abort();
       } else {
        HEAP32[i89 >> 2] = i59;
        HEAP32[i59 + 24 >> 2] = i4;
        HEAP32[i59 + 12 >> 2] = i59;
        HEAP32[i59 + 8 >> 2] = i59;
        break L311;
       }
      }
     } while (0);
     i53 = i88 + 8 | 0;
     i47 = HEAP32[i53 >> 2] | 0;
     i50 = HEAP32[14168 >> 2] | 0;
     if (i88 >>> 0 < i50 >>> 0) {
      _abort();
     }
     if (i47 >>> 0 < i50 >>> 0) {
      _abort();
     } else {
      HEAP32[i47 + 12 >> 2] = i59;
      HEAP32[i53 >> 2] = i59;
      HEAP32[i59 + 8 >> 2] = i47;
      HEAP32[i59 + 12 >> 2] = i88;
      HEAP32[i59 + 24 >> 2] = 0;
      break;
     }
    }
   }
  } while (0);
  i59 = HEAP32[14164 >> 2] | 0;
  if (i59 >>> 0 > i20 >>> 0) {
   i88 = i59 - i20 | 0;
   HEAP32[14164 >> 2] = i88;
   i59 = HEAP32[14176 >> 2] | 0;
   HEAP32[14176 >> 2] = i59 + i20;
   HEAP32[i59 + (i20 + 4) >> 2] = i88 | 1;
   HEAP32[i59 + 4 >> 2] = i20 | 3;
   i14 = i59 + 8 | 0;
   STACKTOP = i2;
   return i14 | 0;
  }
 }
 HEAP32[(___errno_location() | 0) >> 2] = 12;
 i14 = 0;
 STACKTOP = i2;
 return i14 | 0;
}
function __ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIcEERNS_10unique_ptrIcPFvPvEEERPcSM_(i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 i9 = i9 | 0;
 i10 = i10 | 0;
 i11 = i11 | 0;
 var i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0, i49 = 0, i50 = 0, i51 = 0, i52 = 0, i53 = 0, i54 = 0, i55 = 0, i56 = 0, i57 = 0, i58 = 0, i59 = 0, i60 = 0, i61 = 0, i62 = 0, i63 = 0, i64 = 0, i65 = 0, i66 = 0, i67 = 0, i68 = 0, i69 = 0, i70 = 0, i71 = 0, i72 = 0, i73 = 0, i74 = 0, i75 = 0, i76 = 0, i77 = 0, i78 = 0, i79 = 0, i80 = 0, i81 = 0, i82 = 0, i83 = 0, i84 = 0, i85 = 0, i86 = 0, i87 = 0, i88 = 0, i89 = 0, i90 = 0, i91 = 0, i92 = 0, i93 = 0, i94 = 0, i95 = 0, i96 = 0, i97 = 0, i98 = 0, i99 = 0, i100 = 0, i101 = 0, i102 = 0, i103 = 0, i104 = 0, i105 = 0, i106 = 0, i107 = 0, i108 = 0, i109 = 0, i110 = 0, i111 = 0, i112 = 0, i113 = 0, i114 = 0, i115 = 0, i116 = 0, i117 = 0, i118 = 0, i119 = 0, i120 = 0, i121 = 0, i122 = 0, i123 = 0, i124 = 0, i125 = 0, i126 = 0, i127 = 0, i128 = 0, i129 = 0, i130 = 0, i131 = 0, i132 = 0, i133 = 0, i134 = 0, i135 = 0, i136 = 0, i137 = 0, i138 = 0, i139 = 0, i140 = 0, i141 = 0, i142 = 0, i143 = 0, i144 = 0, i145 = 0, i146 = 0, i147 = 0, i148 = 0, i149 = 0, i150 = 0, i151 = 0, i152 = 0, i153 = 0, i154 = 0, i155 = 0, i156 = 0, i157 = 0, i158 = 0, i159 = 0, i160 = 0, i161 = 0, i162 = 0, i163 = 0, i164 = 0, i165 = 0, i166 = 0, i167 = 0, i168 = 0;
 i12 = STACKTOP;
 STACKTOP = STACKTOP + 480 | 0;
 i13 = i12 + 72 | 0;
 i14 = i12 + 68 | 0;
 i15 = i12 + 472 | 0;
 i16 = i12 + 473 | 0;
 i17 = i12 + 56 | 0;
 i18 = i12 + 44 | 0;
 i19 = i12 + 28 | 0;
 i20 = i12 + 16 | 0;
 i21 = i12 + 4 | 0;
 i22 = i12;
 i23 = i12 + 40 | 0;
 HEAP32[i14 >> 2] = 0;
 HEAP32[i17 + 0 >> 2] = 0;
 HEAP32[i17 + 4 >> 2] = 0;
 HEAP32[i17 + 8 >> 2] = 0;
 HEAP32[i18 + 0 >> 2] = 0;
 HEAP32[i18 + 4 >> 2] = 0;
 HEAP32[i18 + 8 >> 2] = 0;
 HEAP32[i19 + 0 >> 2] = 0;
 HEAP32[i19 + 4 >> 2] = 0;
 HEAP32[i19 + 8 >> 2] = 0;
 HEAP32[i20 + 0 >> 2] = 0;
 HEAP32[i20 + 4 >> 2] = 0;
 HEAP32[i20 + 8 >> 2] = 0;
 HEAP32[i21 + 0 >> 2] = 0;
 HEAP32[i21 + 4 >> 2] = 0;
 HEAP32[i21 + 8 >> 2] = 0;
 __ZNSt3__111__money_getIcE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_SF_Ri(i3, i4, i14, i15, i16, i17, i18, i19, i20, i22);
 HEAP32[i10 >> 2] = HEAP32[i9 >> 2];
 i4 = i8 + 8 | 0;
 i8 = i20 + 1 | 0;
 i3 = i20 + 4 | 0;
 i24 = i20 + 8 | 0;
 i25 = i19 + 1 | 0;
 i26 = i19 + 4 | 0;
 i27 = i19 + 8 | 0;
 i28 = (i5 & 512 | 0) != 0;
 i5 = i18 + 1 | 0;
 i29 = i18 + 8 | 0;
 i30 = i18 + 4 | 0;
 i31 = i21 + 1 | 0;
 i32 = i21 + 8 | 0;
 i33 = i21 + 4 | 0;
 i34 = i14 + 3 | 0;
 i35 = i9 + 4 | 0;
 i36 = i17 + 4 | 0;
 i37 = i13 + 400 | 0;
 i38 = i13;
 i39 = i13;
 i13 = i11;
 i11 = 0;
 i40 = 0;
 i41 = 120;
 L1 : while (1) {
  i42 = HEAP32[i1 >> 2] | 0;
  do {
   if ((i42 | 0) == 0) {
    i43 = 0;
   } else {
    if ((HEAP32[i42 + 12 >> 2] | 0) == (HEAP32[i42 + 16 >> 2] | 0)) {
     if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i42 >> 2] | 0) + 36 >> 2] & 127](i42) | 0) == -1) {
      HEAP32[i1 >> 2] = 0;
      i43 = 0;
      break;
     } else {
      i43 = HEAP32[i1 >> 2] | 0;
      break;
     }
    } else {
     i43 = i42;
    }
   }
  } while (0);
  i42 = (i43 | 0) == 0;
  i44 = HEAP32[i2 >> 2] | 0;
  do {
   if ((i44 | 0) == 0) {
    i45 = 12;
   } else {
    if ((HEAP32[i44 + 12 >> 2] | 0) != (HEAP32[i44 + 16 >> 2] | 0)) {
     if (i42) {
      i46 = i44;
      break;
     } else {
      i47 = i39;
      i48 = i38;
      i49 = i40;
      i50 = i41;
      i45 = 269;
      break L1;
     }
    }
    if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i44 >> 2] | 0) + 36 >> 2] & 127](i44) | 0) == -1) {
     HEAP32[i2 >> 2] = 0;
     i45 = 12;
     break;
    } else {
     if (i42) {
      i46 = i44;
      break;
     } else {
      i47 = i39;
      i48 = i38;
      i49 = i40;
      i50 = i41;
      i45 = 269;
      break L1;
     }
    }
   }
  } while (0);
  if ((i45 | 0) == 12) {
   i45 = 0;
   if (i42) {
    i47 = i39;
    i48 = i38;
    i49 = i40;
    i50 = i41;
    i45 = 269;
    break;
   } else {
    i46 = 0;
   }
  }
  L21 : do {
   switch (HEAP8[i14 + i11 | 0] | 0) {
   case 0:
    {
     i45 = 26;
     break;
    }
   case 1:
    {
     if ((i11 | 0) == 3) {
      i47 = i39;
      i48 = i38;
      i49 = i40;
      i50 = i41;
      i45 = 269;
      break L1;
     }
     i44 = HEAP32[i1 >> 2] | 0;
     i51 = HEAP32[i44 + 12 >> 2] | 0;
     if ((i51 | 0) == (HEAP32[i44 + 16 >> 2] | 0)) {
      i52 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i44 >> 2] | 0) + 36 >> 2] & 127](i44) | 0;
     } else {
      i52 = HEAPU8[i51] | 0;
     }
     if (!((i52 & 255) << 24 >> 24 > -1)) {
      i45 = 25;
      break L1;
     }
     if ((HEAP16[(HEAP32[i4 >> 2] | 0) + (i52 << 24 >> 24 << 1) >> 1] & 8192) == 0) {
      i45 = 25;
      break L1;
     }
     i51 = HEAP32[i1 >> 2] | 0;
     i44 = i51 + 12 | 0;
     i53 = HEAP32[i44 >> 2] | 0;
     if ((i53 | 0) == (HEAP32[i51 + 16 >> 2] | 0)) {
      i54 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i51 >> 2] | 0) + 40 >> 2] & 127](i51) | 0;
     } else {
      HEAP32[i44 >> 2] = i53 + 1;
      i54 = HEAPU8[i53] | 0;
     }
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc(i21, i54 & 255);
     i45 = 26;
     break;
    }
   case 3:
    {
     i53 = HEAP8[i19] | 0;
     i44 = (i53 & 1) == 0;
     if (i44) {
      i55 = (i53 & 255) >>> 1;
     } else {
      i55 = HEAP32[i26 >> 2] | 0;
     }
     i51 = HEAP8[i20] | 0;
     i56 = (i51 & 1) == 0;
     if (i56) {
      i57 = (i51 & 255) >>> 1;
     } else {
      i57 = HEAP32[i3 >> 2] | 0;
     }
     if ((i55 | 0) == (0 - i57 | 0)) {
      i58 = i13;
      i59 = i39;
      i60 = i38;
      i61 = i37;
      i62 = i40;
      i63 = i41;
     } else {
      if (i44) {
       i64 = (i53 & 255) >>> 1;
      } else {
       i64 = HEAP32[i26 >> 2] | 0;
      }
      if ((i64 | 0) != 0) {
       if (i56) {
        i65 = (i51 & 255) >>> 1;
       } else {
        i65 = HEAP32[i3 >> 2] | 0;
       }
       if ((i65 | 0) != 0) {
        i56 = HEAP32[i1 >> 2] | 0;
        i66 = HEAP32[i56 + 12 >> 2] | 0;
        i67 = HEAP32[i56 + 16 >> 2] | 0;
        if ((i66 | 0) == (i67 | 0)) {
         i68 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i56 >> 2] | 0) + 36 >> 2] & 127](i56) | 0;
         i69 = HEAP32[i1 >> 2] | 0;
         i70 = i68;
         i71 = HEAP8[i19] | 0;
         i72 = i69;
         i73 = HEAP32[i69 + 12 >> 2] | 0;
         i74 = HEAP32[i69 + 16 >> 2] | 0;
        } else {
         i70 = HEAPU8[i66] | 0;
         i71 = i53;
         i72 = i56;
         i73 = i66;
         i74 = i67;
        }
        i67 = i72 + 12 | 0;
        i66 = (i73 | 0) == (i74 | 0);
        if ((i70 & 255) << 24 >> 24 == (HEAP8[(i71 & 1) == 0 ? i25 : HEAP32[i27 >> 2] | 0] | 0)) {
         if (i66) {
          FUNCTION_TABLE_ii[HEAP32[(HEAP32[i72 >> 2] | 0) + 40 >> 2] & 127](i72) | 0;
         } else {
          HEAP32[i67 >> 2] = i73 + 1;
         }
         i67 = HEAP8[i19] | 0;
         if ((i67 & 1) == 0) {
          i75 = (i67 & 255) >>> 1;
         } else {
          i75 = HEAP32[i26 >> 2] | 0;
         }
         i58 = i13;
         i59 = i39;
         i60 = i38;
         i61 = i37;
         i62 = i75 >>> 0 > 1 ? i19 : i40;
         i63 = i41;
         break L21;
        }
        if (i66) {
         i76 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i72 >> 2] | 0) + 36 >> 2] & 127](i72) | 0;
        } else {
         i76 = HEAPU8[i73] | 0;
        }
        if (!((i76 & 255) << 24 >> 24 == (HEAP8[(HEAP8[i20] & 1) == 0 ? i8 : HEAP32[i24 >> 2] | 0] | 0))) {
         i45 = 112;
         break L1;
        }
        i66 = HEAP32[i1 >> 2] | 0;
        i67 = i66 + 12 | 0;
        i56 = HEAP32[i67 >> 2] | 0;
        if ((i56 | 0) == (HEAP32[i66 + 16 >> 2] | 0)) {
         FUNCTION_TABLE_ii[HEAP32[(HEAP32[i66 >> 2] | 0) + 40 >> 2] & 127](i66) | 0;
        } else {
         HEAP32[i67 >> 2] = i56 + 1;
        }
        HEAP8[i7] = 1;
        i56 = HEAP8[i20] | 0;
        if ((i56 & 1) == 0) {
         i77 = (i56 & 255) >>> 1;
        } else {
         i77 = HEAP32[i3 >> 2] | 0;
        }
        i58 = i13;
        i59 = i39;
        i60 = i38;
        i61 = i37;
        i62 = i77 >>> 0 > 1 ? i20 : i40;
        i63 = i41;
        break L21;
       }
      }
      if (i44) {
       i78 = (i53 & 255) >>> 1;
      } else {
       i78 = HEAP32[i26 >> 2] | 0;
      }
      i44 = HEAP32[i1 >> 2] | 0;
      i56 = HEAP32[i44 + 12 >> 2] | 0;
      i67 = (i56 | 0) == (HEAP32[i44 + 16 >> 2] | 0);
      if ((i78 | 0) == 0) {
       if (i67) {
        i66 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i44 >> 2] | 0) + 36 >> 2] & 127](i44) | 0;
        i79 = i66;
        i80 = HEAP8[i20] | 0;
       } else {
        i79 = HEAPU8[i56] | 0;
        i80 = i51;
       }
       if (!((i79 & 255) << 24 >> 24 == (HEAP8[(i80 & 1) == 0 ? i8 : HEAP32[i24 >> 2] | 0] | 0))) {
        i58 = i13;
        i59 = i39;
        i60 = i38;
        i61 = i37;
        i62 = i40;
        i63 = i41;
        break L21;
       }
       i51 = HEAP32[i1 >> 2] | 0;
       i66 = i51 + 12 | 0;
       i69 = HEAP32[i66 >> 2] | 0;
       if ((i69 | 0) == (HEAP32[i51 + 16 >> 2] | 0)) {
        FUNCTION_TABLE_ii[HEAP32[(HEAP32[i51 >> 2] | 0) + 40 >> 2] & 127](i51) | 0;
       } else {
        HEAP32[i66 >> 2] = i69 + 1;
       }
       HEAP8[i7] = 1;
       i69 = HEAP8[i20] | 0;
       if ((i69 & 1) == 0) {
        i81 = (i69 & 255) >>> 1;
       } else {
        i81 = HEAP32[i3 >> 2] | 0;
       }
       i58 = i13;
       i59 = i39;
       i60 = i38;
       i61 = i37;
       i62 = i81 >>> 0 > 1 ? i20 : i40;
       i63 = i41;
       break L21;
      }
      if (i67) {
       i67 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i44 >> 2] | 0) + 36 >> 2] & 127](i44) | 0;
       i82 = i67;
       i83 = HEAP8[i19] | 0;
      } else {
       i82 = HEAPU8[i56] | 0;
       i83 = i53;
      }
      if (!((i82 & 255) << 24 >> 24 == (HEAP8[(i83 & 1) == 0 ? i25 : HEAP32[i27 >> 2] | 0] | 0))) {
       HEAP8[i7] = 1;
       i58 = i13;
       i59 = i39;
       i60 = i38;
       i61 = i37;
       i62 = i40;
       i63 = i41;
       break L21;
      }
      i53 = HEAP32[i1 >> 2] | 0;
      i56 = i53 + 12 | 0;
      i67 = HEAP32[i56 >> 2] | 0;
      if ((i67 | 0) == (HEAP32[i53 + 16 >> 2] | 0)) {
       FUNCTION_TABLE_ii[HEAP32[(HEAP32[i53 >> 2] | 0) + 40 >> 2] & 127](i53) | 0;
      } else {
       HEAP32[i56 >> 2] = i67 + 1;
      }
      i67 = HEAP8[i19] | 0;
      if ((i67 & 1) == 0) {
       i84 = (i67 & 255) >>> 1;
      } else {
       i84 = HEAP32[i26 >> 2] | 0;
      }
      i58 = i13;
      i59 = i39;
      i60 = i38;
      i61 = i37;
      i62 = i84 >>> 0 > 1 ? i19 : i40;
      i63 = i41;
     }
     break;
    }
   case 2:
    {
     if (!((i40 | 0) != 0 | i11 >>> 0 < 2)) {
      if ((i11 | 0) == 2) {
       i85 = (HEAP8[i34] | 0) != 0;
      } else {
       i85 = 0;
      }
      if (!(i28 | i85)) {
       i58 = i13;
       i59 = i39;
       i60 = i38;
       i61 = i37;
       i62 = 0;
       i63 = i41;
       break L21;
      }
     }
     i67 = HEAP8[i18] | 0;
     i56 = (i67 & 1) == 0;
     i53 = i56 ? i5 : HEAP32[i29 >> 2] | 0;
     L126 : do {
      if ((i11 | 0) == 0) {
       i86 = i46;
       i87 = i67;
       i88 = i53;
       i89 = i46;
      } else {
       if ((HEAPU8[i14 + (i11 + -1) | 0] | 0) < 2) {
        i44 = i53 + (i56 ? (i67 & 255) >>> 1 : HEAP32[i30 >> 2] | 0) | 0;
        i69 = i53;
        while (1) {
         if ((i69 | 0) == (i44 | 0)) {
          i90 = i44;
          break;
         }
         i66 = HEAP8[i69] | 0;
         if (!(i66 << 24 >> 24 > -1)) {
          i90 = i69;
          break;
         }
         if ((HEAP16[(HEAP32[i4 >> 2] | 0) + (i66 << 24 >> 24 << 1) >> 1] & 8192) == 0) {
          i90 = i69;
          break;
         } else {
          i69 = i69 + 1 | 0;
         }
        }
        i69 = i90 - i53 | 0;
        i44 = HEAP8[i21] | 0;
        i66 = (i44 & 1) == 0;
        if (i66) {
         i91 = (i44 & 255) >>> 1;
        } else {
         i91 = HEAP32[i33 >> 2] | 0;
        }
        if (i69 >>> 0 > i91 >>> 0) {
         i86 = i46;
         i87 = i67;
         i88 = i53;
         i89 = i46;
        } else {
         if (i66) {
          i66 = (i44 & 255) >>> 1;
          i92 = i31;
          i93 = i66;
          i94 = i21 + (i66 - i69) + 1 | 0;
         } else {
          i66 = HEAP32[i32 >> 2] | 0;
          i44 = HEAP32[i33 >> 2] | 0;
          i92 = i66;
          i93 = i44;
          i94 = i66 + (i44 - i69) | 0;
         }
         i69 = i92 + i93 | 0;
         if ((i94 | 0) == (i69 | 0)) {
          i86 = i46;
          i87 = i67;
          i88 = i90;
          i89 = i46;
         } else {
          i44 = i94;
          i66 = i53;
          while (1) {
           if ((HEAP8[i44] | 0) != (HEAP8[i66] | 0)) {
            i86 = i46;
            i87 = i67;
            i88 = i53;
            i89 = i46;
            break L126;
           }
           i51 = i44 + 1 | 0;
           if ((i51 | 0) == (i69 | 0)) {
            i86 = i46;
            i87 = i67;
            i88 = i90;
            i89 = i46;
            break;
           } else {
            i44 = i51;
            i66 = i66 + 1 | 0;
           }
          }
         }
        }
       } else {
        i86 = i46;
        i87 = i67;
        i88 = i53;
        i89 = i46;
       }
      }
     } while (0);
     L146 : while (1) {
      if ((i87 & 1) == 0) {
       i95 = i5;
       i96 = (i87 & 255) >>> 1;
      } else {
       i95 = HEAP32[i29 >> 2] | 0;
       i96 = HEAP32[i30 >> 2] | 0;
      }
      if ((i88 | 0) == (i95 + i96 | 0)) {
       break;
      }
      i53 = HEAP32[i1 >> 2] | 0;
      do {
       if ((i53 | 0) == 0) {
        i97 = 0;
       } else {
        if ((HEAP32[i53 + 12 >> 2] | 0) == (HEAP32[i53 + 16 >> 2] | 0)) {
         if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i53 >> 2] | 0) + 36 >> 2] & 127](i53) | 0) == -1) {
          HEAP32[i1 >> 2] = 0;
          i97 = 0;
          break;
         } else {
          i97 = HEAP32[i1 >> 2] | 0;
          break;
         }
        } else {
         i97 = i53;
        }
       }
      } while (0);
      i53 = (i97 | 0) == 0;
      do {
       if ((i89 | 0) == 0) {
        i98 = i86;
        i45 = 147;
       } else {
        if ((HEAP32[i89 + 12 >> 2] | 0) != (HEAP32[i89 + 16 >> 2] | 0)) {
         if (i53) {
          i99 = i86;
          i100 = i89;
          break;
         } else {
          break L146;
         }
        }
        if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i89 >> 2] | 0) + 36 >> 2] & 127](i89) | 0) == -1) {
         HEAP32[i2 >> 2] = 0;
         i98 = 0;
         i45 = 147;
         break;
        } else {
         if (i53 ^ (i86 | 0) == 0) {
          i99 = i86;
          i100 = i86;
          break;
         } else {
          break L146;
         }
        }
       }
      } while (0);
      if ((i45 | 0) == 147) {
       i45 = 0;
       if (i53) {
        break;
       } else {
        i99 = i98;
        i100 = 0;
       }
      }
      i67 = HEAP32[i1 >> 2] | 0;
      i56 = HEAP32[i67 + 12 >> 2] | 0;
      if ((i56 | 0) == (HEAP32[i67 + 16 >> 2] | 0)) {
       i101 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i67 >> 2] | 0) + 36 >> 2] & 127](i67) | 0;
      } else {
       i101 = HEAPU8[i56] | 0;
      }
      if (!((i101 & 255) << 24 >> 24 == (HEAP8[i88] | 0))) {
       break;
      }
      i56 = HEAP32[i1 >> 2] | 0;
      i67 = i56 + 12 | 0;
      i66 = HEAP32[i67 >> 2] | 0;
      if ((i66 | 0) == (HEAP32[i56 + 16 >> 2] | 0)) {
       FUNCTION_TABLE_ii[HEAP32[(HEAP32[i56 >> 2] | 0) + 40 >> 2] & 127](i56) | 0;
      } else {
       HEAP32[i67 >> 2] = i66 + 1;
      }
      i86 = i99;
      i87 = HEAP8[i18] | 0;
      i88 = i88 + 1 | 0;
      i89 = i100;
     }
     if (i28) {
      i66 = HEAP8[i18] | 0;
      if ((i66 & 1) == 0) {
       i102 = i5;
       i103 = (i66 & 255) >>> 1;
      } else {
       i102 = HEAP32[i29 >> 2] | 0;
       i103 = HEAP32[i30 >> 2] | 0;
      }
      if ((i88 | 0) == (i102 + i103 | 0)) {
       i58 = i13;
       i59 = i39;
       i60 = i38;
       i61 = i37;
       i62 = i40;
       i63 = i41;
      } else {
       i45 = 162;
       break L1;
      }
     } else {
      i58 = i13;
      i59 = i39;
      i60 = i38;
      i61 = i37;
      i62 = i40;
      i63 = i41;
     }
     break;
    }
   case 4:
    {
     i66 = i13;
     i67 = i38;
     i56 = i37;
     i44 = i39;
     i69 = 0;
     i51 = i41;
     L186 : while (1) {
      i68 = HEAP32[i1 >> 2] | 0;
      do {
       if ((i68 | 0) == 0) {
        i104 = 0;
       } else {
        if ((HEAP32[i68 + 12 >> 2] | 0) == (HEAP32[i68 + 16 >> 2] | 0)) {
         if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i68 >> 2] | 0) + 36 >> 2] & 127](i68) | 0) == -1) {
          HEAP32[i1 >> 2] = 0;
          i104 = 0;
          break;
         } else {
          i104 = HEAP32[i1 >> 2] | 0;
          break;
         }
        } else {
         i104 = i68;
        }
       }
      } while (0);
      i68 = (i104 | 0) == 0;
      i53 = HEAP32[i2 >> 2] | 0;
      do {
       if ((i53 | 0) == 0) {
        i45 = 173;
       } else {
        if ((HEAP32[i53 + 12 >> 2] | 0) != (HEAP32[i53 + 16 >> 2] | 0)) {
         if (i68) {
          break;
         } else {
          break L186;
         }
        }
        if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i53 >> 2] | 0) + 36 >> 2] & 127](i53) | 0) == -1) {
         HEAP32[i2 >> 2] = 0;
         i45 = 173;
         break;
        } else {
         if (i68) {
          break;
         } else {
          break L186;
         }
        }
       }
      } while (0);
      if ((i45 | 0) == 173) {
       i45 = 0;
       if (i68) {
        break;
       }
      }
      i53 = HEAP32[i1 >> 2] | 0;
      i105 = HEAP32[i53 + 12 >> 2] | 0;
      if ((i105 | 0) == (HEAP32[i53 + 16 >> 2] | 0)) {
       i106 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i53 >> 2] | 0) + 36 >> 2] & 127](i53) | 0;
      } else {
       i106 = HEAPU8[i105] | 0;
      }
      i105 = i106 & 255;
      if (i105 << 24 >> 24 > -1) {
       if ((HEAP16[(HEAP32[i4 >> 2] | 0) + (i106 << 24 >> 24 << 1) >> 1] & 2048) == 0) {
        i45 = 189;
       } else {
        i53 = HEAP32[i10 >> 2] | 0;
        if ((i53 | 0) == (i66 | 0)) {
         i107 = (HEAP32[i35 >> 2] | 0) != 120;
         i108 = HEAP32[i9 >> 2] | 0;
         i109 = i66 - i108 | 0;
         i110 = i109 >>> 0 < 2147483647 ? i109 << 1 : -1;
         i111 = _realloc(i107 ? i108 : 0, i110) | 0;
         if ((i111 | 0) == 0) {
          i45 = 182;
          break L1;
         }
         if (i107) {
          HEAP32[i9 >> 2] = i111;
          i112 = i111;
         } else {
          i107 = HEAP32[i9 >> 2] | 0;
          HEAP32[i9 >> 2] = i111;
          if ((i107 | 0) == 0) {
           i112 = i111;
          } else {
           FUNCTION_TABLE_vi[HEAP32[i35 >> 2] & 255](i107);
           i112 = HEAP32[i9 >> 2] | 0;
          }
         }
         HEAP32[i35 >> 2] = 121;
         i107 = i112 + i109 | 0;
         HEAP32[i10 >> 2] = i107;
         i113 = i107;
         i114 = (HEAP32[i9 >> 2] | 0) + i110 | 0;
        } else {
         i113 = i53;
         i114 = i66;
        }
        HEAP32[i10 >> 2] = i113 + 1;
        HEAP8[i113] = i105;
        i115 = i114;
        i116 = i44;
        i117 = i67;
        i118 = i56;
        i119 = i69 + 1 | 0;
        i120 = i51;
       }
      } else {
       i45 = 189;
      }
      if ((i45 | 0) == 189) {
       i45 = 0;
       i53 = HEAP8[i17] | 0;
       if ((i53 & 1) == 0) {
        i121 = (i53 & 255) >>> 1;
       } else {
        i121 = HEAP32[i36 >> 2] | 0;
       }
       if ((i121 | 0) == 0 | (i69 | 0) == 0) {
        break;
       }
       if (!(i105 << 24 >> 24 == (HEAP8[i16] | 0))) {
        break;
       }
       if ((i67 | 0) == (i56 | 0)) {
        i105 = i67 - i44 | 0;
        i53 = i105 >>> 0 < 2147483647 ? i105 << 1 : -1;
        if ((i51 | 0) == 120) {
         i122 = 0;
        } else {
         i122 = i44;
        }
        i110 = _realloc(i122, i53) | 0;
        if ((i110 | 0) == 0) {
         i45 = 198;
         break L1;
        }
        i123 = i110 + (i105 >> 2 << 2) | 0;
        i124 = i110;
        i125 = i110 + (i53 >>> 2 << 2) | 0;
        i126 = 121;
       } else {
        i123 = i67;
        i124 = i44;
        i125 = i56;
        i126 = i51;
       }
       HEAP32[i123 >> 2] = i69;
       i115 = i66;
       i116 = i124;
       i117 = i123 + 4 | 0;
       i118 = i125;
       i119 = 0;
       i120 = i126;
      }
      i53 = HEAP32[i1 >> 2] | 0;
      i110 = i53 + 12 | 0;
      i105 = HEAP32[i110 >> 2] | 0;
      if ((i105 | 0) == (HEAP32[i53 + 16 >> 2] | 0)) {
       FUNCTION_TABLE_ii[HEAP32[(HEAP32[i53 >> 2] | 0) + 40 >> 2] & 127](i53) | 0;
       i66 = i115;
       i67 = i117;
       i56 = i118;
       i44 = i116;
       i69 = i119;
       i51 = i120;
       continue;
      } else {
       HEAP32[i110 >> 2] = i105 + 1;
       i66 = i115;
       i67 = i117;
       i56 = i118;
       i44 = i116;
       i69 = i119;
       i51 = i120;
       continue;
      }
     }
     if ((i44 | 0) == (i67 | 0) | (i69 | 0) == 0) {
      i127 = i44;
      i128 = i67;
      i129 = i56;
      i130 = i51;
     } else {
      if ((i67 | 0) == (i56 | 0)) {
       i105 = i67 - i44 | 0;
       i110 = i105 >>> 0 < 2147483647 ? i105 << 1 : -1;
       if ((i51 | 0) == 120) {
        i131 = 0;
       } else {
        i131 = i44;
       }
       i53 = _realloc(i131, i110) | 0;
       if ((i53 | 0) == 0) {
        i45 = 209;
        break L1;
       }
       i132 = i53 + (i105 >> 2 << 2) | 0;
       i133 = i53;
       i134 = i53 + (i110 >>> 2 << 2) | 0;
       i135 = 121;
      } else {
       i132 = i67;
       i133 = i44;
       i134 = i56;
       i135 = i51;
      }
      HEAP32[i132 >> 2] = i69;
      i127 = i133;
      i128 = i132 + 4 | 0;
      i129 = i134;
      i130 = i135;
     }
     i110 = HEAP32[i22 >> 2] | 0;
     if ((i110 | 0) > 0) {
      i53 = HEAP32[i1 >> 2] | 0;
      do {
       if ((i53 | 0) == 0) {
        i136 = 0;
       } else {
        if ((HEAP32[i53 + 12 >> 2] | 0) == (HEAP32[i53 + 16 >> 2] | 0)) {
         if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i53 >> 2] | 0) + 36 >> 2] & 127](i53) | 0) == -1) {
          HEAP32[i1 >> 2] = 0;
          i136 = 0;
          break;
         } else {
          i136 = HEAP32[i1 >> 2] | 0;
          break;
         }
        } else {
         i136 = i53;
        }
       }
      } while (0);
      i53 = (i136 | 0) == 0;
      i69 = HEAP32[i2 >> 2] | 0;
      do {
       if ((i69 | 0) == 0) {
        i45 = 223;
       } else {
        if ((HEAP32[i69 + 12 >> 2] | 0) != (HEAP32[i69 + 16 >> 2] | 0)) {
         if (i53) {
          i137 = i69;
          break;
         } else {
          i45 = 229;
          break L1;
         }
        }
        if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i69 >> 2] | 0) + 36 >> 2] & 127](i69) | 0) == -1) {
         HEAP32[i2 >> 2] = 0;
         i45 = 223;
         break;
        } else {
         if (i53) {
          i137 = i69;
          break;
         } else {
          i45 = 229;
          break L1;
         }
        }
       }
      } while (0);
      if ((i45 | 0) == 223) {
       i45 = 0;
       if (i53) {
        i45 = 229;
        break L1;
       } else {
        i137 = 0;
       }
      }
      i69 = HEAP32[i1 >> 2] | 0;
      i51 = HEAP32[i69 + 12 >> 2] | 0;
      if ((i51 | 0) == (HEAP32[i69 + 16 >> 2] | 0)) {
       i138 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i69 >> 2] | 0) + 36 >> 2] & 127](i69) | 0;
      } else {
       i138 = HEAPU8[i51] | 0;
      }
      if (!((i138 & 255) << 24 >> 24 == (HEAP8[i15] | 0))) {
       i45 = 229;
       break L1;
      }
      i51 = HEAP32[i1 >> 2] | 0;
      i69 = i51 + 12 | 0;
      i56 = HEAP32[i69 >> 2] | 0;
      if ((i56 | 0) == (HEAP32[i51 + 16 >> 2] | 0)) {
       FUNCTION_TABLE_ii[HEAP32[(HEAP32[i51 >> 2] | 0) + 40 >> 2] & 127](i51) | 0;
       i139 = i137;
       i140 = i137;
       i141 = i66;
       i142 = i110;
      } else {
       HEAP32[i69 >> 2] = i56 + 1;
       i139 = i137;
       i140 = i137;
       i141 = i66;
       i142 = i110;
      }
      while (1) {
       i56 = HEAP32[i1 >> 2] | 0;
       do {
        if ((i56 | 0) == 0) {
         i143 = 0;
        } else {
         if ((HEAP32[i56 + 12 >> 2] | 0) == (HEAP32[i56 + 16 >> 2] | 0)) {
          if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i56 >> 2] | 0) + 36 >> 2] & 127](i56) | 0) == -1) {
           HEAP32[i1 >> 2] = 0;
           i143 = 0;
           break;
          } else {
           i143 = HEAP32[i1 >> 2] | 0;
           break;
          }
         } else {
          i143 = i56;
         }
        }
       } while (0);
       i56 = (i143 | 0) == 0;
       do {
        if ((i140 | 0) == 0) {
         i144 = i139;
         i45 = 243;
        } else {
         if ((HEAP32[i140 + 12 >> 2] | 0) != (HEAP32[i140 + 16 >> 2] | 0)) {
          if (i56) {
           i145 = i139;
           i146 = i140;
           break;
          } else {
           i45 = 250;
           break L1;
          }
         }
         if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i140 >> 2] | 0) + 36 >> 2] & 127](i140) | 0) == -1) {
          HEAP32[i2 >> 2] = 0;
          i144 = 0;
          i45 = 243;
          break;
         } else {
          if (i56 ^ (i139 | 0) == 0) {
           i145 = i139;
           i146 = i139;
           break;
          } else {
           i45 = 250;
           break L1;
          }
         }
        }
       } while (0);
       if ((i45 | 0) == 243) {
        i45 = 0;
        if (i56) {
         i45 = 250;
         break L1;
        } else {
         i145 = i144;
         i146 = 0;
        }
       }
       i68 = HEAP32[i1 >> 2] | 0;
       i69 = HEAP32[i68 + 12 >> 2] | 0;
       if ((i69 | 0) == (HEAP32[i68 + 16 >> 2] | 0)) {
        i147 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i68 >> 2] | 0) + 36 >> 2] & 127](i68) | 0;
       } else {
        i147 = HEAPU8[i69] | 0;
       }
       if (!((i147 & 255) << 24 >> 24 > -1)) {
        i45 = 250;
        break L1;
       }
       if ((HEAP16[(HEAP32[i4 >> 2] | 0) + (i147 << 24 >> 24 << 1) >> 1] & 2048) == 0) {
        i45 = 250;
        break L1;
       }
       i69 = HEAP32[i10 >> 2] | 0;
       if ((i69 | 0) == (i141 | 0)) {
        i68 = (HEAP32[i35 >> 2] | 0) != 120;
        i51 = HEAP32[i9 >> 2] | 0;
        i44 = i141 - i51 | 0;
        i67 = i44 >>> 0 < 2147483647 ? i44 << 1 : -1;
        i105 = _realloc(i68 ? i51 : 0, i67) | 0;
        if ((i105 | 0) == 0) {
         i45 = 253;
         break L1;
        }
        if (i68) {
         HEAP32[i9 >> 2] = i105;
         i148 = i105;
        } else {
         i68 = HEAP32[i9 >> 2] | 0;
         HEAP32[i9 >> 2] = i105;
         if ((i68 | 0) == 0) {
          i148 = i105;
         } else {
          FUNCTION_TABLE_vi[HEAP32[i35 >> 2] & 255](i68);
          i148 = HEAP32[i9 >> 2] | 0;
         }
        }
        HEAP32[i35 >> 2] = 121;
        i68 = i148 + i44 | 0;
        HEAP32[i10 >> 2] = i68;
        i149 = i68;
        i150 = (HEAP32[i9 >> 2] | 0) + i67 | 0;
       } else {
        i149 = i69;
        i150 = i141;
       }
       i69 = HEAP32[i1 >> 2] | 0;
       i67 = HEAP32[i69 + 12 >> 2] | 0;
       if ((i67 | 0) == (HEAP32[i69 + 16 >> 2] | 0)) {
        i68 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i69 >> 2] | 0) + 36 >> 2] & 127](i69) | 0;
        i151 = i68;
        i152 = HEAP32[i10 >> 2] | 0;
       } else {
        i151 = HEAPU8[i67] | 0;
        i152 = i149;
       }
       HEAP32[i10 >> 2] = i152 + 1;
       HEAP8[i152] = i151;
       i67 = i142 + -1 | 0;
       HEAP32[i22 >> 2] = i67;
       i68 = HEAP32[i1 >> 2] | 0;
       i69 = i68 + 12 | 0;
       i44 = HEAP32[i69 >> 2] | 0;
       if ((i44 | 0) == (HEAP32[i68 + 16 >> 2] | 0)) {
        FUNCTION_TABLE_ii[HEAP32[(HEAP32[i68 >> 2] | 0) + 40 >> 2] & 127](i68) | 0;
       } else {
        HEAP32[i69 >> 2] = i44 + 1;
       }
       if ((i67 | 0) > 0) {
        i139 = i145;
        i140 = i146;
        i141 = i150;
        i142 = i67;
       } else {
        i153 = i150;
        break;
       }
      }
     } else {
      i153 = i66;
     }
     if ((HEAP32[i10 >> 2] | 0) == (HEAP32[i9 >> 2] | 0)) {
      i45 = 267;
      break L1;
     } else {
      i58 = i153;
      i59 = i127;
      i60 = i128;
      i61 = i129;
      i62 = i40;
      i63 = i130;
     }
     break;
    }
   default:
    {
     i58 = i13;
     i59 = i39;
     i60 = i38;
     i61 = i37;
     i62 = i40;
     i63 = i41;
    }
   }
  } while (0);
  L324 : do {
   if ((i45 | 0) == 26) {
    i45 = 0;
    if ((i11 | 0) == 3) {
     i47 = i39;
     i48 = i38;
     i49 = i40;
     i50 = i41;
     i45 = 269;
     break L1;
    } else {
     i154 = i46;
     i155 = i46;
    }
    while (1) {
     i42 = HEAP32[i1 >> 2] | 0;
     do {
      if ((i42 | 0) == 0) {
       i156 = 0;
      } else {
       if ((HEAP32[i42 + 12 >> 2] | 0) == (HEAP32[i42 + 16 >> 2] | 0)) {
        if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i42 >> 2] | 0) + 36 >> 2] & 127](i42) | 0) == -1) {
         HEAP32[i1 >> 2] = 0;
         i156 = 0;
         break;
        } else {
         i156 = HEAP32[i1 >> 2] | 0;
         break;
        }
       } else {
        i156 = i42;
       }
      }
     } while (0);
     i42 = (i156 | 0) == 0;
     do {
      if ((i155 | 0) == 0) {
       i157 = i154;
       i45 = 37;
      } else {
       if ((HEAP32[i155 + 12 >> 2] | 0) != (HEAP32[i155 + 16 >> 2] | 0)) {
        if (i42) {
         i158 = i154;
         i159 = i155;
         break;
        } else {
         i58 = i13;
         i59 = i39;
         i60 = i38;
         i61 = i37;
         i62 = i40;
         i63 = i41;
         break L324;
        }
       }
       if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i155 >> 2] | 0) + 36 >> 2] & 127](i155) | 0) == -1) {
        HEAP32[i2 >> 2] = 0;
        i157 = 0;
        i45 = 37;
        break;
       } else {
        if (i42 ^ (i154 | 0) == 0) {
         i158 = i154;
         i159 = i154;
         break;
        } else {
         i58 = i13;
         i59 = i39;
         i60 = i38;
         i61 = i37;
         i62 = i40;
         i63 = i41;
         break L324;
        }
       }
      }
     } while (0);
     if ((i45 | 0) == 37) {
      i45 = 0;
      if (i42) {
       i58 = i13;
       i59 = i39;
       i60 = i38;
       i61 = i37;
       i62 = i40;
       i63 = i41;
       break L324;
      } else {
       i158 = i157;
       i159 = 0;
      }
     }
     i56 = HEAP32[i1 >> 2] | 0;
     i110 = HEAP32[i56 + 12 >> 2] | 0;
     if ((i110 | 0) == (HEAP32[i56 + 16 >> 2] | 0)) {
      i160 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i56 >> 2] | 0) + 36 >> 2] & 127](i56) | 0;
     } else {
      i160 = HEAPU8[i110] | 0;
     }
     if (!((i160 & 255) << 24 >> 24 > -1)) {
      i58 = i13;
      i59 = i39;
      i60 = i38;
      i61 = i37;
      i62 = i40;
      i63 = i41;
      break L324;
     }
     if ((HEAP16[(HEAP32[i4 >> 2] | 0) + (i160 << 24 >> 24 << 1) >> 1] & 8192) == 0) {
      i58 = i13;
      i59 = i39;
      i60 = i38;
      i61 = i37;
      i62 = i40;
      i63 = i41;
      break L324;
     }
     i110 = HEAP32[i1 >> 2] | 0;
     i56 = i110 + 12 | 0;
     i53 = HEAP32[i56 >> 2] | 0;
     if ((i53 | 0) == (HEAP32[i110 + 16 >> 2] | 0)) {
      i161 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i110 >> 2] | 0) + 40 >> 2] & 127](i110) | 0;
     } else {
      HEAP32[i56 >> 2] = i53 + 1;
      i161 = HEAPU8[i53] | 0;
     }
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc(i21, i161 & 255);
     i154 = i158;
     i155 = i159;
    }
   }
  } while (0);
  i66 = i11 + 1 | 0;
  if (i66 >>> 0 < 4) {
   i37 = i61;
   i38 = i60;
   i39 = i59;
   i13 = i58;
   i11 = i66;
   i40 = i62;
   i41 = i63;
  } else {
   i47 = i59;
   i48 = i60;
   i49 = i62;
   i50 = i63;
   i45 = 269;
   break;
  }
 }
 L357 : do {
  if ((i45 | 0) == 25) {
   HEAP32[i6 >> 2] = HEAP32[i6 >> 2] | 4;
   i162 = 0;
   i163 = i39;
   i164 = i41;
  } else if ((i45 | 0) == 112) {
   HEAP32[i6 >> 2] = HEAP32[i6 >> 2] | 4;
   i162 = 0;
   i163 = i39;
   i164 = i41;
  } else if ((i45 | 0) == 162) {
   HEAP32[i6 >> 2] = HEAP32[i6 >> 2] | 4;
   i162 = 0;
   i163 = i39;
   i164 = i41;
  } else if ((i45 | 0) == 182) {
   __ZSt17__throw_bad_allocv();
  } else if ((i45 | 0) == 198) {
   __ZSt17__throw_bad_allocv();
  } else if ((i45 | 0) == 209) {
   __ZSt17__throw_bad_allocv();
  } else if ((i45 | 0) == 229) {
   HEAP32[i6 >> 2] = HEAP32[i6 >> 2] | 4;
   i162 = 0;
   i163 = i127;
   i164 = i130;
  } else if ((i45 | 0) == 250) {
   HEAP32[i6 >> 2] = HEAP32[i6 >> 2] | 4;
   i162 = 0;
   i163 = i127;
   i164 = i130;
  } else if ((i45 | 0) == 253) {
   __ZSt17__throw_bad_allocv();
  } else if ((i45 | 0) == 267) {
   HEAP32[i6 >> 2] = HEAP32[i6 >> 2] | 4;
   i162 = 0;
   i163 = i127;
   i164 = i130;
  } else if ((i45 | 0) == 269) {
   L363 : do {
    if ((i49 | 0) != 0) {
     i63 = i49 + 1 | 0;
     i62 = i49 + 8 | 0;
     i60 = i49 + 4 | 0;
     i59 = 1;
     L365 : while (1) {
      i40 = HEAP8[i49] | 0;
      if ((i40 & 1) == 0) {
       i165 = (i40 & 255) >>> 1;
      } else {
       i165 = HEAP32[i60 >> 2] | 0;
      }
      if (!(i59 >>> 0 < i165 >>> 0)) {
       break L363;
      }
      i40 = HEAP32[i1 >> 2] | 0;
      do {
       if ((i40 | 0) == 0) {
        i166 = 0;
       } else {
        if ((HEAP32[i40 + 12 >> 2] | 0) == (HEAP32[i40 + 16 >> 2] | 0)) {
         if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i40 >> 2] | 0) + 36 >> 2] & 127](i40) | 0) == -1) {
          HEAP32[i1 >> 2] = 0;
          i166 = 0;
          break;
         } else {
          i166 = HEAP32[i1 >> 2] | 0;
          break;
         }
        } else {
         i166 = i40;
        }
       }
      } while (0);
      i40 = (i166 | 0) == 0;
      i42 = HEAP32[i2 >> 2] | 0;
      do {
       if ((i42 | 0) == 0) {
        i45 = 285;
       } else {
        if ((HEAP32[i42 + 12 >> 2] | 0) != (HEAP32[i42 + 16 >> 2] | 0)) {
         if (i40) {
          break;
         } else {
          break L365;
         }
        }
        if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i42 >> 2] | 0) + 36 >> 2] & 127](i42) | 0) == -1) {
         HEAP32[i2 >> 2] = 0;
         i45 = 285;
         break;
        } else {
         if (i40) {
          break;
         } else {
          break L365;
         }
        }
       }
      } while (0);
      if ((i45 | 0) == 285) {
       i45 = 0;
       if (i40) {
        break;
       }
      }
      i42 = HEAP32[i1 >> 2] | 0;
      i11 = HEAP32[i42 + 12 >> 2] | 0;
      if ((i11 | 0) == (HEAP32[i42 + 16 >> 2] | 0)) {
       i167 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i42 >> 2] | 0) + 36 >> 2] & 127](i42) | 0;
      } else {
       i167 = HEAPU8[i11] | 0;
      }
      if ((HEAP8[i49] & 1) == 0) {
       i168 = i63;
      } else {
       i168 = HEAP32[i62 >> 2] | 0;
      }
      if (!((i167 & 255) << 24 >> 24 == (HEAP8[i168 + i59 | 0] | 0))) {
       break;
      }
      i11 = i59 + 1 | 0;
      i42 = HEAP32[i1 >> 2] | 0;
      i58 = i42 + 12 | 0;
      i13 = HEAP32[i58 >> 2] | 0;
      if ((i13 | 0) == (HEAP32[i42 + 16 >> 2] | 0)) {
       FUNCTION_TABLE_ii[HEAP32[(HEAP32[i42 >> 2] | 0) + 40 >> 2] & 127](i42) | 0;
       i59 = i11;
       continue;
      } else {
       HEAP32[i58 >> 2] = i13 + 1;
       i59 = i11;
       continue;
      }
     }
     HEAP32[i6 >> 2] = HEAP32[i6 >> 2] | 4;
     i162 = 0;
     i163 = i47;
     i164 = i50;
     break L357;
    }
   } while (0);
   if ((i47 | 0) == (i48 | 0)) {
    i162 = 1;
    i163 = i48;
    i164 = i50;
   } else {
    HEAP32[i23 >> 2] = 0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj(i17, i47, i48, i23);
    if ((HEAP32[i23 >> 2] | 0) == 0) {
     i162 = 1;
     i163 = i47;
     i164 = i50;
    } else {
     HEAP32[i6 >> 2] = HEAP32[i6 >> 2] | 4;
     i162 = 0;
     i163 = i47;
     i164 = i50;
    }
   }
  }
 } while (0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i21);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i20);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i19);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i18);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i17);
 if ((i163 | 0) == 0) {
  STACKTOP = i12;
  return i162 | 0;
 }
 FUNCTION_TABLE_vi[i164 & 255](i163);
 STACKTOP = i12;
 return i162 | 0;
}
function __ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIwEERNS_10unique_ptrIwPFvPvEEERPwSM_(i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 i9 = i9 | 0;
 i10 = i10 | 0;
 i11 = i11 | 0;
 var i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0, i49 = 0, i50 = 0, i51 = 0, i52 = 0, i53 = 0, i54 = 0, i55 = 0, i56 = 0, i57 = 0, i58 = 0, i59 = 0, i60 = 0, i61 = 0, i62 = 0, i63 = 0, i64 = 0, i65 = 0, i66 = 0, i67 = 0, i68 = 0, i69 = 0, i70 = 0, i71 = 0, i72 = 0, i73 = 0, i74 = 0, i75 = 0, i76 = 0, i77 = 0, i78 = 0, i79 = 0, i80 = 0, i81 = 0, i82 = 0, i83 = 0, i84 = 0, i85 = 0, i86 = 0, i87 = 0, i88 = 0, i89 = 0, i90 = 0, i91 = 0, i92 = 0, i93 = 0, i94 = 0, i95 = 0, i96 = 0, i97 = 0, i98 = 0, i99 = 0, i100 = 0, i101 = 0, i102 = 0, i103 = 0, i104 = 0, i105 = 0, i106 = 0, i107 = 0, i108 = 0, i109 = 0, i110 = 0, i111 = 0, i112 = 0, i113 = 0, i114 = 0, i115 = 0, i116 = 0, i117 = 0, i118 = 0, i119 = 0, i120 = 0, i121 = 0, i122 = 0, i123 = 0, i124 = 0, i125 = 0, i126 = 0, i127 = 0, i128 = 0, i129 = 0, i130 = 0, i131 = 0, i132 = 0, i133 = 0, i134 = 0, i135 = 0, i136 = 0, i137 = 0, i138 = 0, i139 = 0, i140 = 0, i141 = 0, i142 = 0, i143 = 0, i144 = 0, i145 = 0, i146 = 0, i147 = 0, i148 = 0, i149 = 0, i150 = 0, i151 = 0, i152 = 0, i153 = 0, i154 = 0, i155 = 0, i156 = 0, i157 = 0, i158 = 0, i159 = 0, i160 = 0, i161 = 0, i162 = 0, i163 = 0, i164 = 0, i165 = 0, i166 = 0, i167 = 0, i168 = 0, i169 = 0, i170 = 0, i171 = 0, i172 = 0, i173 = 0, i174 = 0, i175 = 0, i176 = 0, i177 = 0, i178 = 0;
 i12 = STACKTOP;
 STACKTOP = STACKTOP + 480 | 0;
 i13 = i12 + 80 | 0;
 i14 = i12 + 76 | 0;
 i15 = i12 + 72 | 0;
 i16 = i12 + 68 | 0;
 i17 = i12 + 56 | 0;
 i18 = i12 + 44 | 0;
 i19 = i12 + 28 | 0;
 i20 = i12 + 16 | 0;
 i21 = i12 + 4 | 0;
 i22 = i12;
 i23 = i12 + 40 | 0;
 HEAP32[i14 >> 2] = 0;
 HEAP32[i17 + 0 >> 2] = 0;
 HEAP32[i17 + 4 >> 2] = 0;
 HEAP32[i17 + 8 >> 2] = 0;
 HEAP32[i18 + 0 >> 2] = 0;
 HEAP32[i18 + 4 >> 2] = 0;
 HEAP32[i18 + 8 >> 2] = 0;
 HEAP32[i19 + 0 >> 2] = 0;
 HEAP32[i19 + 4 >> 2] = 0;
 HEAP32[i19 + 8 >> 2] = 0;
 HEAP32[i20 + 0 >> 2] = 0;
 HEAP32[i20 + 4 >> 2] = 0;
 HEAP32[i20 + 8 >> 2] = 0;
 HEAP32[i21 + 0 >> 2] = 0;
 HEAP32[i21 + 4 >> 2] = 0;
 HEAP32[i21 + 8 >> 2] = 0;
 __ZNSt3__111__money_getIwE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_SJ_Ri(i3, i4, i14, i15, i16, i17, i18, i19, i20, i22);
 HEAP32[i10 >> 2] = HEAP32[i9 >> 2];
 i4 = i20 + 4 | 0;
 i3 = i20 + 8 | 0;
 i24 = i19 + 4 | 0;
 i25 = i19 + 8 | 0;
 i26 = (i5 & 512 | 0) != 0;
 i5 = i18 + 4 | 0;
 i27 = i18 + 8 | 0;
 i28 = i21 + 4 | 0;
 i29 = i21 + 8 | 0;
 i30 = i14 + 3 | 0;
 i31 = i9 + 4 | 0;
 i32 = i17 + 4 | 0;
 i33 = i13 + 400 | 0;
 i34 = i13;
 i35 = i13;
 i13 = i11;
 i11 = 0;
 i36 = 0;
 i37 = 120;
 L1 : while (1) {
  i38 = HEAP32[i1 >> 2] | 0;
  do {
   if ((i38 | 0) == 0) {
    i39 = 1;
   } else {
    i40 = HEAP32[i38 + 12 >> 2] | 0;
    if ((i40 | 0) == (HEAP32[i38 + 16 >> 2] | 0)) {
     i41 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i38 >> 2] | 0) + 36 >> 2] & 127](i38) | 0;
    } else {
     i41 = HEAP32[i40 >> 2] | 0;
    }
    if ((i41 | 0) == -1) {
     HEAP32[i1 >> 2] = 0;
     i39 = 1;
     break;
    } else {
     i39 = (HEAP32[i1 >> 2] | 0) == 0;
     break;
    }
   }
  } while (0);
  i38 = HEAP32[i2 >> 2] | 0;
  do {
   if ((i38 | 0) == 0) {
    i42 = 15;
   } else {
    i40 = HEAP32[i38 + 12 >> 2] | 0;
    if ((i40 | 0) == (HEAP32[i38 + 16 >> 2] | 0)) {
     i43 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i38 >> 2] | 0) + 36 >> 2] & 127](i38) | 0;
    } else {
     i43 = HEAP32[i40 >> 2] | 0;
    }
    if ((i43 | 0) == -1) {
     HEAP32[i2 >> 2] = 0;
     i42 = 15;
     break;
    } else {
     if (i39) {
      i44 = i38;
      break;
     } else {
      i45 = i35;
      i46 = i34;
      i47 = i36;
      i48 = i37;
      i42 = 292;
      break L1;
     }
    }
   }
  } while (0);
  if ((i42 | 0) == 15) {
   i42 = 0;
   if (i39) {
    i45 = i35;
    i46 = i34;
    i47 = i36;
    i48 = i37;
    i42 = 292;
    break;
   } else {
    i44 = 0;
   }
  }
  L25 : do {
   switch (HEAP8[i14 + i11 | 0] | 0) {
   case 3:
    {
     i38 = HEAP8[i19] | 0;
     i40 = (i38 & 1) == 0;
     if (i40) {
      i49 = (i38 & 255) >>> 1;
     } else {
      i49 = HEAP32[i24 >> 2] | 0;
     }
     i50 = HEAP8[i20] | 0;
     i51 = (i50 & 1) == 0;
     if (i51) {
      i52 = (i50 & 255) >>> 1;
     } else {
      i52 = HEAP32[i4 >> 2] | 0;
     }
     if ((i49 | 0) == (0 - i52 | 0)) {
      i53 = i13;
      i54 = i35;
      i55 = i34;
      i56 = i33;
      i57 = i36;
      i58 = i37;
     } else {
      if (i40) {
       i59 = (i38 & 255) >>> 1;
      } else {
       i59 = HEAP32[i24 >> 2] | 0;
      }
      if ((i59 | 0) != 0) {
       if (i51) {
        i60 = (i50 & 255) >>> 1;
       } else {
        i60 = HEAP32[i4 >> 2] | 0;
       }
       if ((i60 | 0) != 0) {
        i51 = HEAP32[i1 >> 2] | 0;
        i61 = HEAP32[i51 + 12 >> 2] | 0;
        if ((i61 | 0) == (HEAP32[i51 + 16 >> 2] | 0)) {
         i62 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i51 >> 2] | 0) + 36 >> 2] & 127](i51) | 0;
         i63 = i62;
         i64 = HEAP8[i19] | 0;
        } else {
         i63 = HEAP32[i61 >> 2] | 0;
         i64 = i38;
        }
        i61 = HEAP32[i1 >> 2] | 0;
        i62 = i61 + 12 | 0;
        i51 = HEAP32[i62 >> 2] | 0;
        i65 = (i51 | 0) == (HEAP32[i61 + 16 >> 2] | 0);
        if ((i63 | 0) == (HEAP32[((i64 & 1) == 0 ? i24 : HEAP32[i25 >> 2] | 0) >> 2] | 0)) {
         if (i65) {
          FUNCTION_TABLE_ii[HEAP32[(HEAP32[i61 >> 2] | 0) + 40 >> 2] & 127](i61) | 0;
         } else {
          HEAP32[i62 >> 2] = i51 + 4;
         }
         i62 = HEAP8[i19] | 0;
         if ((i62 & 1) == 0) {
          i66 = (i62 & 255) >>> 1;
         } else {
          i66 = HEAP32[i24 >> 2] | 0;
         }
         i53 = i13;
         i54 = i35;
         i55 = i34;
         i56 = i33;
         i57 = i66 >>> 0 > 1 ? i19 : i36;
         i58 = i37;
         break L25;
        }
        if (i65) {
         i67 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i61 >> 2] | 0) + 36 >> 2] & 127](i61) | 0;
        } else {
         i67 = HEAP32[i51 >> 2] | 0;
        }
        if ((i67 | 0) != (HEAP32[((HEAP8[i20] & 1) == 0 ? i4 : HEAP32[i3 >> 2] | 0) >> 2] | 0)) {
         i42 = 116;
         break L1;
        }
        i51 = HEAP32[i1 >> 2] | 0;
        i61 = i51 + 12 | 0;
        i65 = HEAP32[i61 >> 2] | 0;
        if ((i65 | 0) == (HEAP32[i51 + 16 >> 2] | 0)) {
         FUNCTION_TABLE_ii[HEAP32[(HEAP32[i51 >> 2] | 0) + 40 >> 2] & 127](i51) | 0;
        } else {
         HEAP32[i61 >> 2] = i65 + 4;
        }
        HEAP8[i7] = 1;
        i65 = HEAP8[i20] | 0;
        if ((i65 & 1) == 0) {
         i68 = (i65 & 255) >>> 1;
        } else {
         i68 = HEAP32[i4 >> 2] | 0;
        }
        i53 = i13;
        i54 = i35;
        i55 = i34;
        i56 = i33;
        i57 = i68 >>> 0 > 1 ? i20 : i36;
        i58 = i37;
        break L25;
       }
      }
      if (i40) {
       i69 = (i38 & 255) >>> 1;
      } else {
       i69 = HEAP32[i24 >> 2] | 0;
      }
      i40 = HEAP32[i1 >> 2] | 0;
      i65 = HEAP32[i40 + 12 >> 2] | 0;
      i61 = (i65 | 0) == (HEAP32[i40 + 16 >> 2] | 0);
      if ((i69 | 0) == 0) {
       if (i61) {
        i51 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i40 >> 2] | 0) + 36 >> 2] & 127](i40) | 0;
        i70 = i51;
        i71 = HEAP8[i20] | 0;
       } else {
        i70 = HEAP32[i65 >> 2] | 0;
        i71 = i50;
       }
       if ((i70 | 0) != (HEAP32[((i71 & 1) == 0 ? i4 : HEAP32[i3 >> 2] | 0) >> 2] | 0)) {
        i53 = i13;
        i54 = i35;
        i55 = i34;
        i56 = i33;
        i57 = i36;
        i58 = i37;
        break L25;
       }
       i50 = HEAP32[i1 >> 2] | 0;
       i51 = i50 + 12 | 0;
       i62 = HEAP32[i51 >> 2] | 0;
       if ((i62 | 0) == (HEAP32[i50 + 16 >> 2] | 0)) {
        FUNCTION_TABLE_ii[HEAP32[(HEAP32[i50 >> 2] | 0) + 40 >> 2] & 127](i50) | 0;
       } else {
        HEAP32[i51 >> 2] = i62 + 4;
       }
       HEAP8[i7] = 1;
       i62 = HEAP8[i20] | 0;
       if ((i62 & 1) == 0) {
        i72 = (i62 & 255) >>> 1;
       } else {
        i72 = HEAP32[i4 >> 2] | 0;
       }
       i53 = i13;
       i54 = i35;
       i55 = i34;
       i56 = i33;
       i57 = i72 >>> 0 > 1 ? i20 : i36;
       i58 = i37;
       break L25;
      }
      if (i61) {
       i61 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i40 >> 2] | 0) + 36 >> 2] & 127](i40) | 0;
       i73 = i61;
       i74 = HEAP8[i19] | 0;
      } else {
       i73 = HEAP32[i65 >> 2] | 0;
       i74 = i38;
      }
      if ((i73 | 0) != (HEAP32[((i74 & 1) == 0 ? i24 : HEAP32[i25 >> 2] | 0) >> 2] | 0)) {
       HEAP8[i7] = 1;
       i53 = i13;
       i54 = i35;
       i55 = i34;
       i56 = i33;
       i57 = i36;
       i58 = i37;
       break L25;
      }
      i38 = HEAP32[i1 >> 2] | 0;
      i65 = i38 + 12 | 0;
      i61 = HEAP32[i65 >> 2] | 0;
      if ((i61 | 0) == (HEAP32[i38 + 16 >> 2] | 0)) {
       FUNCTION_TABLE_ii[HEAP32[(HEAP32[i38 >> 2] | 0) + 40 >> 2] & 127](i38) | 0;
      } else {
       HEAP32[i65 >> 2] = i61 + 4;
      }
      i61 = HEAP8[i19] | 0;
      if ((i61 & 1) == 0) {
       i75 = (i61 & 255) >>> 1;
      } else {
       i75 = HEAP32[i24 >> 2] | 0;
      }
      i53 = i13;
      i54 = i35;
      i55 = i34;
      i56 = i33;
      i57 = i75 >>> 0 > 1 ? i19 : i36;
      i58 = i37;
     }
     break;
    }
   case 1:
    {
     if ((i11 | 0) == 3) {
      i45 = i35;
      i46 = i34;
      i47 = i36;
      i48 = i37;
      i42 = 292;
      break L1;
     }
     i61 = HEAP32[i1 >> 2] | 0;
     i65 = HEAP32[i61 + 12 >> 2] | 0;
     if ((i65 | 0) == (HEAP32[i61 + 16 >> 2] | 0)) {
      i76 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i61 >> 2] | 0) + 36 >> 2] & 127](i61) | 0;
     } else {
      i76 = HEAP32[i65 >> 2] | 0;
     }
     if (!(FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i8 >> 2] | 0) + 12 >> 2] & 31](i8, 8192, i76) | 0)) {
      i42 = 27;
      break L1;
     }
     i65 = HEAP32[i1 >> 2] | 0;
     i61 = i65 + 12 | 0;
     i38 = HEAP32[i61 >> 2] | 0;
     if ((i38 | 0) == (HEAP32[i65 + 16 >> 2] | 0)) {
      i77 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i65 >> 2] | 0) + 40 >> 2] & 127](i65) | 0;
     } else {
      HEAP32[i61 >> 2] = i38 + 4;
      i77 = HEAP32[i38 >> 2] | 0;
     }
     __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw(i21, i77);
     i42 = 28;
     break;
    }
   case 0:
    {
     i42 = 28;
     break;
    }
   case 2:
    {
     if (!((i36 | 0) != 0 | i11 >>> 0 < 2)) {
      if ((i11 | 0) == 2) {
       i78 = (HEAP8[i30] | 0) != 0;
      } else {
       i78 = 0;
      }
      if (!(i26 | i78)) {
       i53 = i13;
       i54 = i35;
       i55 = i34;
       i56 = i33;
       i57 = 0;
       i58 = i37;
       break L25;
      }
     }
     i38 = HEAP8[i18] | 0;
     i61 = (i38 & 1) == 0 ? i5 : HEAP32[i27 >> 2] | 0;
     L129 : do {
      if ((i11 | 0) == 0) {
       i79 = i44;
       i80 = i38;
       i81 = i61;
       i82 = i44;
      } else {
       if ((HEAPU8[i14 + (i11 + -1) | 0] | 0) < 2) {
        i65 = i38;
        i40 = i61;
        while (1) {
         if ((i65 & 1) == 0) {
          i83 = i5;
          i84 = (i65 & 255) >>> 1;
         } else {
          i83 = HEAP32[i27 >> 2] | 0;
          i84 = HEAP32[i5 >> 2] | 0;
         }
         if ((i40 | 0) == (i83 + (i84 << 2) | 0)) {
          i85 = i65;
          break;
         }
         if (!(FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i8 >> 2] | 0) + 12 >> 2] & 31](i8, 8192, HEAP32[i40 >> 2] | 0) | 0)) {
          i42 = 129;
          break;
         }
         i65 = HEAP8[i18] | 0;
         i40 = i40 + 4 | 0;
        }
        if ((i42 | 0) == 129) {
         i42 = 0;
         i85 = HEAP8[i18] | 0;
        }
        i65 = (i85 & 1) == 0;
        i62 = i40 - (i65 ? i5 : HEAP32[i27 >> 2] | 0) >> 2;
        i51 = HEAP8[i21] | 0;
        i50 = (i51 & 1) == 0;
        if (i50) {
         i86 = (i51 & 255) >>> 1;
        } else {
         i86 = HEAP32[i28 >> 2] | 0;
        }
        L146 : do {
         if (!(i62 >>> 0 > i86 >>> 0)) {
          if (i50) {
           i87 = i28;
           i88 = (i51 & 255) >>> 1;
           i89 = i28 + (((i51 & 255) >>> 1) - i62 << 2) | 0;
          } else {
           i90 = HEAP32[i29 >> 2] | 0;
           i91 = HEAP32[i28 >> 2] | 0;
           i87 = i90;
           i88 = i91;
           i89 = i90 + (i91 - i62 << 2) | 0;
          }
          i91 = i87 + (i88 << 2) | 0;
          if ((i89 | 0) == (i91 | 0)) {
           i79 = i44;
           i80 = i85;
           i81 = i40;
           i82 = i44;
           break L129;
          } else {
           i92 = i89;
           i93 = i65 ? i5 : HEAP32[i27 >> 2] | 0;
          }
          while (1) {
           if ((HEAP32[i92 >> 2] | 0) != (HEAP32[i93 >> 2] | 0)) {
            break L146;
           }
           i90 = i92 + 4 | 0;
           if ((i90 | 0) == (i91 | 0)) {
            i79 = i44;
            i80 = i85;
            i81 = i40;
            i82 = i44;
            break L129;
           }
           i92 = i90;
           i93 = i93 + 4 | 0;
          }
         }
        } while (0);
        i79 = i44;
        i80 = i85;
        i81 = i65 ? i5 : HEAP32[i27 >> 2] | 0;
        i82 = i44;
       } else {
        i79 = i44;
        i80 = i38;
        i81 = i61;
        i82 = i44;
       }
      }
     } while (0);
     L157 : while (1) {
      if ((i80 & 1) == 0) {
       i94 = i5;
       i95 = (i80 & 255) >>> 1;
      } else {
       i94 = HEAP32[i27 >> 2] | 0;
       i95 = HEAP32[i5 >> 2] | 0;
      }
      if ((i81 | 0) == (i94 + (i95 << 2) | 0)) {
       break;
      }
      i61 = HEAP32[i1 >> 2] | 0;
      do {
       if ((i61 | 0) == 0) {
        i96 = 1;
       } else {
        i38 = HEAP32[i61 + 12 >> 2] | 0;
        if ((i38 | 0) == (HEAP32[i61 + 16 >> 2] | 0)) {
         i97 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i61 >> 2] | 0) + 36 >> 2] & 127](i61) | 0;
        } else {
         i97 = HEAP32[i38 >> 2] | 0;
        }
        if ((i97 | 0) == -1) {
         HEAP32[i1 >> 2] = 0;
         i96 = 1;
         break;
        } else {
         i96 = (HEAP32[i1 >> 2] | 0) == 0;
         break;
        }
       }
      } while (0);
      do {
       if ((i82 | 0) == 0) {
        i98 = i79;
        i42 = 159;
       } else {
        i61 = HEAP32[i82 + 12 >> 2] | 0;
        if ((i61 | 0) == (HEAP32[i82 + 16 >> 2] | 0)) {
         i99 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i82 >> 2] | 0) + 36 >> 2] & 127](i82) | 0;
        } else {
         i99 = HEAP32[i61 >> 2] | 0;
        }
        if ((i99 | 0) == -1) {
         HEAP32[i2 >> 2] = 0;
         i98 = 0;
         i42 = 159;
         break;
        } else {
         if (i96 ^ (i79 | 0) == 0) {
          i100 = i79;
          i101 = i79;
          break;
         } else {
          break L157;
         }
        }
       }
      } while (0);
      if ((i42 | 0) == 159) {
       i42 = 0;
       if (i96) {
        break;
       } else {
        i100 = i98;
        i101 = 0;
       }
      }
      i61 = HEAP32[i1 >> 2] | 0;
      i65 = HEAP32[i61 + 12 >> 2] | 0;
      if ((i65 | 0) == (HEAP32[i61 + 16 >> 2] | 0)) {
       i102 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i61 >> 2] | 0) + 36 >> 2] & 127](i61) | 0;
      } else {
       i102 = HEAP32[i65 >> 2] | 0;
      }
      if ((i102 | 0) != (HEAP32[i81 >> 2] | 0)) {
       break;
      }
      i65 = HEAP32[i1 >> 2] | 0;
      i61 = i65 + 12 | 0;
      i38 = HEAP32[i61 >> 2] | 0;
      if ((i38 | 0) == (HEAP32[i65 + 16 >> 2] | 0)) {
       FUNCTION_TABLE_ii[HEAP32[(HEAP32[i65 >> 2] | 0) + 40 >> 2] & 127](i65) | 0;
      } else {
       HEAP32[i61 >> 2] = i38 + 4;
      }
      i79 = i100;
      i80 = HEAP8[i18] | 0;
      i81 = i81 + 4 | 0;
      i82 = i101;
     }
     if (i26) {
      i38 = HEAP8[i18] | 0;
      if ((i38 & 1) == 0) {
       i103 = i5;
       i104 = (i38 & 255) >>> 1;
      } else {
       i103 = HEAP32[i27 >> 2] | 0;
       i104 = HEAP32[i5 >> 2] | 0;
      }
      if ((i81 | 0) == (i103 + (i104 << 2) | 0)) {
       i53 = i13;
       i54 = i35;
       i55 = i34;
       i56 = i33;
       i57 = i36;
       i58 = i37;
      } else {
       i42 = 174;
       break L1;
      }
     } else {
      i53 = i13;
      i54 = i35;
      i55 = i34;
      i56 = i33;
      i57 = i36;
      i58 = i37;
     }
     break;
    }
   case 4:
    {
     i38 = i13;
     i61 = i34;
     i65 = i33;
     i40 = i35;
     i62 = 0;
     i51 = i37;
     L201 : while (1) {
      i50 = HEAP32[i1 >> 2] | 0;
      do {
       if ((i50 | 0) == 0) {
        i105 = 1;
       } else {
        i91 = HEAP32[i50 + 12 >> 2] | 0;
        if ((i91 | 0) == (HEAP32[i50 + 16 >> 2] | 0)) {
         i106 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i50 >> 2] | 0) + 36 >> 2] & 127](i50) | 0;
        } else {
         i106 = HEAP32[i91 >> 2] | 0;
        }
        if ((i106 | 0) == -1) {
         HEAP32[i1 >> 2] = 0;
         i105 = 1;
         break;
        } else {
         i105 = (HEAP32[i1 >> 2] | 0) == 0;
         break;
        }
       }
      } while (0);
      i50 = HEAP32[i2 >> 2] | 0;
      do {
       if ((i50 | 0) == 0) {
        i42 = 188;
       } else {
        i91 = HEAP32[i50 + 12 >> 2] | 0;
        if ((i91 | 0) == (HEAP32[i50 + 16 >> 2] | 0)) {
         i107 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i50 >> 2] | 0) + 36 >> 2] & 127](i50) | 0;
        } else {
         i107 = HEAP32[i91 >> 2] | 0;
        }
        if ((i107 | 0) == -1) {
         HEAP32[i2 >> 2] = 0;
         i42 = 188;
         break;
        } else {
         if (i105) {
          break;
         } else {
          break L201;
         }
        }
       }
      } while (0);
      if ((i42 | 0) == 188) {
       i42 = 0;
       if (i105) {
        break;
       }
      }
      i50 = HEAP32[i1 >> 2] | 0;
      i91 = HEAP32[i50 + 12 >> 2] | 0;
      if ((i91 | 0) == (HEAP32[i50 + 16 >> 2] | 0)) {
       i108 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i50 >> 2] | 0) + 36 >> 2] & 127](i50) | 0;
      } else {
       i108 = HEAP32[i91 >> 2] | 0;
      }
      if (FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i8 >> 2] | 0) + 12 >> 2] & 31](i8, 2048, i108) | 0) {
       i91 = HEAP32[i10 >> 2] | 0;
       if ((i91 | 0) == (i38 | 0)) {
        i50 = (HEAP32[i31 >> 2] | 0) != 120;
        i90 = HEAP32[i9 >> 2] | 0;
        i109 = i38 - i90 | 0;
        i110 = i109 >>> 0 < 2147483647 ? i109 << 1 : -1;
        i111 = i109 >> 2;
        if (i50) {
         i112 = i90;
        } else {
         i112 = 0;
        }
        i90 = _realloc(i112, i110) | 0;
        if ((i90 | 0) == 0) {
         i42 = 198;
         break L1;
        }
        if (i50) {
         HEAP32[i9 >> 2] = i90;
         i113 = i90;
        } else {
         i50 = HEAP32[i9 >> 2] | 0;
         HEAP32[i9 >> 2] = i90;
         if ((i50 | 0) == 0) {
          i113 = i90;
         } else {
          FUNCTION_TABLE_vi[HEAP32[i31 >> 2] & 255](i50);
          i113 = HEAP32[i9 >> 2] | 0;
         }
        }
        HEAP32[i31 >> 2] = 121;
        i50 = i113 + (i111 << 2) | 0;
        HEAP32[i10 >> 2] = i50;
        i114 = i50;
        i115 = (HEAP32[i9 >> 2] | 0) + (i110 >>> 2 << 2) | 0;
       } else {
        i114 = i91;
        i115 = i38;
       }
       HEAP32[i10 >> 2] = i114 + 4;
       HEAP32[i114 >> 2] = i108;
       i116 = i115;
       i117 = i40;
       i118 = i61;
       i119 = i65;
       i120 = i62 + 1 | 0;
       i121 = i51;
      } else {
       i91 = HEAP8[i17] | 0;
       if ((i91 & 1) == 0) {
        i122 = (i91 & 255) >>> 1;
       } else {
        i122 = HEAP32[i32 >> 2] | 0;
       }
       if ((i122 | 0) == 0 | (i62 | 0) == 0) {
        break;
       }
       if ((i108 | 0) != (HEAP32[i16 >> 2] | 0)) {
        break;
       }
       if ((i61 | 0) == (i65 | 0)) {
        i91 = i61 - i40 | 0;
        i110 = i91 >>> 0 < 2147483647 ? i91 << 1 : -1;
        if ((i51 | 0) != 120) {
         i123 = i40;
        } else {
         i123 = 0;
        }
        i50 = _realloc(i123, i110) | 0;
        if ((i50 | 0) == 0) {
         i42 = 214;
         break L1;
        }
        i124 = i50 + (i91 >> 2 << 2) | 0;
        i125 = i50;
        i126 = i50 + (i110 >>> 2 << 2) | 0;
        i127 = 121;
       } else {
        i124 = i61;
        i125 = i40;
        i126 = i65;
        i127 = i51;
       }
       HEAP32[i124 >> 2] = i62;
       i116 = i38;
       i117 = i125;
       i118 = i124 + 4 | 0;
       i119 = i126;
       i120 = 0;
       i121 = i127;
      }
      i110 = HEAP32[i1 >> 2] | 0;
      i50 = i110 + 12 | 0;
      i91 = HEAP32[i50 >> 2] | 0;
      if ((i91 | 0) == (HEAP32[i110 + 16 >> 2] | 0)) {
       FUNCTION_TABLE_ii[HEAP32[(HEAP32[i110 >> 2] | 0) + 40 >> 2] & 127](i110) | 0;
       i38 = i116;
       i61 = i118;
       i65 = i119;
       i40 = i117;
       i62 = i120;
       i51 = i121;
       continue;
      } else {
       HEAP32[i50 >> 2] = i91 + 4;
       i38 = i116;
       i61 = i118;
       i65 = i119;
       i40 = i117;
       i62 = i120;
       i51 = i121;
       continue;
      }
     }
     if ((i40 | 0) == (i61 | 0) | (i62 | 0) == 0) {
      i128 = i40;
      i129 = i61;
      i130 = i65;
      i131 = i51;
     } else {
      if ((i61 | 0) == (i65 | 0)) {
       i91 = i61 - i40 | 0;
       i50 = i91 >>> 0 < 2147483647 ? i91 << 1 : -1;
       if ((i51 | 0) != 120) {
        i132 = i40;
       } else {
        i132 = 0;
       }
       i110 = _realloc(i132, i50) | 0;
       if ((i110 | 0) == 0) {
        i42 = 225;
        break L1;
       }
       i133 = i110 + (i91 >> 2 << 2) | 0;
       i134 = i110;
       i135 = i110 + (i50 >>> 2 << 2) | 0;
       i136 = 121;
      } else {
       i133 = i61;
       i134 = i40;
       i135 = i65;
       i136 = i51;
      }
      HEAP32[i133 >> 2] = i62;
      i128 = i134;
      i129 = i133 + 4 | 0;
      i130 = i135;
      i131 = i136;
     }
     i50 = HEAP32[i22 >> 2] | 0;
     if ((i50 | 0) > 0) {
      i110 = HEAP32[i1 >> 2] | 0;
      do {
       if ((i110 | 0) == 0) {
        i137 = 1;
       } else {
        i91 = HEAP32[i110 + 12 >> 2] | 0;
        if ((i91 | 0) == (HEAP32[i110 + 16 >> 2] | 0)) {
         i138 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i110 >> 2] | 0) + 36 >> 2] & 127](i110) | 0;
        } else {
         i138 = HEAP32[i91 >> 2] | 0;
        }
        if ((i138 | 0) == -1) {
         HEAP32[i1 >> 2] = 0;
         i137 = 1;
         break;
        } else {
         i137 = (HEAP32[i1 >> 2] | 0) == 0;
         break;
        }
       }
      } while (0);
      i110 = HEAP32[i2 >> 2] | 0;
      do {
       if ((i110 | 0) == 0) {
        i42 = 242;
       } else {
        i62 = HEAP32[i110 + 12 >> 2] | 0;
        if ((i62 | 0) == (HEAP32[i110 + 16 >> 2] | 0)) {
         i139 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i110 >> 2] | 0) + 36 >> 2] & 127](i110) | 0;
        } else {
         i139 = HEAP32[i62 >> 2] | 0;
        }
        if ((i139 | 0) == -1) {
         HEAP32[i2 >> 2] = 0;
         i42 = 242;
         break;
        } else {
         if (i137) {
          i140 = i110;
          break;
         } else {
          i42 = 248;
          break L1;
         }
        }
       }
      } while (0);
      if ((i42 | 0) == 242) {
       i42 = 0;
       if (i137) {
        i42 = 248;
        break L1;
       } else {
        i140 = 0;
       }
      }
      i110 = HEAP32[i1 >> 2] | 0;
      i62 = HEAP32[i110 + 12 >> 2] | 0;
      if ((i62 | 0) == (HEAP32[i110 + 16 >> 2] | 0)) {
       i141 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i110 >> 2] | 0) + 36 >> 2] & 127](i110) | 0;
      } else {
       i141 = HEAP32[i62 >> 2] | 0;
      }
      if ((i141 | 0) != (HEAP32[i15 >> 2] | 0)) {
       i42 = 248;
       break L1;
      }
      i62 = HEAP32[i1 >> 2] | 0;
      i110 = i62 + 12 | 0;
      i51 = HEAP32[i110 >> 2] | 0;
      if ((i51 | 0) == (HEAP32[i62 + 16 >> 2] | 0)) {
       FUNCTION_TABLE_ii[HEAP32[(HEAP32[i62 >> 2] | 0) + 40 >> 2] & 127](i62) | 0;
       i142 = i140;
       i143 = i140;
       i144 = i38;
       i145 = i50;
      } else {
       HEAP32[i110 >> 2] = i51 + 4;
       i142 = i140;
       i143 = i140;
       i144 = i38;
       i145 = i50;
      }
      while (1) {
       i51 = HEAP32[i1 >> 2] | 0;
       do {
        if ((i51 | 0) == 0) {
         i146 = 1;
        } else {
         i110 = HEAP32[i51 + 12 >> 2] | 0;
         if ((i110 | 0) == (HEAP32[i51 + 16 >> 2] | 0)) {
          i147 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i51 >> 2] | 0) + 36 >> 2] & 127](i51) | 0;
         } else {
          i147 = HEAP32[i110 >> 2] | 0;
         }
         if ((i147 | 0) == -1) {
          HEAP32[i1 >> 2] = 0;
          i146 = 1;
          break;
         } else {
          i146 = (HEAP32[i1 >> 2] | 0) == 0;
          break;
         }
        }
       } while (0);
       do {
        if ((i143 | 0) == 0) {
         i148 = i142;
         i42 = 265;
        } else {
         i51 = HEAP32[i143 + 12 >> 2] | 0;
         if ((i51 | 0) == (HEAP32[i143 + 16 >> 2] | 0)) {
          i149 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i143 >> 2] | 0) + 36 >> 2] & 127](i143) | 0;
         } else {
          i149 = HEAP32[i51 >> 2] | 0;
         }
         if ((i149 | 0) == -1) {
          HEAP32[i2 >> 2] = 0;
          i148 = 0;
          i42 = 265;
          break;
         } else {
          if (i146 ^ (i142 | 0) == 0) {
           i150 = i142;
           i151 = i142;
           break;
          } else {
           i42 = 271;
           break L1;
          }
         }
        }
       } while (0);
       if ((i42 | 0) == 265) {
        i42 = 0;
        if (i146) {
         i42 = 271;
         break L1;
        } else {
         i150 = i148;
         i151 = 0;
        }
       }
       i51 = HEAP32[i1 >> 2] | 0;
       i110 = HEAP32[i51 + 12 >> 2] | 0;
       if ((i110 | 0) == (HEAP32[i51 + 16 >> 2] | 0)) {
        i152 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i51 >> 2] | 0) + 36 >> 2] & 127](i51) | 0;
       } else {
        i152 = HEAP32[i110 >> 2] | 0;
       }
       if (!(FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i8 >> 2] | 0) + 12 >> 2] & 31](i8, 2048, i152) | 0)) {
        i42 = 271;
        break L1;
       }
       i110 = HEAP32[i10 >> 2] | 0;
       if ((i110 | 0) == (i144 | 0)) {
        i51 = (HEAP32[i31 >> 2] | 0) != 120;
        i62 = HEAP32[i9 >> 2] | 0;
        i65 = i144 - i62 | 0;
        i40 = i65 >>> 0 < 2147483647 ? i65 << 1 : -1;
        i61 = i65 >> 2;
        if (i51) {
         i153 = i62;
        } else {
         i153 = 0;
        }
        i62 = _realloc(i153, i40) | 0;
        if ((i62 | 0) == 0) {
         i42 = 276;
         break L1;
        }
        if (i51) {
         HEAP32[i9 >> 2] = i62;
         i154 = i62;
        } else {
         i51 = HEAP32[i9 >> 2] | 0;
         HEAP32[i9 >> 2] = i62;
         if ((i51 | 0) == 0) {
          i154 = i62;
         } else {
          FUNCTION_TABLE_vi[HEAP32[i31 >> 2] & 255](i51);
          i154 = HEAP32[i9 >> 2] | 0;
         }
        }
        HEAP32[i31 >> 2] = 121;
        i51 = i154 + (i61 << 2) | 0;
        HEAP32[i10 >> 2] = i51;
        i155 = i51;
        i156 = (HEAP32[i9 >> 2] | 0) + (i40 >>> 2 << 2) | 0;
       } else {
        i155 = i110;
        i156 = i144;
       }
       i110 = HEAP32[i1 >> 2] | 0;
       i40 = HEAP32[i110 + 12 >> 2] | 0;
       if ((i40 | 0) == (HEAP32[i110 + 16 >> 2] | 0)) {
        i51 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i110 >> 2] | 0) + 36 >> 2] & 127](i110) | 0;
        i157 = i51;
        i158 = HEAP32[i10 >> 2] | 0;
       } else {
        i157 = HEAP32[i40 >> 2] | 0;
        i158 = i155;
       }
       HEAP32[i10 >> 2] = i158 + 4;
       HEAP32[i158 >> 2] = i157;
       i40 = i145 + -1 | 0;
       HEAP32[i22 >> 2] = i40;
       i51 = HEAP32[i1 >> 2] | 0;
       i110 = i51 + 12 | 0;
       i61 = HEAP32[i110 >> 2] | 0;
       if ((i61 | 0) == (HEAP32[i51 + 16 >> 2] | 0)) {
        FUNCTION_TABLE_ii[HEAP32[(HEAP32[i51 >> 2] | 0) + 40 >> 2] & 127](i51) | 0;
       } else {
        HEAP32[i110 >> 2] = i61 + 4;
       }
       if ((i40 | 0) > 0) {
        i142 = i150;
        i143 = i151;
        i144 = i156;
        i145 = i40;
       } else {
        i159 = i156;
        break;
       }
      }
     } else {
      i159 = i38;
     }
     if ((HEAP32[i10 >> 2] | 0) == (HEAP32[i9 >> 2] | 0)) {
      i42 = 290;
      break L1;
     } else {
      i53 = i159;
      i54 = i128;
      i55 = i129;
      i56 = i130;
      i57 = i36;
      i58 = i131;
     }
     break;
    }
   default:
    {
     i53 = i13;
     i54 = i35;
     i55 = i34;
     i56 = i33;
     i57 = i36;
     i58 = i37;
    }
   }
  } while (0);
  L354 : do {
   if ((i42 | 0) == 28) {
    i42 = 0;
    if ((i11 | 0) == 3) {
     i45 = i35;
     i46 = i34;
     i47 = i36;
     i48 = i37;
     i42 = 292;
     break L1;
    } else {
     i160 = i44;
     i161 = i44;
    }
    while (1) {
     i50 = HEAP32[i1 >> 2] | 0;
     do {
      if ((i50 | 0) == 0) {
       i162 = 1;
      } else {
       i40 = HEAP32[i50 + 12 >> 2] | 0;
       if ((i40 | 0) == (HEAP32[i50 + 16 >> 2] | 0)) {
        i163 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i50 >> 2] | 0) + 36 >> 2] & 127](i50) | 0;
       } else {
        i163 = HEAP32[i40 >> 2] | 0;
       }
       if ((i163 | 0) == -1) {
        HEAP32[i1 >> 2] = 0;
        i162 = 1;
        break;
       } else {
        i162 = (HEAP32[i1 >> 2] | 0) == 0;
        break;
       }
      }
     } while (0);
     do {
      if ((i161 | 0) == 0) {
       i164 = i160;
       i42 = 42;
      } else {
       i50 = HEAP32[i161 + 12 >> 2] | 0;
       if ((i50 | 0) == (HEAP32[i161 + 16 >> 2] | 0)) {
        i165 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i161 >> 2] | 0) + 36 >> 2] & 127](i161) | 0;
       } else {
        i165 = HEAP32[i50 >> 2] | 0;
       }
       if ((i165 | 0) == -1) {
        HEAP32[i2 >> 2] = 0;
        i164 = 0;
        i42 = 42;
        break;
       } else {
        if (i162 ^ (i160 | 0) == 0) {
         i166 = i160;
         i167 = i160;
         break;
        } else {
         i53 = i13;
         i54 = i35;
         i55 = i34;
         i56 = i33;
         i57 = i36;
         i58 = i37;
         break L354;
        }
       }
      }
     } while (0);
     if ((i42 | 0) == 42) {
      i42 = 0;
      if (i162) {
       i53 = i13;
       i54 = i35;
       i55 = i34;
       i56 = i33;
       i57 = i36;
       i58 = i37;
       break L354;
      } else {
       i166 = i164;
       i167 = 0;
      }
     }
     i50 = HEAP32[i1 >> 2] | 0;
     i40 = HEAP32[i50 + 12 >> 2] | 0;
     if ((i40 | 0) == (HEAP32[i50 + 16 >> 2] | 0)) {
      i168 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i50 >> 2] | 0) + 36 >> 2] & 127](i50) | 0;
     } else {
      i168 = HEAP32[i40 >> 2] | 0;
     }
     if (!(FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i8 >> 2] | 0) + 12 >> 2] & 31](i8, 8192, i168) | 0)) {
      i53 = i13;
      i54 = i35;
      i55 = i34;
      i56 = i33;
      i57 = i36;
      i58 = i37;
      break L354;
     }
     i40 = HEAP32[i1 >> 2] | 0;
     i50 = i40 + 12 | 0;
     i61 = HEAP32[i50 >> 2] | 0;
     if ((i61 | 0) == (HEAP32[i40 + 16 >> 2] | 0)) {
      i169 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i40 >> 2] | 0) + 40 >> 2] & 127](i40) | 0;
     } else {
      HEAP32[i50 >> 2] = i61 + 4;
      i169 = HEAP32[i61 >> 2] | 0;
     }
     __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw(i21, i169);
     i160 = i166;
     i161 = i167;
    }
   }
  } while (0);
  i38 = i11 + 1 | 0;
  if (i38 >>> 0 < 4) {
   i33 = i56;
   i34 = i55;
   i35 = i54;
   i13 = i53;
   i11 = i38;
   i36 = i57;
   i37 = i58;
  } else {
   i45 = i54;
   i46 = i55;
   i47 = i57;
   i48 = i58;
   i42 = 292;
   break;
  }
 }
 L390 : do {
  if ((i42 | 0) == 27) {
   HEAP32[i6 >> 2] = HEAP32[i6 >> 2] | 4;
   i170 = 0;
   i171 = i35;
   i172 = i37;
  } else if ((i42 | 0) == 116) {
   HEAP32[i6 >> 2] = HEAP32[i6 >> 2] | 4;
   i170 = 0;
   i171 = i35;
   i172 = i37;
  } else if ((i42 | 0) == 174) {
   HEAP32[i6 >> 2] = HEAP32[i6 >> 2] | 4;
   i170 = 0;
   i171 = i35;
   i172 = i37;
  } else if ((i42 | 0) == 198) {
   __ZSt17__throw_bad_allocv();
  } else if ((i42 | 0) == 214) {
   __ZSt17__throw_bad_allocv();
  } else if ((i42 | 0) == 225) {
   __ZSt17__throw_bad_allocv();
  } else if ((i42 | 0) == 248) {
   HEAP32[i6 >> 2] = HEAP32[i6 >> 2] | 4;
   i170 = 0;
   i171 = i128;
   i172 = i131;
  } else if ((i42 | 0) == 271) {
   HEAP32[i6 >> 2] = HEAP32[i6 >> 2] | 4;
   i170 = 0;
   i171 = i128;
   i172 = i131;
  } else if ((i42 | 0) == 276) {
   __ZSt17__throw_bad_allocv();
  } else if ((i42 | 0) == 290) {
   HEAP32[i6 >> 2] = HEAP32[i6 >> 2] | 4;
   i170 = 0;
   i171 = i128;
   i172 = i131;
  } else if ((i42 | 0) == 292) {
   L397 : do {
    if ((i47 | 0) != 0) {
     i58 = i47 + 4 | 0;
     i57 = i47 + 8 | 0;
     i55 = 1;
     L399 : while (1) {
      i54 = HEAP8[i47] | 0;
      if ((i54 & 1) == 0) {
       i173 = (i54 & 255) >>> 1;
      } else {
       i173 = HEAP32[i58 >> 2] | 0;
      }
      if (!(i55 >>> 0 < i173 >>> 0)) {
       break L397;
      }
      i54 = HEAP32[i1 >> 2] | 0;
      do {
       if ((i54 | 0) == 0) {
        i174 = 1;
       } else {
        i36 = HEAP32[i54 + 12 >> 2] | 0;
        if ((i36 | 0) == (HEAP32[i54 + 16 >> 2] | 0)) {
         i175 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i54 >> 2] | 0) + 36 >> 2] & 127](i54) | 0;
        } else {
         i175 = HEAP32[i36 >> 2] | 0;
        }
        if ((i175 | 0) == -1) {
         HEAP32[i1 >> 2] = 0;
         i174 = 1;
         break;
        } else {
         i174 = (HEAP32[i1 >> 2] | 0) == 0;
         break;
        }
       }
      } while (0);
      i54 = HEAP32[i2 >> 2] | 0;
      do {
       if ((i54 | 0) == 0) {
        i42 = 311;
       } else {
        i36 = HEAP32[i54 + 12 >> 2] | 0;
        if ((i36 | 0) == (HEAP32[i54 + 16 >> 2] | 0)) {
         i176 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i54 >> 2] | 0) + 36 >> 2] & 127](i54) | 0;
        } else {
         i176 = HEAP32[i36 >> 2] | 0;
        }
        if ((i176 | 0) == -1) {
         HEAP32[i2 >> 2] = 0;
         i42 = 311;
         break;
        } else {
         if (i174) {
          break;
         } else {
          break L399;
         }
        }
       }
      } while (0);
      if ((i42 | 0) == 311) {
       i42 = 0;
       if (i174) {
        break;
       }
      }
      i54 = HEAP32[i1 >> 2] | 0;
      i36 = HEAP32[i54 + 12 >> 2] | 0;
      if ((i36 | 0) == (HEAP32[i54 + 16 >> 2] | 0)) {
       i177 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i54 >> 2] | 0) + 36 >> 2] & 127](i54) | 0;
      } else {
       i177 = HEAP32[i36 >> 2] | 0;
      }
      if ((HEAP8[i47] & 1) == 0) {
       i178 = i58;
      } else {
       i178 = HEAP32[i57 >> 2] | 0;
      }
      if ((i177 | 0) != (HEAP32[i178 + (i55 << 2) >> 2] | 0)) {
       break;
      }
      i36 = i55 + 1 | 0;
      i54 = HEAP32[i1 >> 2] | 0;
      i11 = i54 + 12 | 0;
      i53 = HEAP32[i11 >> 2] | 0;
      if ((i53 | 0) == (HEAP32[i54 + 16 >> 2] | 0)) {
       FUNCTION_TABLE_ii[HEAP32[(HEAP32[i54 >> 2] | 0) + 40 >> 2] & 127](i54) | 0;
       i55 = i36;
       continue;
      } else {
       HEAP32[i11 >> 2] = i53 + 4;
       i55 = i36;
       continue;
      }
     }
     HEAP32[i6 >> 2] = HEAP32[i6 >> 2] | 4;
     i170 = 0;
     i171 = i45;
     i172 = i48;
     break L390;
    }
   } while (0);
   if ((i45 | 0) == (i46 | 0)) {
    i170 = 1;
    i171 = i46;
    i172 = i48;
   } else {
    HEAP32[i23 >> 2] = 0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj(i17, i45, i46, i23);
    if ((HEAP32[i23 >> 2] | 0) == 0) {
     i170 = 1;
     i171 = i45;
     i172 = i48;
    } else {
     HEAP32[i6 >> 2] = HEAP32[i6 >> 2] | 4;
     i170 = 0;
     i171 = i45;
     i172 = i48;
    }
   }
  }
 } while (0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(i21);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(i20);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(i19);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(i18);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i17);
 if ((i171 | 0) == 0) {
  STACKTOP = i12;
  return i170 | 0;
 }
 FUNCTION_TABLE_vi[i172 & 255](i171);
 STACKTOP = i12;
 return i170 | 0;
}
function ___floatscan(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, d8 = 0.0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, d38 = 0.0, i39 = 0, d40 = 0.0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0, i49 = 0, i50 = 0, i51 = 0, d52 = 0.0, i53 = 0, d54 = 0.0, i55 = 0, d56 = 0.0, i57 = 0, d58 = 0.0, d59 = 0.0, i60 = 0, i61 = 0, i62 = 0, i63 = 0, i64 = 0, i65 = 0, i66 = 0, d67 = 0.0, i68 = 0, d69 = 0.0, i70 = 0, i71 = 0, i72 = 0, i73 = 0, d74 = 0.0, i75 = 0, d76 = 0.0, d77 = 0.0, i78 = 0, d79 = 0.0, i80 = 0, i81 = 0, i82 = 0, i83 = 0, i84 = 0, i85 = 0, i86 = 0, i87 = 0, i88 = 0, i89 = 0, i90 = 0, i91 = 0, i92 = 0, i93 = 0, i94 = 0, i95 = 0, i96 = 0, i97 = 0, i98 = 0, i99 = 0, i100 = 0, i101 = 0, i102 = 0, i103 = 0, i104 = 0, i105 = 0, i106 = 0, i107 = 0, i108 = 0, i109 = 0, i110 = 0, i111 = 0, i112 = 0, i113 = 0, i114 = 0, i115 = 0, i116 = 0, i117 = 0, i118 = 0, i119 = 0, i120 = 0, i121 = 0, i122 = 0, i123 = 0, i124 = 0, i125 = 0, i126 = 0, i127 = 0, i128 = 0, i129 = 0, i130 = 0, i131 = 0, i132 = 0, i133 = 0, i134 = 0, i135 = 0, i136 = 0, i137 = 0, i138 = 0, i139 = 0, i140 = 0, i141 = 0, i142 = 0, i143 = 0, i144 = 0, i145 = 0, i146 = 0, i147 = 0, i148 = 0, i149 = 0, i150 = 0, i151 = 0, i152 = 0, i153 = 0, i154 = 0, i155 = 0, i156 = 0, i157 = 0, i158 = 0, i159 = 0, i160 = 0, i161 = 0, i162 = 0, i163 = 0, i164 = 0, i165 = 0, i166 = 0, i167 = 0, i168 = 0, i169 = 0, i170 = 0, d171 = 0.0, i172 = 0, i173 = 0, d174 = 0.0, d175 = 0.0, d176 = 0.0, d177 = 0.0, d178 = 0.0, d179 = 0.0, i180 = 0, i181 = 0, d182 = 0.0, i183 = 0, d184 = 0.0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 512 | 0;
 i5 = i4;
 if ((i2 | 0) == 2) {
  i6 = 53;
  i7 = -1074;
 } else if ((i2 | 0) == 1) {
  i6 = 53;
  i7 = -1074;
 } else if ((i2 | 0) == 0) {
  i6 = 24;
  i7 = -149;
 } else {
  d8 = 0.0;
  STACKTOP = i4;
  return +d8;
 }
 i2 = i1 + 4 | 0;
 i9 = i1 + 100 | 0;
 do {
  i10 = HEAP32[i2 >> 2] | 0;
  if (i10 >>> 0 < (HEAP32[i9 >> 2] | 0) >>> 0) {
   HEAP32[i2 >> 2] = i10 + 1;
   i11 = HEAPU8[i10] | 0;
  } else {
   i11 = ___shgetc(i1) | 0;
  }
 } while ((_isspace(i11 | 0) | 0) != 0);
 do {
  if ((i11 | 0) == 43 | (i11 | 0) == 45) {
   i10 = 1 - (((i11 | 0) == 45) << 1) | 0;
   i12 = HEAP32[i2 >> 2] | 0;
   if (i12 >>> 0 < (HEAP32[i9 >> 2] | 0) >>> 0) {
    HEAP32[i2 >> 2] = i12 + 1;
    i13 = HEAPU8[i12] | 0;
    i14 = i10;
    break;
   } else {
    i13 = ___shgetc(i1) | 0;
    i14 = i10;
    break;
   }
  } else {
   i13 = i11;
   i14 = 1;
  }
 } while (0);
 i11 = i13;
 i13 = 0;
 while (1) {
  if ((i11 | 32 | 0) != (HEAP8[14728 + i13 | 0] | 0)) {
   i15 = i11;
   i16 = i13;
   break;
  }
  do {
   if (i13 >>> 0 < 7) {
    i10 = HEAP32[i2 >> 2] | 0;
    if (i10 >>> 0 < (HEAP32[i9 >> 2] | 0) >>> 0) {
     HEAP32[i2 >> 2] = i10 + 1;
     i17 = HEAPU8[i10] | 0;
     break;
    } else {
     i17 = ___shgetc(i1) | 0;
     break;
    }
   } else {
    i17 = i11;
   }
  } while (0);
  i10 = i13 + 1 | 0;
  if (i10 >>> 0 < 8) {
   i11 = i17;
   i13 = i10;
  } else {
   i15 = i17;
   i16 = i10;
   break;
  }
 }
 do {
  if ((i16 | 0) == 3) {
   i18 = 23;
  } else if ((i16 | 0) != 8) {
   i17 = (i3 | 0) == 0;
   if (!(i16 >>> 0 < 4 | i17)) {
    if ((i16 | 0) == 8) {
     break;
    } else {
     i18 = 23;
     break;
    }
   }
   L34 : do {
    if ((i16 | 0) == 0) {
     i13 = i15;
     i11 = 0;
     while (1) {
      if ((i13 | 32 | 0) != (HEAP8[14744 + i11 | 0] | 0)) {
       i19 = i13;
       i20 = i11;
       break L34;
      }
      do {
       if (i11 >>> 0 < 2) {
        i10 = HEAP32[i2 >> 2] | 0;
        if (i10 >>> 0 < (HEAP32[i9 >> 2] | 0) >>> 0) {
         HEAP32[i2 >> 2] = i10 + 1;
         i21 = HEAPU8[i10] | 0;
         break;
        } else {
         i21 = ___shgetc(i1) | 0;
         break;
        }
       } else {
        i21 = i13;
       }
      } while (0);
      i10 = i11 + 1 | 0;
      if (i10 >>> 0 < 3) {
       i13 = i21;
       i11 = i10;
      } else {
       i19 = i21;
       i20 = i10;
       break;
      }
     }
    } else {
     i19 = i15;
     i20 = i16;
    }
   } while (0);
   if ((i20 | 0) == 3) {
    i11 = HEAP32[i2 >> 2] | 0;
    if (i11 >>> 0 < (HEAP32[i9 >> 2] | 0) >>> 0) {
     HEAP32[i2 >> 2] = i11 + 1;
     i22 = HEAPU8[i11] | 0;
    } else {
     i22 = ___shgetc(i1) | 0;
    }
    if ((i22 | 0) == 40) {
     i23 = 1;
    } else {
     if ((HEAP32[i9 >> 2] | 0) == 0) {
      d8 = nan;
      STACKTOP = i4;
      return +d8;
     }
     HEAP32[i2 >> 2] = (HEAP32[i2 >> 2] | 0) + -1;
     d8 = nan;
     STACKTOP = i4;
     return +d8;
    }
    while (1) {
     i11 = HEAP32[i2 >> 2] | 0;
     if (i11 >>> 0 < (HEAP32[i9 >> 2] | 0) >>> 0) {
      HEAP32[i2 >> 2] = i11 + 1;
      i24 = HEAPU8[i11] | 0;
     } else {
      i24 = ___shgetc(i1) | 0;
     }
     if (!((i24 + -48 | 0) >>> 0 < 10 | (i24 + -65 | 0) >>> 0 < 26)) {
      if (!((i24 + -97 | 0) >>> 0 < 26 | (i24 | 0) == 95)) {
       break;
      }
     }
     i23 = i23 + 1 | 0;
    }
    if ((i24 | 0) == 41) {
     d8 = nan;
     STACKTOP = i4;
     return +d8;
    }
    i11 = (HEAP32[i9 >> 2] | 0) == 0;
    if (!i11) {
     HEAP32[i2 >> 2] = (HEAP32[i2 >> 2] | 0) + -1;
    }
    if (i17) {
     HEAP32[(___errno_location() | 0) >> 2] = 22;
     ___shlim(i1, 0);
     d8 = 0.0;
     STACKTOP = i4;
     return +d8;
    }
    if ((i23 | 0) == 0 | i11) {
     d8 = nan;
     STACKTOP = i4;
     return +d8;
    } else {
     i25 = i23;
    }
    while (1) {
     i11 = i25 + -1 | 0;
     HEAP32[i2 >> 2] = (HEAP32[i2 >> 2] | 0) + -1;
     if ((i11 | 0) == 0) {
      d8 = nan;
      break;
     } else {
      i25 = i11;
     }
    }
    STACKTOP = i4;
    return +d8;
   } else if ((i20 | 0) == 0) {
    do {
     if ((i19 | 0) == 48) {
      i11 = HEAP32[i2 >> 2] | 0;
      if (i11 >>> 0 < (HEAP32[i9 >> 2] | 0) >>> 0) {
       HEAP32[i2 >> 2] = i11 + 1;
       i26 = HEAPU8[i11] | 0;
      } else {
       i26 = ___shgetc(i1) | 0;
      }
      if ((i26 | 32 | 0) != 120) {
       if ((HEAP32[i9 >> 2] | 0) == 0) {
        i27 = 48;
        break;
       }
       HEAP32[i2 >> 2] = (HEAP32[i2 >> 2] | 0) + -1;
       i27 = 48;
       break;
      }
      i11 = HEAP32[i2 >> 2] | 0;
      if (i11 >>> 0 < (HEAP32[i9 >> 2] | 0) >>> 0) {
       HEAP32[i2 >> 2] = i11 + 1;
       i28 = HEAPU8[i11] | 0;
       i29 = 0;
      } else {
       i28 = ___shgetc(i1) | 0;
       i29 = 0;
      }
      while (1) {
       if ((i28 | 0) == 46) {
        i18 = 70;
        break;
       } else if ((i28 | 0) != 48) {
        i30 = 0;
        i31 = 0;
        i32 = 0;
        i33 = 0;
        i34 = i28;
        i35 = i29;
        i36 = 0;
        i37 = 0;
        d38 = 1.0;
        i39 = 0;
        d40 = 0.0;
        break;
       }
       i11 = HEAP32[i2 >> 2] | 0;
       if (i11 >>> 0 < (HEAP32[i9 >> 2] | 0) >>> 0) {
        HEAP32[i2 >> 2] = i11 + 1;
        i28 = HEAPU8[i11] | 0;
        i29 = 1;
        continue;
       } else {
        i28 = ___shgetc(i1) | 0;
        i29 = 1;
        continue;
       }
      }
      L102 : do {
       if ((i18 | 0) == 70) {
        i11 = HEAP32[i2 >> 2] | 0;
        if (i11 >>> 0 < (HEAP32[i9 >> 2] | 0) >>> 0) {
         HEAP32[i2 >> 2] = i11 + 1;
         i41 = HEAPU8[i11] | 0;
        } else {
         i41 = ___shgetc(i1) | 0;
        }
        if ((i41 | 0) == 48) {
         i11 = -1;
         i13 = -1;
         while (1) {
          i10 = HEAP32[i2 >> 2] | 0;
          if (i10 >>> 0 < (HEAP32[i9 >> 2] | 0) >>> 0) {
           HEAP32[i2 >> 2] = i10 + 1;
           i42 = HEAPU8[i10] | 0;
          } else {
           i42 = ___shgetc(i1) | 0;
          }
          if ((i42 | 0) != 48) {
           i30 = 0;
           i31 = 0;
           i32 = i11;
           i33 = i13;
           i34 = i42;
           i35 = 1;
           i36 = 1;
           i37 = 0;
           d38 = 1.0;
           i39 = 0;
           d40 = 0.0;
           break L102;
          }
          i10 = _i64Add(i11 | 0, i13 | 0, -1, -1) | 0;
          i11 = i10;
          i13 = tempRet0;
         }
        } else {
         i30 = 0;
         i31 = 0;
         i32 = 0;
         i33 = 0;
         i34 = i41;
         i35 = i29;
         i36 = 1;
         i37 = 0;
         d38 = 1.0;
         i39 = 0;
         d40 = 0.0;
        }
       }
      } while (0);
      L115 : while (1) {
       i13 = i34 + -48 | 0;
       do {
        if (i13 >>> 0 < 10) {
         i43 = i13;
         i18 = 84;
        } else {
         i11 = i34 | 32;
         i10 = (i34 | 0) == 46;
         if (!((i11 + -97 | 0) >>> 0 < 6 | i10)) {
          i44 = i34;
          break L115;
         }
         if (i10) {
          if ((i36 | 0) == 0) {
           i45 = i31;
           i46 = i30;
           i47 = i31;
           i48 = i30;
           i49 = i35;
           i50 = 1;
           i51 = i37;
           d52 = d38;
           i53 = i39;
           d54 = d40;
           break;
          } else {
           i44 = 46;
           break L115;
          }
         } else {
          i43 = (i34 | 0) > 57 ? i11 + -87 | 0 : i13;
          i18 = 84;
          break;
         }
        }
       } while (0);
       if ((i18 | 0) == 84) {
        i18 = 0;
        do {
         if ((i30 | 0) < 0 | (i30 | 0) == 0 & i31 >>> 0 < 8) {
          i55 = i37;
          d56 = d38;
          i57 = i43 + (i39 << 4) | 0;
          d58 = d40;
         } else {
          if ((i30 | 0) < 0 | (i30 | 0) == 0 & i31 >>> 0 < 14) {
           d59 = d38 * .0625;
           i55 = i37;
           d56 = d59;
           i57 = i39;
           d58 = d40 + d59 * +(i43 | 0);
           break;
          }
          if ((i43 | 0) != 0 & (i37 | 0) == 0) {
           i55 = 1;
           d56 = d38;
           i57 = i39;
           d58 = d40 + d38 * .5;
          } else {
           i55 = i37;
           d56 = d38;
           i57 = i39;
           d58 = d40;
          }
         }
        } while (0);
        i13 = _i64Add(i31 | 0, i30 | 0, 1, 0) | 0;
        i45 = i32;
        i46 = i33;
        i47 = i13;
        i48 = tempRet0;
        i49 = 1;
        i50 = i36;
        i51 = i55;
        d52 = d56;
        i53 = i57;
        d54 = d58;
       }
       i13 = HEAP32[i2 >> 2] | 0;
       if (i13 >>> 0 < (HEAP32[i9 >> 2] | 0) >>> 0) {
        HEAP32[i2 >> 2] = i13 + 1;
        i30 = i48;
        i31 = i47;
        i32 = i45;
        i33 = i46;
        i34 = HEAPU8[i13] | 0;
        i35 = i49;
        i36 = i50;
        i37 = i51;
        d38 = d52;
        i39 = i53;
        d40 = d54;
        continue;
       } else {
        i30 = i48;
        i31 = i47;
        i32 = i45;
        i33 = i46;
        i34 = ___shgetc(i1) | 0;
        i35 = i49;
        i36 = i50;
        i37 = i51;
        d38 = d52;
        i39 = i53;
        d40 = d54;
        continue;
       }
      }
      if ((i35 | 0) == 0) {
       i13 = (HEAP32[i9 >> 2] | 0) == 0;
       if (!i13) {
        HEAP32[i2 >> 2] = (HEAP32[i2 >> 2] | 0) + -1;
       }
       if (i17) {
        ___shlim(i1, 0);
       } else {
        if (!i13) {
         i13 = HEAP32[i2 >> 2] | 0;
         HEAP32[i2 >> 2] = i13 + -1;
         if ((i36 | 0) != 0) {
          HEAP32[i2 >> 2] = i13 + -2;
         }
        }
       }
       d8 = +(i14 | 0) * 0.0;
       STACKTOP = i4;
       return +d8;
      }
      i13 = (i36 | 0) == 0;
      i11 = i13 ? i31 : i32;
      i10 = i13 ? i30 : i33;
      if ((i30 | 0) < 0 | (i30 | 0) == 0 & i31 >>> 0 < 8) {
       i13 = i31;
       i12 = i30;
       i60 = i39;
       while (1) {
        i61 = i60 << 4;
        i62 = _i64Add(i13 | 0, i12 | 0, 1, 0) | 0;
        i63 = tempRet0;
        if ((i63 | 0) < 0 | (i63 | 0) == 0 & i62 >>> 0 < 8) {
         i13 = i62;
         i12 = i63;
         i60 = i61;
        } else {
         i64 = i61;
         break;
        }
       }
      } else {
       i64 = i39;
      }
      do {
       if ((i44 | 32 | 0) == 112) {
        i60 = _scanexp(i1, i3) | 0;
        i12 = tempRet0;
        if ((i60 | 0) == 0 & (i12 | 0) == -2147483648) {
         if (i17) {
          ___shlim(i1, 0);
          d8 = 0.0;
          STACKTOP = i4;
          return +d8;
         } else {
          if ((HEAP32[i9 >> 2] | 0) == 0) {
           i65 = 0;
           i66 = 0;
           break;
          }
          HEAP32[i2 >> 2] = (HEAP32[i2 >> 2] | 0) + -1;
          i65 = 0;
          i66 = 0;
          break;
         }
        } else {
         i65 = i60;
         i66 = i12;
        }
       } else {
        if ((HEAP32[i9 >> 2] | 0) == 0) {
         i65 = 0;
         i66 = 0;
        } else {
         HEAP32[i2 >> 2] = (HEAP32[i2 >> 2] | 0) + -1;
         i65 = 0;
         i66 = 0;
        }
       }
      } while (0);
      i12 = _bitshift64Shl(i11 | 0, i10 | 0, 2) | 0;
      i60 = _i64Add(i12 | 0, tempRet0 | 0, -32, -1) | 0;
      i12 = _i64Add(i60 | 0, tempRet0 | 0, i65 | 0, i66 | 0) | 0;
      i60 = tempRet0;
      if ((i64 | 0) == 0) {
       d8 = +(i14 | 0) * 0.0;
       STACKTOP = i4;
       return +d8;
      }
      if ((i60 | 0) > 0 | (i60 | 0) == 0 & i12 >>> 0 > (0 - i7 | 0) >>> 0) {
       HEAP32[(___errno_location() | 0) >> 2] = 34;
       d8 = +(i14 | 0) * 1.7976931348623157e+308 * 1.7976931348623157e+308;
       STACKTOP = i4;
       return +d8;
      }
      i13 = i7 + -106 | 0;
      i61 = ((i13 | 0) < 0) << 31 >> 31;
      if ((i60 | 0) < (i61 | 0) | (i60 | 0) == (i61 | 0) & i12 >>> 0 < i13 >>> 0) {
       HEAP32[(___errno_location() | 0) >> 2] = 34;
       d8 = +(i14 | 0) * 2.2250738585072014e-308 * 2.2250738585072014e-308;
       STACKTOP = i4;
       return +d8;
      }
      if ((i64 | 0) > -1) {
       i13 = i12;
       i61 = i60;
       i63 = i64;
       d59 = d40;
       while (1) {
        i62 = i63 << 1;
        if (!(d59 >= .5)) {
         d67 = d59;
         i68 = i62;
        } else {
         d67 = d59 + -1.0;
         i68 = i62 | 1;
        }
        d69 = d59 + d67;
        i62 = _i64Add(i13 | 0, i61 | 0, -1, -1) | 0;
        i70 = tempRet0;
        if ((i68 | 0) > -1) {
         i13 = i62;
         i61 = i70;
         i63 = i68;
         d59 = d69;
        } else {
         i71 = i62;
         i72 = i70;
         i73 = i68;
         d74 = d69;
         break;
        }
       }
      } else {
       i71 = i12;
       i72 = i60;
       i73 = i64;
       d74 = d40;
      }
      i63 = _i64Subtract(32, 0, i7 | 0, ((i7 | 0) < 0) << 31 >> 31 | 0) | 0;
      i61 = _i64Add(i71 | 0, i72 | 0, i63 | 0, tempRet0 | 0) | 0;
      i63 = tempRet0;
      if (0 > (i63 | 0) | 0 == (i63 | 0) & i6 >>> 0 > i61 >>> 0) {
       i75 = (i61 | 0) < 0 ? 0 : i61;
      } else {
       i75 = i6;
      }
      if ((i75 | 0) < 53) {
       d59 = +(i14 | 0);
       d69 = +_copysign(+(+_scalbn(1.0, 84 - i75 | 0)), +d59);
       if ((i75 | 0) < 32 & d74 != 0.0) {
        i61 = i73 & 1;
        d76 = d59;
        d77 = d69;
        i78 = (i61 ^ 1) + i73 | 0;
        d79 = (i61 | 0) == 0 ? 0.0 : d74;
       } else {
        d76 = d59;
        d77 = d69;
        i78 = i73;
        d79 = d74;
       }
      } else {
       d76 = +(i14 | 0);
       d77 = 0.0;
       i78 = i73;
       d79 = d74;
      }
      d69 = d76 * d79 + (d77 + d76 * +(i78 >>> 0)) - d77;
      if (!(d69 != 0.0)) {
       HEAP32[(___errno_location() | 0) >> 2] = 34;
      }
      d8 = +_scalbnl(d69, i71);
      STACKTOP = i4;
      return +d8;
     } else {
      i27 = i19;
     }
    } while (0);
    i61 = i7 + i6 | 0;
    i63 = 0 - i61 | 0;
    i13 = i27;
    i10 = 0;
    while (1) {
     if ((i13 | 0) == 46) {
      i18 = 139;
      break;
     } else if ((i13 | 0) != 48) {
      i80 = i13;
      i81 = 0;
      i82 = 0;
      i83 = i10;
      i84 = 0;
      break;
     }
     i11 = HEAP32[i2 >> 2] | 0;
     if (i11 >>> 0 < (HEAP32[i9 >> 2] | 0) >>> 0) {
      HEAP32[i2 >> 2] = i11 + 1;
      i13 = HEAPU8[i11] | 0;
      i10 = 1;
      continue;
     } else {
      i13 = ___shgetc(i1) | 0;
      i10 = 1;
      continue;
     }
    }
    L204 : do {
     if ((i18 | 0) == 139) {
      i13 = HEAP32[i2 >> 2] | 0;
      if (i13 >>> 0 < (HEAP32[i9 >> 2] | 0) >>> 0) {
       HEAP32[i2 >> 2] = i13 + 1;
       i85 = HEAPU8[i13] | 0;
      } else {
       i85 = ___shgetc(i1) | 0;
      }
      if ((i85 | 0) == 48) {
       i13 = -1;
       i11 = -1;
       while (1) {
        i70 = HEAP32[i2 >> 2] | 0;
        if (i70 >>> 0 < (HEAP32[i9 >> 2] | 0) >>> 0) {
         HEAP32[i2 >> 2] = i70 + 1;
         i86 = HEAPU8[i70] | 0;
        } else {
         i86 = ___shgetc(i1) | 0;
        }
        if ((i86 | 0) != 48) {
         i80 = i86;
         i81 = i13;
         i82 = i11;
         i83 = 1;
         i84 = 1;
         break L204;
        }
        i70 = _i64Add(i13 | 0, i11 | 0, -1, -1) | 0;
        i13 = i70;
        i11 = tempRet0;
       }
      } else {
       i80 = i85;
       i81 = 0;
       i82 = 0;
       i83 = i10;
       i84 = 1;
      }
     }
    } while (0);
    HEAP32[i5 >> 2] = 0;
    i10 = i80 + -48 | 0;
    i11 = (i80 | 0) == 46;
    L218 : do {
     if (i10 >>> 0 < 10 | i11) {
      i13 = i5 + 496 | 0;
      i60 = i80;
      i12 = 0;
      i70 = 0;
      i62 = i11;
      i87 = i10;
      i88 = i81;
      i89 = i82;
      i90 = i83;
      i91 = i84;
      i92 = 0;
      i93 = 0;
      i94 = 0;
      while (1) {
       do {
        if (i62) {
         if ((i91 | 0) == 0) {
          i95 = i12;
          i96 = i70;
          i97 = i12;
          i98 = i70;
          i99 = i90;
          i100 = 1;
          i101 = i92;
          i102 = i93;
          i103 = i94;
         } else {
          i104 = i60;
          i105 = i88;
          i106 = i89;
          i107 = i12;
          i108 = i70;
          i109 = i90;
          i110 = i92;
          i111 = i93;
          i112 = i94;
          break L218;
         }
        } else {
         i113 = _i64Add(i12 | 0, i70 | 0, 1, 0) | 0;
         i114 = tempRet0;
         i115 = (i60 | 0) != 48;
         if ((i93 | 0) >= 125) {
          if (!i115) {
           i95 = i88;
           i96 = i89;
           i97 = i113;
           i98 = i114;
           i99 = i90;
           i100 = i91;
           i101 = i92;
           i102 = i93;
           i103 = i94;
           break;
          }
          HEAP32[i13 >> 2] = HEAP32[i13 >> 2] | 1;
          i95 = i88;
          i96 = i89;
          i97 = i113;
          i98 = i114;
          i99 = i90;
          i100 = i91;
          i101 = i92;
          i102 = i93;
          i103 = i94;
          break;
         }
         i116 = i5 + (i93 << 2) | 0;
         if ((i92 | 0) == 0) {
          i117 = i87;
         } else {
          i117 = i60 + -48 + ((HEAP32[i116 >> 2] | 0) * 10 | 0) | 0;
         }
         HEAP32[i116 >> 2] = i117;
         i116 = i92 + 1 | 0;
         i118 = (i116 | 0) == 9;
         i95 = i88;
         i96 = i89;
         i97 = i113;
         i98 = i114;
         i99 = 1;
         i100 = i91;
         i101 = i118 ? 0 : i116;
         i102 = (i118 & 1) + i93 | 0;
         i103 = i115 ? i113 : i94;
        }
       } while (0);
       i113 = HEAP32[i2 >> 2] | 0;
       if (i113 >>> 0 < (HEAP32[i9 >> 2] | 0) >>> 0) {
        HEAP32[i2 >> 2] = i113 + 1;
        i119 = HEAPU8[i113] | 0;
       } else {
        i119 = ___shgetc(i1) | 0;
       }
       i113 = i119 + -48 | 0;
       i115 = (i119 | 0) == 46;
       if (i113 >>> 0 < 10 | i115) {
        i60 = i119;
        i12 = i97;
        i70 = i98;
        i62 = i115;
        i87 = i113;
        i88 = i95;
        i89 = i96;
        i90 = i99;
        i91 = i100;
        i92 = i101;
        i93 = i102;
        i94 = i103;
       } else {
        i120 = i119;
        i121 = i97;
        i122 = i95;
        i123 = i98;
        i124 = i96;
        i125 = i99;
        i126 = i100;
        i127 = i101;
        i128 = i102;
        i129 = i103;
        i18 = 162;
        break;
       }
      }
     } else {
      i120 = i80;
      i121 = 0;
      i122 = i81;
      i123 = 0;
      i124 = i82;
      i125 = i83;
      i126 = i84;
      i127 = 0;
      i128 = 0;
      i129 = 0;
      i18 = 162;
     }
    } while (0);
    if ((i18 | 0) == 162) {
     i10 = (i126 | 0) == 0;
     i104 = i120;
     i105 = i10 ? i121 : i122;
     i106 = i10 ? i123 : i124;
     i107 = i121;
     i108 = i123;
     i109 = i125;
     i110 = i127;
     i111 = i128;
     i112 = i129;
    }
    i10 = (i109 | 0) != 0;
    if (i10) {
     if ((i104 | 32 | 0) == 101) {
      i11 = _scanexp(i1, i3) | 0;
      i94 = tempRet0;
      do {
       if ((i11 | 0) == 0 & (i94 | 0) == -2147483648) {
        if (i17) {
         ___shlim(i1, 0);
         d8 = 0.0;
         STACKTOP = i4;
         return +d8;
        } else {
         if ((HEAP32[i9 >> 2] | 0) == 0) {
          i130 = 0;
          i131 = 0;
          break;
         }
         HEAP32[i2 >> 2] = (HEAP32[i2 >> 2] | 0) + -1;
         i130 = 0;
         i131 = 0;
         break;
        }
       } else {
        i130 = i11;
        i131 = i94;
       }
      } while (0);
      i94 = _i64Add(i130 | 0, i131 | 0, i105 | 0, i106 | 0) | 0;
      i132 = i94;
      i133 = tempRet0;
     } else {
      i18 = 171;
     }
    } else {
     i18 = 171;
    }
    if ((i18 | 0) == 171) {
     if ((i104 | 0) > -1) {
      if ((HEAP32[i9 >> 2] | 0) == 0) {
       i132 = i105;
       i133 = i106;
      } else {
       HEAP32[i2 >> 2] = (HEAP32[i2 >> 2] | 0) + -1;
       i132 = i105;
       i133 = i106;
      }
     } else {
      i132 = i105;
      i133 = i106;
     }
    }
    if (!i10) {
     HEAP32[(___errno_location() | 0) >> 2] = 22;
     ___shlim(i1, 0);
     d8 = 0.0;
     STACKTOP = i4;
     return +d8;
    }
    i94 = HEAP32[i5 >> 2] | 0;
    if ((i94 | 0) == 0) {
     d8 = +(i14 | 0) * 0.0;
     STACKTOP = i4;
     return +d8;
    }
    do {
     if ((i132 | 0) == (i107 | 0) & (i133 | 0) == (i108 | 0) & ((i108 | 0) < 0 | (i108 | 0) == 0 & i107 >>> 0 < 10)) {
      if (!(i6 >>> 0 > 30)) {
       if ((i94 >>> i6 | 0) != 0) {
        break;
       }
      }
      d8 = +(i14 | 0) * +(i94 >>> 0);
      STACKTOP = i4;
      return +d8;
     }
    } while (0);
    i94 = (i7 | 0) / -2 | 0;
    i10 = ((i94 | 0) < 0) << 31 >> 31;
    if ((i133 | 0) > (i10 | 0) | (i133 | 0) == (i10 | 0) & i132 >>> 0 > i94 >>> 0) {
     HEAP32[(___errno_location() | 0) >> 2] = 34;
     d8 = +(i14 | 0) * 1.7976931348623157e+308 * 1.7976931348623157e+308;
     STACKTOP = i4;
     return +d8;
    }
    i94 = i7 + -106 | 0;
    i10 = ((i94 | 0) < 0) << 31 >> 31;
    if ((i133 | 0) < (i10 | 0) | (i133 | 0) == (i10 | 0) & i132 >>> 0 < i94 >>> 0) {
     HEAP32[(___errno_location() | 0) >> 2] = 34;
     d8 = +(i14 | 0) * 2.2250738585072014e-308 * 2.2250738585072014e-308;
     STACKTOP = i4;
     return +d8;
    }
    if ((i110 | 0) == 0) {
     i134 = i111;
    } else {
     if ((i110 | 0) < 9) {
      i94 = i5 + (i111 << 2) | 0;
      i10 = HEAP32[i94 >> 2] | 0;
      i11 = i110;
      do {
       i10 = i10 * 10 | 0;
       i11 = i11 + 1 | 0;
      } while ((i11 | 0) != 9);
      HEAP32[i94 >> 2] = i10;
     }
     i134 = i111 + 1 | 0;
    }
    do {
     if ((i112 | 0) < 9) {
      if ((i112 | 0) <= (i132 | 0) & (i132 | 0) < 18) {
       if ((i132 | 0) == 9) {
        d8 = +(i14 | 0) * +((HEAP32[i5 >> 2] | 0) >>> 0);
        STACKTOP = i4;
        return +d8;
       }
       if ((i132 | 0) < 9) {
        d8 = +(i14 | 0) * +((HEAP32[i5 >> 2] | 0) >>> 0) / +(HEAP32[14760 + (8 - i132 << 2) >> 2] | 0);
        STACKTOP = i4;
        return +d8;
       }
       i11 = i6 + 27 + (Math_imul(i132, -3) | 0) | 0;
       i17 = HEAP32[i5 >> 2] | 0;
       if ((i11 | 0) <= 30) {
        if ((i17 >>> i11 | 0) != 0) {
         break;
        }
       }
       d8 = +(i14 | 0) * +(i17 >>> 0) * +(HEAP32[14760 + (i132 + -10 << 2) >> 2] | 0);
       STACKTOP = i4;
       return +d8;
      }
     }
    } while (0);
    i10 = (i132 | 0) % 9 | 0;
    if ((i10 | 0) == 0) {
     i135 = 0;
     i136 = 0;
     i137 = i132;
     i138 = i134;
    } else {
     i94 = (i132 | 0) > -1 ? i10 : i10 + 9 | 0;
     i10 = HEAP32[14760 + (8 - i94 << 2) >> 2] | 0;
     if ((i134 | 0) == 0) {
      i139 = 0;
      i140 = i132;
      i141 = 0;
     } else {
      i17 = 1e9 / (i10 | 0) | 0;
      i11 = 0;
      i93 = 0;
      i92 = 0;
      i91 = i132;
      while (1) {
       i90 = i5 + (i92 << 2) | 0;
       i89 = HEAP32[i90 >> 2] | 0;
       i88 = ((i89 >>> 0) / (i10 >>> 0) | 0) + i93 | 0;
       HEAP32[i90 >> 2] = i88;
       i142 = Math_imul((i89 >>> 0) % (i10 >>> 0) | 0, i17) | 0;
       i89 = i92 + 1 | 0;
       if ((i92 | 0) == (i11 | 0) & (i88 | 0) == 0) {
        i143 = i89 & 127;
        i144 = i91 + -9 | 0;
       } else {
        i143 = i11;
        i144 = i91;
       }
       if ((i89 | 0) == (i134 | 0)) {
        break;
       } else {
        i11 = i143;
        i93 = i142;
        i92 = i89;
        i91 = i144;
       }
      }
      if ((i142 | 0) == 0) {
       i139 = i143;
       i140 = i144;
       i141 = i134;
      } else {
       HEAP32[i5 + (i134 << 2) >> 2] = i142;
       i139 = i143;
       i140 = i144;
       i141 = i134 + 1 | 0;
      }
     }
     i135 = i139;
     i136 = 0;
     i137 = 9 - i94 + i140 | 0;
     i138 = i141;
    }
    L316 : while (1) {
     i91 = i5 + (i135 << 2) | 0;
     if ((i137 | 0) < 18) {
      i92 = i136;
      i93 = i138;
      while (1) {
       i11 = 0;
       i17 = i93 + 127 | 0;
       i10 = i93;
       while (1) {
        i89 = i17 & 127;
        i88 = i5 + (i89 << 2) | 0;
        i90 = _bitshift64Shl(HEAP32[i88 >> 2] | 0, 0, 29) | 0;
        i87 = _i64Add(i90 | 0, tempRet0 | 0, i11 | 0, 0) | 0;
        i90 = tempRet0;
        if (i90 >>> 0 > 0 | (i90 | 0) == 0 & i87 >>> 0 > 1e9) {
         i62 = ___udivdi3(i87 | 0, i90 | 0, 1e9, 0) | 0;
         i70 = ___uremdi3(i87 | 0, i90 | 0, 1e9, 0) | 0;
         i145 = i70;
         i146 = i62;
        } else {
         i145 = i87;
         i146 = 0;
        }
        HEAP32[i88 >> 2] = i145;
        i88 = (i89 | 0) == (i135 | 0);
        if ((i89 | 0) != (i10 + 127 & 127 | 0) | i88) {
         i147 = i10;
        } else {
         i147 = (i145 | 0) == 0 ? i89 : i10;
        }
        if (i88) {
         break;
        } else {
         i11 = i146;
         i17 = i89 + -1 | 0;
         i10 = i147;
        }
       }
       i10 = i92 + -29 | 0;
       if ((i146 | 0) == 0) {
        i92 = i10;
        i93 = i147;
       } else {
        i148 = i10;
        i149 = i146;
        i150 = i147;
        break;
       }
      }
     } else {
      if ((i137 | 0) == 18) {
       i151 = i136;
       i152 = i138;
      } else {
       i153 = i135;
       i154 = i136;
       i155 = i137;
       i156 = i138;
       break;
      }
      while (1) {
       if (!((HEAP32[i91 >> 2] | 0) >>> 0 < 9007199)) {
        i153 = i135;
        i154 = i151;
        i155 = 18;
        i156 = i152;
        break L316;
       }
       i93 = 0;
       i92 = i152 + 127 | 0;
       i10 = i152;
       while (1) {
        i17 = i92 & 127;
        i11 = i5 + (i17 << 2) | 0;
        i89 = _bitshift64Shl(HEAP32[i11 >> 2] | 0, 0, 29) | 0;
        i88 = _i64Add(i89 | 0, tempRet0 | 0, i93 | 0, 0) | 0;
        i89 = tempRet0;
        if (i89 >>> 0 > 0 | (i89 | 0) == 0 & i88 >>> 0 > 1e9) {
         i87 = ___udivdi3(i88 | 0, i89 | 0, 1e9, 0) | 0;
         i62 = ___uremdi3(i88 | 0, i89 | 0, 1e9, 0) | 0;
         i157 = i62;
         i158 = i87;
        } else {
         i157 = i88;
         i158 = 0;
        }
        HEAP32[i11 >> 2] = i157;
        i11 = (i17 | 0) == (i135 | 0);
        if ((i17 | 0) != (i10 + 127 & 127 | 0) | i11) {
         i159 = i10;
        } else {
         i159 = (i157 | 0) == 0 ? i17 : i10;
        }
        if (i11) {
         break;
        } else {
         i93 = i158;
         i92 = i17 + -1 | 0;
         i10 = i159;
        }
       }
       i10 = i151 + -29 | 0;
       if ((i158 | 0) == 0) {
        i151 = i10;
        i152 = i159;
       } else {
        i148 = i10;
        i149 = i158;
        i150 = i159;
        break;
       }
      }
     }
     i91 = i135 + 127 & 127;
     if ((i91 | 0) == (i150 | 0)) {
      i10 = i150 + 127 & 127;
      i92 = i5 + ((i150 + 126 & 127) << 2) | 0;
      HEAP32[i92 >> 2] = HEAP32[i92 >> 2] | HEAP32[i5 + (i10 << 2) >> 2];
      i160 = i10;
     } else {
      i160 = i150;
     }
     HEAP32[i5 + (i91 << 2) >> 2] = i149;
     i135 = i91;
     i136 = i148;
     i137 = i137 + 9 | 0;
     i138 = i160;
    }
    L347 : while (1) {
     i161 = i156 + 1 & 127;
     i94 = i5 + ((i156 + 127 & 127) << 2) | 0;
     i91 = i153;
     i10 = i154;
     i92 = i155;
     while (1) {
      i93 = (i92 | 0) == 18;
      i17 = (i92 | 0) > 27 ? 9 : 1;
      i162 = i91;
      i163 = i10;
      while (1) {
       i11 = 0;
       while (1) {
        i88 = i11 + i162 & 127;
        if ((i88 | 0) == (i156 | 0)) {
         i164 = 2;
         break;
        }
        i87 = HEAP32[i5 + (i88 << 2) >> 2] | 0;
        i88 = HEAP32[14752 + (i11 << 2) >> 2] | 0;
        if (i87 >>> 0 < i88 >>> 0) {
         i164 = 2;
         break;
        }
        i62 = i11 + 1 | 0;
        if (i87 >>> 0 > i88 >>> 0) {
         i164 = i11;
         break;
        }
        if ((i62 | 0) < 2) {
         i11 = i62;
        } else {
         i164 = i62;
         break;
        }
       }
       if ((i164 | 0) == 2 & i93) {
        break L347;
       }
       i165 = i17 + i163 | 0;
       if ((i162 | 0) == (i156 | 0)) {
        i162 = i156;
        i163 = i165;
       } else {
        break;
       }
      }
      i93 = (1 << i17) + -1 | 0;
      i11 = 1e9 >>> i17;
      i166 = i162;
      i167 = 0;
      i62 = i162;
      i168 = i92;
      do {
       i88 = i5 + (i62 << 2) | 0;
       i87 = HEAP32[i88 >> 2] | 0;
       i89 = (i87 >>> i17) + i167 | 0;
       HEAP32[i88 >> 2] = i89;
       i167 = Math_imul(i87 & i93, i11) | 0;
       i87 = (i62 | 0) == (i166 | 0) & (i89 | 0) == 0;
       i62 = i62 + 1 & 127;
       i168 = i87 ? i168 + -9 | 0 : i168;
       i166 = i87 ? i62 : i166;
      } while ((i62 | 0) != (i156 | 0));
      if ((i167 | 0) == 0) {
       i91 = i166;
       i10 = i165;
       i92 = i168;
       continue;
      }
      if ((i161 | 0) != (i166 | 0)) {
       break;
      }
      HEAP32[i94 >> 2] = HEAP32[i94 >> 2] | 1;
      i91 = i166;
      i10 = i165;
      i92 = i168;
     }
     HEAP32[i5 + (i156 << 2) >> 2] = i167;
     i153 = i166;
     i154 = i165;
     i155 = i168;
     i156 = i161;
    }
    i92 = i162 & 127;
    if ((i92 | 0) == (i156 | 0)) {
     HEAP32[i5 + (i161 + -1 << 2) >> 2] = 0;
     i169 = i161;
    } else {
     i169 = i156;
    }
    d69 = +((HEAP32[i5 + (i92 << 2) >> 2] | 0) >>> 0);
    i92 = i162 + 1 & 127;
    if ((i92 | 0) == (i169 | 0)) {
     i10 = i169 + 1 & 127;
     HEAP32[i5 + (i10 + -1 << 2) >> 2] = 0;
     i170 = i10;
    } else {
     i170 = i169;
    }
    d59 = +(i14 | 0);
    d171 = d59 * (d69 * 1.0e9 + +((HEAP32[i5 + (i92 << 2) >> 2] | 0) >>> 0));
    i92 = i163 + 53 | 0;
    i10 = i92 - i7 | 0;
    if ((i10 | 0) < (i6 | 0)) {
     i172 = (i10 | 0) < 0 ? 0 : i10;
     i173 = 1;
    } else {
     i172 = i6;
     i173 = 0;
    }
    if ((i172 | 0) < 53) {
     d69 = +_copysign(+(+_scalbn(1.0, 105 - i172 | 0)), +d171);
     d174 = +_fmod(+d171, +(+_scalbn(1.0, 53 - i172 | 0)));
     d175 = d69;
     d176 = d174;
     d177 = d69 + (d171 - d174);
    } else {
     d175 = 0.0;
     d176 = 0.0;
     d177 = d171;
    }
    i91 = i162 + 2 & 127;
    if ((i91 | 0) == (i170 | 0)) {
     d178 = d176;
    } else {
     i94 = HEAP32[i5 + (i91 << 2) >> 2] | 0;
     do {
      if (i94 >>> 0 < 5e8) {
       if ((i94 | 0) == 0) {
        if ((i162 + 3 & 127 | 0) == (i170 | 0)) {
         d179 = d176;
         break;
        }
       }
       d179 = d59 * .25 + d176;
      } else {
       if (i94 >>> 0 > 5e8) {
        d179 = d59 * .75 + d176;
        break;
       }
       if ((i162 + 3 & 127 | 0) == (i170 | 0)) {
        d179 = d59 * .5 + d176;
        break;
       } else {
        d179 = d59 * .75 + d176;
        break;
       }
      }
     } while (0);
     if ((53 - i172 | 0) > 1) {
      if (+_fmod(+d179, 1.0) != 0.0) {
       d178 = d179;
      } else {
       d178 = d179 + 1.0;
      }
     } else {
      d178 = d179;
     }
    }
    d59 = d177 + d178 - d175;
    do {
     if ((i92 & 2147483647 | 0) > (-2 - i61 | 0)) {
      if (!(+Math_abs(+d59) >= 9007199254740992.0)) {
       i180 = i173;
       i181 = i163;
       d182 = d59;
      } else {
       i180 = (i173 | 0) != 0 & (i172 | 0) == (i10 | 0) ? 0 : i173;
       i181 = i163 + 1 | 0;
       d182 = d59 * .5;
      }
      if ((i181 + 50 | 0) <= (i63 | 0)) {
       if (!((i180 | 0) != 0 & d178 != 0.0)) {
        i183 = i181;
        d184 = d182;
        break;
       }
      }
      HEAP32[(___errno_location() | 0) >> 2] = 34;
      i183 = i181;
      d184 = d182;
     } else {
      i183 = i163;
      d184 = d59;
     }
    } while (0);
    d8 = +_scalbnl(d184, i183);
    STACKTOP = i4;
    return +d8;
   } else {
    if ((HEAP32[i9 >> 2] | 0) != 0) {
     HEAP32[i2 >> 2] = (HEAP32[i2 >> 2] | 0) + -1;
    }
    HEAP32[(___errno_location() | 0) >> 2] = 22;
    ___shlim(i1, 0);
    d8 = 0.0;
    STACKTOP = i4;
    return +d8;
   }
  }
 } while (0);
 if ((i18 | 0) == 23) {
  i18 = (HEAP32[i9 >> 2] | 0) == 0;
  if (!i18) {
   HEAP32[i2 >> 2] = (HEAP32[i2 >> 2] | 0) + -1;
  }
  if (!(i16 >>> 0 < 4 | (i3 | 0) == 0 | i18)) {
   i18 = i16;
   do {
    HEAP32[i2 >> 2] = (HEAP32[i2 >> 2] | 0) + -1;
    i18 = i18 + -1 | 0;
   } while (i18 >>> 0 > 3);
  }
 }
 d8 = +(i14 | 0) * inf;
 STACKTOP = i4;
 return +d8;
}
function __Z8StrasseniPPiS0_S0_(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 i6 = i5 + 48 | 0;
 i7 = i5;
 i8 = i5 + 16 | 0;
 if ((HEAP32[10] | 0) >= (i1 | 0)) {
  __Z25MultMatrixBasicPreprocessiPPiS0_S0_(i1, i2, i3, i4) | 0;
  STACKTOP = i5;
  return 1;
 }
 i9 = i1 >> 1;
 i10 = i9 >>> 0 > 1073741823 ? -1 : i9 << 2;
 i11 = __Znaj(i10) | 0;
 i12 = (i9 | 0) > 0;
 if (i12) {
  i13 = 0;
  do {
   HEAP32[i11 + (i13 << 2) >> 2] = __Znaj(i10) | 0;
   i13 = i13 + 1 | 0;
  } while ((i13 | 0) != (i9 | 0));
  HEAP32[i6 >> 2] = i11;
  i13 = __Znaj(i10) | 0;
  i14 = 0;
  do {
   HEAP32[i13 + (i14 << 2) >> 2] = __Znaj(i10) | 0;
   i14 = i14 + 1 | 0;
  } while ((i14 | 0) != (i9 | 0));
  i14 = i6 + 4 | 0;
  HEAP32[i14 >> 2] = i13;
  i13 = __Znaj(i10) | 0;
  i15 = 0;
  do {
   HEAP32[i13 + (i15 << 2) >> 2] = __Znaj(i10) | 0;
   i15 = i15 + 1 | 0;
  } while ((i15 | 0) != (i9 | 0));
  i15 = i6 + 8 | 0;
  HEAP32[i15 >> 2] = i13;
  i13 = __Znaj(i10) | 0;
  if (i12) {
   i16 = 0;
   do {
    HEAP32[i13 + (i16 << 2) >> 2] = __Znaj(i10) | 0;
    i16 = i16 + 1 | 0;
   } while ((i16 | 0) != (i9 | 0));
   i16 = i6 + 12 | 0;
   HEAP32[i16 >> 2] = i13;
   i17 = __Znaj(i10) | 0;
   i18 = 0;
   while (1) {
    HEAP32[i17 + (i18 << 2) >> 2] = __Znaj(i10) | 0;
    i19 = i18 + 1 | 0;
    if ((i19 | 0) == (i9 | 0)) {
     i20 = i15;
     i21 = i14;
     i22 = i17;
     i23 = i6;
     i24 = i16;
     break;
    } else {
     i18 = i19;
    }
   }
  } else {
   i25 = i13;
   i26 = i15;
   i27 = i6;
   i28 = i14;
   i29 = 12;
  }
 } else {
  HEAP32[i6 >> 2] = i11;
  i11 = i6 + 4 | 0;
  HEAP32[i11 >> 2] = __Znaj(i10) | 0;
  i14 = i6 + 8 | 0;
  HEAP32[i14 >> 2] = __Znaj(i10) | 0;
  i25 = __Znaj(i10) | 0;
  i26 = i14;
  i27 = i6;
  i28 = i11;
  i29 = 12;
 }
 if ((i29 | 0) == 12) {
  i29 = i6 + 12 | 0;
  HEAP32[i29 >> 2] = i25;
  i20 = i26;
  i21 = i28;
  i22 = __Znaj(i10) | 0;
  i23 = i27;
  i24 = i29;
 }
 HEAP32[i7 >> 2] = i22;
 i22 = __Znaj(i10) | 0;
 if (i12) {
  i29 = 0;
  do {
   HEAP32[i22 + (i29 << 2) >> 2] = __Znaj(i10) | 0;
   i29 = i29 + 1 | 0;
  } while ((i29 | 0) != (i9 | 0));
  i29 = i7 + 4 | 0;
  HEAP32[i29 >> 2] = i22;
  i27 = __Znaj(i10) | 0;
  i28 = 0;
  do {
   HEAP32[i27 + (i28 << 2) >> 2] = __Znaj(i10) | 0;
   i28 = i28 + 1 | 0;
  } while ((i28 | 0) != (i9 | 0));
  i28 = i7 + 8 | 0;
  HEAP32[i28 >> 2] = i27;
  i27 = __Znaj(i10) | 0;
  if (i12) {
   i26 = 0;
   while (1) {
    HEAP32[i27 + (i26 << 2) >> 2] = __Znaj(i10) | 0;
    i25 = i26 + 1 | 0;
    if ((i25 | 0) == (i9 | 0)) {
     i30 = i29;
     i31 = i28;
     i32 = i27;
     break;
    } else {
     i26 = i25;
    }
   }
  } else {
   i30 = i29;
   i31 = i28;
   i32 = i27;
  }
 } else {
  i27 = i7 + 4 | 0;
  HEAP32[i27 >> 2] = i22;
  i22 = i7 + 8 | 0;
  HEAP32[i22 >> 2] = __Znaj(i10) | 0;
  i30 = i27;
  i31 = i22;
  i32 = __Znaj(i10) | 0;
 }
 i22 = i7 + 12 | 0;
 HEAP32[i22 >> 2] = i32;
 __Z15SubDivideMatrixiPPiPS0_(i1, i2, i23) | 0;
 __Z15SubDivideMatrixiPPiPS0_(i1, i3, i7) | 0;
 i3 = 0;
 while (1) {
  i2 = (i3 | 0) < 7;
  i33 = __Znaj(i10) | 0;
  if (i12) {
   i32 = 0;
   do {
    HEAP32[i33 + (i32 << 2) >> 2] = __Znaj(i10) | 0;
    i32 = i32 + 1 | 0;
   } while ((i32 | 0) != (i9 | 0));
  }
  if (!i2) {
   break;
  }
  HEAP32[i8 + (i3 << 2) >> 2] = i33;
  i3 = i3 + 1 | 0;
 }
 i3 = __Znaj(i10) | 0;
 if (i12) {
  i32 = 0;
  do {
   HEAP32[i3 + (i32 << 2) >> 2] = __Znaj(i10) | 0;
   i32 = i32 + 1 | 0;
  } while ((i32 | 0) != (i9 | 0));
  i32 = HEAP32[i23 >> 2] | 0;
  i10 = HEAP32[i24 >> 2] | 0;
  i27 = 0;
  do {
   i28 = HEAP32[i32 + (i27 << 2) >> 2] | 0;
   i29 = HEAP32[i10 + (i27 << 2) >> 2] | 0;
   i26 = HEAP32[i33 + (i27 << 2) >> 2] | 0;
   i25 = 0;
   do {
    HEAP32[i26 + (i25 << 2) >> 2] = (HEAP32[i29 + (i25 << 2) >> 2] | 0) + (HEAP32[i28 + (i25 << 2) >> 2] | 0);
    i25 = i25 + 1 | 0;
   } while ((i25 | 0) != (i9 | 0));
   i27 = i27 + 1 | 0;
  } while ((i27 | 0) != (i9 | 0));
  i27 = HEAP32[i7 >> 2] | 0;
  i10 = HEAP32[i22 >> 2] | 0;
  i32 = 0;
  do {
   i25 = HEAP32[i27 + (i32 << 2) >> 2] | 0;
   i28 = HEAP32[i10 + (i32 << 2) >> 2] | 0;
   i29 = HEAP32[i3 + (i32 << 2) >> 2] | 0;
   i26 = 0;
   do {
    HEAP32[i29 + (i26 << 2) >> 2] = (HEAP32[i28 + (i26 << 2) >> 2] | 0) + (HEAP32[i25 + (i26 << 2) >> 2] | 0);
    i26 = i26 + 1 | 0;
   } while ((i26 | 0) != (i9 | 0));
   i32 = i32 + 1 | 0;
  } while ((i32 | 0) != (i9 | 0));
 }
 i32 = HEAP32[i8 >> 2] | 0;
 __Z8StrasseniPPiS0_S0_(i9, i33, i3, i32) | 0;
 i10 = HEAP32[i20 >> 2] | 0;
 i27 = HEAP32[i24 >> 2] | 0;
 if (i12) {
  i26 = 0;
  do {
   i25 = HEAP32[i10 + (i26 << 2) >> 2] | 0;
   i28 = HEAP32[i27 + (i26 << 2) >> 2] | 0;
   i29 = HEAP32[i33 + (i26 << 2) >> 2] | 0;
   i2 = 0;
   do {
    HEAP32[i29 + (i2 << 2) >> 2] = (HEAP32[i28 + (i2 << 2) >> 2] | 0) + (HEAP32[i25 + (i2 << 2) >> 2] | 0);
    i2 = i2 + 1 | 0;
   } while ((i2 | 0) != (i9 | 0));
   i26 = i26 + 1 | 0;
  } while ((i26 | 0) != (i9 | 0));
 }
 i26 = HEAP32[i8 + 4 >> 2] | 0;
 __Z8StrasseniPPiS0_S0_(i9, i33, HEAP32[i7 >> 2] | 0, i26) | 0;
 i27 = HEAP32[i30 >> 2] | 0;
 i10 = HEAP32[i22 >> 2] | 0;
 if (i12) {
  i22 = 0;
  do {
   i2 = HEAP32[i27 + (i22 << 2) >> 2] | 0;
   i25 = HEAP32[i10 + (i22 << 2) >> 2] | 0;
   i28 = HEAP32[i3 + (i22 << 2) >> 2] | 0;
   i29 = 0;
   do {
    HEAP32[i28 + (i29 << 2) >> 2] = (HEAP32[i2 + (i29 << 2) >> 2] | 0) - (HEAP32[i25 + (i29 << 2) >> 2] | 0);
    i29 = i29 + 1 | 0;
   } while ((i29 | 0) != (i9 | 0));
   i22 = i22 + 1 | 0;
  } while ((i22 | 0) != (i9 | 0));
 }
 i22 = HEAP32[i8 + 8 >> 2] | 0;
 __Z8StrasseniPPiS0_S0_(i9, HEAP32[i23 >> 2] | 0, i3, i22) | 0;
 i27 = HEAP32[i31 >> 2] | 0;
 i29 = HEAP32[i7 >> 2] | 0;
 if (i12) {
  i25 = 0;
  do {
   i2 = HEAP32[i27 + (i25 << 2) >> 2] | 0;
   i28 = HEAP32[i29 + (i25 << 2) >> 2] | 0;
   i11 = HEAP32[i3 + (i25 << 2) >> 2] | 0;
   i14 = 0;
   do {
    HEAP32[i11 + (i14 << 2) >> 2] = (HEAP32[i2 + (i14 << 2) >> 2] | 0) - (HEAP32[i28 + (i14 << 2) >> 2] | 0);
    i14 = i14 + 1 | 0;
   } while ((i14 | 0) != (i9 | 0));
   i25 = i25 + 1 | 0;
  } while ((i25 | 0) != (i9 | 0));
 }
 i25 = HEAP32[i8 + 12 >> 2] | 0;
 __Z8StrasseniPPiS0_S0_(i9, HEAP32[i24 >> 2] | 0, i3, i25) | 0;
 i29 = HEAP32[i23 >> 2] | 0;
 i27 = HEAP32[i21 >> 2] | 0;
 if (i12) {
  i14 = 0;
  do {
   i28 = HEAP32[i29 + (i14 << 2) >> 2] | 0;
   i2 = HEAP32[i27 + (i14 << 2) >> 2] | 0;
   i11 = HEAP32[i33 + (i14 << 2) >> 2] | 0;
   i15 = 0;
   do {
    HEAP32[i11 + (i15 << 2) >> 2] = (HEAP32[i2 + (i15 << 2) >> 2] | 0) + (HEAP32[i28 + (i15 << 2) >> 2] | 0);
    i15 = i15 + 1 | 0;
   } while ((i15 | 0) != (i9 | 0));
   i14 = i14 + 1 | 0;
  } while ((i14 | 0) != (i9 | 0));
 }
 i14 = HEAP32[i8 + 16 >> 2] | 0;
 __Z8StrasseniPPiS0_S0_(i9, i33, i10, i14) | 0;
 i27 = HEAP32[i20 >> 2] | 0;
 i20 = HEAP32[i23 >> 2] | 0;
 if (i12) {
  i23 = 0;
  do {
   i29 = HEAP32[i27 + (i23 << 2) >> 2] | 0;
   i15 = HEAP32[i20 + (i23 << 2) >> 2] | 0;
   i28 = HEAP32[i33 + (i23 << 2) >> 2] | 0;
   i2 = 0;
   do {
    HEAP32[i28 + (i2 << 2) >> 2] = (HEAP32[i29 + (i2 << 2) >> 2] | 0) - (HEAP32[i15 + (i2 << 2) >> 2] | 0);
    i2 = i2 + 1 | 0;
   } while ((i2 | 0) != (i9 | 0));
   i23 = i23 + 1 | 0;
  } while ((i23 | 0) != (i9 | 0));
  i23 = HEAP32[i7 >> 2] | 0;
  i20 = HEAP32[i30 >> 2] | 0;
  i30 = 0;
  do {
   i27 = HEAP32[i23 + (i30 << 2) >> 2] | 0;
   i2 = HEAP32[i20 + (i30 << 2) >> 2] | 0;
   i15 = HEAP32[i3 + (i30 << 2) >> 2] | 0;
   i29 = 0;
   do {
    HEAP32[i15 + (i29 << 2) >> 2] = (HEAP32[i2 + (i29 << 2) >> 2] | 0) + (HEAP32[i27 + (i29 << 2) >> 2] | 0);
    i29 = i29 + 1 | 0;
   } while ((i29 | 0) != (i9 | 0));
   i30 = i30 + 1 | 0;
  } while ((i30 | 0) != (i9 | 0));
 }
 i30 = HEAP32[i8 + 20 >> 2] | 0;
 __Z8StrasseniPPiS0_S0_(i9, i33, i3, i30) | 0;
 i20 = HEAP32[i21 >> 2] | 0;
 i21 = HEAP32[i24 >> 2] | 0;
 if (i12) {
  i24 = 0;
  do {
   i23 = HEAP32[i20 + (i24 << 2) >> 2] | 0;
   i29 = HEAP32[i21 + (i24 << 2) >> 2] | 0;
   i27 = HEAP32[i33 + (i24 << 2) >> 2] | 0;
   i2 = 0;
   do {
    HEAP32[i27 + (i2 << 2) >> 2] = (HEAP32[i23 + (i2 << 2) >> 2] | 0) - (HEAP32[i29 + (i2 << 2) >> 2] | 0);
    i2 = i2 + 1 | 0;
   } while ((i2 | 0) != (i9 | 0));
   i24 = i24 + 1 | 0;
  } while ((i24 | 0) != (i9 | 0));
  i24 = HEAP32[i31 >> 2] | 0;
  i31 = 0;
  do {
   i21 = HEAP32[i24 + (i31 << 2) >> 2] | 0;
   i20 = HEAP32[i10 + (i31 << 2) >> 2] | 0;
   i2 = HEAP32[i3 + (i31 << 2) >> 2] | 0;
   i29 = 0;
   do {
    HEAP32[i2 + (i29 << 2) >> 2] = (HEAP32[i20 + (i29 << 2) >> 2] | 0) + (HEAP32[i21 + (i29 << 2) >> 2] | 0);
    i29 = i29 + 1 | 0;
   } while ((i29 | 0) != (i9 | 0));
   i31 = i31 + 1 | 0;
  } while ((i31 | 0) != (i9 | 0));
  i31 = HEAP32[i8 + 24 >> 2] | 0;
  __Z8StrasseniPPiS0_S0_(i9, i33, i3, i31) | 0;
  if (i12) {
   i10 = 0;
   while (1) {
    i24 = HEAP32[i32 + (i10 << 2) >> 2] | 0;
    i29 = HEAP32[i25 + (i10 << 2) >> 2] | 0;
    i21 = HEAP32[i4 + (i10 << 2) >> 2] | 0;
    i20 = 0;
    do {
     HEAP32[i21 + (i20 << 2) >> 2] = (HEAP32[i29 + (i20 << 2) >> 2] | 0) + (HEAP32[i24 + (i20 << 2) >> 2] | 0);
     i20 = i20 + 1 | 0;
    } while ((i20 | 0) != (i9 | 0));
    i20 = i10 + 1 | 0;
    if ((i20 | 0) == (i9 | 0)) {
     i34 = 0;
     break;
    } else {
     i10 = i20;
    }
   }
   while (1) {
    i10 = HEAP32[i4 + (i34 << 2) >> 2] | 0;
    i20 = HEAP32[i14 + (i34 << 2) >> 2] | 0;
    i24 = 0;
    do {
     i29 = i10 + (i24 << 2) | 0;
     HEAP32[i29 >> 2] = (HEAP32[i29 >> 2] | 0) - (HEAP32[i20 + (i24 << 2) >> 2] | 0);
     i24 = i24 + 1 | 0;
    } while ((i24 | 0) != (i9 | 0));
    i24 = i34 + 1 | 0;
    if ((i24 | 0) == (i9 | 0)) {
     i35 = 0;
     break;
    } else {
     i34 = i24;
    }
   }
   while (1) {
    i34 = HEAP32[i4 + (i35 << 2) >> 2] | 0;
    i24 = HEAP32[i31 + (i35 << 2) >> 2] | 0;
    i20 = 0;
    do {
     i10 = i34 + (i20 << 2) | 0;
     HEAP32[i10 >> 2] = (HEAP32[i24 + (i20 << 2) >> 2] | 0) + (HEAP32[i10 >> 2] | 0);
     i20 = i20 + 1 | 0;
    } while ((i20 | 0) != (i9 | 0));
    i20 = i35 + 1 | 0;
    if ((i20 | 0) == (i9 | 0)) {
     i36 = 0;
     break;
    } else {
     i35 = i20;
    }
   }
   do {
    i35 = HEAP32[i22 + (i36 << 2) >> 2] | 0;
    i31 = HEAP32[i14 + (i36 << 2) >> 2] | 0;
    i20 = HEAP32[i33 + (i36 << 2) >> 2] | 0;
    i24 = 0;
    do {
     HEAP32[i20 + (i24 << 2) >> 2] = (HEAP32[i31 + (i24 << 2) >> 2] | 0) + (HEAP32[i35 + (i24 << 2) >> 2] | 0);
     i24 = i24 + 1 | 0;
    } while ((i24 | 0) != (i9 | 0));
    i36 = i36 + 1 | 0;
   } while ((i36 | 0) != (i9 | 0));
   if (i12) {
    i36 = (i9 | 0) < (i1 | 0);
    i14 = 0;
    do {
     if (i36) {
      i24 = HEAP32[i33 + (i14 << 2) >> 2] | 0;
      i35 = HEAP32[i4 + (i14 << 2) >> 2] | 0;
      i31 = i9;
      do {
       HEAP32[i35 + (i31 << 2) >> 2] = HEAP32[i24 + (i31 - i9 << 2) >> 2];
       i31 = i31 + 1 | 0;
      } while ((i31 | 0) != (i1 | 0));
     }
     i14 = i14 + 1 | 0;
    } while ((i14 | 0) != (i9 | 0));
    if (i12) {
     i14 = 0;
     while (1) {
      i36 = HEAP32[i26 + (i14 << 2) >> 2] | 0;
      i31 = HEAP32[i25 + (i14 << 2) >> 2] | 0;
      i24 = HEAP32[i3 + (i14 << 2) >> 2] | 0;
      i35 = 0;
      do {
       HEAP32[i24 + (i35 << 2) >> 2] = (HEAP32[i31 + (i35 << 2) >> 2] | 0) + (HEAP32[i36 + (i35 << 2) >> 2] | 0);
       i35 = i35 + 1 | 0;
      } while ((i35 | 0) != (i9 | 0));
      i35 = i14 + 1 | 0;
      if ((i35 | 0) == (i9 | 0)) {
       i37 = 0;
       break;
      } else {
       i14 = i35;
      }
     }
     while (1) {
      i14 = HEAP32[i32 + (i37 << 2) >> 2] | 0;
      i25 = HEAP32[i26 + (i37 << 2) >> 2] | 0;
      i35 = HEAP32[i33 + (i37 << 2) >> 2] | 0;
      i36 = 0;
      do {
       HEAP32[i35 + (i36 << 2) >> 2] = (HEAP32[i14 + (i36 << 2) >> 2] | 0) - (HEAP32[i25 + (i36 << 2) >> 2] | 0);
       i36 = i36 + 1 | 0;
      } while ((i36 | 0) != (i9 | 0));
      i36 = i37 + 1 | 0;
      if ((i36 | 0) == (i9 | 0)) {
       i38 = 0;
       break;
      } else {
       i37 = i36;
      }
     }
     while (1) {
      i37 = HEAP32[i33 + (i38 << 2) >> 2] | 0;
      i26 = HEAP32[i22 + (i38 << 2) >> 2] | 0;
      i36 = 0;
      do {
       i25 = i37 + (i36 << 2) | 0;
       HEAP32[i25 >> 2] = (HEAP32[i26 + (i36 << 2) >> 2] | 0) + (HEAP32[i25 >> 2] | 0);
       i36 = i36 + 1 | 0;
      } while ((i36 | 0) != (i9 | 0));
      i36 = i38 + 1 | 0;
      if ((i36 | 0) == (i9 | 0)) {
       i39 = 0;
       break;
      } else {
       i38 = i36;
      }
     }
     do {
      i38 = HEAP32[i33 + (i39 << 2) >> 2] | 0;
      i22 = HEAP32[i30 + (i39 << 2) >> 2] | 0;
      i36 = 0;
      do {
       i26 = i38 + (i36 << 2) | 0;
       HEAP32[i26 >> 2] = (HEAP32[i22 + (i36 << 2) >> 2] | 0) + (HEAP32[i26 >> 2] | 0);
       i36 = i36 + 1 | 0;
      } while ((i36 | 0) != (i9 | 0));
      i39 = i39 + 1 | 0;
     } while ((i39 | 0) != (i9 | 0));
    }
   }
  }
 } else {
  __Z8StrasseniPPiS0_S0_(i9, i33, i3, HEAP32[i8 + 24 >> 2] | 0) | 0;
 }
 if ((i9 | 0) < (i1 | 0)) {
  i39 = i9;
  while (1) {
   if (i12) {
    i30 = HEAP32[i3 + (i39 - i9 << 2) >> 2] | 0;
    i36 = HEAP32[i4 + (i39 << 2) >> 2] | 0;
    i22 = 0;
    do {
     HEAP32[i36 + (i22 << 2) >> 2] = HEAP32[i30 + (i22 << 2) >> 2];
     i22 = i22 + 1 | 0;
    } while ((i22 | 0) != (i9 | 0));
   }
   i22 = HEAP32[i33 + (i39 - i9 << 2) >> 2] | 0;
   i30 = HEAP32[i4 + (i39 << 2) >> 2] | 0;
   i36 = i9;
   do {
    HEAP32[i30 + (i36 << 2) >> 2] = HEAP32[i22 + (i36 - i9 << 2) >> 2];
    i36 = i36 + 1 | 0;
   } while ((i36 | 0) != (i1 | 0));
   i36 = i39 + 1 | 0;
   if ((i36 | 0) == (i1 | 0)) {
    i40 = i32;
    i41 = 1;
    break;
   } else {
    i39 = i36;
   }
  }
 } else {
  i40 = i32;
  i41 = 1;
 }
 while (1) {
  if ((i40 | 0) != 0) {
   if (i12) {
    i32 = 0;
    do {
     i39 = HEAP32[i40 + (i32 << 2) >> 2] | 0;
     if ((i39 | 0) != 0) {
      __ZdaPv(i39);
     }
     i32 = i32 + 1 | 0;
    } while ((i32 | 0) != (i9 | 0));
   }
   __ZdaPv(i40);
  }
  if ((i41 | 0) == 7) {
   i42 = 0;
   break;
  }
  i40 = HEAP32[i8 + (i41 << 2) >> 2] | 0;
  i41 = i41 + 1 | 0;
 }
 do {
  i41 = HEAP32[i6 + (i42 << 2) >> 2] | 0;
  if ((i41 | 0) != 0) {
   if (i12) {
    i8 = 0;
    do {
     i40 = HEAP32[i41 + (i8 << 2) >> 2] | 0;
     if ((i40 | 0) != 0) {
      __ZdaPv(i40);
     }
     i8 = i8 + 1 | 0;
    } while ((i8 | 0) != (i9 | 0));
   }
   __ZdaPv(i41);
  }
  i8 = HEAP32[i7 + (i42 << 2) >> 2] | 0;
  if ((i8 | 0) != 0) {
   if (i12) {
    i40 = 0;
    do {
     i32 = HEAP32[i8 + (i40 << 2) >> 2] | 0;
     if ((i32 | 0) != 0) {
      __ZdaPv(i32);
     }
     i40 = i40 + 1 | 0;
    } while ((i40 | 0) != (i9 | 0));
   }
   __ZdaPv(i8);
  }
  i42 = i42 + 1 | 0;
 } while ((i42 | 0) != 4);
 if ((i33 | 0) != 0) {
  if (i12) {
   i42 = 0;
   do {
    i7 = HEAP32[i33 + (i42 << 2) >> 2] | 0;
    if ((i7 | 0) != 0) {
     __ZdaPv(i7);
    }
    i42 = i42 + 1 | 0;
   } while ((i42 | 0) != (i9 | 0));
  }
  __ZdaPv(i33);
 }
 if ((i3 | 0) == 0) {
  STACKTOP = i5;
  return 1;
 }
 if (i12) {
  i12 = 0;
  do {
   i33 = HEAP32[i3 + (i12 << 2) >> 2] | 0;
   if ((i33 | 0) != 0) {
    __ZdaPv(i33);
   }
   i12 = i12 + 1 | 0;
  } while ((i12 | 0) != (i9 | 0));
 }
 __ZdaPv(i3);
 STACKTOP = i5;
 return 1;
}
function __Z5Testsv() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i1;
 __ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(1184, 88) | 0;
 i3 = __Znaj(8) | 0;
 i4 = __Znaj(8) | 0;
 HEAP32[i3 >> 2] = i4;
 i5 = i3 + 4 | 0;
 HEAP32[i5 >> 2] = __Znaj(8) | 0;
 HEAP32[i4 >> 2] = (_rand() | 0) & 15;
 HEAP32[i4 + 4 >> 2] = (_rand() | 0) & 15;
 i4 = HEAP32[i5 >> 2] | 0;
 HEAP32[i4 >> 2] = (_rand() | 0) & 15;
 HEAP32[i4 + 4 >> 2] = (_rand() | 0) & 15;
 i4 = __Znaj(8) | 0;
 i6 = __Znaj(8) | 0;
 HEAP32[i4 >> 2] = i6;
 i7 = i4 + 4 | 0;
 HEAP32[i7 >> 2] = __Znaj(8) | 0;
 HEAP32[i6 >> 2] = (_rand() | 0) & 15;
 HEAP32[i6 + 4 >> 2] = (_rand() | 0) & 15;
 i6 = HEAP32[i7 >> 2] | 0;
 HEAP32[i6 >> 2] = (_rand() | 0) & 15;
 HEAP32[i6 + 4 >> 2] = (_rand() | 0) & 15;
 i6 = __Znaj(8) | 0;
 i8 = __Znaj(8) | 0;
 HEAP32[i6 >> 2] = i8;
 i9 = __Znaj(8) | 0;
 i10 = i6 + 4 | 0;
 HEAP32[i10 >> 2] = i9;
 i11 = HEAP32[i3 >> 2] | 0;
 i12 = HEAP32[i4 >> 2] | 0;
 HEAP32[i8 >> 2] = (HEAP32[i12 >> 2] | 0) + (HEAP32[i11 >> 2] | 0);
 HEAP32[i8 + 4 >> 2] = (HEAP32[i12 + 4 >> 2] | 0) + (HEAP32[i11 + 4 >> 2] | 0);
 i11 = HEAP32[i5 >> 2] | 0;
 i12 = HEAP32[i7 >> 2] | 0;
 HEAP32[i9 >> 2] = (HEAP32[i12 >> 2] | 0) + (HEAP32[i11 >> 2] | 0);
 HEAP32[i9 + 4 >> 2] = (HEAP32[i12 + 4 >> 2] | 0) + (HEAP32[i11 + 4 >> 2] | 0);
 __Z21PrintMatrixSideBySideiPPiS0_c(2, i3, i4, 43);
 __ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(1184, 8) | 0;
 __ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEi(1184, HEAP32[HEAP32[i6 >> 2] >> 2] | 0) | 0, 16) | 0;
 __ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEi(1184, HEAP32[(HEAP32[i6 >> 2] | 0) + 4 >> 2] | 0) | 0, 16) | 0;
 __ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(1184, 8) | 0;
 __ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEi(1184, HEAP32[HEAP32[i10 >> 2] >> 2] | 0) | 0, 16) | 0;
 __ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEi(1184, HEAP32[(HEAP32[i10 >> 2] | 0) + 4 >> 2] | 0) | 0, 16) | 0;
 __ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(1184, 8) | 0;
 __ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(1184, 8) | 0;
 __ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(1184, 128) | 0;
 __Z21PrintMatrixSideBySideiPPiS0_c(2, i6, i4, 45);
 i11 = HEAP32[i6 >> 2] | 0;
 i12 = HEAP32[i4 >> 2] | 0;
 HEAP32[i11 >> 2] = (HEAP32[i11 >> 2] | 0) - (HEAP32[i12 >> 2] | 0);
 i9 = i11 + 4 | 0;
 HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) - (HEAP32[i12 + 4 >> 2] | 0);
 i12 = HEAP32[i10 >> 2] | 0;
 i9 = HEAP32[i7 >> 2] | 0;
 HEAP32[i12 >> 2] = (HEAP32[i12 >> 2] | 0) - (HEAP32[i9 >> 2] | 0);
 i11 = i12 + 4 | 0;
 HEAP32[i11 >> 2] = (HEAP32[i11 >> 2] | 0) - (HEAP32[i9 + 4 >> 2] | 0);
 __ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(1184, 8) | 0;
 __ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEi(1184, HEAP32[HEAP32[i6 >> 2] >> 2] | 0) | 0, 16) | 0;
 __ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEi(1184, HEAP32[(HEAP32[i6 >> 2] | 0) + 4 >> 2] | 0) | 0, 16) | 0;
 __ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(1184, 8) | 0;
 __ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEi(1184, HEAP32[HEAP32[i10 >> 2] >> 2] | 0) | 0, 16) | 0;
 __ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEi(1184, HEAP32[(HEAP32[i10 >> 2] | 0) + 4 >> 2] | 0) | 0, 16) | 0;
 __ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(1184, 8) | 0;
 __ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(1184, 8) | 0;
 i9 = HEAP32[i6 >> 2] | 0;
 i11 = HEAP32[i3 >> 2] | 0;
 i12 = 0;
 while (1) {
  i8 = i12 + 1 | 0;
  if ((HEAP32[i9 + (i12 << 2) >> 2] | 0) != (HEAP32[i11 + (i12 << 2) >> 2] | 0)) {
   i13 = 4;
   break;
  }
  if ((i8 | 0) < 2) {
   i12 = i8;
  } else {
   break;
  }
 }
 if ((i13 | 0) == 4) {
  __ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(1184, 168) | 0;
 }
 i12 = HEAP32[i10 >> 2] | 0;
 i11 = HEAP32[i5 >> 2] | 0;
 i9 = 0;
 while (1) {
  i8 = i9 + 1 | 0;
  if ((HEAP32[i12 + (i9 << 2) >> 2] | 0) != (HEAP32[i11 + (i9 << 2) >> 2] | 0)) {
   i13 = 115;
   break;
  }
  if ((i8 | 0) < 2) {
   i9 = i8;
  } else {
   break;
  }
 }
 if ((i13 | 0) == 115) {
  __ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(1184, 168) | 0;
 }
 if ((i3 | 0) != 0) {
  i9 = HEAP32[i3 >> 2] | 0;
  if ((i9 | 0) != 0) {
   __ZdaPv(i9);
  }
  i9 = HEAP32[i5 >> 2] | 0;
  if ((i9 | 0) != 0) {
   __ZdaPv(i9);
  }
  __ZdaPv(i3);
 }
 if ((i4 | 0) != 0) {
  i3 = HEAP32[i4 >> 2] | 0;
  if ((i3 | 0) != 0) {
   __ZdaPv(i3);
  }
  i3 = HEAP32[i7 >> 2] | 0;
  if ((i3 | 0) != 0) {
   __ZdaPv(i3);
  }
  __ZdaPv(i4);
 }
 if ((i6 | 0) != 0) {
  i4 = HEAP32[i6 >> 2] | 0;
  if ((i4 | 0) != 0) {
   __ZdaPv(i4);
  }
  i4 = HEAP32[i10 >> 2] | 0;
  if ((i4 | 0) != 0) {
   __ZdaPv(i4);
  }
  __ZdaPv(i6);
 }
 __ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(1184, 192) | 0;
 i6 = __Znaj(16) | 0;
 i4 = __Znaj(16) | 0;
 HEAP32[i6 >> 2] = i4;
 i10 = i6 + 4 | 0;
 HEAP32[i10 >> 2] = __Znaj(16) | 0;
 i3 = i6 + 8 | 0;
 HEAP32[i3 >> 2] = __Znaj(16) | 0;
 i7 = i6 + 12 | 0;
 HEAP32[i7 >> 2] = __Znaj(16) | 0;
 HEAP32[i4 >> 2] = (_rand() | 0) & 15;
 HEAP32[i4 + 4 >> 2] = (_rand() | 0) & 15;
 HEAP32[i4 + 8 >> 2] = (_rand() | 0) & 15;
 HEAP32[i4 + 12 >> 2] = (_rand() | 0) & 15;
 i4 = HEAP32[i10 >> 2] | 0;
 HEAP32[i4 >> 2] = (_rand() | 0) & 15;
 HEAP32[i4 + 4 >> 2] = (_rand() | 0) & 15;
 HEAP32[i4 + 8 >> 2] = (_rand() | 0) & 15;
 HEAP32[i4 + 12 >> 2] = (_rand() | 0) & 15;
 i4 = HEAP32[i3 >> 2] | 0;
 HEAP32[i4 >> 2] = (_rand() | 0) & 15;
 HEAP32[i4 + 4 >> 2] = (_rand() | 0) & 15;
 HEAP32[i4 + 8 >> 2] = (_rand() | 0) & 15;
 HEAP32[i4 + 12 >> 2] = (_rand() | 0) & 15;
 i4 = HEAP32[i7 >> 2] | 0;
 HEAP32[i4 >> 2] = (_rand() | 0) & 15;
 HEAP32[i4 + 4 >> 2] = (_rand() | 0) & 15;
 HEAP32[i4 + 8 >> 2] = (_rand() | 0) & 15;
 HEAP32[i4 + 12 >> 2] = (_rand() | 0) & 15;
 i4 = __Znaj(8) | 0;
 HEAP32[i4 >> 2] = __Znaj(8) | 0;
 HEAP32[i4 + 4 >> 2] = __Znaj(8) | 0;
 HEAP32[i2 >> 2] = i4;
 i4 = __Znaj(8) | 0;
 HEAP32[i4 >> 2] = __Znaj(8) | 0;
 HEAP32[i4 + 4 >> 2] = __Znaj(8) | 0;
 i9 = i2 + 4 | 0;
 HEAP32[i9 >> 2] = i4;
 i4 = __Znaj(8) | 0;
 HEAP32[i4 >> 2] = __Znaj(8) | 0;
 HEAP32[i4 + 4 >> 2] = __Znaj(8) | 0;
 i5 = i2 + 8 | 0;
 HEAP32[i5 >> 2] = i4;
 i4 = __Znaj(8) | 0;
 HEAP32[i4 >> 2] = __Znaj(8) | 0;
 HEAP32[i4 + 4 >> 2] = __Znaj(8) | 0;
 i11 = i2 + 12 | 0;
 HEAP32[i11 >> 2] = i4;
 __Z15SubDivideMatrixiPPiPS0_(4, i6, i2) | 0;
 __ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(1184, 8) | 0;
 i4 = 0;
 do {
  i12 = i6 + (i4 << 2) | 0;
  __ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEi(1184, HEAP32[HEAP32[i12 >> 2] >> 2] | 0) | 0, 16) | 0;
  __ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEi(1184, HEAP32[(HEAP32[i12 >> 2] | 0) + 4 >> 2] | 0) | 0, 16) | 0;
  __ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEi(1184, HEAP32[(HEAP32[i12 >> 2] | 0) + 8 >> 2] | 0) | 0, 16) | 0;
  __ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEi(1184, HEAP32[(HEAP32[i12 >> 2] | 0) + 12 >> 2] | 0) | 0, 16) | 0;
  __ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(1184, 8) | 0;
  i4 = i4 + 1 | 0;
 } while ((i4 | 0) != 4);
 __ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(1184, 8) | 0;
 i4 = HEAP32[i2 >> 2] | 0;
 i2 = HEAP32[i9 >> 2] | 0;
 __Z21PrintMatrixSideBySideiPPiS0_c(2, i4, i2, 124);
 i9 = HEAP32[i5 >> 2] | 0;
 i5 = HEAP32[i11 >> 2] | 0;
 __Z21PrintMatrixSideBySideiPPiS0_c(2, i9, i5, 124);
 i11 = HEAP32[i6 >> 2] | 0;
 if ((i11 | 0) != 0) {
  __ZdaPv(i11);
 }
 i11 = HEAP32[i10 >> 2] | 0;
 if ((i11 | 0) != 0) {
  __ZdaPv(i11);
 }
 i11 = HEAP32[i3 >> 2] | 0;
 if ((i11 | 0) != 0) {
  __ZdaPv(i11);
 }
 i11 = HEAP32[i7 >> 2] | 0;
 if ((i11 | 0) != 0) {
  __ZdaPv(i11);
 }
 __ZdaPv(i6);
 if ((i4 | 0) != 0) {
  i6 = HEAP32[i4 >> 2] | 0;
  if ((i6 | 0) != 0) {
   __ZdaPv(i6);
  }
  i6 = HEAP32[i4 + 4 >> 2] | 0;
  if ((i6 | 0) != 0) {
   __ZdaPv(i6);
  }
  __ZdaPv(i4);
 }
 if ((i2 | 0) != 0) {
  i4 = HEAP32[i2 >> 2] | 0;
  if ((i4 | 0) != 0) {
   __ZdaPv(i4);
  }
  i4 = HEAP32[i2 + 4 >> 2] | 0;
  if ((i4 | 0) != 0) {
   __ZdaPv(i4);
  }
  __ZdaPv(i2);
 }
 if ((i9 | 0) != 0) {
  i2 = HEAP32[i9 >> 2] | 0;
  if ((i2 | 0) != 0) {
   __ZdaPv(i2);
  }
  i2 = HEAP32[i9 + 4 >> 2] | 0;
  if ((i2 | 0) != 0) {
   __ZdaPv(i2);
  }
  __ZdaPv(i9);
 }
 if ((i5 | 0) != 0) {
  i9 = HEAP32[i5 >> 2] | 0;
  if ((i9 | 0) != 0) {
   __ZdaPv(i9);
  }
  i9 = HEAP32[i5 + 4 >> 2] | 0;
  if ((i9 | 0) != 0) {
   __ZdaPv(i9);
  }
  __ZdaPv(i5);
 }
 __ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(1184, 240) | 0;
 i5 = __Znaj(16) | 0;
 i9 = __Znaj(16) | 0;
 HEAP32[i5 >> 2] = i9;
 i2 = i5 + 4 | 0;
 HEAP32[i2 >> 2] = __Znaj(16) | 0;
 i4 = i5 + 8 | 0;
 HEAP32[i4 >> 2] = __Znaj(16) | 0;
 i6 = i5 + 12 | 0;
 HEAP32[i6 >> 2] = __Znaj(16) | 0;
 i11 = __Znaj(16) | 0;
 i7 = __Znaj(16) | 0;
 HEAP32[i11 >> 2] = i7;
 i3 = i11 + 4 | 0;
 HEAP32[i3 >> 2] = __Znaj(16) | 0;
 i10 = i11 + 8 | 0;
 HEAP32[i10 >> 2] = __Znaj(16) | 0;
 i12 = i11 + 12 | 0;
 HEAP32[i12 >> 2] = __Znaj(16) | 0;
 i8 = __Znaj(16) | 0;
 HEAP32[i8 >> 2] = __Znaj(16) | 0;
 i14 = i8 + 4 | 0;
 HEAP32[i14 >> 2] = __Znaj(16) | 0;
 i15 = i8 + 8 | 0;
 HEAP32[i15 >> 2] = __Znaj(16) | 0;
 i16 = i8 + 12 | 0;
 HEAP32[i16 >> 2] = __Znaj(16) | 0;
 i17 = __Znaj(16) | 0;
 i18 = __Znaj(16) | 0;
 HEAP32[i17 >> 2] = i18;
 i19 = i17 + 4 | 0;
 HEAP32[i19 >> 2] = __Znaj(16) | 0;
 i20 = i17 + 8 | 0;
 HEAP32[i20 >> 2] = __Znaj(16) | 0;
 i21 = i17 + 12 | 0;
 HEAP32[i21 >> 2] = __Znaj(16) | 0;
 i22 = i9;
 i9 = i7;
 i7 = i18;
 i23 = 0;
 while (1) {
  i24 = i23 << 2;
  HEAP32[i22 >> 2] = HEAP32[296 + (i24 << 2) >> 2];
  HEAP32[i9 >> 2] = HEAP32[360 + (i24 << 2) >> 2];
  HEAP32[i7 >> 2] = HEAP32[424 + (i24 << 2) >> 2];
  i25 = i24 | 1;
  HEAP32[i22 + 4 >> 2] = HEAP32[296 + (i25 << 2) >> 2];
  HEAP32[i9 + 4 >> 2] = HEAP32[360 + (i25 << 2) >> 2];
  HEAP32[i7 + 4 >> 2] = HEAP32[424 + (i25 << 2) >> 2];
  i25 = i24 | 2;
  HEAP32[i22 + 8 >> 2] = HEAP32[296 + (i25 << 2) >> 2];
  HEAP32[i9 + 8 >> 2] = HEAP32[360 + (i25 << 2) >> 2];
  HEAP32[i7 + 8 >> 2] = HEAP32[424 + (i25 << 2) >> 2];
  i25 = i24 | 3;
  HEAP32[i22 + 12 >> 2] = HEAP32[296 + (i25 << 2) >> 2];
  HEAP32[i9 + 12 >> 2] = HEAP32[360 + (i25 << 2) >> 2];
  HEAP32[i7 + 12 >> 2] = HEAP32[424 + (i25 << 2) >> 2];
  i25 = i23 + 1 | 0;
  if ((i25 | 0) == 4) {
   break;
  }
  i22 = HEAP32[i5 + (i25 << 2) >> 2] | 0;
  i9 = HEAP32[i11 + (i25 << 2) >> 2] | 0;
  i7 = HEAP32[i17 + (i25 << 2) >> 2] | 0;
  i23 = i25;
 }
 __Z25MultMatrixBasicPreprocessiPPiS0_S0_(4, i5, i11, i8) | 0;
 i23 = i18;
 i18 = 0;
 L95 : while (1) {
  i7 = HEAP32[i8 + (i18 << 2) >> 2] | 0;
  i9 = 0;
  while (1) {
   i22 = i9 + 1 | 0;
   if ((HEAP32[i7 + (i9 << 2) >> 2] | 0) != (HEAP32[i23 + (i9 << 2) >> 2] | 0)) {
    i13 = 45;
    break L95;
   }
   if ((i22 | 0) < 4) {
    i9 = i22;
   } else {
    break;
   }
  }
  i9 = i18 + 1 | 0;
  if ((i9 | 0) >= 4) {
   i13 = 48;
   break;
  }
  i23 = HEAP32[i17 + (i9 << 2) >> 2] | 0;
  i18 = i9;
 }
 L102 : do {
  if ((i13 | 0) == 45) {
   __ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(1184, 488) | 0;
   __Z21PrintMatrixSideBySideiPPiS0_c(4, i5, i11, 42);
   __Z21PrintMatrixSideBySideiPPiS0_c(4, i8, i17, 33);
  } else if ((i13 | 0) == 48) {
   HEAP32[10] = 1;
   __Z8StrasseniPPiS0_S0_(4, i5, i11, i8) | 0;
   i18 = 0;
   L104 : while (1) {
    i23 = HEAP32[i8 + (i18 << 2) >> 2] | 0;
    i9 = HEAP32[i17 + (i18 << 2) >> 2] | 0;
    i7 = 0;
    while (1) {
     i22 = i7 + 1 | 0;
     if ((HEAP32[i23 + (i7 << 2) >> 2] | 0) != (HEAP32[i9 + (i7 << 2) >> 2] | 0)) {
      break L104;
     }
     if ((i22 | 0) < 4) {
      i7 = i22;
     } else {
      break;
     }
    }
    i18 = i18 + 1 | 0;
    if ((i18 | 0) >= 4) {
     break L102;
    }
   }
   __ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(1184, 520) | 0;
   __Z21PrintMatrixSideBySideiPPiS0_c(4, i5, i11, 42);
   __Z21PrintMatrixSideBySideiPPiS0_c(4, i8, i17, 33);
  }
 } while (0);
 if ((i5 | 0) != 0) {
  i13 = HEAP32[i5 >> 2] | 0;
  if ((i13 | 0) != 0) {
   __ZdaPv(i13);
  }
  i13 = HEAP32[i2 >> 2] | 0;
  if ((i13 | 0) != 0) {
   __ZdaPv(i13);
  }
  i13 = HEAP32[i4 >> 2] | 0;
  if ((i13 | 0) != 0) {
   __ZdaPv(i13);
  }
  i13 = HEAP32[i6 >> 2] | 0;
  if ((i13 | 0) != 0) {
   __ZdaPv(i13);
  }
  __ZdaPv(i5);
 }
 if ((i11 | 0) != 0) {
  i5 = HEAP32[i11 >> 2] | 0;
  if ((i5 | 0) != 0) {
   __ZdaPv(i5);
  }
  i5 = HEAP32[i3 >> 2] | 0;
  if ((i5 | 0) != 0) {
   __ZdaPv(i5);
  }
  i5 = HEAP32[i10 >> 2] | 0;
  if ((i5 | 0) != 0) {
   __ZdaPv(i5);
  }
  i5 = HEAP32[i12 >> 2] | 0;
  if ((i5 | 0) != 0) {
   __ZdaPv(i5);
  }
  __ZdaPv(i11);
 }
 if ((i8 | 0) != 0) {
  i11 = HEAP32[i8 >> 2] | 0;
  if ((i11 | 0) != 0) {
   __ZdaPv(i11);
  }
  i11 = HEAP32[i14 >> 2] | 0;
  if ((i11 | 0) != 0) {
   __ZdaPv(i11);
  }
  i11 = HEAP32[i15 >> 2] | 0;
  if ((i11 | 0) != 0) {
   __ZdaPv(i11);
  }
  i11 = HEAP32[i16 >> 2] | 0;
  if ((i11 | 0) != 0) {
   __ZdaPv(i11);
  }
  __ZdaPv(i8);
 }
 if ((i17 | 0) == 0) {
  __ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(1184, 56) | 0;
  STACKTOP = i1;
  return;
 }
 i8 = HEAP32[i17 >> 2] | 0;
 if ((i8 | 0) != 0) {
  __ZdaPv(i8);
 }
 i8 = HEAP32[i19 >> 2] | 0;
 if ((i8 | 0) != 0) {
  __ZdaPv(i8);
 }
 i8 = HEAP32[i20 >> 2] | 0;
 if ((i8 | 0) != 0) {
  __ZdaPv(i8);
 }
 i8 = HEAP32[i21 >> 2] | 0;
 if ((i8 | 0) != 0) {
  __ZdaPv(i8);
 }
 __ZdaPv(i17);
 __ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(1184, 56) | 0;
 STACKTOP = i1;
 return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc(i1, i2, i3, i4, i5, i6, i7, i8, i9) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 i9 = i9 | 0;
 var i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0, i49 = 0, i50 = 0, i51 = 0, i52 = 0, i53 = 0, i54 = 0, i55 = 0, i56 = 0, i57 = 0, i58 = 0, i59 = 0, i60 = 0, i61 = 0, i62 = 0;
 i9 = STACKTOP;
 STACKTOP = STACKTOP + 176 | 0;
 i10 = i9;
 i11 = i9 + 160 | 0;
 i12 = i9 + 156 | 0;
 i13 = i9 + 152 | 0;
 i14 = i9 + 148 | 0;
 i15 = i9 + 144 | 0;
 i16 = i9 + 140 | 0;
 i17 = i9 + 136 | 0;
 i18 = i9 + 132 | 0;
 i19 = i9 + 128 | 0;
 i20 = i9 + 124 | 0;
 i21 = i9 + 120 | 0;
 i22 = i9 + 116 | 0;
 i23 = i9 + 112 | 0;
 i24 = i9 + 108 | 0;
 i25 = i9 + 104 | 0;
 i26 = i9 + 100 | 0;
 i27 = i9 + 96 | 0;
 i28 = i9 + 92 | 0;
 i29 = i9 + 88 | 0;
 i30 = i9 + 164 | 0;
 i31 = i9 + 44 | 0;
 i32 = i9 + 36 | 0;
 i33 = i9 + 32 | 0;
 i34 = i9 + 28 | 0;
 i35 = i9 + 40 | 0;
 i36 = i9 + 16 | 0;
 i37 = i9 + 12 | 0;
 i38 = i9 + 20 | 0;
 i39 = i9 + 24 | 0;
 i40 = i9 + 80 | 0;
 i41 = i9 + 48 | 0;
 i42 = i9 + 52 | 0;
 i43 = i9 + 56 | 0;
 i44 = i9 + 60 | 0;
 i45 = i9 + 64 | 0;
 i46 = i9 + 68 | 0;
 i47 = i9 + 72 | 0;
 i48 = i9 + 76 | 0;
 i49 = i9 + 84 | 0;
 HEAP32[i6 >> 2] = 0;
 __ZNKSt3__18ios_base6getlocEv(i24, i5);
 i50 = HEAP32[i24 >> 2] | 0;
 if (!((HEAP32[1456] | 0) == -1)) {
  HEAP32[i10 >> 2] = 5824;
  HEAP32[i10 + 4 >> 2] = 118;
  HEAP32[i10 + 8 >> 2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(5824, i10, 119);
 }
 i51 = (HEAP32[5828 >> 2] | 0) + -1 | 0;
 i52 = HEAP32[i50 + 8 >> 2] | 0;
 if (!((HEAP32[i50 + 12 >> 2] | 0) - i52 >> 2 >>> 0 > i51 >>> 0)) {
  i53 = ___cxa_allocate_exception(4) | 0;
  __ZNSt8bad_castC2Ev(i53);
  ___cxa_throw(i53 | 0, 13792, 107);
 }
 i50 = HEAP32[i52 + (i51 << 2) >> 2] | 0;
 if ((i50 | 0) == 0) {
  i53 = ___cxa_allocate_exception(4) | 0;
  __ZNSt8bad_castC2Ev(i53);
  ___cxa_throw(i53 | 0, 13792, 107);
 }
 __ZNSt3__114__shared_count16__release_sharedEv(HEAP32[i24 >> 2] | 0) | 0;
 L10 : do {
  switch (i8 << 24 >> 24 | 0) {
  case 114:
   {
    HEAP32[i36 >> 2] = HEAP32[i3 >> 2];
    HEAP32[i37 >> 2] = HEAP32[i4 >> 2];
    HEAP32[i11 + 0 >> 2] = HEAP32[i36 + 0 >> 2];
    HEAP32[i10 + 0 >> 2] = HEAP32[i37 + 0 >> 2];
    __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_(i35, i2, i11, i10, i5, i6, i7, 4984, 5028 | 0);
    HEAP32[i3 >> 2] = HEAP32[i35 >> 2];
    break;
   }
  case 120:
   {
    i24 = HEAP32[(HEAP32[i2 >> 2] | 0) + 20 >> 2] | 0;
    HEAP32[i44 >> 2] = HEAP32[i3 >> 2];
    HEAP32[i45 >> 2] = HEAP32[i4 >> 2];
    HEAP32[i11 + 0 >> 2] = HEAP32[i44 + 0 >> 2];
    HEAP32[i10 + 0 >> 2] = HEAP32[i45 + 0 >> 2];
    FUNCTION_TABLE_viiiiiii[i24 & 63](i1, i2, i11, i10, i5, i6, i7);
    STACKTOP = i9;
    return;
   }
  case 88:
   {
    i24 = i2 + 8 | 0;
    i53 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i24 >> 2] | 0) + 24 >> 2] & 127](i24) | 0;
    HEAP32[i47 >> 2] = HEAP32[i3 >> 2];
    HEAP32[i48 >> 2] = HEAP32[i4 >> 2];
    i24 = HEAP8[i53] | 0;
    if ((i24 & 1) == 0) {
     i54 = i53 + 4 | 0;
     i55 = (i24 & 255) >>> 1;
     i56 = i53 + 4 | 0;
    } else {
     i24 = HEAP32[i53 + 8 >> 2] | 0;
     i54 = i24;
     i55 = HEAP32[i53 + 4 >> 2] | 0;
     i56 = i24;
    }
    HEAP32[i11 + 0 >> 2] = HEAP32[i47 + 0 >> 2];
    HEAP32[i10 + 0 >> 2] = HEAP32[i48 + 0 >> 2];
    __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_(i46, i2, i11, i10, i5, i6, i7, i56, i54 + (i55 << 2) | 0);
    HEAP32[i3 >> 2] = HEAP32[i46 >> 2];
    break;
   }
  case 77:
   {
    HEAP32[i16 >> 2] = HEAP32[i4 >> 2];
    HEAP32[i10 + 0 >> 2] = HEAP32[i16 + 0 >> 2];
    i24 = __ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi(i3, i10, i6, i50, 2) | 0;
    i53 = HEAP32[i6 >> 2] | 0;
    if ((i53 & 4 | 0) == 0 & (i24 | 0) < 60) {
     HEAP32[i7 + 4 >> 2] = i24;
     break L10;
    } else {
     HEAP32[i6 >> 2] = i53 | 4;
     break L10;
    }
    break;
   }
  case 99:
   {
    i53 = i2 + 8 | 0;
    i24 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i53 >> 2] | 0) + 12 >> 2] & 127](i53) | 0;
    HEAP32[i26 >> 2] = HEAP32[i3 >> 2];
    HEAP32[i27 >> 2] = HEAP32[i4 >> 2];
    i53 = HEAP8[i24] | 0;
    if ((i53 & 1) == 0) {
     i57 = i24 + 4 | 0;
     i58 = (i53 & 255) >>> 1;
     i59 = i24 + 4 | 0;
    } else {
     i53 = HEAP32[i24 + 8 >> 2] | 0;
     i57 = i53;
     i58 = HEAP32[i24 + 4 >> 2] | 0;
     i59 = i53;
    }
    HEAP32[i11 + 0 >> 2] = HEAP32[i26 + 0 >> 2];
    HEAP32[i10 + 0 >> 2] = HEAP32[i27 + 0 >> 2];
    __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_(i25, i2, i11, i10, i5, i6, i7, i59, i57 + (i58 << 2) | 0);
    HEAP32[i3 >> 2] = HEAP32[i25 >> 2];
    break;
   }
  case 65:
  case 97:
   {
    i53 = HEAP32[i4 >> 2] | 0;
    i24 = i2 + 8 | 0;
    i51 = FUNCTION_TABLE_ii[HEAP32[HEAP32[i24 >> 2] >> 2] & 127](i24) | 0;
    HEAP32[i23 >> 2] = i53;
    HEAP32[i10 + 0 >> 2] = HEAP32[i23 + 0 >> 2];
    i53 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb(i3, i10, i51, i51 + 168 | 0, i50, i6, 0) | 0) - i51 | 0;
    if ((i53 | 0) < 168) {
     HEAP32[i7 + 24 >> 2] = ((i53 | 0) / 12 | 0 | 0) % 7 | 0;
    }
    break;
   }
  case 104:
  case 66:
  case 98:
   {
    i53 = HEAP32[i4 >> 2] | 0;
    i51 = i2 + 8 | 0;
    i24 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i51 >> 2] | 0) + 4 >> 2] & 127](i51) | 0;
    HEAP32[i22 >> 2] = i53;
    HEAP32[i10 + 0 >> 2] = HEAP32[i22 + 0 >> 2];
    i53 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb(i3, i10, i24, i24 + 288 | 0, i50, i6, 0) | 0) - i24 | 0;
    if ((i53 | 0) < 288) {
     HEAP32[i7 + 16 >> 2] = ((i53 | 0) / 12 | 0 | 0) % 12 | 0;
    }
    break;
   }
  case 112:
   {
    i53 = i7 + 8 | 0;
    i24 = HEAP32[i4 >> 2] | 0;
    i51 = i2 + 8 | 0;
    i52 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i51 >> 2] | 0) + 8 >> 2] & 127](i51) | 0;
    i51 = HEAP8[i52] | 0;
    if ((i51 & 1) == 0) {
     i60 = (i51 & 255) >>> 1;
    } else {
     i60 = HEAP32[i52 + 4 >> 2] | 0;
    }
    i51 = HEAP8[i52 + 12 | 0] | 0;
    if ((i51 & 1) == 0) {
     i61 = (i51 & 255) >>> 1;
    } else {
     i61 = HEAP32[i52 + 16 >> 2] | 0;
    }
    if ((i60 | 0) == (0 - i61 | 0)) {
     HEAP32[i6 >> 2] = HEAP32[i6 >> 2] | 4;
     break L10;
    }
    HEAP32[i15 >> 2] = i24;
    HEAP32[i10 + 0 >> 2] = HEAP32[i15 + 0 >> 2];
    i24 = __ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb(i3, i10, i52, i52 + 24 | 0, i50, i6, 0) | 0;
    i51 = i24 - i52 | 0;
    if ((i24 | 0) == (i52 | 0)) {
     if ((HEAP32[i53 >> 2] | 0) == 12) {
      HEAP32[i53 >> 2] = 0;
      break L10;
     }
    }
    if ((i51 | 0) == 12) {
     i51 = HEAP32[i53 >> 2] | 0;
     if ((i51 | 0) < 12) {
      HEAP32[i53 >> 2] = i51 + 12;
     }
    }
    break;
   }
  case 73:
   {
    i51 = i7 + 8 | 0;
    HEAP32[i19 >> 2] = HEAP32[i4 >> 2];
    HEAP32[i10 + 0 >> 2] = HEAP32[i19 + 0 >> 2];
    i53 = __ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi(i3, i10, i6, i50, 2) | 0;
    i52 = HEAP32[i6 >> 2] | 0;
    if ((i52 & 4 | 0) == 0) {
     if ((i53 + -1 | 0) >>> 0 < 12) {
      HEAP32[i51 >> 2] = i53;
      break L10;
     }
    }
    HEAP32[i6 >> 2] = i52 | 4;
    break;
   }
  case 68:
   {
    HEAP32[i29 >> 2] = HEAP32[i3 >> 2];
    HEAP32[i30 >> 2] = HEAP32[i4 >> 2];
    HEAP32[i11 + 0 >> 2] = HEAP32[i29 + 0 >> 2];
    HEAP32[i10 + 0 >> 2] = HEAP32[i30 + 0 >> 2];
    __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_(i28, i2, i11, i10, i5, i6, i7, 4920, 4952 | 0);
    HEAP32[i3 >> 2] = HEAP32[i28 >> 2];
    break;
   }
  case 106:
   {
    HEAP32[i18 >> 2] = HEAP32[i4 >> 2];
    HEAP32[i10 + 0 >> 2] = HEAP32[i18 + 0 >> 2];
    i52 = __ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi(i3, i10, i6, i50, 3) | 0;
    i53 = HEAP32[i6 >> 2] | 0;
    if ((i53 & 4 | 0) == 0 & (i52 | 0) < 366) {
     HEAP32[i7 + 28 >> 2] = i52;
     break L10;
    } else {
     HEAP32[i6 >> 2] = i53 | 4;
     break L10;
    }
    break;
   }
  case 116:
  case 110:
   {
    HEAP32[i34 >> 2] = HEAP32[i4 >> 2];
    HEAP32[i10 + 0 >> 2] = HEAP32[i34 + 0 >> 2];
    __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIwEE(0, i3, i10, i6, i50);
    break;
   }
  case 82:
   {
    HEAP32[i39 >> 2] = HEAP32[i3 >> 2];
    HEAP32[i40 >> 2] = HEAP32[i4 >> 2];
    HEAP32[i11 + 0 >> 2] = HEAP32[i39 + 0 >> 2];
    HEAP32[i10 + 0 >> 2] = HEAP32[i40 + 0 >> 2];
    __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_(i38, i2, i11, i10, i5, i6, i7, 5032, 5052 | 0);
    HEAP32[i3 >> 2] = HEAP32[i38 >> 2];
    break;
   }
  case 83:
   {
    HEAP32[i14 >> 2] = HEAP32[i4 >> 2];
    HEAP32[i10 + 0 >> 2] = HEAP32[i14 + 0 >> 2];
    i53 = __ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi(i3, i10, i6, i50, 2) | 0;
    i52 = HEAP32[i6 >> 2] | 0;
    if ((i52 & 4 | 0) == 0 & (i53 | 0) < 61) {
     HEAP32[i7 >> 2] = i53;
     break L10;
    } else {
     HEAP32[i6 >> 2] = i52 | 4;
     break L10;
    }
    break;
   }
  case 84:
   {
    HEAP32[i42 >> 2] = HEAP32[i3 >> 2];
    HEAP32[i43 >> 2] = HEAP32[i4 >> 2];
    HEAP32[i11 + 0 >> 2] = HEAP32[i42 + 0 >> 2];
    HEAP32[i10 + 0 >> 2] = HEAP32[i43 + 0 >> 2];
    __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_(i41, i2, i11, i10, i5, i6, i7, 5056, 5088 | 0);
    HEAP32[i3 >> 2] = HEAP32[i41 >> 2];
    break;
   }
  case 119:
   {
    HEAP32[i13 >> 2] = HEAP32[i4 >> 2];
    HEAP32[i10 + 0 >> 2] = HEAP32[i13 + 0 >> 2];
    i52 = __ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi(i3, i10, i6, i50, 1) | 0;
    i53 = HEAP32[i6 >> 2] | 0;
    if ((i53 & 4 | 0) == 0 & (i52 | 0) < 7) {
     HEAP32[i7 + 24 >> 2] = i52;
     break L10;
    } else {
     HEAP32[i6 >> 2] = i53 | 4;
     break L10;
    }
    break;
   }
  case 109:
   {
    HEAP32[i17 >> 2] = HEAP32[i4 >> 2];
    HEAP32[i10 + 0 >> 2] = HEAP32[i17 + 0 >> 2];
    i53 = __ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi(i3, i10, i6, i50, 2) | 0;
    i52 = HEAP32[i6 >> 2] | 0;
    if ((i52 & 4 | 0) == 0 & (i53 | 0) < 13) {
     HEAP32[i7 + 16 >> 2] = i53 + -1;
     break L10;
    } else {
     HEAP32[i6 >> 2] = i52 | 4;
     break L10;
    }
    break;
   }
  case 72:
   {
    HEAP32[i20 >> 2] = HEAP32[i4 >> 2];
    HEAP32[i10 + 0 >> 2] = HEAP32[i20 + 0 >> 2];
    i52 = __ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi(i3, i10, i6, i50, 2) | 0;
    i53 = HEAP32[i6 >> 2] | 0;
    if ((i53 & 4 | 0) == 0 & (i52 | 0) < 24) {
     HEAP32[i7 + 8 >> 2] = i52;
     break L10;
    } else {
     HEAP32[i6 >> 2] = i53 | 4;
     break L10;
    }
    break;
   }
  case 70:
   {
    HEAP32[i32 >> 2] = HEAP32[i3 >> 2];
    HEAP32[i33 >> 2] = HEAP32[i4 >> 2];
    HEAP32[i11 + 0 >> 2] = HEAP32[i32 + 0 >> 2];
    HEAP32[i10 + 0 >> 2] = HEAP32[i33 + 0 >> 2];
    __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_(i31, i2, i11, i10, i5, i6, i7, 4952, 4984 | 0);
    HEAP32[i3 >> 2] = HEAP32[i31 >> 2];
    break;
   }
  case 101:
  case 100:
   {
    i53 = i7 + 12 | 0;
    HEAP32[i21 >> 2] = HEAP32[i4 >> 2];
    HEAP32[i10 + 0 >> 2] = HEAP32[i21 + 0 >> 2];
    i52 = __ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi(i3, i10, i6, i50, 2) | 0;
    i51 = HEAP32[i6 >> 2] | 0;
    if ((i51 & 4 | 0) == 0) {
     if ((i52 + -1 | 0) >>> 0 < 31) {
      HEAP32[i53 >> 2] = i52;
      break L10;
     }
    }
    HEAP32[i6 >> 2] = i51 | 4;
    break;
   }
  case 89:
   {
    HEAP32[i11 >> 2] = HEAP32[i4 >> 2];
    HEAP32[i10 + 0 >> 2] = HEAP32[i11 + 0 >> 2];
    i51 = __ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi(i3, i10, i6, i50, 4) | 0;
    if ((HEAP32[i6 >> 2] & 4 | 0) == 0) {
     HEAP32[i7 + 20 >> 2] = i51 + -1900;
    }
    break;
   }
  case 37:
   {
    HEAP32[i49 >> 2] = HEAP32[i4 >> 2];
    HEAP32[i10 + 0 >> 2] = HEAP32[i49 + 0 >> 2];
    __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIwEE(0, i3, i10, i6, i50);
    break;
   }
  case 121:
   {
    i51 = i7 + 20 | 0;
    HEAP32[i12 >> 2] = HEAP32[i4 >> 2];
    HEAP32[i10 + 0 >> 2] = HEAP32[i12 + 0 >> 2];
    i52 = __ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi(i3, i10, i6, i50, 4) | 0;
    if ((HEAP32[i6 >> 2] & 4 | 0) == 0) {
     if ((i52 | 0) < 69) {
      i62 = i52 + 2e3 | 0;
     } else {
      i62 = (i52 + -69 | 0) >>> 0 < 31 ? i52 + 1900 | 0 : i52;
     }
     HEAP32[i51 >> 2] = i62 + -1900;
    }
    break;
   }
  default:
   {
    HEAP32[i6 >> 2] = HEAP32[i6 >> 2] | 4;
   }
  }
 } while (0);
 HEAP32[i1 >> 2] = HEAP32[i3 >> 2];
 STACKTOP = i9;
 return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc(i1, i2, i3, i4, i5, i6, i7, i8, i9) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 i9 = i9 | 0;
 var i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0, i49 = 0, i50 = 0, i51 = 0, i52 = 0, i53 = 0, i54 = 0, i55 = 0, i56 = 0, i57 = 0, i58 = 0, i59 = 0, i60 = 0, i61 = 0, i62 = 0;
 i9 = STACKTOP;
 STACKTOP = STACKTOP + 176 | 0;
 i10 = i9;
 i11 = i9 + 160 | 0;
 i12 = i9 + 156 | 0;
 i13 = i9 + 152 | 0;
 i14 = i9 + 148 | 0;
 i15 = i9 + 144 | 0;
 i16 = i9 + 140 | 0;
 i17 = i9 + 136 | 0;
 i18 = i9 + 132 | 0;
 i19 = i9 + 128 | 0;
 i20 = i9 + 124 | 0;
 i21 = i9 + 120 | 0;
 i22 = i9 + 116 | 0;
 i23 = i9 + 112 | 0;
 i24 = i9 + 108 | 0;
 i25 = i9 + 104 | 0;
 i26 = i9 + 100 | 0;
 i27 = i9 + 96 | 0;
 i28 = i9 + 92 | 0;
 i29 = i9 + 88 | 0;
 i30 = i9 + 164 | 0;
 i31 = i9 + 44 | 0;
 i32 = i9 + 36 | 0;
 i33 = i9 + 32 | 0;
 i34 = i9 + 28 | 0;
 i35 = i9 + 40 | 0;
 i36 = i9 + 16 | 0;
 i37 = i9 + 12 | 0;
 i38 = i9 + 20 | 0;
 i39 = i9 + 24 | 0;
 i40 = i9 + 80 | 0;
 i41 = i9 + 48 | 0;
 i42 = i9 + 52 | 0;
 i43 = i9 + 56 | 0;
 i44 = i9 + 60 | 0;
 i45 = i9 + 64 | 0;
 i46 = i9 + 68 | 0;
 i47 = i9 + 72 | 0;
 i48 = i9 + 76 | 0;
 i49 = i9 + 84 | 0;
 HEAP32[i6 >> 2] = 0;
 __ZNKSt3__18ios_base6getlocEv(i24, i5);
 i50 = HEAP32[i24 >> 2] | 0;
 if (!((HEAP32[1458] | 0) == -1)) {
  HEAP32[i10 >> 2] = 5832;
  HEAP32[i10 + 4 >> 2] = 118;
  HEAP32[i10 + 8 >> 2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(5832, i10, 119);
 }
 i51 = (HEAP32[5836 >> 2] | 0) + -1 | 0;
 i52 = HEAP32[i50 + 8 >> 2] | 0;
 if (!((HEAP32[i50 + 12 >> 2] | 0) - i52 >> 2 >>> 0 > i51 >>> 0)) {
  i53 = ___cxa_allocate_exception(4) | 0;
  __ZNSt8bad_castC2Ev(i53);
  ___cxa_throw(i53 | 0, 13792, 107);
 }
 i50 = HEAP32[i52 + (i51 << 2) >> 2] | 0;
 if ((i50 | 0) == 0) {
  i53 = ___cxa_allocate_exception(4) | 0;
  __ZNSt8bad_castC2Ev(i53);
  ___cxa_throw(i53 | 0, 13792, 107);
 }
 __ZNSt3__114__shared_count16__release_sharedEv(HEAP32[i24 >> 2] | 0) | 0;
 L10 : do {
  switch (i8 << 24 >> 24 | 0) {
  case 77:
   {
    HEAP32[i16 >> 2] = HEAP32[i4 >> 2];
    HEAP32[i10 + 0 >> 2] = HEAP32[i16 + 0 >> 2];
    i24 = __ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi(i3, i10, i6, i50, 2) | 0;
    i53 = HEAP32[i6 >> 2] | 0;
    if ((i53 & 4 | 0) == 0 & (i24 | 0) < 60) {
     HEAP32[i7 + 4 >> 2] = i24;
     break L10;
    } else {
     HEAP32[i6 >> 2] = i53 | 4;
     break L10;
    }
    break;
   }
  case 120:
   {
    i53 = HEAP32[(HEAP32[i2 >> 2] | 0) + 20 >> 2] | 0;
    HEAP32[i44 >> 2] = HEAP32[i3 >> 2];
    HEAP32[i45 >> 2] = HEAP32[i4 >> 2];
    HEAP32[i11 + 0 >> 2] = HEAP32[i44 + 0 >> 2];
    HEAP32[i10 + 0 >> 2] = HEAP32[i45 + 0 >> 2];
    FUNCTION_TABLE_viiiiiii[i53 & 63](i1, i2, i11, i10, i5, i6, i7);
    STACKTOP = i9;
    return;
   }
  case 88:
   {
    i53 = i2 + 8 | 0;
    i24 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i53 >> 2] | 0) + 24 >> 2] & 127](i53) | 0;
    HEAP32[i47 >> 2] = HEAP32[i3 >> 2];
    HEAP32[i48 >> 2] = HEAP32[i4 >> 2];
    i53 = HEAP8[i24] | 0;
    if ((i53 & 1) == 0) {
     i54 = i24 + 1 | 0;
     i55 = (i53 & 255) >>> 1;
     i56 = i24 + 1 | 0;
    } else {
     i53 = HEAP32[i24 + 8 >> 2] | 0;
     i54 = i53;
     i55 = HEAP32[i24 + 4 >> 2] | 0;
     i56 = i53;
    }
    HEAP32[i11 + 0 >> 2] = HEAP32[i47 + 0 >> 2];
    HEAP32[i10 + 0 >> 2] = HEAP32[i48 + 0 >> 2];
    __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_(i46, i2, i11, i10, i5, i6, i7, i56, i54 + i55 | 0);
    HEAP32[i3 >> 2] = HEAP32[i46 >> 2];
    break;
   }
  case 99:
   {
    i53 = i2 + 8 | 0;
    i24 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i53 >> 2] | 0) + 12 >> 2] & 127](i53) | 0;
    HEAP32[i26 >> 2] = HEAP32[i3 >> 2];
    HEAP32[i27 >> 2] = HEAP32[i4 >> 2];
    i53 = HEAP8[i24] | 0;
    if ((i53 & 1) == 0) {
     i57 = i24 + 1 | 0;
     i58 = (i53 & 255) >>> 1;
     i59 = i24 + 1 | 0;
    } else {
     i53 = HEAP32[i24 + 8 >> 2] | 0;
     i57 = i53;
     i58 = HEAP32[i24 + 4 >> 2] | 0;
     i59 = i53;
    }
    HEAP32[i11 + 0 >> 2] = HEAP32[i26 + 0 >> 2];
    HEAP32[i10 + 0 >> 2] = HEAP32[i27 + 0 >> 2];
    __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_(i25, i2, i11, i10, i5, i6, i7, i59, i57 + i58 | 0);
    HEAP32[i3 >> 2] = HEAP32[i25 >> 2];
    break;
   }
  case 112:
   {
    i53 = i7 + 8 | 0;
    i24 = HEAP32[i4 >> 2] | 0;
    i51 = i2 + 8 | 0;
    i52 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i51 >> 2] | 0) + 8 >> 2] & 127](i51) | 0;
    i51 = HEAP8[i52] | 0;
    if ((i51 & 1) == 0) {
     i60 = (i51 & 255) >>> 1;
    } else {
     i60 = HEAP32[i52 + 4 >> 2] | 0;
    }
    i51 = HEAP8[i52 + 12 | 0] | 0;
    if ((i51 & 1) == 0) {
     i61 = (i51 & 255) >>> 1;
    } else {
     i61 = HEAP32[i52 + 16 >> 2] | 0;
    }
    if ((i60 | 0) == (0 - i61 | 0)) {
     HEAP32[i6 >> 2] = HEAP32[i6 >> 2] | 4;
     break L10;
    }
    HEAP32[i15 >> 2] = i24;
    HEAP32[i10 + 0 >> 2] = HEAP32[i15 + 0 >> 2];
    i24 = __ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb(i3, i10, i52, i52 + 24 | 0, i50, i6, 0) | 0;
    i51 = i24 - i52 | 0;
    if ((i24 | 0) == (i52 | 0)) {
     if ((HEAP32[i53 >> 2] | 0) == 12) {
      HEAP32[i53 >> 2] = 0;
      break L10;
     }
    }
    if ((i51 | 0) == 12) {
     i51 = HEAP32[i53 >> 2] | 0;
     if ((i51 | 0) < 12) {
      HEAP32[i53 >> 2] = i51 + 12;
     }
    }
    break;
   }
  case 83:
   {
    HEAP32[i14 >> 2] = HEAP32[i4 >> 2];
    HEAP32[i10 + 0 >> 2] = HEAP32[i14 + 0 >> 2];
    i51 = __ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi(i3, i10, i6, i50, 2) | 0;
    i53 = HEAP32[i6 >> 2] | 0;
    if ((i53 & 4 | 0) == 0 & (i51 | 0) < 61) {
     HEAP32[i7 >> 2] = i51;
     break L10;
    } else {
     HEAP32[i6 >> 2] = i53 | 4;
     break L10;
    }
    break;
   }
  case 73:
   {
    i53 = i7 + 8 | 0;
    HEAP32[i19 >> 2] = HEAP32[i4 >> 2];
    HEAP32[i10 + 0 >> 2] = HEAP32[i19 + 0 >> 2];
    i51 = __ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi(i3, i10, i6, i50, 2) | 0;
    i52 = HEAP32[i6 >> 2] | 0;
    if ((i52 & 4 | 0) == 0) {
     if ((i51 + -1 | 0) >>> 0 < 12) {
      HEAP32[i53 >> 2] = i51;
      break L10;
     }
    }
    HEAP32[i6 >> 2] = i52 | 4;
    break;
   }
  case 72:
   {
    HEAP32[i20 >> 2] = HEAP32[i4 >> 2];
    HEAP32[i10 + 0 >> 2] = HEAP32[i20 + 0 >> 2];
    i52 = __ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi(i3, i10, i6, i50, 2) | 0;
    i51 = HEAP32[i6 >> 2] | 0;
    if ((i51 & 4 | 0) == 0 & (i52 | 0) < 24) {
     HEAP32[i7 + 8 >> 2] = i52;
     break L10;
    } else {
     HEAP32[i6 >> 2] = i51 | 4;
     break L10;
    }
    break;
   }
  case 101:
  case 100:
   {
    i51 = i7 + 12 | 0;
    HEAP32[i21 >> 2] = HEAP32[i4 >> 2];
    HEAP32[i10 + 0 >> 2] = HEAP32[i21 + 0 >> 2];
    i52 = __ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi(i3, i10, i6, i50, 2) | 0;
    i53 = HEAP32[i6 >> 2] | 0;
    if ((i53 & 4 | 0) == 0) {
     if ((i52 + -1 | 0) >>> 0 < 31) {
      HEAP32[i51 >> 2] = i52;
      break L10;
     }
    }
    HEAP32[i6 >> 2] = i53 | 4;
    break;
   }
  case 104:
  case 66:
  case 98:
   {
    i53 = HEAP32[i4 >> 2] | 0;
    i52 = i2 + 8 | 0;
    i51 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i52 >> 2] | 0) + 4 >> 2] & 127](i52) | 0;
    HEAP32[i22 >> 2] = i53;
    HEAP32[i10 + 0 >> 2] = HEAP32[i22 + 0 >> 2];
    i53 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb(i3, i10, i51, i51 + 288 | 0, i50, i6, 0) | 0) - i51 | 0;
    if ((i53 | 0) < 288) {
     HEAP32[i7 + 16 >> 2] = ((i53 | 0) / 12 | 0 | 0) % 12 | 0;
    }
    break;
   }
  case 109:
   {
    HEAP32[i17 >> 2] = HEAP32[i4 >> 2];
    HEAP32[i10 + 0 >> 2] = HEAP32[i17 + 0 >> 2];
    i53 = __ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi(i3, i10, i6, i50, 2) | 0;
    i51 = HEAP32[i6 >> 2] | 0;
    if ((i51 & 4 | 0) == 0 & (i53 | 0) < 13) {
     HEAP32[i7 + 16 >> 2] = i53 + -1;
     break L10;
    } else {
     HEAP32[i6 >> 2] = i51 | 4;
     break L10;
    }
    break;
   }
  case 114:
   {
    HEAP32[i36 >> 2] = HEAP32[i3 >> 2];
    HEAP32[i37 >> 2] = HEAP32[i4 >> 2];
    HEAP32[i11 + 0 >> 2] = HEAP32[i36 + 0 >> 2];
    HEAP32[i10 + 0 >> 2] = HEAP32[i37 + 0 >> 2];
    __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_(i35, i2, i11, i10, i5, i6, i7, 4760, 4771 | 0);
    HEAP32[i3 >> 2] = HEAP32[i35 >> 2];
    break;
   }
  case 116:
  case 110:
   {
    HEAP32[i34 >> 2] = HEAP32[i4 >> 2];
    HEAP32[i10 + 0 >> 2] = HEAP32[i34 + 0 >> 2];
    __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIcEE(0, i3, i10, i6, i50);
    break;
   }
  case 82:
   {
    HEAP32[i39 >> 2] = HEAP32[i3 >> 2];
    HEAP32[i40 >> 2] = HEAP32[i4 >> 2];
    HEAP32[i11 + 0 >> 2] = HEAP32[i39 + 0 >> 2];
    HEAP32[i10 + 0 >> 2] = HEAP32[i40 + 0 >> 2];
    __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_(i38, i2, i11, i10, i5, i6, i7, 4776, 4781 | 0);
    HEAP32[i3 >> 2] = HEAP32[i38 >> 2];
    break;
   }
  case 65:
  case 97:
   {
    i51 = HEAP32[i4 >> 2] | 0;
    i53 = i2 + 8 | 0;
    i52 = FUNCTION_TABLE_ii[HEAP32[HEAP32[i53 >> 2] >> 2] & 127](i53) | 0;
    HEAP32[i23 >> 2] = i51;
    HEAP32[i10 + 0 >> 2] = HEAP32[i23 + 0 >> 2];
    i51 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb(i3, i10, i52, i52 + 168 | 0, i50, i6, 0) | 0) - i52 | 0;
    if ((i51 | 0) < 168) {
     HEAP32[i7 + 24 >> 2] = ((i51 | 0) / 12 | 0 | 0) % 7 | 0;
    }
    break;
   }
  case 70:
   {
    HEAP32[i32 >> 2] = HEAP32[i3 >> 2];
    HEAP32[i33 >> 2] = HEAP32[i4 >> 2];
    HEAP32[i11 + 0 >> 2] = HEAP32[i32 + 0 >> 2];
    HEAP32[i10 + 0 >> 2] = HEAP32[i33 + 0 >> 2];
    __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_(i31, i2, i11, i10, i5, i6, i7, 4752, 4760 | 0);
    HEAP32[i3 >> 2] = HEAP32[i31 >> 2];
    break;
   }
  case 106:
   {
    HEAP32[i18 >> 2] = HEAP32[i4 >> 2];
    HEAP32[i10 + 0 >> 2] = HEAP32[i18 + 0 >> 2];
    i51 = __ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi(i3, i10, i6, i50, 3) | 0;
    i52 = HEAP32[i6 >> 2] | 0;
    if ((i52 & 4 | 0) == 0 & (i51 | 0) < 366) {
     HEAP32[i7 + 28 >> 2] = i51;
     break L10;
    } else {
     HEAP32[i6 >> 2] = i52 | 4;
     break L10;
    }
    break;
   }
  case 84:
   {
    HEAP32[i42 >> 2] = HEAP32[i3 >> 2];
    HEAP32[i43 >> 2] = HEAP32[i4 >> 2];
    HEAP32[i11 + 0 >> 2] = HEAP32[i42 + 0 >> 2];
    HEAP32[i10 + 0 >> 2] = HEAP32[i43 + 0 >> 2];
    __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_(i41, i2, i11, i10, i5, i6, i7, 4784, 4792 | 0);
    HEAP32[i3 >> 2] = HEAP32[i41 >> 2];
    break;
   }
  case 68:
   {
    HEAP32[i29 >> 2] = HEAP32[i3 >> 2];
    HEAP32[i30 >> 2] = HEAP32[i4 >> 2];
    HEAP32[i11 + 0 >> 2] = HEAP32[i29 + 0 >> 2];
    HEAP32[i10 + 0 >> 2] = HEAP32[i30 + 0 >> 2];
    __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_(i28, i2, i11, i10, i5, i6, i7, 4744, 4752 | 0);
    HEAP32[i3 >> 2] = HEAP32[i28 >> 2];
    break;
   }
  case 119:
   {
    HEAP32[i13 >> 2] = HEAP32[i4 >> 2];
    HEAP32[i10 + 0 >> 2] = HEAP32[i13 + 0 >> 2];
    i52 = __ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi(i3, i10, i6, i50, 1) | 0;
    i51 = HEAP32[i6 >> 2] | 0;
    if ((i51 & 4 | 0) == 0 & (i52 | 0) < 7) {
     HEAP32[i7 + 24 >> 2] = i52;
     break L10;
    } else {
     HEAP32[i6 >> 2] = i51 | 4;
     break L10;
    }
    break;
   }
  case 37:
   {
    HEAP32[i49 >> 2] = HEAP32[i4 >> 2];
    HEAP32[i10 + 0 >> 2] = HEAP32[i49 + 0 >> 2];
    __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIcEE(0, i3, i10, i6, i50);
    break;
   }
  case 121:
   {
    i51 = i7 + 20 | 0;
    HEAP32[i12 >> 2] = HEAP32[i4 >> 2];
    HEAP32[i10 + 0 >> 2] = HEAP32[i12 + 0 >> 2];
    i52 = __ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi(i3, i10, i6, i50, 4) | 0;
    if ((HEAP32[i6 >> 2] & 4 | 0) == 0) {
     if ((i52 | 0) < 69) {
      i62 = i52 + 2e3 | 0;
     } else {
      i62 = (i52 + -69 | 0) >>> 0 < 31 ? i52 + 1900 | 0 : i52;
     }
     HEAP32[i51 >> 2] = i62 + -1900;
    }
    break;
   }
  case 89:
   {
    HEAP32[i11 >> 2] = HEAP32[i4 >> 2];
    HEAP32[i10 + 0 >> 2] = HEAP32[i11 + 0 >> 2];
    i51 = __ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi(i3, i10, i6, i50, 4) | 0;
    if ((HEAP32[i6 >> 2] & 4 | 0) == 0) {
     HEAP32[i7 + 20 >> 2] = i51 + -1900;
    }
    break;
   }
  default:
   {
    HEAP32[i6 >> 2] = HEAP32[i6 >> 2] | 4;
   }
  }
 } while (0);
 HEAP32[i1 >> 2] = HEAP32[i3 >> 2];
 STACKTOP = i9;
 return;
}
function _free(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0;
 i2 = STACKTOP;
 if ((i1 | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 i3 = i1 + -8 | 0;
 i4 = HEAP32[14168 >> 2] | 0;
 if (i3 >>> 0 < i4 >>> 0) {
  _abort();
 }
 i5 = HEAP32[i1 + -4 >> 2] | 0;
 i6 = i5 & 3;
 if ((i6 | 0) == 1) {
  _abort();
 }
 i7 = i5 & -8;
 i8 = i1 + (i7 + -8) | 0;
 do {
  if ((i5 & 1 | 0) == 0) {
   i9 = HEAP32[i3 >> 2] | 0;
   if ((i6 | 0) == 0) {
    STACKTOP = i2;
    return;
   }
   i10 = -8 - i9 | 0;
   i11 = i1 + i10 | 0;
   i12 = i9 + i7 | 0;
   if (i11 >>> 0 < i4 >>> 0) {
    _abort();
   }
   if ((i11 | 0) == (HEAP32[14172 >> 2] | 0)) {
    i13 = i1 + (i7 + -4) | 0;
    if ((HEAP32[i13 >> 2] & 3 | 0) != 3) {
     i14 = i11;
     i15 = i12;
     break;
    }
    HEAP32[14160 >> 2] = i12;
    HEAP32[i13 >> 2] = HEAP32[i13 >> 2] & -2;
    HEAP32[i1 + (i10 + 4) >> 2] = i12 | 1;
    HEAP32[i8 >> 2] = i12;
    STACKTOP = i2;
    return;
   }
   i13 = i9 >>> 3;
   if (i9 >>> 0 < 256) {
    i9 = HEAP32[i1 + (i10 + 8) >> 2] | 0;
    i16 = HEAP32[i1 + (i10 + 12) >> 2] | 0;
    i17 = 14192 + (i13 << 1 << 2) | 0;
    if ((i9 | 0) != (i17 | 0)) {
     if (i9 >>> 0 < i4 >>> 0) {
      _abort();
     }
     if ((HEAP32[i9 + 12 >> 2] | 0) != (i11 | 0)) {
      _abort();
     }
    }
    if ((i16 | 0) == (i9 | 0)) {
     HEAP32[3538] = HEAP32[3538] & ~(1 << i13);
     i14 = i11;
     i15 = i12;
     break;
    }
    if ((i16 | 0) == (i17 | 0)) {
     i18 = i16 + 8 | 0;
    } else {
     if (i16 >>> 0 < i4 >>> 0) {
      _abort();
     }
     i17 = i16 + 8 | 0;
     if ((HEAP32[i17 >> 2] | 0) == (i11 | 0)) {
      i18 = i17;
     } else {
      _abort();
     }
    }
    HEAP32[i9 + 12 >> 2] = i16;
    HEAP32[i18 >> 2] = i9;
    i14 = i11;
    i15 = i12;
    break;
   }
   i9 = HEAP32[i1 + (i10 + 24) >> 2] | 0;
   i16 = HEAP32[i1 + (i10 + 12) >> 2] | 0;
   do {
    if ((i16 | 0) == (i11 | 0)) {
     i17 = i1 + (i10 + 20) | 0;
     i13 = HEAP32[i17 >> 2] | 0;
     if ((i13 | 0) == 0) {
      i19 = i1 + (i10 + 16) | 0;
      i20 = HEAP32[i19 >> 2] | 0;
      if ((i20 | 0) == 0) {
       i21 = 0;
       break;
      } else {
       i22 = i20;
       i23 = i19;
      }
     } else {
      i22 = i13;
      i23 = i17;
     }
     while (1) {
      i17 = i22 + 20 | 0;
      i13 = HEAP32[i17 >> 2] | 0;
      if ((i13 | 0) != 0) {
       i22 = i13;
       i23 = i17;
       continue;
      }
      i17 = i22 + 16 | 0;
      i13 = HEAP32[i17 >> 2] | 0;
      if ((i13 | 0) == 0) {
       break;
      } else {
       i22 = i13;
       i23 = i17;
      }
     }
     if (i23 >>> 0 < i4 >>> 0) {
      _abort();
     } else {
      HEAP32[i23 >> 2] = 0;
      i21 = i22;
      break;
     }
    } else {
     i17 = HEAP32[i1 + (i10 + 8) >> 2] | 0;
     if (i17 >>> 0 < i4 >>> 0) {
      _abort();
     }
     i13 = i17 + 12 | 0;
     if ((HEAP32[i13 >> 2] | 0) != (i11 | 0)) {
      _abort();
     }
     i19 = i16 + 8 | 0;
     if ((HEAP32[i19 >> 2] | 0) == (i11 | 0)) {
      HEAP32[i13 >> 2] = i16;
      HEAP32[i19 >> 2] = i17;
      i21 = i16;
      break;
     } else {
      _abort();
     }
    }
   } while (0);
   if ((i9 | 0) == 0) {
    i14 = i11;
    i15 = i12;
   } else {
    i16 = HEAP32[i1 + (i10 + 28) >> 2] | 0;
    i17 = 14456 + (i16 << 2) | 0;
    if ((i11 | 0) == (HEAP32[i17 >> 2] | 0)) {
     HEAP32[i17 >> 2] = i21;
     if ((i21 | 0) == 0) {
      HEAP32[14156 >> 2] = HEAP32[14156 >> 2] & ~(1 << i16);
      i14 = i11;
      i15 = i12;
      break;
     }
    } else {
     if (i9 >>> 0 < (HEAP32[14168 >> 2] | 0) >>> 0) {
      _abort();
     }
     i16 = i9 + 16 | 0;
     if ((HEAP32[i16 >> 2] | 0) == (i11 | 0)) {
      HEAP32[i16 >> 2] = i21;
     } else {
      HEAP32[i9 + 20 >> 2] = i21;
     }
     if ((i21 | 0) == 0) {
      i14 = i11;
      i15 = i12;
      break;
     }
    }
    if (i21 >>> 0 < (HEAP32[14168 >> 2] | 0) >>> 0) {
     _abort();
    }
    HEAP32[i21 + 24 >> 2] = i9;
    i16 = HEAP32[i1 + (i10 + 16) >> 2] | 0;
    do {
     if ((i16 | 0) != 0) {
      if (i16 >>> 0 < (HEAP32[14168 >> 2] | 0) >>> 0) {
       _abort();
      } else {
       HEAP32[i21 + 16 >> 2] = i16;
       HEAP32[i16 + 24 >> 2] = i21;
       break;
      }
     }
    } while (0);
    i16 = HEAP32[i1 + (i10 + 20) >> 2] | 0;
    if ((i16 | 0) == 0) {
     i14 = i11;
     i15 = i12;
    } else {
     if (i16 >>> 0 < (HEAP32[14168 >> 2] | 0) >>> 0) {
      _abort();
     } else {
      HEAP32[i21 + 20 >> 2] = i16;
      HEAP32[i16 + 24 >> 2] = i21;
      i14 = i11;
      i15 = i12;
      break;
     }
    }
   }
  } else {
   i14 = i3;
   i15 = i7;
  }
 } while (0);
 if (!(i14 >>> 0 < i8 >>> 0)) {
  _abort();
 }
 i3 = i1 + (i7 + -4) | 0;
 i21 = HEAP32[i3 >> 2] | 0;
 if ((i21 & 1 | 0) == 0) {
  _abort();
 }
 if ((i21 & 2 | 0) == 0) {
  if ((i8 | 0) == (HEAP32[14176 >> 2] | 0)) {
   i4 = (HEAP32[14164 >> 2] | 0) + i15 | 0;
   HEAP32[14164 >> 2] = i4;
   HEAP32[14176 >> 2] = i14;
   HEAP32[i14 + 4 >> 2] = i4 | 1;
   if ((i14 | 0) != (HEAP32[14172 >> 2] | 0)) {
    STACKTOP = i2;
    return;
   }
   HEAP32[14172 >> 2] = 0;
   HEAP32[14160 >> 2] = 0;
   STACKTOP = i2;
   return;
  }
  if ((i8 | 0) == (HEAP32[14172 >> 2] | 0)) {
   i4 = (HEAP32[14160 >> 2] | 0) + i15 | 0;
   HEAP32[14160 >> 2] = i4;
   HEAP32[14172 >> 2] = i14;
   HEAP32[i14 + 4 >> 2] = i4 | 1;
   HEAP32[i14 + i4 >> 2] = i4;
   STACKTOP = i2;
   return;
  }
  i4 = (i21 & -8) + i15 | 0;
  i22 = i21 >>> 3;
  do {
   if (i21 >>> 0 < 256) {
    i23 = HEAP32[i1 + i7 >> 2] | 0;
    i18 = HEAP32[i1 + (i7 | 4) >> 2] | 0;
    i6 = 14192 + (i22 << 1 << 2) | 0;
    if ((i23 | 0) != (i6 | 0)) {
     if (i23 >>> 0 < (HEAP32[14168 >> 2] | 0) >>> 0) {
      _abort();
     }
     if ((HEAP32[i23 + 12 >> 2] | 0) != (i8 | 0)) {
      _abort();
     }
    }
    if ((i18 | 0) == (i23 | 0)) {
     HEAP32[3538] = HEAP32[3538] & ~(1 << i22);
     break;
    }
    if ((i18 | 0) == (i6 | 0)) {
     i24 = i18 + 8 | 0;
    } else {
     if (i18 >>> 0 < (HEAP32[14168 >> 2] | 0) >>> 0) {
      _abort();
     }
     i6 = i18 + 8 | 0;
     if ((HEAP32[i6 >> 2] | 0) == (i8 | 0)) {
      i24 = i6;
     } else {
      _abort();
     }
    }
    HEAP32[i23 + 12 >> 2] = i18;
    HEAP32[i24 >> 2] = i23;
   } else {
    i23 = HEAP32[i1 + (i7 + 16) >> 2] | 0;
    i18 = HEAP32[i1 + (i7 | 4) >> 2] | 0;
    do {
     if ((i18 | 0) == (i8 | 0)) {
      i6 = i1 + (i7 + 12) | 0;
      i5 = HEAP32[i6 >> 2] | 0;
      if ((i5 | 0) == 0) {
       i16 = i1 + (i7 + 8) | 0;
       i9 = HEAP32[i16 >> 2] | 0;
       if ((i9 | 0) == 0) {
        i25 = 0;
        break;
       } else {
        i26 = i9;
        i27 = i16;
       }
      } else {
       i26 = i5;
       i27 = i6;
      }
      while (1) {
       i6 = i26 + 20 | 0;
       i5 = HEAP32[i6 >> 2] | 0;
       if ((i5 | 0) != 0) {
        i26 = i5;
        i27 = i6;
        continue;
       }
       i6 = i26 + 16 | 0;
       i5 = HEAP32[i6 >> 2] | 0;
       if ((i5 | 0) == 0) {
        break;
       } else {
        i26 = i5;
        i27 = i6;
       }
      }
      if (i27 >>> 0 < (HEAP32[14168 >> 2] | 0) >>> 0) {
       _abort();
      } else {
       HEAP32[i27 >> 2] = 0;
       i25 = i26;
       break;
      }
     } else {
      i6 = HEAP32[i1 + i7 >> 2] | 0;
      if (i6 >>> 0 < (HEAP32[14168 >> 2] | 0) >>> 0) {
       _abort();
      }
      i5 = i6 + 12 | 0;
      if ((HEAP32[i5 >> 2] | 0) != (i8 | 0)) {
       _abort();
      }
      i16 = i18 + 8 | 0;
      if ((HEAP32[i16 >> 2] | 0) == (i8 | 0)) {
       HEAP32[i5 >> 2] = i18;
       HEAP32[i16 >> 2] = i6;
       i25 = i18;
       break;
      } else {
       _abort();
      }
     }
    } while (0);
    if ((i23 | 0) != 0) {
     i18 = HEAP32[i1 + (i7 + 20) >> 2] | 0;
     i12 = 14456 + (i18 << 2) | 0;
     if ((i8 | 0) == (HEAP32[i12 >> 2] | 0)) {
      HEAP32[i12 >> 2] = i25;
      if ((i25 | 0) == 0) {
       HEAP32[14156 >> 2] = HEAP32[14156 >> 2] & ~(1 << i18);
       break;
      }
     } else {
      if (i23 >>> 0 < (HEAP32[14168 >> 2] | 0) >>> 0) {
       _abort();
      }
      i18 = i23 + 16 | 0;
      if ((HEAP32[i18 >> 2] | 0) == (i8 | 0)) {
       HEAP32[i18 >> 2] = i25;
      } else {
       HEAP32[i23 + 20 >> 2] = i25;
      }
      if ((i25 | 0) == 0) {
       break;
      }
     }
     if (i25 >>> 0 < (HEAP32[14168 >> 2] | 0) >>> 0) {
      _abort();
     }
     HEAP32[i25 + 24 >> 2] = i23;
     i18 = HEAP32[i1 + (i7 + 8) >> 2] | 0;
     do {
      if ((i18 | 0) != 0) {
       if (i18 >>> 0 < (HEAP32[14168 >> 2] | 0) >>> 0) {
        _abort();
       } else {
        HEAP32[i25 + 16 >> 2] = i18;
        HEAP32[i18 + 24 >> 2] = i25;
        break;
       }
      }
     } while (0);
     i18 = HEAP32[i1 + (i7 + 12) >> 2] | 0;
     if ((i18 | 0) != 0) {
      if (i18 >>> 0 < (HEAP32[14168 >> 2] | 0) >>> 0) {
       _abort();
      } else {
       HEAP32[i25 + 20 >> 2] = i18;
       HEAP32[i18 + 24 >> 2] = i25;
       break;
      }
     }
    }
   }
  } while (0);
  HEAP32[i14 + 4 >> 2] = i4 | 1;
  HEAP32[i14 + i4 >> 2] = i4;
  if ((i14 | 0) == (HEAP32[14172 >> 2] | 0)) {
   HEAP32[14160 >> 2] = i4;
   STACKTOP = i2;
   return;
  } else {
   i28 = i4;
  }
 } else {
  HEAP32[i3 >> 2] = i21 & -2;
  HEAP32[i14 + 4 >> 2] = i15 | 1;
  HEAP32[i14 + i15 >> 2] = i15;
  i28 = i15;
 }
 i15 = i28 >>> 3;
 if (i28 >>> 0 < 256) {
  i21 = i15 << 1;
  i3 = 14192 + (i21 << 2) | 0;
  i4 = HEAP32[3538] | 0;
  i25 = 1 << i15;
  if ((i4 & i25 | 0) == 0) {
   HEAP32[3538] = i4 | i25;
   i29 = 14192 + (i21 + 2 << 2) | 0;
   i30 = i3;
  } else {
   i25 = 14192 + (i21 + 2 << 2) | 0;
   i21 = HEAP32[i25 >> 2] | 0;
   if (i21 >>> 0 < (HEAP32[14168 >> 2] | 0) >>> 0) {
    _abort();
   } else {
    i29 = i25;
    i30 = i21;
   }
  }
  HEAP32[i29 >> 2] = i14;
  HEAP32[i30 + 12 >> 2] = i14;
  HEAP32[i14 + 8 >> 2] = i30;
  HEAP32[i14 + 12 >> 2] = i3;
  STACKTOP = i2;
  return;
 }
 i3 = i28 >>> 8;
 if ((i3 | 0) == 0) {
  i31 = 0;
 } else {
  if (i28 >>> 0 > 16777215) {
   i31 = 31;
  } else {
   i30 = (i3 + 1048320 | 0) >>> 16 & 8;
   i29 = i3 << i30;
   i3 = (i29 + 520192 | 0) >>> 16 & 4;
   i21 = i29 << i3;
   i29 = (i21 + 245760 | 0) >>> 16 & 2;
   i25 = 14 - (i3 | i30 | i29) + (i21 << i29 >>> 15) | 0;
   i31 = i28 >>> (i25 + 7 | 0) & 1 | i25 << 1;
  }
 }
 i25 = 14456 + (i31 << 2) | 0;
 HEAP32[i14 + 28 >> 2] = i31;
 HEAP32[i14 + 20 >> 2] = 0;
 HEAP32[i14 + 16 >> 2] = 0;
 i29 = HEAP32[14156 >> 2] | 0;
 i21 = 1 << i31;
 L199 : do {
  if ((i29 & i21 | 0) == 0) {
   HEAP32[14156 >> 2] = i29 | i21;
   HEAP32[i25 >> 2] = i14;
   HEAP32[i14 + 24 >> 2] = i25;
   HEAP32[i14 + 12 >> 2] = i14;
   HEAP32[i14 + 8 >> 2] = i14;
  } else {
   i30 = HEAP32[i25 >> 2] | 0;
   if ((i31 | 0) == 31) {
    i32 = 0;
   } else {
    i32 = 25 - (i31 >>> 1) | 0;
   }
   L204 : do {
    if ((HEAP32[i30 + 4 >> 2] & -8 | 0) == (i28 | 0)) {
     i33 = i30;
    } else {
     i3 = i28 << i32;
     i4 = i30;
     while (1) {
      i34 = i4 + (i3 >>> 31 << 2) + 16 | 0;
      i15 = HEAP32[i34 >> 2] | 0;
      if ((i15 | 0) == 0) {
       break;
      }
      if ((HEAP32[i15 + 4 >> 2] & -8 | 0) == (i28 | 0)) {
       i33 = i15;
       break L204;
      } else {
       i3 = i3 << 1;
       i4 = i15;
      }
     }
     if (i34 >>> 0 < (HEAP32[14168 >> 2] | 0) >>> 0) {
      _abort();
     } else {
      HEAP32[i34 >> 2] = i14;
      HEAP32[i14 + 24 >> 2] = i4;
      HEAP32[i14 + 12 >> 2] = i14;
      HEAP32[i14 + 8 >> 2] = i14;
      break L199;
     }
    }
   } while (0);
   i30 = i33 + 8 | 0;
   i3 = HEAP32[i30 >> 2] | 0;
   i15 = HEAP32[14168 >> 2] | 0;
   if (i33 >>> 0 < i15 >>> 0) {
    _abort();
   }
   if (i3 >>> 0 < i15 >>> 0) {
    _abort();
   } else {
    HEAP32[i3 + 12 >> 2] = i14;
    HEAP32[i30 >> 2] = i14;
    HEAP32[i14 + 8 >> 2] = i3;
    HEAP32[i14 + 12 >> 2] = i33;
    HEAP32[i14 + 24 >> 2] = 0;
    break;
   }
  }
 } while (0);
 i14 = (HEAP32[14184 >> 2] | 0) + -1 | 0;
 HEAP32[14184 >> 2] = i14;
 if ((i14 | 0) == 0) {
  i35 = 14608 | 0;
 } else {
  STACKTOP = i2;
  return;
 }
 while (1) {
  i14 = HEAP32[i35 >> 2] | 0;
  if ((i14 | 0) == 0) {
   break;
  } else {
   i35 = i14 + 8 | 0;
  }
 }
 HEAP32[14184 >> 2] = -1;
 STACKTOP = i2;
 return;
}
function _dispose_chunk(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0;
 i3 = STACKTOP;
 i4 = i1 + i2 | 0;
 i5 = HEAP32[i1 + 4 >> 2] | 0;
 do {
  if ((i5 & 1 | 0) == 0) {
   i6 = HEAP32[i1 >> 2] | 0;
   if ((i5 & 3 | 0) == 0) {
    STACKTOP = i3;
    return;
   }
   i7 = i1 + (0 - i6) | 0;
   i8 = i6 + i2 | 0;
   i9 = HEAP32[14168 >> 2] | 0;
   if (i7 >>> 0 < i9 >>> 0) {
    _abort();
   }
   if ((i7 | 0) == (HEAP32[14172 >> 2] | 0)) {
    i10 = i1 + (i2 + 4) | 0;
    if ((HEAP32[i10 >> 2] & 3 | 0) != 3) {
     i11 = i7;
     i12 = i8;
     break;
    }
    HEAP32[14160 >> 2] = i8;
    HEAP32[i10 >> 2] = HEAP32[i10 >> 2] & -2;
    HEAP32[i1 + (4 - i6) >> 2] = i8 | 1;
    HEAP32[i4 >> 2] = i8;
    STACKTOP = i3;
    return;
   }
   i10 = i6 >>> 3;
   if (i6 >>> 0 < 256) {
    i13 = HEAP32[i1 + (8 - i6) >> 2] | 0;
    i14 = HEAP32[i1 + (12 - i6) >> 2] | 0;
    i15 = 14192 + (i10 << 1 << 2) | 0;
    if ((i13 | 0) != (i15 | 0)) {
     if (i13 >>> 0 < i9 >>> 0) {
      _abort();
     }
     if ((HEAP32[i13 + 12 >> 2] | 0) != (i7 | 0)) {
      _abort();
     }
    }
    if ((i14 | 0) == (i13 | 0)) {
     HEAP32[3538] = HEAP32[3538] & ~(1 << i10);
     i11 = i7;
     i12 = i8;
     break;
    }
    if ((i14 | 0) == (i15 | 0)) {
     i16 = i14 + 8 | 0;
    } else {
     if (i14 >>> 0 < i9 >>> 0) {
      _abort();
     }
     i15 = i14 + 8 | 0;
     if ((HEAP32[i15 >> 2] | 0) == (i7 | 0)) {
      i16 = i15;
     } else {
      _abort();
     }
    }
    HEAP32[i13 + 12 >> 2] = i14;
    HEAP32[i16 >> 2] = i13;
    i11 = i7;
    i12 = i8;
    break;
   }
   i13 = HEAP32[i1 + (24 - i6) >> 2] | 0;
   i14 = HEAP32[i1 + (12 - i6) >> 2] | 0;
   do {
    if ((i14 | 0) == (i7 | 0)) {
     i15 = 16 - i6 | 0;
     i10 = i1 + (i15 + 4) | 0;
     i17 = HEAP32[i10 >> 2] | 0;
     if ((i17 | 0) == 0) {
      i18 = i1 + i15 | 0;
      i15 = HEAP32[i18 >> 2] | 0;
      if ((i15 | 0) == 0) {
       i19 = 0;
       break;
      } else {
       i20 = i15;
       i21 = i18;
      }
     } else {
      i20 = i17;
      i21 = i10;
     }
     while (1) {
      i10 = i20 + 20 | 0;
      i17 = HEAP32[i10 >> 2] | 0;
      if ((i17 | 0) != 0) {
       i20 = i17;
       i21 = i10;
       continue;
      }
      i10 = i20 + 16 | 0;
      i17 = HEAP32[i10 >> 2] | 0;
      if ((i17 | 0) == 0) {
       break;
      } else {
       i20 = i17;
       i21 = i10;
      }
     }
     if (i21 >>> 0 < i9 >>> 0) {
      _abort();
     } else {
      HEAP32[i21 >> 2] = 0;
      i19 = i20;
      break;
     }
    } else {
     i10 = HEAP32[i1 + (8 - i6) >> 2] | 0;
     if (i10 >>> 0 < i9 >>> 0) {
      _abort();
     }
     i17 = i10 + 12 | 0;
     if ((HEAP32[i17 >> 2] | 0) != (i7 | 0)) {
      _abort();
     }
     i18 = i14 + 8 | 0;
     if ((HEAP32[i18 >> 2] | 0) == (i7 | 0)) {
      HEAP32[i17 >> 2] = i14;
      HEAP32[i18 >> 2] = i10;
      i19 = i14;
      break;
     } else {
      _abort();
     }
    }
   } while (0);
   if ((i13 | 0) == 0) {
    i11 = i7;
    i12 = i8;
   } else {
    i14 = HEAP32[i1 + (28 - i6) >> 2] | 0;
    i9 = 14456 + (i14 << 2) | 0;
    if ((i7 | 0) == (HEAP32[i9 >> 2] | 0)) {
     HEAP32[i9 >> 2] = i19;
     if ((i19 | 0) == 0) {
      HEAP32[14156 >> 2] = HEAP32[14156 >> 2] & ~(1 << i14);
      i11 = i7;
      i12 = i8;
      break;
     }
    } else {
     if (i13 >>> 0 < (HEAP32[14168 >> 2] | 0) >>> 0) {
      _abort();
     }
     i14 = i13 + 16 | 0;
     if ((HEAP32[i14 >> 2] | 0) == (i7 | 0)) {
      HEAP32[i14 >> 2] = i19;
     } else {
      HEAP32[i13 + 20 >> 2] = i19;
     }
     if ((i19 | 0) == 0) {
      i11 = i7;
      i12 = i8;
      break;
     }
    }
    if (i19 >>> 0 < (HEAP32[14168 >> 2] | 0) >>> 0) {
     _abort();
    }
    HEAP32[i19 + 24 >> 2] = i13;
    i14 = 16 - i6 | 0;
    i9 = HEAP32[i1 + i14 >> 2] | 0;
    do {
     if ((i9 | 0) != 0) {
      if (i9 >>> 0 < (HEAP32[14168 >> 2] | 0) >>> 0) {
       _abort();
      } else {
       HEAP32[i19 + 16 >> 2] = i9;
       HEAP32[i9 + 24 >> 2] = i19;
       break;
      }
     }
    } while (0);
    i9 = HEAP32[i1 + (i14 + 4) >> 2] | 0;
    if ((i9 | 0) == 0) {
     i11 = i7;
     i12 = i8;
    } else {
     if (i9 >>> 0 < (HEAP32[14168 >> 2] | 0) >>> 0) {
      _abort();
     } else {
      HEAP32[i19 + 20 >> 2] = i9;
      HEAP32[i9 + 24 >> 2] = i19;
      i11 = i7;
      i12 = i8;
      break;
     }
    }
   }
  } else {
   i11 = i1;
   i12 = i2;
  }
 } while (0);
 i19 = HEAP32[14168 >> 2] | 0;
 if (i4 >>> 0 < i19 >>> 0) {
  _abort();
 }
 i20 = i1 + (i2 + 4) | 0;
 i21 = HEAP32[i20 >> 2] | 0;
 if ((i21 & 2 | 0) == 0) {
  if ((i4 | 0) == (HEAP32[14176 >> 2] | 0)) {
   i16 = (HEAP32[14164 >> 2] | 0) + i12 | 0;
   HEAP32[14164 >> 2] = i16;
   HEAP32[14176 >> 2] = i11;
   HEAP32[i11 + 4 >> 2] = i16 | 1;
   if ((i11 | 0) != (HEAP32[14172 >> 2] | 0)) {
    STACKTOP = i3;
    return;
   }
   HEAP32[14172 >> 2] = 0;
   HEAP32[14160 >> 2] = 0;
   STACKTOP = i3;
   return;
  }
  if ((i4 | 0) == (HEAP32[14172 >> 2] | 0)) {
   i16 = (HEAP32[14160 >> 2] | 0) + i12 | 0;
   HEAP32[14160 >> 2] = i16;
   HEAP32[14172 >> 2] = i11;
   HEAP32[i11 + 4 >> 2] = i16 | 1;
   HEAP32[i11 + i16 >> 2] = i16;
   STACKTOP = i3;
   return;
  }
  i16 = (i21 & -8) + i12 | 0;
  i5 = i21 >>> 3;
  do {
   if (i21 >>> 0 < 256) {
    i9 = HEAP32[i1 + (i2 + 8) >> 2] | 0;
    i6 = HEAP32[i1 + (i2 + 12) >> 2] | 0;
    i13 = 14192 + (i5 << 1 << 2) | 0;
    if ((i9 | 0) != (i13 | 0)) {
     if (i9 >>> 0 < i19 >>> 0) {
      _abort();
     }
     if ((HEAP32[i9 + 12 >> 2] | 0) != (i4 | 0)) {
      _abort();
     }
    }
    if ((i6 | 0) == (i9 | 0)) {
     HEAP32[3538] = HEAP32[3538] & ~(1 << i5);
     break;
    }
    if ((i6 | 0) == (i13 | 0)) {
     i22 = i6 + 8 | 0;
    } else {
     if (i6 >>> 0 < i19 >>> 0) {
      _abort();
     }
     i13 = i6 + 8 | 0;
     if ((HEAP32[i13 >> 2] | 0) == (i4 | 0)) {
      i22 = i13;
     } else {
      _abort();
     }
    }
    HEAP32[i9 + 12 >> 2] = i6;
    HEAP32[i22 >> 2] = i9;
   } else {
    i9 = HEAP32[i1 + (i2 + 24) >> 2] | 0;
    i6 = HEAP32[i1 + (i2 + 12) >> 2] | 0;
    do {
     if ((i6 | 0) == (i4 | 0)) {
      i13 = i1 + (i2 + 20) | 0;
      i10 = HEAP32[i13 >> 2] | 0;
      if ((i10 | 0) == 0) {
       i18 = i1 + (i2 + 16) | 0;
       i17 = HEAP32[i18 >> 2] | 0;
       if ((i17 | 0) == 0) {
        i23 = 0;
        break;
       } else {
        i24 = i17;
        i25 = i18;
       }
      } else {
       i24 = i10;
       i25 = i13;
      }
      while (1) {
       i13 = i24 + 20 | 0;
       i10 = HEAP32[i13 >> 2] | 0;
       if ((i10 | 0) != 0) {
        i24 = i10;
        i25 = i13;
        continue;
       }
       i13 = i24 + 16 | 0;
       i10 = HEAP32[i13 >> 2] | 0;
       if ((i10 | 0) == 0) {
        break;
       } else {
        i24 = i10;
        i25 = i13;
       }
      }
      if (i25 >>> 0 < i19 >>> 0) {
       _abort();
      } else {
       HEAP32[i25 >> 2] = 0;
       i23 = i24;
       break;
      }
     } else {
      i13 = HEAP32[i1 + (i2 + 8) >> 2] | 0;
      if (i13 >>> 0 < i19 >>> 0) {
       _abort();
      }
      i10 = i13 + 12 | 0;
      if ((HEAP32[i10 >> 2] | 0) != (i4 | 0)) {
       _abort();
      }
      i18 = i6 + 8 | 0;
      if ((HEAP32[i18 >> 2] | 0) == (i4 | 0)) {
       HEAP32[i10 >> 2] = i6;
       HEAP32[i18 >> 2] = i13;
       i23 = i6;
       break;
      } else {
       _abort();
      }
     }
    } while (0);
    if ((i9 | 0) != 0) {
     i6 = HEAP32[i1 + (i2 + 28) >> 2] | 0;
     i8 = 14456 + (i6 << 2) | 0;
     if ((i4 | 0) == (HEAP32[i8 >> 2] | 0)) {
      HEAP32[i8 >> 2] = i23;
      if ((i23 | 0) == 0) {
       HEAP32[14156 >> 2] = HEAP32[14156 >> 2] & ~(1 << i6);
       break;
      }
     } else {
      if (i9 >>> 0 < (HEAP32[14168 >> 2] | 0) >>> 0) {
       _abort();
      }
      i6 = i9 + 16 | 0;
      if ((HEAP32[i6 >> 2] | 0) == (i4 | 0)) {
       HEAP32[i6 >> 2] = i23;
      } else {
       HEAP32[i9 + 20 >> 2] = i23;
      }
      if ((i23 | 0) == 0) {
       break;
      }
     }
     if (i23 >>> 0 < (HEAP32[14168 >> 2] | 0) >>> 0) {
      _abort();
     }
     HEAP32[i23 + 24 >> 2] = i9;
     i6 = HEAP32[i1 + (i2 + 16) >> 2] | 0;
     do {
      if ((i6 | 0) != 0) {
       if (i6 >>> 0 < (HEAP32[14168 >> 2] | 0) >>> 0) {
        _abort();
       } else {
        HEAP32[i23 + 16 >> 2] = i6;
        HEAP32[i6 + 24 >> 2] = i23;
        break;
       }
      }
     } while (0);
     i6 = HEAP32[i1 + (i2 + 20) >> 2] | 0;
     if ((i6 | 0) != 0) {
      if (i6 >>> 0 < (HEAP32[14168 >> 2] | 0) >>> 0) {
       _abort();
      } else {
       HEAP32[i23 + 20 >> 2] = i6;
       HEAP32[i6 + 24 >> 2] = i23;
       break;
      }
     }
    }
   }
  } while (0);
  HEAP32[i11 + 4 >> 2] = i16 | 1;
  HEAP32[i11 + i16 >> 2] = i16;
  if ((i11 | 0) == (HEAP32[14172 >> 2] | 0)) {
   HEAP32[14160 >> 2] = i16;
   STACKTOP = i3;
   return;
  } else {
   i26 = i16;
  }
 } else {
  HEAP32[i20 >> 2] = i21 & -2;
  HEAP32[i11 + 4 >> 2] = i12 | 1;
  HEAP32[i11 + i12 >> 2] = i12;
  i26 = i12;
 }
 i12 = i26 >>> 3;
 if (i26 >>> 0 < 256) {
  i21 = i12 << 1;
  i20 = 14192 + (i21 << 2) | 0;
  i16 = HEAP32[3538] | 0;
  i23 = 1 << i12;
  if ((i16 & i23 | 0) == 0) {
   HEAP32[3538] = i16 | i23;
   i27 = 14192 + (i21 + 2 << 2) | 0;
   i28 = i20;
  } else {
   i23 = 14192 + (i21 + 2 << 2) | 0;
   i21 = HEAP32[i23 >> 2] | 0;
   if (i21 >>> 0 < (HEAP32[14168 >> 2] | 0) >>> 0) {
    _abort();
   } else {
    i27 = i23;
    i28 = i21;
   }
  }
  HEAP32[i27 >> 2] = i11;
  HEAP32[i28 + 12 >> 2] = i11;
  HEAP32[i11 + 8 >> 2] = i28;
  HEAP32[i11 + 12 >> 2] = i20;
  STACKTOP = i3;
  return;
 }
 i20 = i26 >>> 8;
 if ((i20 | 0) == 0) {
  i29 = 0;
 } else {
  if (i26 >>> 0 > 16777215) {
   i29 = 31;
  } else {
   i28 = (i20 + 1048320 | 0) >>> 16 & 8;
   i27 = i20 << i28;
   i20 = (i27 + 520192 | 0) >>> 16 & 4;
   i21 = i27 << i20;
   i27 = (i21 + 245760 | 0) >>> 16 & 2;
   i23 = 14 - (i20 | i28 | i27) + (i21 << i27 >>> 15) | 0;
   i29 = i26 >>> (i23 + 7 | 0) & 1 | i23 << 1;
  }
 }
 i23 = 14456 + (i29 << 2) | 0;
 HEAP32[i11 + 28 >> 2] = i29;
 HEAP32[i11 + 20 >> 2] = 0;
 HEAP32[i11 + 16 >> 2] = 0;
 i27 = HEAP32[14156 >> 2] | 0;
 i21 = 1 << i29;
 if ((i27 & i21 | 0) == 0) {
  HEAP32[14156 >> 2] = i27 | i21;
  HEAP32[i23 >> 2] = i11;
  HEAP32[i11 + 24 >> 2] = i23;
  HEAP32[i11 + 12 >> 2] = i11;
  HEAP32[i11 + 8 >> 2] = i11;
  STACKTOP = i3;
  return;
 }
 i21 = HEAP32[i23 >> 2] | 0;
 if ((i29 | 0) == 31) {
  i30 = 0;
 } else {
  i30 = 25 - (i29 >>> 1) | 0;
 }
 L194 : do {
  if ((HEAP32[i21 + 4 >> 2] & -8 | 0) == (i26 | 0)) {
   i31 = i21;
  } else {
   i29 = i26 << i30;
   i23 = i21;
   while (1) {
    i32 = i23 + (i29 >>> 31 << 2) + 16 | 0;
    i27 = HEAP32[i32 >> 2] | 0;
    if ((i27 | 0) == 0) {
     break;
    }
    if ((HEAP32[i27 + 4 >> 2] & -8 | 0) == (i26 | 0)) {
     i31 = i27;
     break L194;
    } else {
     i29 = i29 << 1;
     i23 = i27;
    }
   }
   if (i32 >>> 0 < (HEAP32[14168 >> 2] | 0) >>> 0) {
    _abort();
   }
   HEAP32[i32 >> 2] = i11;
   HEAP32[i11 + 24 >> 2] = i23;
   HEAP32[i11 + 12 >> 2] = i11;
   HEAP32[i11 + 8 >> 2] = i11;
   STACKTOP = i3;
   return;
  }
 } while (0);
 i32 = i31 + 8 | 0;
 i26 = HEAP32[i32 >> 2] | 0;
 i21 = HEAP32[14168 >> 2] | 0;
 if (i31 >>> 0 < i21 >>> 0) {
  _abort();
 }
 if (i26 >>> 0 < i21 >>> 0) {
  _abort();
 }
 HEAP32[i26 + 12 >> 2] = i11;
 HEAP32[i32 >> 2] = i11;
 HEAP32[i11 + 8 >> 2] = i26;
 HEAP32[i11 + 12 >> 2] = i31;
 HEAP32[i11 + 24 >> 2] = 0;
 STACKTOP = i3;
 return;
}
function __ZNSt3__16locale5__impC2Ej(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3;
 HEAP32[i1 + 4 >> 2] = i2 + -1;
 HEAP32[i1 >> 2] = 5752;
 i2 = i1 + 8 | 0;
 i5 = i1 + 12 | 0;
 i6 = i1 + 136 | 0;
 i7 = i1 + 24 | 0;
 HEAP8[i6] = 1;
 HEAP32[i5 >> 2] = i7;
 HEAP32[i2 >> 2] = i7;
 HEAP32[i1 + 16 >> 2] = i6;
 i6 = 28;
 i8 = i7;
 do {
  if ((i8 | 0) == 0) {
   i9 = 0;
  } else {
   HEAP32[i8 >> 2] = 0;
   i9 = HEAP32[i5 >> 2] | 0;
  }
  i8 = i9 + 4 | 0;
  HEAP32[i5 >> 2] = i8;
  i6 = i6 + -1 | 0;
 } while ((i6 | 0) != 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj(i1 + 144 | 0, 5736, 1);
 i6 = HEAP32[i2 >> 2] | 0;
 i2 = HEAP32[i5 >> 2] | 0;
 if ((i2 | 0) != (i6 | 0)) {
  HEAP32[i5 >> 2] = i2 + (~((i2 + -4 + (0 - i6) | 0) >>> 2) << 2);
 }
 HEAP32[10644 >> 2] = 0;
 HEAP32[2660] = 4232;
 if (!((HEAP32[1064] | 0) == -1)) {
  HEAP32[i4 >> 2] = 4256;
  HEAP32[i4 + 4 >> 2] = 118;
  HEAP32[i4 + 8 >> 2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(4256, i4, 119);
 }
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl(i1, 10640, (HEAP32[4260 >> 2] | 0) + -1 | 0);
 HEAP32[10636 >> 2] = 0;
 HEAP32[2658] = 4272;
 if (!((HEAP32[1074] | 0) == -1)) {
  HEAP32[i4 >> 2] = 4296;
  HEAP32[i4 + 4 >> 2] = 118;
  HEAP32[i4 + 8 >> 2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(4296, i4, 119);
 }
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl(i1, 10632, (HEAP32[4300 >> 2] | 0) + -1 | 0);
 HEAP32[10620 >> 2] = 0;
 HEAP32[2654] = 5848;
 HEAP32[10624 >> 2] = 0;
 HEAP8[10628 | 0] = 0;
 HEAP32[10624 >> 2] = HEAP32[(___ctype_b_loc() | 0) >> 2];
 if (!((HEAP32[1458] | 0) == -1)) {
  HEAP32[i4 >> 2] = 5832;
  HEAP32[i4 + 4 >> 2] = 118;
  HEAP32[i4 + 8 >> 2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(5832, i4, 119);
 }
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl(i1, 10616, (HEAP32[5836 >> 2] | 0) + -1 | 0);
 HEAP32[10612 >> 2] = 0;
 HEAP32[2652] = 6808;
 if (!((HEAP32[1456] | 0) == -1)) {
  HEAP32[i4 >> 2] = 5824;
  HEAP32[i4 + 4 >> 2] = 118;
  HEAP32[i4 + 8 >> 2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(5824, i4, 119);
 }
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl(i1, 10608, (HEAP32[5828 >> 2] | 0) + -1 | 0);
 HEAP32[10604 >> 2] = 0;
 HEAP32[2650] = 7024;
 if (!((HEAP32[1474] | 0) == -1)) {
  HEAP32[i4 >> 2] = 5896;
  HEAP32[i4 + 4 >> 2] = 118;
  HEAP32[i4 + 8 >> 2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(5896, i4, 119);
 }
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl(i1, 10600, (HEAP32[5900 >> 2] | 0) + -1 | 0);
 HEAP32[10588 >> 2] = 0;
 HEAP32[2646] = 5920;
 if ((HEAP8[5728] | 0) == 0) {
  if ((___cxa_guard_acquire(5728) | 0) != 0) {
   HEAP32[1430] = _newlocale(2147483647, 5736, 0) | 0;
   ___cxa_guard_release(5728);
  }
 }
 HEAP32[10592 >> 2] = HEAP32[1430];
 if (!((HEAP32[1476] | 0) == -1)) {
  HEAP32[i4 >> 2] = 5904;
  HEAP32[i4 + 4 >> 2] = 118;
  HEAP32[i4 + 8 >> 2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(5904, i4, 119);
 }
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl(i1, 10584, (HEAP32[5908 >> 2] | 0) + -1 | 0);
 HEAP32[10580 >> 2] = 0;
 HEAP32[2644] = 7248;
 if (!((HEAP32[1490] | 0) == -1)) {
  HEAP32[i4 >> 2] = 5960;
  HEAP32[i4 + 4 >> 2] = 118;
  HEAP32[i4 + 8 >> 2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(5960, i4, 119);
 }
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl(i1, 10576, (HEAP32[5964 >> 2] | 0) + -1 | 0);
 HEAP32[10572 >> 2] = 0;
 HEAP32[2642] = 7368;
 if (!((HEAP32[1492] | 0) == -1)) {
  HEAP32[i4 >> 2] = 5968;
  HEAP32[i4 + 4 >> 2] = 118;
  HEAP32[i4 + 8 >> 2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(5968, i4, 119);
 }
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl(i1, 10568, (HEAP32[5972 >> 2] | 0) + -1 | 0);
 HEAP32[10548 >> 2] = 0;
 HEAP32[2636] = 6e3;
 HEAP8[10552 | 0] = 46;
 HEAP8[10553 | 0] = 44;
 HEAP32[10556 >> 2] = 0;
 HEAP32[10560 >> 2] = 0;
 HEAP32[10564 >> 2] = 0;
 if (!((HEAP32[1494] | 0) == -1)) {
  HEAP32[i4 >> 2] = 5976;
  HEAP32[i4 + 4 >> 2] = 118;
  HEAP32[i4 + 8 >> 2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(5976, i4, 119);
 }
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl(i1, 10544, (HEAP32[5980 >> 2] | 0) + -1 | 0);
 HEAP32[10516 >> 2] = 0;
 HEAP32[2628] = 6040;
 HEAP32[10520 >> 2] = 46;
 HEAP32[10524 >> 2] = 44;
 HEAP32[10528 >> 2] = 0;
 HEAP32[10532 >> 2] = 0;
 HEAP32[10536 >> 2] = 0;
 if (!((HEAP32[1496] | 0) == -1)) {
  HEAP32[i4 >> 2] = 5984;
  HEAP32[i4 + 4 >> 2] = 118;
  HEAP32[i4 + 8 >> 2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(5984, i4, 119);
 }
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl(i1, 10512, (HEAP32[5988 >> 2] | 0) + -1 | 0);
 HEAP32[10508 >> 2] = 0;
 HEAP32[2626] = 4312;
 if (!((HEAP32[1092] | 0) == -1)) {
  HEAP32[i4 >> 2] = 4368;
  HEAP32[i4 + 4 >> 2] = 118;
  HEAP32[i4 + 8 >> 2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(4368, i4, 119);
 }
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl(i1, 10504, (HEAP32[4372 >> 2] | 0) + -1 | 0);
 HEAP32[10500 >> 2] = 0;
 HEAP32[2624] = 4432;
 if (!((HEAP32[1122] | 0) == -1)) {
  HEAP32[i4 >> 2] = 4488;
  HEAP32[i4 + 4 >> 2] = 118;
  HEAP32[i4 + 8 >> 2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(4488, i4, 119);
 }
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl(i1, 10496, (HEAP32[4492 >> 2] | 0) + -1 | 0);
 HEAP32[10492 >> 2] = 0;
 HEAP32[2622] = 4504;
 if (!((HEAP32[1138] | 0) == -1)) {
  HEAP32[i4 >> 2] = 4552;
  HEAP32[i4 + 4 >> 2] = 118;
  HEAP32[i4 + 8 >> 2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(4552, i4, 119);
 }
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl(i1, 10488, (HEAP32[4556 >> 2] | 0) + -1 | 0);
 HEAP32[10484 >> 2] = 0;
 HEAP32[2620] = 4568;
 if (!((HEAP32[1154] | 0) == -1)) {
  HEAP32[i4 >> 2] = 4616;
  HEAP32[i4 + 4 >> 2] = 118;
  HEAP32[i4 + 8 >> 2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(4616, i4, 119);
 }
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl(i1, 10480, (HEAP32[4620 >> 2] | 0) + -1 | 0);
 HEAP32[10476 >> 2] = 0;
 HEAP32[2618] = 5160;
 if (!((HEAP32[1302] | 0) == -1)) {
  HEAP32[i4 >> 2] = 5208;
  HEAP32[i4 + 4 >> 2] = 118;
  HEAP32[i4 + 8 >> 2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(5208, i4, 119);
 }
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl(i1, 10472, (HEAP32[5212 >> 2] | 0) + -1 | 0);
 HEAP32[10468 >> 2] = 0;
 HEAP32[2616] = 5224;
 if (!((HEAP32[1318] | 0) == -1)) {
  HEAP32[i4 >> 2] = 5272;
  HEAP32[i4 + 4 >> 2] = 118;
  HEAP32[i4 + 8 >> 2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(5272, i4, 119);
 }
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl(i1, 10464, (HEAP32[5276 >> 2] | 0) + -1 | 0);
 HEAP32[10460 >> 2] = 0;
 HEAP32[2614] = 5288;
 if (!((HEAP32[1334] | 0) == -1)) {
  HEAP32[i4 >> 2] = 5336;
  HEAP32[i4 + 4 >> 2] = 118;
  HEAP32[i4 + 8 >> 2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(5336, i4, 119);
 }
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl(i1, 10456, (HEAP32[5340 >> 2] | 0) + -1 | 0);
 HEAP32[10452 >> 2] = 0;
 HEAP32[2612] = 5352;
 if (!((HEAP32[1350] | 0) == -1)) {
  HEAP32[i4 >> 2] = 5400;
  HEAP32[i4 + 4 >> 2] = 118;
  HEAP32[i4 + 8 >> 2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(5400, i4, 119);
 }
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl(i1, 10448, (HEAP32[5404 >> 2] | 0) + -1 | 0);
 HEAP32[10444 >> 2] = 0;
 HEAP32[2610] = 5416;
 if (!((HEAP32[1360] | 0) == -1)) {
  HEAP32[i4 >> 2] = 5440;
  HEAP32[i4 + 4 >> 2] = 118;
  HEAP32[i4 + 8 >> 2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(5440, i4, 119);
 }
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl(i1, 10440, (HEAP32[5444 >> 2] | 0) + -1 | 0);
 HEAP32[10436 >> 2] = 0;
 HEAP32[2608] = 5496;
 if (!((HEAP32[1380] | 0) == -1)) {
  HEAP32[i4 >> 2] = 5520;
  HEAP32[i4 + 4 >> 2] = 118;
  HEAP32[i4 + 8 >> 2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(5520, i4, 119);
 }
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl(i1, 10432, (HEAP32[5524 >> 2] | 0) + -1 | 0);
 HEAP32[10428 >> 2] = 0;
 HEAP32[2606] = 5552;
 if (!((HEAP32[1394] | 0) == -1)) {
  HEAP32[i4 >> 2] = 5576;
  HEAP32[i4 + 4 >> 2] = 118;
  HEAP32[i4 + 8 >> 2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(5576, i4, 119);
 }
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl(i1, 10424, (HEAP32[5580 >> 2] | 0) + -1 | 0);
 HEAP32[10420 >> 2] = 0;
 HEAP32[2604] = 5600;
 if (!((HEAP32[1406] | 0) == -1)) {
  HEAP32[i4 >> 2] = 5624;
  HEAP32[i4 + 4 >> 2] = 118;
  HEAP32[i4 + 8 >> 2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(5624, i4, 119);
 }
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl(i1, 10416, (HEAP32[5628 >> 2] | 0) + -1 | 0);
 HEAP32[10404 >> 2] = 0;
 HEAP32[2600] = 4648;
 HEAP32[10408 >> 2] = 4696;
 if (!((HEAP32[1182] | 0) == -1)) {
  HEAP32[i4 >> 2] = 4728;
  HEAP32[i4 + 4 >> 2] = 118;
  HEAP32[i4 + 8 >> 2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(4728, i4, 119);
 }
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl(i1, 10400, (HEAP32[4732 >> 2] | 0) + -1 | 0);
 HEAP32[10388 >> 2] = 0;
 HEAP32[2596] = 4800;
 HEAP32[10392 >> 2] = 4848;
 if (!((HEAP32[1220] | 0) == -1)) {
  HEAP32[i4 >> 2] = 4880;
  HEAP32[i4 + 4 >> 2] = 118;
  HEAP32[i4 + 8 >> 2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(4880, i4, 119);
 }
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl(i1, 10384, (HEAP32[4884 >> 2] | 0) + -1 | 0);
 HEAP32[10372 >> 2] = 0;
 HEAP32[2592] = 6744;
 if ((HEAP8[5728] | 0) == 0) {
  if ((___cxa_guard_acquire(5728) | 0) != 0) {
   HEAP32[1430] = _newlocale(2147483647, 5736, 0) | 0;
   ___cxa_guard_release(5728);
  }
 }
 HEAP32[10376 >> 2] = HEAP32[1430];
 HEAP32[2592] = 5096;
 if (!((HEAP32[1278] | 0) == -1)) {
  HEAP32[i4 >> 2] = 5112;
  HEAP32[i4 + 4 >> 2] = 118;
  HEAP32[i4 + 8 >> 2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(5112, i4, 119);
 }
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl(i1, 10368, (HEAP32[5116 >> 2] | 0) + -1 | 0);
 HEAP32[10356 >> 2] = 0;
 HEAP32[2588] = 6744;
 if ((HEAP8[5728] | 0) == 0) {
  if ((___cxa_guard_acquire(5728) | 0) != 0) {
   HEAP32[1430] = _newlocale(2147483647, 5736, 0) | 0;
   ___cxa_guard_release(5728);
  }
 }
 HEAP32[10360 >> 2] = HEAP32[1430];
 HEAP32[2588] = 5128;
 if (!((HEAP32[1286] | 0) == -1)) {
  HEAP32[i4 >> 2] = 5144;
  HEAP32[i4 + 4 >> 2] = 118;
  HEAP32[i4 + 8 >> 2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(5144, i4, 119);
 }
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl(i1, 10352, (HEAP32[5148 >> 2] | 0) + -1 | 0);
 HEAP32[10348 >> 2] = 0;
 HEAP32[2586] = 5640;
 if (!((HEAP32[1416] | 0) == -1)) {
  HEAP32[i4 >> 2] = 5664;
  HEAP32[i4 + 4 >> 2] = 118;
  HEAP32[i4 + 8 >> 2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(5664, i4, 119);
 }
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl(i1, 10344, (HEAP32[5668 >> 2] | 0) + -1 | 0);
 HEAP32[10340 >> 2] = 0;
 HEAP32[2584] = 5680;
 if ((HEAP32[1426] | 0) == -1) {
  i10 = HEAP32[5708 >> 2] | 0;
  i11 = i10 + -1 | 0;
  __ZNSt3__16locale5__imp7installEPNS0_5facetEl(i1, 10336, i11);
  STACKTOP = i3;
  return;
 }
 HEAP32[i4 >> 2] = 5704;
 HEAP32[i4 + 4 >> 2] = 118;
 HEAP32[i4 + 8 >> 2] = 0;
 __ZNSt3__111__call_onceERVmPvPFvS2_E(5704, i4, 119);
 i10 = HEAP32[5708 >> 2] | 0;
 i11 = i10 + -1 | 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl(i1, 10336, i11);
 STACKTOP = i3;
 return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_(i1, i2, i3, i4, i5, i6, i7, i8, i9) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 i9 = i9 | 0;
 var i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0, i49 = 0, i50 = 0, i51 = 0, i52 = 0;
 i10 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i11 = i10;
 i12 = i10 + 28 | 0;
 i13 = i10 + 12 | 0;
 i14 = i10 + 16 | 0;
 i15 = i10 + 20 | 0;
 i16 = i10 + 24 | 0;
 __ZNKSt3__18ios_base6getlocEv(i13, i5);
 i17 = HEAP32[i13 >> 2] | 0;
 if (!((HEAP32[1456] | 0) == -1)) {
  HEAP32[i11 >> 2] = 5824;
  HEAP32[i11 + 4 >> 2] = 118;
  HEAP32[i11 + 8 >> 2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(5824, i11, 119);
 }
 i18 = (HEAP32[5828 >> 2] | 0) + -1 | 0;
 i19 = HEAP32[i17 + 8 >> 2] | 0;
 if (!((HEAP32[i17 + 12 >> 2] | 0) - i19 >> 2 >>> 0 > i18 >>> 0)) {
  i20 = ___cxa_allocate_exception(4) | 0;
  __ZNSt8bad_castC2Ev(i20);
  ___cxa_throw(i20 | 0, 13792, 107);
 }
 i17 = HEAP32[i19 + (i18 << 2) >> 2] | 0;
 if ((i17 | 0) == 0) {
  i20 = ___cxa_allocate_exception(4) | 0;
  __ZNSt8bad_castC2Ev(i20);
  ___cxa_throw(i20 | 0, 13792, 107);
 }
 __ZNSt3__114__shared_count16__release_sharedEv(HEAP32[i13 >> 2] | 0) | 0;
 HEAP32[i6 >> 2] = 0;
 L10 : do {
  if ((i8 | 0) == (i9 | 0)) {
   i21 = 69;
  } else {
   i13 = i8;
   i20 = 0;
   L12 : while (1) {
    i18 = i20;
    while (1) {
     if ((i18 | 0) != 0) {
      i21 = 69;
      break L10;
     }
     i19 = HEAP32[i3 >> 2] | 0;
     if ((i19 | 0) == 0) {
      i22 = 1;
      i23 = 0;
     } else {
      i24 = HEAP32[i19 + 12 >> 2] | 0;
      if ((i24 | 0) == (HEAP32[i19 + 16 >> 2] | 0)) {
       i25 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i19 >> 2] | 0) + 36 >> 2] & 127](i19) | 0;
      } else {
       i25 = HEAP32[i24 >> 2] | 0;
      }
      if ((i25 | 0) == -1) {
       HEAP32[i3 >> 2] = 0;
       i22 = 1;
       i23 = 0;
      } else {
       i22 = 0;
       i23 = i19;
      }
     }
     i19 = HEAP32[i4 >> 2] | 0;
     do {
      if ((i19 | 0) == 0) {
       i21 = 22;
      } else {
       i24 = HEAP32[i19 + 12 >> 2] | 0;
       if ((i24 | 0) == (HEAP32[i19 + 16 >> 2] | 0)) {
        i26 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i19 >> 2] | 0) + 36 >> 2] & 127](i19) | 0;
       } else {
        i26 = HEAP32[i24 >> 2] | 0;
       }
       if ((i26 | 0) == -1) {
        HEAP32[i4 >> 2] = 0;
        i21 = 22;
        break;
       } else {
        if (i22) {
         i27 = i19;
         break;
        } else {
         i21 = 24;
         break L12;
        }
       }
      }
     } while (0);
     if ((i21 | 0) == 22) {
      i21 = 0;
      if (i22) {
       i21 = 24;
       break L12;
      } else {
       i27 = 0;
      }
     }
     if ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i17 >> 2] | 0) + 52 >> 2] & 31](i17, HEAP32[i13 >> 2] | 0, 0) | 0) << 24 >> 24 == 37) {
      i21 = 26;
      break;
     }
     if (FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i17 >> 2] | 0) + 12 >> 2] & 31](i17, 8192, HEAP32[i13 >> 2] | 0) | 0) {
      i28 = i13;
      i21 = 36;
      break;
     }
     i29 = i23 + 12 | 0;
     i19 = HEAP32[i29 >> 2] | 0;
     i30 = i23 + 16 | 0;
     if ((i19 | 0) == (HEAP32[i30 >> 2] | 0)) {
      i31 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i23 >> 2] | 0) + 36 >> 2] & 127](i23) | 0;
     } else {
      i31 = HEAP32[i19 >> 2] | 0;
     }
     i19 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i17 >> 2] | 0) + 28 >> 2] & 31](i17, i31) | 0;
     if ((i19 | 0) == (FUNCTION_TABLE_iii[HEAP32[(HEAP32[i17 >> 2] | 0) + 28 >> 2] & 31](i17, HEAP32[i13 >> 2] | 0) | 0)) {
      i21 = 64;
      break;
     }
     HEAP32[i6 >> 2] = 4;
     i18 = 4;
    }
    L44 : do {
     if ((i21 | 0) == 26) {
      i21 = 0;
      i18 = i13 + 4 | 0;
      if ((i18 | 0) == (i9 | 0)) {
       i21 = 27;
       break L12;
      }
      i19 = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i17 >> 2] | 0) + 52 >> 2] & 31](i17, HEAP32[i18 >> 2] | 0, 0) | 0;
      if (i19 << 24 >> 24 == 48 | i19 << 24 >> 24 == 69) {
       i24 = i13 + 8 | 0;
       if ((i24 | 0) == (i9 | 0)) {
        i21 = 30;
        break L12;
       }
       i32 = i24;
       i33 = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i17 >> 2] | 0) + 52 >> 2] & 31](i17, HEAP32[i24 >> 2] | 0, 0) | 0;
       i34 = i19;
      } else {
       i32 = i18;
       i33 = i19;
       i34 = 0;
      }
      i19 = HEAP32[(HEAP32[i2 >> 2] | 0) + 36 >> 2] | 0;
      HEAP32[i15 >> 2] = i23;
      HEAP32[i16 >> 2] = i27;
      HEAP32[i12 + 0 >> 2] = HEAP32[i15 + 0 >> 2];
      HEAP32[i11 + 0 >> 2] = HEAP32[i16 + 0 >> 2];
      FUNCTION_TABLE_viiiiiiiii[i19 & 3](i14, i2, i12, i11, i5, i6, i7, i33, i34);
      HEAP32[i3 >> 2] = HEAP32[i14 >> 2];
      i35 = i32 + 4 | 0;
     } else if ((i21 | 0) == 36) {
      while (1) {
       i21 = 0;
       i19 = i28 + 4 | 0;
       if ((i19 | 0) == (i9 | 0)) {
        i36 = i9;
        break;
       }
       if (FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i17 >> 2] | 0) + 12 >> 2] & 31](i17, 8192, HEAP32[i19 >> 2] | 0) | 0) {
        i28 = i19;
        i21 = 36;
       } else {
        i36 = i19;
        break;
       }
      }
      i19 = i23;
      i18 = i27;
      i24 = i27;
      while (1) {
       if ((i19 | 0) == 0) {
        i37 = 1;
        i38 = 0;
       } else {
        i39 = HEAP32[i19 + 12 >> 2] | 0;
        if ((i39 | 0) == (HEAP32[i19 + 16 >> 2] | 0)) {
         i40 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i19 >> 2] | 0) + 36 >> 2] & 127](i19) | 0;
        } else {
         i40 = HEAP32[i39 >> 2] | 0;
        }
        if ((i40 | 0) == -1) {
         HEAP32[i3 >> 2] = 0;
         i37 = 1;
         i38 = 0;
        } else {
         i37 = 0;
         i38 = i19;
        }
       }
       do {
        if ((i24 | 0) == 0) {
         i41 = i18;
         i21 = 51;
        } else {
         i39 = HEAP32[i24 + 12 >> 2] | 0;
         if ((i39 | 0) == (HEAP32[i24 + 16 >> 2] | 0)) {
          i42 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i24 >> 2] | 0) + 36 >> 2] & 127](i24) | 0;
         } else {
          i42 = HEAP32[i39 >> 2] | 0;
         }
         if ((i42 | 0) == -1) {
          HEAP32[i4 >> 2] = 0;
          i41 = 0;
          i21 = 51;
          break;
         } else {
          if (i37 ^ (i18 | 0) == 0) {
           i43 = i18;
           i44 = i18;
           break;
          } else {
           i35 = i36;
           break L44;
          }
         }
        }
       } while (0);
       if ((i21 | 0) == 51) {
        i21 = 0;
        if (i37) {
         i35 = i36;
         break L44;
        } else {
         i43 = i41;
         i44 = 0;
        }
       }
       i39 = i38 + 12 | 0;
       i45 = HEAP32[i39 >> 2] | 0;
       i46 = i38 + 16 | 0;
       if ((i45 | 0) == (HEAP32[i46 >> 2] | 0)) {
        i47 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i38 >> 2] | 0) + 36 >> 2] & 127](i38) | 0;
       } else {
        i47 = HEAP32[i45 >> 2] | 0;
       }
       if (!(FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i17 >> 2] | 0) + 12 >> 2] & 31](i17, 8192, i47) | 0)) {
        i35 = i36;
        break L44;
       }
       i45 = HEAP32[i39 >> 2] | 0;
       if ((i45 | 0) == (HEAP32[i46 >> 2] | 0)) {
        FUNCTION_TABLE_ii[HEAP32[(HEAP32[i38 >> 2] | 0) + 40 >> 2] & 127](i38) | 0;
        i19 = i38;
        i18 = i43;
        i24 = i44;
        continue;
       } else {
        HEAP32[i39 >> 2] = i45 + 4;
        i19 = i38;
        i18 = i43;
        i24 = i44;
        continue;
       }
      }
     } else if ((i21 | 0) == 64) {
      i21 = 0;
      i24 = HEAP32[i29 >> 2] | 0;
      if ((i24 | 0) == (HEAP32[i30 >> 2] | 0)) {
       FUNCTION_TABLE_ii[HEAP32[(HEAP32[i23 >> 2] | 0) + 40 >> 2] & 127](i23) | 0;
      } else {
       HEAP32[i29 >> 2] = i24 + 4;
      }
      i35 = i13 + 4 | 0;
     }
    } while (0);
    if ((i35 | 0) == (i9 | 0)) {
     i21 = 69;
     break L10;
    }
    i13 = i35;
    i20 = HEAP32[i6 >> 2] | 0;
   }
   if ((i21 | 0) == 24) {
    HEAP32[i6 >> 2] = 4;
    i48 = i23;
    break;
   } else if ((i21 | 0) == 27) {
    HEAP32[i6 >> 2] = 4;
    i48 = i23;
    break;
   } else if ((i21 | 0) == 30) {
    HEAP32[i6 >> 2] = 4;
    i48 = i23;
    break;
   }
  }
 } while (0);
 if ((i21 | 0) == 69) {
  i48 = HEAP32[i3 >> 2] | 0;
 }
 if ((i48 | 0) == 0) {
  i49 = 0;
  i50 = 1;
 } else {
  i23 = HEAP32[i48 + 12 >> 2] | 0;
  if ((i23 | 0) == (HEAP32[i48 + 16 >> 2] | 0)) {
   i51 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i48 >> 2] | 0) + 36 >> 2] & 127](i48) | 0;
  } else {
   i51 = HEAP32[i23 >> 2] | 0;
  }
  if ((i51 | 0) == -1) {
   HEAP32[i3 >> 2] = 0;
   i49 = 0;
   i50 = 1;
  } else {
   i49 = i48;
   i50 = 0;
  }
 }
 i48 = HEAP32[i4 >> 2] | 0;
 do {
  if ((i48 | 0) == 0) {
   i21 = 82;
  } else {
   i3 = HEAP32[i48 + 12 >> 2] | 0;
   if ((i3 | 0) == (HEAP32[i48 + 16 >> 2] | 0)) {
    i52 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i48 >> 2] | 0) + 36 >> 2] & 127](i48) | 0;
   } else {
    i52 = HEAP32[i3 >> 2] | 0;
   }
   if ((i52 | 0) == -1) {
    HEAP32[i4 >> 2] = 0;
    i21 = 82;
    break;
   }
   if (i50) {
    HEAP32[i1 >> 2] = i49;
    STACKTOP = i10;
    return;
   }
  }
 } while (0);
 if ((i21 | 0) == 82) {
  if (!i50) {
   HEAP32[i1 >> 2] = i49;
   STACKTOP = i10;
   return;
  }
 }
 HEAP32[i6 >> 2] = HEAP32[i6 >> 2] | 2;
 HEAP32[i1 >> 2] = i49;
 STACKTOP = i10;
 return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_(i1, i2, i3, i4, i5, i6, i7, i8, i9) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 i9 = i9 | 0;
 var i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0;
 i10 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i11 = i10;
 i12 = i10 + 28 | 0;
 i13 = i10 + 12 | 0;
 i14 = i10 + 16 | 0;
 i15 = i10 + 20 | 0;
 i16 = i10 + 24 | 0;
 __ZNKSt3__18ios_base6getlocEv(i13, i5);
 i17 = HEAP32[i13 >> 2] | 0;
 if (!((HEAP32[1458] | 0) == -1)) {
  HEAP32[i11 >> 2] = 5832;
  HEAP32[i11 + 4 >> 2] = 118;
  HEAP32[i11 + 8 >> 2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(5832, i11, 119);
 }
 i18 = (HEAP32[5836 >> 2] | 0) + -1 | 0;
 i19 = HEAP32[i17 + 8 >> 2] | 0;
 if (!((HEAP32[i17 + 12 >> 2] | 0) - i19 >> 2 >>> 0 > i18 >>> 0)) {
  i20 = ___cxa_allocate_exception(4) | 0;
  __ZNSt8bad_castC2Ev(i20);
  ___cxa_throw(i20 | 0, 13792, 107);
 }
 i17 = HEAP32[i19 + (i18 << 2) >> 2] | 0;
 if ((i17 | 0) == 0) {
  i20 = ___cxa_allocate_exception(4) | 0;
  __ZNSt8bad_castC2Ev(i20);
  ___cxa_throw(i20 | 0, 13792, 107);
 }
 __ZNSt3__114__shared_count16__release_sharedEv(HEAP32[i13 >> 2] | 0) | 0;
 HEAP32[i6 >> 2] = 0;
 L10 : do {
  if ((i8 | 0) == (i9 | 0)) {
   i21 = 65;
  } else {
   i13 = i17 + 8 | 0;
   i20 = i8;
   i18 = 0;
   L12 : while (1) {
    i19 = i18;
    while (1) {
     if ((i19 | 0) != 0) {
      i21 = 65;
      break L10;
     }
     i22 = HEAP32[i3 >> 2] | 0;
     if ((i22 | 0) == 0) {
      i23 = 0;
     } else {
      if ((HEAP32[i22 + 12 >> 2] | 0) == (HEAP32[i22 + 16 >> 2] | 0)) {
       if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i22 >> 2] | 0) + 36 >> 2] & 127](i22) | 0) == -1) {
        HEAP32[i3 >> 2] = 0;
        i23 = 0;
       } else {
        i23 = i22;
       }
      } else {
       i23 = i22;
      }
     }
     i22 = (i23 | 0) == 0;
     i24 = HEAP32[i4 >> 2] | 0;
     do {
      if ((i24 | 0) == 0) {
       i21 = 19;
      } else {
       if ((HEAP32[i24 + 12 >> 2] | 0) == (HEAP32[i24 + 16 >> 2] | 0)) {
        if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i24 >> 2] | 0) + 36 >> 2] & 127](i24) | 0) == -1) {
         HEAP32[i4 >> 2] = 0;
         i21 = 19;
         break;
        }
       }
       if (i22) {
        i25 = i24;
       } else {
        i21 = 20;
        break L12;
       }
      }
     } while (0);
     if ((i21 | 0) == 19) {
      i21 = 0;
      if (i22) {
       i21 = 20;
       break L12;
      } else {
       i25 = 0;
      }
     }
     if ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i17 >> 2] | 0) + 36 >> 2] & 31](i17, HEAP8[i20] | 0, 0) | 0) << 24 >> 24 == 37) {
      i21 = 22;
      break;
     }
     i24 = HEAP8[i20] | 0;
     if (i24 << 24 >> 24 > -1) {
      i26 = HEAP32[i13 >> 2] | 0;
      if (!((HEAP16[i26 + (i24 << 24 >> 24 << 1) >> 1] & 8192) == 0)) {
       i27 = i20;
       i21 = 33;
       break;
      }
     }
     i28 = i23 + 12 | 0;
     i24 = HEAP32[i28 >> 2] | 0;
     i29 = i23 + 16 | 0;
     if ((i24 | 0) == (HEAP32[i29 >> 2] | 0)) {
      i30 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i23 >> 2] | 0) + 36 >> 2] & 127](i23) | 0;
     } else {
      i30 = HEAPU8[i24] | 0;
     }
     i24 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i17 >> 2] | 0) + 12 >> 2] & 31](i17, i30 & 255) | 0;
     if (i24 << 24 >> 24 == (FUNCTION_TABLE_iii[HEAP32[(HEAP32[i17 >> 2] | 0) + 12 >> 2] & 31](i17, HEAP8[i20] | 0) | 0) << 24 >> 24) {
      i21 = 60;
      break;
     }
     HEAP32[i6 >> 2] = 4;
     i19 = 4;
    }
    L40 : do {
     if ((i21 | 0) == 22) {
      i21 = 0;
      i19 = i20 + 1 | 0;
      if ((i19 | 0) == (i9 | 0)) {
       i21 = 23;
       break L12;
      }
      i24 = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i17 >> 2] | 0) + 36 >> 2] & 31](i17, HEAP8[i19] | 0, 0) | 0;
      if (i24 << 24 >> 24 == 48 | i24 << 24 >> 24 == 69) {
       i31 = i20 + 2 | 0;
       if ((i31 | 0) == (i9 | 0)) {
        i21 = 26;
        break L12;
       }
       i32 = i31;
       i33 = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i17 >> 2] | 0) + 36 >> 2] & 31](i17, HEAP8[i31] | 0, 0) | 0;
       i34 = i24;
      } else {
       i32 = i19;
       i33 = i24;
       i34 = 0;
      }
      i24 = HEAP32[(HEAP32[i2 >> 2] | 0) + 36 >> 2] | 0;
      HEAP32[i15 >> 2] = i23;
      HEAP32[i16 >> 2] = i25;
      HEAP32[i12 + 0 >> 2] = HEAP32[i15 + 0 >> 2];
      HEAP32[i11 + 0 >> 2] = HEAP32[i16 + 0 >> 2];
      FUNCTION_TABLE_viiiiiiiii[i24 & 3](i14, i2, i12, i11, i5, i6, i7, i33, i34);
      HEAP32[i3 >> 2] = HEAP32[i14 >> 2];
      i35 = i32 + 1 | 0;
     } else if ((i21 | 0) == 33) {
      while (1) {
       i21 = 0;
       i24 = i27 + 1 | 0;
       if ((i24 | 0) == (i9 | 0)) {
        i36 = i9;
        break;
       }
       i19 = HEAP8[i24] | 0;
       if (!(i19 << 24 >> 24 > -1)) {
        i36 = i24;
        break;
       }
       if ((HEAP16[i26 + (i19 << 24 >> 24 << 1) >> 1] & 8192) == 0) {
        i36 = i24;
        break;
       } else {
        i27 = i24;
        i21 = 33;
       }
      }
      i22 = i23;
      i24 = i25;
      i19 = i25;
      while (1) {
       if ((i22 | 0) == 0) {
        i37 = 0;
       } else {
        if ((HEAP32[i22 + 12 >> 2] | 0) == (HEAP32[i22 + 16 >> 2] | 0)) {
         if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i22 >> 2] | 0) + 36 >> 2] & 127](i22) | 0) == -1) {
          HEAP32[i3 >> 2] = 0;
          i37 = 0;
         } else {
          i37 = i22;
         }
        } else {
         i37 = i22;
        }
       }
       i31 = (i37 | 0) == 0;
       do {
        if ((i19 | 0) == 0) {
         i38 = i24;
         i21 = 46;
        } else {
         if ((HEAP32[i19 + 12 >> 2] | 0) != (HEAP32[i19 + 16 >> 2] | 0)) {
          if (i31) {
           i39 = i24;
           i40 = i19;
           break;
          } else {
           i35 = i36;
           break L40;
          }
         }
         if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i19 >> 2] | 0) + 36 >> 2] & 127](i19) | 0) == -1) {
          HEAP32[i4 >> 2] = 0;
          i38 = 0;
          i21 = 46;
          break;
         } else {
          if (i31 ^ (i24 | 0) == 0) {
           i39 = i24;
           i40 = i24;
           break;
          } else {
           i35 = i36;
           break L40;
          }
         }
        }
       } while (0);
       if ((i21 | 0) == 46) {
        i21 = 0;
        if (i31) {
         i35 = i36;
         break L40;
        } else {
         i39 = i38;
         i40 = 0;
        }
       }
       i41 = i37 + 12 | 0;
       i42 = HEAP32[i41 >> 2] | 0;
       i43 = i37 + 16 | 0;
       if ((i42 | 0) == (HEAP32[i43 >> 2] | 0)) {
        i44 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i37 >> 2] | 0) + 36 >> 2] & 127](i37) | 0;
       } else {
        i44 = HEAPU8[i42] | 0;
       }
       if (!((i44 & 255) << 24 >> 24 > -1)) {
        i35 = i36;
        break L40;
       }
       if ((HEAP16[(HEAP32[i13 >> 2] | 0) + (i44 << 24 >> 24 << 1) >> 1] & 8192) == 0) {
        i35 = i36;
        break L40;
       }
       i42 = HEAP32[i41 >> 2] | 0;
       if ((i42 | 0) == (HEAP32[i43 >> 2] | 0)) {
        FUNCTION_TABLE_ii[HEAP32[(HEAP32[i37 >> 2] | 0) + 40 >> 2] & 127](i37) | 0;
        i22 = i37;
        i24 = i39;
        i19 = i40;
        continue;
       } else {
        HEAP32[i41 >> 2] = i42 + 1;
        i22 = i37;
        i24 = i39;
        i19 = i40;
        continue;
       }
      }
     } else if ((i21 | 0) == 60) {
      i21 = 0;
      i19 = HEAP32[i28 >> 2] | 0;
      if ((i19 | 0) == (HEAP32[i29 >> 2] | 0)) {
       FUNCTION_TABLE_ii[HEAP32[(HEAP32[i23 >> 2] | 0) + 40 >> 2] & 127](i23) | 0;
      } else {
       HEAP32[i28 >> 2] = i19 + 1;
      }
      i35 = i20 + 1 | 0;
     }
    } while (0);
    if ((i35 | 0) == (i9 | 0)) {
     i21 = 65;
     break L10;
    }
    i20 = i35;
    i18 = HEAP32[i6 >> 2] | 0;
   }
   if ((i21 | 0) == 20) {
    HEAP32[i6 >> 2] = 4;
    i45 = i23;
    break;
   } else if ((i21 | 0) == 23) {
    HEAP32[i6 >> 2] = 4;
    i45 = i23;
    break;
   } else if ((i21 | 0) == 26) {
    HEAP32[i6 >> 2] = 4;
    i45 = i23;
    break;
   }
  }
 } while (0);
 if ((i21 | 0) == 65) {
  i45 = HEAP32[i3 >> 2] | 0;
 }
 if ((i45 | 0) == 0) {
  i46 = 0;
 } else {
  if ((HEAP32[i45 + 12 >> 2] | 0) == (HEAP32[i45 + 16 >> 2] | 0)) {
   if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i45 >> 2] | 0) + 36 >> 2] & 127](i45) | 0) == -1) {
    HEAP32[i3 >> 2] = 0;
    i46 = 0;
   } else {
    i46 = i45;
   }
  } else {
   i46 = i45;
  }
 }
 i45 = (i46 | 0) == 0;
 i3 = HEAP32[i4 >> 2] | 0;
 do {
  if ((i3 | 0) == 0) {
   i21 = 75;
  } else {
   if ((HEAP32[i3 + 12 >> 2] | 0) == (HEAP32[i3 + 16 >> 2] | 0)) {
    if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 127](i3) | 0) == -1) {
     HEAP32[i4 >> 2] = 0;
     i21 = 75;
     break;
    }
   }
   if (i45) {
    HEAP32[i1 >> 2] = i46;
    STACKTOP = i10;
    return;
   }
  }
 } while (0);
 if ((i21 | 0) == 75) {
  if (!i45) {
   HEAP32[i1 >> 2] = i46;
   STACKTOP = i10;
   return;
  }
 }
 HEAP32[i6 >> 2] = HEAP32[i6 >> 2] | 2;
 HEAP32[i1 >> 2] = i46;
 STACKTOP = i10;
 return;
}
function __ZNSt3__111__money_putIwE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_Ri(i1, i2, i3, i4, i5, i6, i7, i8, i9, i10) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 i9 = i9 | 0;
 i10 = i10 | 0;
 var i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0;
 i11 = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 i12 = i11;
 i13 = i11 + 108 | 0;
 i14 = i11 + 96 | 0;
 i15 = i11 + 92 | 0;
 i16 = i11 + 80 | 0;
 i17 = i11 + 68 | 0;
 i18 = i11 + 112 | 0;
 i19 = i11 + 40 | 0;
 i20 = i11 + 28 | 0;
 i21 = i11 + 24 | 0;
 i22 = i11 + 12 | 0;
 i23 = i11 + 44 | 0;
 i24 = i11 + 56 | 0;
 i25 = HEAP32[i3 >> 2] | 0;
 if (i1) {
  if (!((HEAP32[1350] | 0) == -1)) {
   HEAP32[i12 >> 2] = 5400;
   HEAP32[i12 + 4 >> 2] = 118;
   HEAP32[i12 + 8 >> 2] = 0;
   __ZNSt3__111__call_onceERVmPvPFvS2_E(5400, i12, 119);
  }
  i1 = (HEAP32[5404 >> 2] | 0) + -1 | 0;
  i3 = HEAP32[i25 + 8 >> 2] | 0;
  if (!((HEAP32[i25 + 12 >> 2] | 0) - i3 >> 2 >>> 0 > i1 >>> 0)) {
   i26 = ___cxa_allocate_exception(4) | 0;
   __ZNSt8bad_castC2Ev(i26);
   ___cxa_throw(i26 | 0, 13792, 107);
  }
  i27 = HEAP32[i3 + (i1 << 2) >> 2] | 0;
  if ((i27 | 0) == 0) {
   i26 = ___cxa_allocate_exception(4) | 0;
   __ZNSt8bad_castC2Ev(i26);
   ___cxa_throw(i26 | 0, 13792, 107);
  }
  i26 = HEAP32[i27 >> 2] | 0;
  if (i2) {
   FUNCTION_TABLE_vii[HEAP32[i26 + 44 >> 2] & 63](i13, i27);
   i1 = HEAP32[i13 >> 2] | 0;
   HEAP8[i4] = i1;
   HEAP8[i4 + 1 | 0] = i1 >> 8;
   HEAP8[i4 + 2 | 0] = i1 >> 16;
   HEAP8[i4 + 3 | 0] = i1 >> 24;
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[i27 >> 2] | 0) + 32 >> 2] & 63](i14, i27);
   if ((HEAP8[i9] & 1) == 0) {
    HEAP32[i9 + 4 >> 2] = 0;
    HEAP8[i9] = 0;
   } else {
    HEAP32[HEAP32[i9 + 8 >> 2] >> 2] = 0;
    HEAP32[i9 + 4 >> 2] = 0;
   }
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj(i9, 0);
   HEAP32[i9 + 0 >> 2] = HEAP32[i14 + 0 >> 2];
   HEAP32[i9 + 4 >> 2] = HEAP32[i14 + 4 >> 2];
   HEAP32[i9 + 8 >> 2] = HEAP32[i14 + 8 >> 2];
   HEAP32[i14 + 0 >> 2] = 0;
   HEAP32[i14 + 4 >> 2] = 0;
   HEAP32[i14 + 8 >> 2] = 0;
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(i14);
  } else {
   FUNCTION_TABLE_vii[HEAP32[i26 + 40 >> 2] & 63](i15, i27);
   i26 = HEAP32[i15 >> 2] | 0;
   HEAP8[i4] = i26;
   HEAP8[i4 + 1 | 0] = i26 >> 8;
   HEAP8[i4 + 2 | 0] = i26 >> 16;
   HEAP8[i4 + 3 | 0] = i26 >> 24;
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[i27 >> 2] | 0) + 28 >> 2] & 63](i16, i27);
   if ((HEAP8[i9] & 1) == 0) {
    HEAP32[i9 + 4 >> 2] = 0;
    HEAP8[i9] = 0;
   } else {
    HEAP32[HEAP32[i9 + 8 >> 2] >> 2] = 0;
    HEAP32[i9 + 4 >> 2] = 0;
   }
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj(i9, 0);
   HEAP32[i9 + 0 >> 2] = HEAP32[i16 + 0 >> 2];
   HEAP32[i9 + 4 >> 2] = HEAP32[i16 + 4 >> 2];
   HEAP32[i9 + 8 >> 2] = HEAP32[i16 + 8 >> 2];
   HEAP32[i16 + 0 >> 2] = 0;
   HEAP32[i16 + 4 >> 2] = 0;
   HEAP32[i16 + 8 >> 2] = 0;
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(i16);
  }
  HEAP32[i5 >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i27 >> 2] | 0) + 12 >> 2] & 127](i27) | 0;
  HEAP32[i6 >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i27 >> 2] | 0) + 16 >> 2] & 127](i27) | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i27 >> 2] | 0) + 20 >> 2] & 63](i17, i27);
  if ((HEAP8[i7] & 1) == 0) {
   HEAP8[i7 + 1 | 0] = 0;
   HEAP8[i7] = 0;
  } else {
   HEAP8[HEAP32[i7 + 8 >> 2] | 0] = 0;
   HEAP32[i7 + 4 >> 2] = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj(i7, 0);
  HEAP32[i7 + 0 >> 2] = HEAP32[i17 + 0 >> 2];
  HEAP32[i7 + 4 >> 2] = HEAP32[i17 + 4 >> 2];
  HEAP32[i7 + 8 >> 2] = HEAP32[i17 + 8 >> 2];
  HEAP32[i17 + 0 >> 2] = 0;
  HEAP32[i17 + 4 >> 2] = 0;
  HEAP32[i17 + 8 >> 2] = 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i17);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i27 >> 2] | 0) + 24 >> 2] & 63](i18, i27);
  if ((HEAP8[i8] & 1) == 0) {
   HEAP32[i8 + 4 >> 2] = 0;
   HEAP8[i8] = 0;
  } else {
   HEAP32[HEAP32[i8 + 8 >> 2] >> 2] = 0;
   HEAP32[i8 + 4 >> 2] = 0;
  }
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj(i8, 0);
  HEAP32[i8 + 0 >> 2] = HEAP32[i18 + 0 >> 2];
  HEAP32[i8 + 4 >> 2] = HEAP32[i18 + 4 >> 2];
  HEAP32[i8 + 8 >> 2] = HEAP32[i18 + 8 >> 2];
  HEAP32[i18 + 0 >> 2] = 0;
  HEAP32[i18 + 4 >> 2] = 0;
  HEAP32[i18 + 8 >> 2] = 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(i18);
  i28 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i27 >> 2] | 0) + 36 >> 2] & 127](i27) | 0;
  HEAP32[i10 >> 2] = i28;
  STACKTOP = i11;
  return;
 } else {
  if (!((HEAP32[1334] | 0) == -1)) {
   HEAP32[i12 >> 2] = 5336;
   HEAP32[i12 + 4 >> 2] = 118;
   HEAP32[i12 + 8 >> 2] = 0;
   __ZNSt3__111__call_onceERVmPvPFvS2_E(5336, i12, 119);
  }
  i12 = (HEAP32[5340 >> 2] | 0) + -1 | 0;
  i27 = HEAP32[i25 + 8 >> 2] | 0;
  if (!((HEAP32[i25 + 12 >> 2] | 0) - i27 >> 2 >>> 0 > i12 >>> 0)) {
   i29 = ___cxa_allocate_exception(4) | 0;
   __ZNSt8bad_castC2Ev(i29);
   ___cxa_throw(i29 | 0, 13792, 107);
  }
  i25 = HEAP32[i27 + (i12 << 2) >> 2] | 0;
  if ((i25 | 0) == 0) {
   i29 = ___cxa_allocate_exception(4) | 0;
   __ZNSt8bad_castC2Ev(i29);
   ___cxa_throw(i29 | 0, 13792, 107);
  }
  i29 = HEAP32[i25 >> 2] | 0;
  if (i2) {
   FUNCTION_TABLE_vii[HEAP32[i29 + 44 >> 2] & 63](i19, i25);
   i2 = HEAP32[i19 >> 2] | 0;
   HEAP8[i4] = i2;
   HEAP8[i4 + 1 | 0] = i2 >> 8;
   HEAP8[i4 + 2 | 0] = i2 >> 16;
   HEAP8[i4 + 3 | 0] = i2 >> 24;
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[i25 >> 2] | 0) + 32 >> 2] & 63](i20, i25);
   if ((HEAP8[i9] & 1) == 0) {
    HEAP32[i9 + 4 >> 2] = 0;
    HEAP8[i9] = 0;
   } else {
    HEAP32[HEAP32[i9 + 8 >> 2] >> 2] = 0;
    HEAP32[i9 + 4 >> 2] = 0;
   }
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj(i9, 0);
   HEAP32[i9 + 0 >> 2] = HEAP32[i20 + 0 >> 2];
   HEAP32[i9 + 4 >> 2] = HEAP32[i20 + 4 >> 2];
   HEAP32[i9 + 8 >> 2] = HEAP32[i20 + 8 >> 2];
   HEAP32[i20 + 0 >> 2] = 0;
   HEAP32[i20 + 4 >> 2] = 0;
   HEAP32[i20 + 8 >> 2] = 0;
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(i20);
  } else {
   FUNCTION_TABLE_vii[HEAP32[i29 + 40 >> 2] & 63](i21, i25);
   i29 = HEAP32[i21 >> 2] | 0;
   HEAP8[i4] = i29;
   HEAP8[i4 + 1 | 0] = i29 >> 8;
   HEAP8[i4 + 2 | 0] = i29 >> 16;
   HEAP8[i4 + 3 | 0] = i29 >> 24;
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[i25 >> 2] | 0) + 28 >> 2] & 63](i22, i25);
   if ((HEAP8[i9] & 1) == 0) {
    HEAP32[i9 + 4 >> 2] = 0;
    HEAP8[i9] = 0;
   } else {
    HEAP32[HEAP32[i9 + 8 >> 2] >> 2] = 0;
    HEAP32[i9 + 4 >> 2] = 0;
   }
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj(i9, 0);
   HEAP32[i9 + 0 >> 2] = HEAP32[i22 + 0 >> 2];
   HEAP32[i9 + 4 >> 2] = HEAP32[i22 + 4 >> 2];
   HEAP32[i9 + 8 >> 2] = HEAP32[i22 + 8 >> 2];
   HEAP32[i22 + 0 >> 2] = 0;
   HEAP32[i22 + 4 >> 2] = 0;
   HEAP32[i22 + 8 >> 2] = 0;
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(i22);
  }
  HEAP32[i5 >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i25 >> 2] | 0) + 12 >> 2] & 127](i25) | 0;
  HEAP32[i6 >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i25 >> 2] | 0) + 16 >> 2] & 127](i25) | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i25 >> 2] | 0) + 20 >> 2] & 63](i23, i25);
  if ((HEAP8[i7] & 1) == 0) {
   HEAP8[i7 + 1 | 0] = 0;
   HEAP8[i7] = 0;
  } else {
   HEAP8[HEAP32[i7 + 8 >> 2] | 0] = 0;
   HEAP32[i7 + 4 >> 2] = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj(i7, 0);
  HEAP32[i7 + 0 >> 2] = HEAP32[i23 + 0 >> 2];
  HEAP32[i7 + 4 >> 2] = HEAP32[i23 + 4 >> 2];
  HEAP32[i7 + 8 >> 2] = HEAP32[i23 + 8 >> 2];
  HEAP32[i23 + 0 >> 2] = 0;
  HEAP32[i23 + 4 >> 2] = 0;
  HEAP32[i23 + 8 >> 2] = 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i23);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i25 >> 2] | 0) + 24 >> 2] & 63](i24, i25);
  if ((HEAP8[i8] & 1) == 0) {
   HEAP32[i8 + 4 >> 2] = 0;
   HEAP8[i8] = 0;
  } else {
   HEAP32[HEAP32[i8 + 8 >> 2] >> 2] = 0;
   HEAP32[i8 + 4 >> 2] = 0;
  }
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj(i8, 0);
  HEAP32[i8 + 0 >> 2] = HEAP32[i24 + 0 >> 2];
  HEAP32[i8 + 4 >> 2] = HEAP32[i24 + 4 >> 2];
  HEAP32[i8 + 8 >> 2] = HEAP32[i24 + 8 >> 2];
  HEAP32[i24 + 0 >> 2] = 0;
  HEAP32[i24 + 4 >> 2] = 0;
  HEAP32[i24 + 8 >> 2] = 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(i24);
  i28 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i25 >> 2] | 0) + 36 >> 2] & 127](i25) | 0;
  HEAP32[i10 >> 2] = i28;
  STACKTOP = i11;
  return;
 }
}
function __ZNSt3__111__money_putIwE8__formatEPwRS2_S3_jPKwS5_RKNS_5ctypeIwEEbRKNS_10money_base7patternEwwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNSE_IwNSF_IwEENSH_IwEEEESQ_i(i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 i9 = i9 | 0;
 i10 = i10 | 0;
 i11 = i11 | 0;
 i12 = i12 | 0;
 i13 = i13 | 0;
 i14 = i14 | 0;
 i15 = i15 | 0;
 var i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0, i49 = 0, i50 = 0, i51 = 0, i52 = 0, i53 = 0, i54 = 0, i55 = 0, i56 = 0, i57 = 0, i58 = 0, i59 = 0, i60 = 0, i61 = 0, i62 = 0, i63 = 0, i64 = 0, i65 = 0, i66 = 0, i67 = 0, i68 = 0, i69 = 0, i70 = 0;
 i16 = STACKTOP;
 HEAP32[i3 >> 2] = i1;
 i17 = i14 + 4 | 0;
 i18 = i14 + 8 | 0;
 i19 = (i4 & 512 | 0) == 0;
 i20 = i13 + 4 | 0;
 i21 = i13 + 8 | 0;
 i22 = (i15 | 0) > 0;
 i23 = i12 + 1 | 0;
 i24 = i12 + 8 | 0;
 i25 = i12 + 4 | 0;
 i26 = i5;
 i5 = 0;
 while (1) {
  switch (HEAP8[i9 + i5 | 0] | 0) {
  case 4:
   {
    i27 = HEAP32[i3 >> 2] | 0;
    i28 = i8 ? i26 + 4 | 0 : i26;
    L5 : do {
     if (i28 >>> 0 < i6 >>> 0) {
      i29 = i28;
      while (1) {
       i30 = i29 + 4 | 0;
       if (!(FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i7 >> 2] | 0) + 12 >> 2] & 31](i7, 2048, HEAP32[i29 >> 2] | 0) | 0)) {
        i31 = i29;
        break L5;
       }
       if (i30 >>> 0 < i6 >>> 0) {
        i29 = i30;
       } else {
        i31 = i30;
        break;
       }
      }
     } else {
      i31 = i28;
     }
    } while (0);
    if (i22) {
     if (i31 >>> 0 > i28 >>> 0) {
      i29 = HEAP32[i3 >> 2] | 0;
      i30 = i31;
      i32 = i15;
      while (1) {
       i33 = i30 + -4 | 0;
       i34 = i29 + 4 | 0;
       HEAP32[i29 >> 2] = HEAP32[i33 >> 2];
       i35 = i32 + -1 | 0;
       i36 = (i35 | 0) > 0;
       if (i33 >>> 0 > i28 >>> 0 & i36) {
        i29 = i34;
        i30 = i33;
        i32 = i35;
       } else {
        break;
       }
      }
      HEAP32[i3 >> 2] = i34;
      if (i36) {
       i37 = i33;
       i38 = i35;
       i39 = 34;
      } else {
       i32 = HEAP32[i3 >> 2] | 0;
       HEAP32[i3 >> 2] = i32 + 4;
       i40 = i32;
       i41 = i33;
      }
     } else {
      i37 = i31;
      i38 = i15;
      i39 = 34;
     }
     if ((i39 | 0) == 34) {
      i39 = 0;
      i32 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i7 >> 2] | 0) + 44 >> 2] & 31](i7, 48) | 0;
      i30 = HEAP32[i3 >> 2] | 0;
      i29 = i30 + 4 | 0;
      HEAP32[i3 >> 2] = i29;
      if ((i38 | 0) > 0) {
       i42 = i30;
       i43 = i29;
       i29 = i38;
       while (1) {
        HEAP32[i42 >> 2] = i32;
        i29 = i29 + -1 | 0;
        if ((i29 | 0) <= 0) {
         break;
        } else {
         i44 = i43;
         i43 = i43 + 4 | 0;
         i42 = i44;
        }
       }
       HEAP32[i3 >> 2] = i30 + (i38 + 1 << 2);
       i40 = i30 + (i38 << 2) | 0;
       i41 = i37;
      } else {
       i40 = i30;
       i41 = i37;
      }
     }
     HEAP32[i40 >> 2] = i10;
     i45 = i41;
    } else {
     i45 = i31;
    }
    if ((i45 | 0) == (i28 | 0)) {
     i42 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i7 >> 2] | 0) + 44 >> 2] & 31](i7, 48) | 0;
     i43 = HEAP32[i3 >> 2] | 0;
     i29 = i43 + 4 | 0;
     HEAP32[i3 >> 2] = i29;
     HEAP32[i43 >> 2] = i42;
     i46 = i29;
    } else {
     i29 = HEAP8[i12] | 0;
     i42 = (i29 & 1) == 0;
     if (i42) {
      i47 = (i29 & 255) >>> 1;
     } else {
      i47 = HEAP32[i25 >> 2] | 0;
     }
     if ((i47 | 0) == 0) {
      i48 = i45;
      i49 = -1;
      i50 = 0;
      i51 = 0;
     } else {
      if (i42) {
       i52 = i23;
      } else {
       i52 = HEAP32[i24 >> 2] | 0;
      }
      i48 = i45;
      i49 = HEAP8[i52] | 0;
      i50 = 0;
      i51 = 0;
     }
     while (1) {
      i42 = HEAP32[i3 >> 2] | 0;
      if ((i51 | 0) == (i49 | 0)) {
       i29 = i42 + 4 | 0;
       HEAP32[i3 >> 2] = i29;
       HEAP32[i42 >> 2] = i11;
       i43 = i50 + 1 | 0;
       i32 = HEAP8[i12] | 0;
       i44 = (i32 & 1) == 0;
       if (i44) {
        i53 = (i32 & 255) >>> 1;
       } else {
        i53 = HEAP32[i25 >> 2] | 0;
       }
       if (i43 >>> 0 < i53 >>> 0) {
        if (i44) {
         i54 = i23;
        } else {
         i54 = HEAP32[i24 >> 2] | 0;
        }
        if ((HEAP8[i54 + i43 | 0] | 0) == 127) {
         i55 = i29;
         i56 = -1;
         i57 = i43;
         i58 = 0;
        } else {
         if (i44) {
          i59 = i23;
         } else {
          i59 = HEAP32[i24 >> 2] | 0;
         }
         i55 = i29;
         i56 = HEAP8[i59 + i43 | 0] | 0;
         i57 = i43;
         i58 = 0;
        }
       } else {
        i55 = i29;
        i56 = i49;
        i57 = i43;
        i58 = 0;
       }
      } else {
       i55 = i42;
       i56 = i49;
       i57 = i50;
       i58 = i51;
      }
      i42 = i48 + -4 | 0;
      i43 = HEAP32[i42 >> 2] | 0;
      i29 = i55 + 4 | 0;
      HEAP32[i3 >> 2] = i29;
      HEAP32[i55 >> 2] = i43;
      if ((i42 | 0) == (i28 | 0)) {
       i46 = i29;
       break;
      } else {
       i48 = i42;
       i49 = i56;
       i50 = i57;
       i51 = i58 + 1 | 0;
      }
     }
    }
    if ((i27 | 0) == (i46 | 0)) {
     i60 = i28;
    } else {
     i30 = i46 + -4 | 0;
     if (i30 >>> 0 > i27 >>> 0) {
      i42 = i27;
      i29 = i30;
      while (1) {
       i30 = HEAP32[i42 >> 2] | 0;
       HEAP32[i42 >> 2] = HEAP32[i29 >> 2];
       HEAP32[i29 >> 2] = i30;
       i30 = i42 + 4 | 0;
       i43 = i29 + -4 | 0;
       if (i30 >>> 0 < i43 >>> 0) {
        i42 = i30;
        i29 = i43;
       } else {
        i60 = i28;
        break;
       }
      }
     } else {
      i60 = i28;
     }
    }
    break;
   }
  case 3:
   {
    i29 = HEAP8[i14] | 0;
    i42 = (i29 & 1) == 0;
    if (i42) {
     i61 = (i29 & 255) >>> 1;
    } else {
     i61 = HEAP32[i17 >> 2] | 0;
    }
    if ((i61 | 0) == 0) {
     i60 = i26;
    } else {
     if (i42) {
      i62 = i17;
     } else {
      i62 = HEAP32[i18 >> 2] | 0;
     }
     i42 = HEAP32[i62 >> 2] | 0;
     i29 = HEAP32[i3 >> 2] | 0;
     HEAP32[i3 >> 2] = i29 + 4;
     HEAP32[i29 >> 2] = i42;
     i60 = i26;
    }
    break;
   }
  case 0:
   {
    HEAP32[i2 >> 2] = HEAP32[i3 >> 2];
    i60 = i26;
    break;
   }
  case 2:
   {
    i42 = HEAP8[i13] | 0;
    i29 = (i42 & 1) == 0;
    if (i29) {
     i63 = (i42 & 255) >>> 1;
    } else {
     i63 = HEAP32[i20 >> 2] | 0;
    }
    if ((i63 | 0) == 0 | i19) {
     i60 = i26;
    } else {
     if (i29) {
      i64 = i20;
      i65 = (i42 & 255) >>> 1;
     } else {
      i64 = HEAP32[i21 >> 2] | 0;
      i65 = HEAP32[i20 >> 2] | 0;
     }
     i42 = i64 + (i65 << 2) | 0;
     i29 = HEAP32[i3 >> 2] | 0;
     if ((i64 | 0) == (i42 | 0)) {
      i66 = i29;
     } else {
      i27 = (i64 + (i65 + -1 << 2) + (0 - i64) | 0) >>> 2;
      i43 = i29;
      i30 = i64;
      while (1) {
       HEAP32[i43 >> 2] = HEAP32[i30 >> 2];
       i44 = i30 + 4 | 0;
       if ((i44 | 0) == (i42 | 0)) {
        break;
       }
       i43 = i43 + 4 | 0;
       i30 = i44;
      }
      i66 = i29 + (i27 + 1 << 2) | 0;
     }
     HEAP32[i3 >> 2] = i66;
     i60 = i26;
    }
    break;
   }
  case 1:
   {
    HEAP32[i2 >> 2] = HEAP32[i3 >> 2];
    i30 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i7 >> 2] | 0) + 44 >> 2] & 31](i7, 32) | 0;
    i43 = HEAP32[i3 >> 2] | 0;
    HEAP32[i3 >> 2] = i43 + 4;
    HEAP32[i43 >> 2] = i30;
    i60 = i26;
    break;
   }
  default:
   {
    i60 = i26;
   }
  }
  i5 = i5 + 1 | 0;
  if ((i5 | 0) == 4) {
   break;
  } else {
   i26 = i60;
  }
 }
 i60 = HEAP8[i14] | 0;
 i14 = (i60 & 1) == 0;
 if (i14) {
  i67 = (i60 & 255) >>> 1;
 } else {
  i67 = HEAP32[i17 >> 2] | 0;
 }
 if (i67 >>> 0 > 1) {
  if (i14) {
   i68 = i17;
   i69 = (i60 & 255) >>> 1;
  } else {
   i68 = HEAP32[i18 >> 2] | 0;
   i69 = HEAP32[i17 >> 2] | 0;
  }
  i17 = i68 + 4 | 0;
  i18 = i68 + (i69 << 2) | 0;
  i60 = HEAP32[i3 >> 2] | 0;
  if ((i17 | 0) == (i18 | 0)) {
   i70 = i60;
  } else {
   i14 = (i68 + (i69 + -1 << 2) + (0 - i17) | 0) >>> 2;
   i69 = i60;
   i68 = i17;
   while (1) {
    HEAP32[i69 >> 2] = HEAP32[i68 >> 2];
    i68 = i68 + 4 | 0;
    if ((i68 | 0) == (i18 | 0)) {
     break;
    } else {
     i69 = i69 + 4 | 0;
    }
   }
   i70 = i60 + (i14 + 1 << 2) | 0;
  }
  HEAP32[i3 >> 2] = i70;
 }
 i70 = i4 & 176;
 if ((i70 | 0) == 16) {
  STACKTOP = i16;
  return;
 } else if ((i70 | 0) == 32) {
  HEAP32[i2 >> 2] = HEAP32[i3 >> 2];
  STACKTOP = i16;
  return;
 } else {
  HEAP32[i2 >> 2] = i1;
  STACKTOP = i16;
  return;
 }
}
function __ZNSt3__111__money_putIcE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_Ri(i1, i2, i3, i4, i5, i6, i7, i8, i9, i10) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 i9 = i9 | 0;
 i10 = i10 | 0;
 var i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0;
 i11 = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 i12 = i11;
 i13 = i11 + 108 | 0;
 i14 = i11 + 96 | 0;
 i15 = i11 + 92 | 0;
 i16 = i11 + 80 | 0;
 i17 = i11 + 68 | 0;
 i18 = i11 + 112 | 0;
 i19 = i11 + 40 | 0;
 i20 = i11 + 28 | 0;
 i21 = i11 + 24 | 0;
 i22 = i11 + 12 | 0;
 i23 = i11 + 44 | 0;
 i24 = i11 + 56 | 0;
 i25 = HEAP32[i3 >> 2] | 0;
 if (i1) {
  if (!((HEAP32[1318] | 0) == -1)) {
   HEAP32[i12 >> 2] = 5272;
   HEAP32[i12 + 4 >> 2] = 118;
   HEAP32[i12 + 8 >> 2] = 0;
   __ZNSt3__111__call_onceERVmPvPFvS2_E(5272, i12, 119);
  }
  i1 = (HEAP32[5276 >> 2] | 0) + -1 | 0;
  i3 = HEAP32[i25 + 8 >> 2] | 0;
  if (!((HEAP32[i25 + 12 >> 2] | 0) - i3 >> 2 >>> 0 > i1 >>> 0)) {
   i26 = ___cxa_allocate_exception(4) | 0;
   __ZNSt8bad_castC2Ev(i26);
   ___cxa_throw(i26 | 0, 13792, 107);
  }
  i27 = HEAP32[i3 + (i1 << 2) >> 2] | 0;
  if ((i27 | 0) == 0) {
   i26 = ___cxa_allocate_exception(4) | 0;
   __ZNSt8bad_castC2Ev(i26);
   ___cxa_throw(i26 | 0, 13792, 107);
  }
  i26 = HEAP32[i27 >> 2] | 0;
  if (i2) {
   FUNCTION_TABLE_vii[HEAP32[i26 + 44 >> 2] & 63](i13, i27);
   i1 = HEAP32[i13 >> 2] | 0;
   HEAP8[i4] = i1;
   HEAP8[i4 + 1 | 0] = i1 >> 8;
   HEAP8[i4 + 2 | 0] = i1 >> 16;
   HEAP8[i4 + 3 | 0] = i1 >> 24;
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[i27 >> 2] | 0) + 32 >> 2] & 63](i14, i27);
   if ((HEAP8[i9] & 1) == 0) {
    HEAP8[i9 + 1 | 0] = 0;
    HEAP8[i9] = 0;
   } else {
    HEAP8[HEAP32[i9 + 8 >> 2] | 0] = 0;
    HEAP32[i9 + 4 >> 2] = 0;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj(i9, 0);
   HEAP32[i9 + 0 >> 2] = HEAP32[i14 + 0 >> 2];
   HEAP32[i9 + 4 >> 2] = HEAP32[i14 + 4 >> 2];
   HEAP32[i9 + 8 >> 2] = HEAP32[i14 + 8 >> 2];
   HEAP32[i14 + 0 >> 2] = 0;
   HEAP32[i14 + 4 >> 2] = 0;
   HEAP32[i14 + 8 >> 2] = 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i14);
  } else {
   FUNCTION_TABLE_vii[HEAP32[i26 + 40 >> 2] & 63](i15, i27);
   i26 = HEAP32[i15 >> 2] | 0;
   HEAP8[i4] = i26;
   HEAP8[i4 + 1 | 0] = i26 >> 8;
   HEAP8[i4 + 2 | 0] = i26 >> 16;
   HEAP8[i4 + 3 | 0] = i26 >> 24;
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[i27 >> 2] | 0) + 28 >> 2] & 63](i16, i27);
   if ((HEAP8[i9] & 1) == 0) {
    HEAP8[i9 + 1 | 0] = 0;
    HEAP8[i9] = 0;
   } else {
    HEAP8[HEAP32[i9 + 8 >> 2] | 0] = 0;
    HEAP32[i9 + 4 >> 2] = 0;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj(i9, 0);
   HEAP32[i9 + 0 >> 2] = HEAP32[i16 + 0 >> 2];
   HEAP32[i9 + 4 >> 2] = HEAP32[i16 + 4 >> 2];
   HEAP32[i9 + 8 >> 2] = HEAP32[i16 + 8 >> 2];
   HEAP32[i16 + 0 >> 2] = 0;
   HEAP32[i16 + 4 >> 2] = 0;
   HEAP32[i16 + 8 >> 2] = 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i16);
  }
  HEAP8[i5] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i27 >> 2] | 0) + 12 >> 2] & 127](i27) | 0;
  HEAP8[i6] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i27 >> 2] | 0) + 16 >> 2] & 127](i27) | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i27 >> 2] | 0) + 20 >> 2] & 63](i17, i27);
  if ((HEAP8[i7] & 1) == 0) {
   HEAP8[i7 + 1 | 0] = 0;
   HEAP8[i7] = 0;
  } else {
   HEAP8[HEAP32[i7 + 8 >> 2] | 0] = 0;
   HEAP32[i7 + 4 >> 2] = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj(i7, 0);
  HEAP32[i7 + 0 >> 2] = HEAP32[i17 + 0 >> 2];
  HEAP32[i7 + 4 >> 2] = HEAP32[i17 + 4 >> 2];
  HEAP32[i7 + 8 >> 2] = HEAP32[i17 + 8 >> 2];
  HEAP32[i17 + 0 >> 2] = 0;
  HEAP32[i17 + 4 >> 2] = 0;
  HEAP32[i17 + 8 >> 2] = 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i17);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i27 >> 2] | 0) + 24 >> 2] & 63](i18, i27);
  if ((HEAP8[i8] & 1) == 0) {
   HEAP8[i8 + 1 | 0] = 0;
   HEAP8[i8] = 0;
  } else {
   HEAP8[HEAP32[i8 + 8 >> 2] | 0] = 0;
   HEAP32[i8 + 4 >> 2] = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj(i8, 0);
  HEAP32[i8 + 0 >> 2] = HEAP32[i18 + 0 >> 2];
  HEAP32[i8 + 4 >> 2] = HEAP32[i18 + 4 >> 2];
  HEAP32[i8 + 8 >> 2] = HEAP32[i18 + 8 >> 2];
  HEAP32[i18 + 0 >> 2] = 0;
  HEAP32[i18 + 4 >> 2] = 0;
  HEAP32[i18 + 8 >> 2] = 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i18);
  i28 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i27 >> 2] | 0) + 36 >> 2] & 127](i27) | 0;
  HEAP32[i10 >> 2] = i28;
  STACKTOP = i11;
  return;
 } else {
  if (!((HEAP32[1302] | 0) == -1)) {
   HEAP32[i12 >> 2] = 5208;
   HEAP32[i12 + 4 >> 2] = 118;
   HEAP32[i12 + 8 >> 2] = 0;
   __ZNSt3__111__call_onceERVmPvPFvS2_E(5208, i12, 119);
  }
  i12 = (HEAP32[5212 >> 2] | 0) + -1 | 0;
  i27 = HEAP32[i25 + 8 >> 2] | 0;
  if (!((HEAP32[i25 + 12 >> 2] | 0) - i27 >> 2 >>> 0 > i12 >>> 0)) {
   i29 = ___cxa_allocate_exception(4) | 0;
   __ZNSt8bad_castC2Ev(i29);
   ___cxa_throw(i29 | 0, 13792, 107);
  }
  i25 = HEAP32[i27 + (i12 << 2) >> 2] | 0;
  if ((i25 | 0) == 0) {
   i29 = ___cxa_allocate_exception(4) | 0;
   __ZNSt8bad_castC2Ev(i29);
   ___cxa_throw(i29 | 0, 13792, 107);
  }
  i29 = HEAP32[i25 >> 2] | 0;
  if (i2) {
   FUNCTION_TABLE_vii[HEAP32[i29 + 44 >> 2] & 63](i19, i25);
   i2 = HEAP32[i19 >> 2] | 0;
   HEAP8[i4] = i2;
   HEAP8[i4 + 1 | 0] = i2 >> 8;
   HEAP8[i4 + 2 | 0] = i2 >> 16;
   HEAP8[i4 + 3 | 0] = i2 >> 24;
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[i25 >> 2] | 0) + 32 >> 2] & 63](i20, i25);
   if ((HEAP8[i9] & 1) == 0) {
    HEAP8[i9 + 1 | 0] = 0;
    HEAP8[i9] = 0;
   } else {
    HEAP8[HEAP32[i9 + 8 >> 2] | 0] = 0;
    HEAP32[i9 + 4 >> 2] = 0;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj(i9, 0);
   HEAP32[i9 + 0 >> 2] = HEAP32[i20 + 0 >> 2];
   HEAP32[i9 + 4 >> 2] = HEAP32[i20 + 4 >> 2];
   HEAP32[i9 + 8 >> 2] = HEAP32[i20 + 8 >> 2];
   HEAP32[i20 + 0 >> 2] = 0;
   HEAP32[i20 + 4 >> 2] = 0;
   HEAP32[i20 + 8 >> 2] = 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i20);
  } else {
   FUNCTION_TABLE_vii[HEAP32[i29 + 40 >> 2] & 63](i21, i25);
   i29 = HEAP32[i21 >> 2] | 0;
   HEAP8[i4] = i29;
   HEAP8[i4 + 1 | 0] = i29 >> 8;
   HEAP8[i4 + 2 | 0] = i29 >> 16;
   HEAP8[i4 + 3 | 0] = i29 >> 24;
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[i25 >> 2] | 0) + 28 >> 2] & 63](i22, i25);
   if ((HEAP8[i9] & 1) == 0) {
    HEAP8[i9 + 1 | 0] = 0;
    HEAP8[i9] = 0;
   } else {
    HEAP8[HEAP32[i9 + 8 >> 2] | 0] = 0;
    HEAP32[i9 + 4 >> 2] = 0;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj(i9, 0);
   HEAP32[i9 + 0 >> 2] = HEAP32[i22 + 0 >> 2];
   HEAP32[i9 + 4 >> 2] = HEAP32[i22 + 4 >> 2];
   HEAP32[i9 + 8 >> 2] = HEAP32[i22 + 8 >> 2];
   HEAP32[i22 + 0 >> 2] = 0;
   HEAP32[i22 + 4 >> 2] = 0;
   HEAP32[i22 + 8 >> 2] = 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i22);
  }
  HEAP8[i5] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i25 >> 2] | 0) + 12 >> 2] & 127](i25) | 0;
  HEAP8[i6] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i25 >> 2] | 0) + 16 >> 2] & 127](i25) | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i25 >> 2] | 0) + 20 >> 2] & 63](i23, i25);
  if ((HEAP8[i7] & 1) == 0) {
   HEAP8[i7 + 1 | 0] = 0;
   HEAP8[i7] = 0;
  } else {
   HEAP8[HEAP32[i7 + 8 >> 2] | 0] = 0;
   HEAP32[i7 + 4 >> 2] = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj(i7, 0);
  HEAP32[i7 + 0 >> 2] = HEAP32[i23 + 0 >> 2];
  HEAP32[i7 + 4 >> 2] = HEAP32[i23 + 4 >> 2];
  HEAP32[i7 + 8 >> 2] = HEAP32[i23 + 8 >> 2];
  HEAP32[i23 + 0 >> 2] = 0;
  HEAP32[i23 + 4 >> 2] = 0;
  HEAP32[i23 + 8 >> 2] = 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i23);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i25 >> 2] | 0) + 24 >> 2] & 63](i24, i25);
  if ((HEAP8[i8] & 1) == 0) {
   HEAP8[i8 + 1 | 0] = 0;
   HEAP8[i8] = 0;
  } else {
   HEAP8[HEAP32[i8 + 8 >> 2] | 0] = 0;
   HEAP32[i8 + 4 >> 2] = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj(i8, 0);
  HEAP32[i8 + 0 >> 2] = HEAP32[i24 + 0 >> 2];
  HEAP32[i8 + 4 >> 2] = HEAP32[i24 + 4 >> 2];
  HEAP32[i8 + 8 >> 2] = HEAP32[i24 + 8 >> 2];
  HEAP32[i24 + 0 >> 2] = 0;
  HEAP32[i24 + 4 >> 2] = 0;
  HEAP32[i24 + 8 >> 2] = 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i24);
  i28 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i25 >> 2] | 0) + 36 >> 2] & 127](i25) | 0;
  HEAP32[i10 >> 2] = i28;
  STACKTOP = i11;
  return;
 }
}
function __ZNSt3__111__money_putIcE8__formatEPcRS2_S3_jPKcS5_RKNS_5ctypeIcEEbRKNS_10money_base7patternEccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESL_SL_i(i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 i9 = i9 | 0;
 i10 = i10 | 0;
 i11 = i11 | 0;
 i12 = i12 | 0;
 i13 = i13 | 0;
 i14 = i14 | 0;
 i15 = i15 | 0;
 var i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0, i49 = 0, i50 = 0, i51 = 0, i52 = 0, i53 = 0, i54 = 0, i55 = 0, i56 = 0, i57 = 0, i58 = 0, i59 = 0, i60 = 0, i61 = 0, i62 = 0, i63 = 0, i64 = 0, i65 = 0, i66 = 0, i67 = 0, i68 = 0, i69 = 0, i70 = 0, i71 = 0, i72 = 0;
 i16 = STACKTOP;
 HEAP32[i3 >> 2] = i1;
 i17 = i14 + 1 | 0;
 i18 = i14 + 8 | 0;
 i19 = i14 + 4 | 0;
 i20 = (i4 & 512 | 0) == 0;
 i21 = i13 + 1 | 0;
 i22 = i13 + 8 | 0;
 i23 = i13 + 4 | 0;
 i24 = (i15 | 0) > 0;
 i25 = i12 + 1 | 0;
 i26 = i12 + 8 | 0;
 i27 = i12 + 4 | 0;
 i28 = i7 + 8 | 0;
 i29 = 0 - i15 | 0;
 i30 = i5;
 i5 = 0;
 while (1) {
  switch (HEAP8[i9 + i5 | 0] | 0) {
  case 1:
   {
    HEAP32[i2 >> 2] = HEAP32[i3 >> 2];
    i31 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i7 >> 2] | 0) + 28 >> 2] & 31](i7, 32) | 0;
    i32 = HEAP32[i3 >> 2] | 0;
    HEAP32[i3 >> 2] = i32 + 1;
    HEAP8[i32] = i31;
    i33 = i30;
    break;
   }
  case 2:
   {
    i31 = HEAP8[i13] | 0;
    i32 = (i31 & 1) == 0;
    if (i32) {
     i34 = (i31 & 255) >>> 1;
    } else {
     i34 = HEAP32[i23 >> 2] | 0;
    }
    if ((i34 | 0) == 0 | i20) {
     i33 = i30;
    } else {
     if (i32) {
      i35 = i21;
      i36 = (i31 & 255) >>> 1;
     } else {
      i35 = HEAP32[i22 >> 2] | 0;
      i36 = HEAP32[i23 >> 2] | 0;
     }
     i31 = i35 + i36 | 0;
     i32 = HEAP32[i3 >> 2] | 0;
     if ((i35 | 0) == (i31 | 0)) {
      i37 = i32;
     } else {
      i38 = i32;
      i32 = i35;
      while (1) {
       HEAP8[i38] = HEAP8[i32] | 0;
       i39 = i32 + 1 | 0;
       i40 = i38 + 1 | 0;
       if ((i39 | 0) == (i31 | 0)) {
        i37 = i40;
        break;
       } else {
        i38 = i40;
        i32 = i39;
       }
      }
     }
     HEAP32[i3 >> 2] = i37;
     i33 = i30;
    }
    break;
   }
  case 3:
   {
    i32 = HEAP8[i14] | 0;
    i38 = (i32 & 1) == 0;
    if (i38) {
     i41 = (i32 & 255) >>> 1;
    } else {
     i41 = HEAP32[i19 >> 2] | 0;
    }
    if ((i41 | 0) == 0) {
     i33 = i30;
    } else {
     if (i38) {
      i42 = i17;
     } else {
      i42 = HEAP32[i18 >> 2] | 0;
     }
     i38 = HEAP8[i42] | 0;
     i32 = HEAP32[i3 >> 2] | 0;
     HEAP32[i3 >> 2] = i32 + 1;
     HEAP8[i32] = i38;
     i33 = i30;
    }
    break;
   }
  case 0:
   {
    HEAP32[i2 >> 2] = HEAP32[i3 >> 2];
    i33 = i30;
    break;
   }
  case 4:
   {
    i38 = HEAP32[i3 >> 2] | 0;
    i32 = i8 ? i30 + 1 | 0 : i30;
    L30 : do {
     if (i32 >>> 0 < i6 >>> 0) {
      i31 = i32;
      while (1) {
       i39 = HEAP8[i31] | 0;
       if (!(i39 << 24 >> 24 > -1)) {
        i43 = i31;
        break L30;
       }
       i40 = i31 + 1 | 0;
       if ((HEAP16[(HEAP32[i28 >> 2] | 0) + (i39 << 24 >> 24 << 1) >> 1] & 2048) == 0) {
        i43 = i31;
        break L30;
       }
       if (i40 >>> 0 < i6 >>> 0) {
        i31 = i40;
       } else {
        i43 = i40;
        break;
       }
      }
     } else {
      i43 = i32;
     }
    } while (0);
    i31 = i43;
    if (i24) {
     if (i43 >>> 0 > i32 >>> 0) {
      i40 = i32 + (0 - i31) | 0;
      i31 = i40 >>> 0 < i29 >>> 0 ? i29 : i40;
      i40 = i31 + i15 | 0;
      i39 = i38;
      i44 = i43;
      i45 = i15;
      while (1) {
       i46 = i44 + -1 | 0;
       i47 = HEAP8[i46] | 0;
       HEAP32[i3 >> 2] = i39 + 1;
       HEAP8[i39] = i47;
       i47 = i45 + -1 | 0;
       i48 = (i47 | 0) > 0;
       if (!(i46 >>> 0 > i32 >>> 0 & i48)) {
        break;
       }
       i39 = HEAP32[i3 >> 2] | 0;
       i44 = i46;
       i45 = i47;
      }
      i45 = i43 + i31 | 0;
      if (i48) {
       i49 = i45;
       i50 = i40;
       i51 = 32;
      } else {
       i52 = 0;
       i53 = i45;
       i54 = i40;
      }
     } else {
      i49 = i43;
      i50 = i15;
      i51 = 32;
     }
     if ((i51 | 0) == 32) {
      i51 = 0;
      i52 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i7 >> 2] | 0) + 28 >> 2] & 31](i7, 48) | 0;
      i53 = i49;
      i54 = i50;
     }
     i45 = HEAP32[i3 >> 2] | 0;
     HEAP32[i3 >> 2] = i45 + 1;
     if ((i54 | 0) > 0) {
      i44 = i45;
      i39 = i54;
      while (1) {
       HEAP8[i44] = i52;
       i47 = i39 + -1 | 0;
       i46 = HEAP32[i3 >> 2] | 0;
       HEAP32[i3 >> 2] = i46 + 1;
       if ((i47 | 0) > 0) {
        i44 = i46;
        i39 = i47;
       } else {
        i55 = i46;
        break;
       }
      }
     } else {
      i55 = i45;
     }
     HEAP8[i55] = i10;
     i56 = i53;
    } else {
     i56 = i43;
    }
    if ((i56 | 0) == (i32 | 0)) {
     i39 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i7 >> 2] | 0) + 28 >> 2] & 31](i7, 48) | 0;
     i44 = HEAP32[i3 >> 2] | 0;
     HEAP32[i3 >> 2] = i44 + 1;
     HEAP8[i44] = i39;
    } else {
     i39 = HEAP8[i12] | 0;
     i44 = (i39 & 1) == 0;
     if (i44) {
      i57 = (i39 & 255) >>> 1;
     } else {
      i57 = HEAP32[i27 >> 2] | 0;
     }
     if ((i57 | 0) == 0) {
      i58 = i56;
      i59 = -1;
      i60 = 0;
      i61 = 0;
     } else {
      if (i44) {
       i62 = i25;
      } else {
       i62 = HEAP32[i26 >> 2] | 0;
      }
      i58 = i56;
      i59 = HEAP8[i62] | 0;
      i60 = 0;
      i61 = 0;
     }
     while (1) {
      if ((i61 | 0) == (i59 | 0)) {
       i44 = HEAP32[i3 >> 2] | 0;
       HEAP32[i3 >> 2] = i44 + 1;
       HEAP8[i44] = i11;
       i44 = i60 + 1 | 0;
       i39 = HEAP8[i12] | 0;
       i40 = (i39 & 1) == 0;
       if (i40) {
        i63 = (i39 & 255) >>> 1;
       } else {
        i63 = HEAP32[i27 >> 2] | 0;
       }
       if (i44 >>> 0 < i63 >>> 0) {
        if (i40) {
         i64 = i25;
        } else {
         i64 = HEAP32[i26 >> 2] | 0;
        }
        if ((HEAP8[i64 + i44 | 0] | 0) == 127) {
         i65 = -1;
         i66 = i44;
         i67 = 0;
        } else {
         if (i40) {
          i68 = i25;
         } else {
          i68 = HEAP32[i26 >> 2] | 0;
         }
         i65 = HEAP8[i68 + i44 | 0] | 0;
         i66 = i44;
         i67 = 0;
        }
       } else {
        i65 = i59;
        i66 = i44;
        i67 = 0;
       }
      } else {
       i65 = i59;
       i66 = i60;
       i67 = i61;
      }
      i58 = i58 + -1 | 0;
      i44 = HEAP8[i58] | 0;
      i40 = HEAP32[i3 >> 2] | 0;
      HEAP32[i3 >> 2] = i40 + 1;
      HEAP8[i40] = i44;
      if ((i58 | 0) == (i32 | 0)) {
       break;
      } else {
       i59 = i65;
       i60 = i66;
       i61 = i67 + 1 | 0;
      }
     }
    }
    i45 = HEAP32[i3 >> 2] | 0;
    if ((i38 | 0) == (i45 | 0)) {
     i33 = i32;
    } else {
     i44 = i45 + -1 | 0;
     if (i44 >>> 0 > i38 >>> 0) {
      i45 = i38;
      i40 = i44;
      while (1) {
       i44 = HEAP8[i45] | 0;
       HEAP8[i45] = HEAP8[i40] | 0;
       HEAP8[i40] = i44;
       i44 = i45 + 1 | 0;
       i39 = i40 + -1 | 0;
       if (i44 >>> 0 < i39 >>> 0) {
        i45 = i44;
        i40 = i39;
       } else {
        i33 = i32;
        break;
       }
      }
     } else {
      i33 = i32;
     }
    }
    break;
   }
  default:
   {
    i33 = i30;
   }
  }
  i5 = i5 + 1 | 0;
  if ((i5 | 0) == 4) {
   break;
  } else {
   i30 = i33;
  }
 }
 i33 = HEAP8[i14] | 0;
 i14 = (i33 & 1) == 0;
 if (i14) {
  i69 = (i33 & 255) >>> 1;
 } else {
  i69 = HEAP32[i19 >> 2] | 0;
 }
 if (i69 >>> 0 > 1) {
  if (i14) {
   i70 = i17;
   i71 = (i33 & 255) >>> 1;
  } else {
   i70 = HEAP32[i18 >> 2] | 0;
   i71 = HEAP32[i19 >> 2] | 0;
  }
  i19 = i70 + 1 | 0;
  i18 = i70 + i71 | 0;
  i71 = HEAP32[i3 >> 2] | 0;
  if ((i19 | 0) == (i18 | 0)) {
   i72 = i71;
  } else {
   i70 = i71;
   i71 = i19;
   while (1) {
    HEAP8[i70] = HEAP8[i71] | 0;
    i19 = i71 + 1 | 0;
    i33 = i70 + 1 | 0;
    if ((i19 | 0) == (i18 | 0)) {
     i72 = i33;
     break;
    } else {
     i70 = i33;
     i71 = i19;
    }
   }
  }
  HEAP32[i3 >> 2] = i72;
 }
 i72 = i4 & 176;
 if ((i72 | 0) == 32) {
  HEAP32[i2 >> 2] = HEAP32[i3 >> 2];
  STACKTOP = i16;
  return;
 } else if ((i72 | 0) == 16) {
  STACKTOP = i16;
  return;
 } else {
  HEAP32[i2 >> 2] = i1;
  STACKTOP = i16;
  return;
 }
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv(i1, i2, i3, i4, i5, i6, i7) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 var i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 i8 = i2;
 i9 = i2 + 200 | 0;
 i10 = i2 + 12 | 0;
 i11 = i2 + 24 | 0;
 i12 = i2 + 28 | 0;
 i13 = i2 + 40 | 0;
 HEAP32[i10 + 0 >> 2] = 0;
 HEAP32[i10 + 4 >> 2] = 0;
 HEAP32[i10 + 8 >> 2] = 0;
 __ZNKSt3__18ios_base6getlocEv(i11, i5);
 i5 = HEAP32[i11 >> 2] | 0;
 if (!((HEAP32[1458] | 0) == -1)) {
  HEAP32[i8 >> 2] = 5832;
  HEAP32[i8 + 4 >> 2] = 118;
  HEAP32[i8 + 8 >> 2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(5832, i8, 119);
 }
 i14 = (HEAP32[5836 >> 2] | 0) + -1 | 0;
 i15 = HEAP32[i5 + 8 >> 2] | 0;
 if (!((HEAP32[i5 + 12 >> 2] | 0) - i15 >> 2 >>> 0 > i14 >>> 0)) {
  i16 = ___cxa_allocate_exception(4) | 0;
  __ZNSt8bad_castC2Ev(i16);
  ___cxa_throw(i16 | 0, 13792, 107);
 }
 i5 = HEAP32[i15 + (i14 << 2) >> 2] | 0;
 if ((i5 | 0) == 0) {
  i16 = ___cxa_allocate_exception(4) | 0;
  __ZNSt8bad_castC2Ev(i16);
  ___cxa_throw(i16 | 0, 13792, 107);
 }
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[i5 >> 2] | 0) + 32 >> 2] & 7](i5, 4376, 4402 | 0, i9) | 0;
 __ZNSt3__114__shared_count16__release_sharedEv(HEAP32[i11 >> 2] | 0) | 0;
 HEAP32[i12 + 0 >> 2] = 0;
 HEAP32[i12 + 4 >> 2] = 0;
 HEAP32[i12 + 8 >> 2] = 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i12, 10, 0);
 if ((HEAP8[i12] & 1) == 0) {
  i11 = i12 + 1 | 0;
  i17 = i11;
  i18 = i12 + 8 | 0;
  i19 = i11;
 } else {
  i11 = i12 + 8 | 0;
  i17 = i12 + 1 | 0;
  i18 = i11;
  i19 = HEAP32[i11 >> 2] | 0;
 }
 i11 = i12 + 4 | 0;
 i5 = i9 + 24 | 0;
 i16 = i9 + 25 | 0;
 i14 = i13;
 i15 = i9 + 26 | 0;
 i20 = i9;
 i21 = i10 + 4 | 0;
 i22 = HEAP32[i3 >> 2] | 0;
 i23 = i13;
 i13 = 0;
 i24 = i19;
 i25 = i19;
 L14 : while (1) {
  if ((i22 | 0) == 0) {
   i26 = 0;
  } else {
   if ((HEAP32[i22 + 12 >> 2] | 0) == (HEAP32[i22 + 16 >> 2] | 0)) {
    if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i22 >> 2] | 0) + 36 >> 2] & 127](i22) | 0) == -1) {
     HEAP32[i3 >> 2] = 0;
     i26 = 0;
    } else {
     i26 = i22;
    }
   } else {
    i26 = i22;
   }
  }
  i19 = (i26 | 0) == 0;
  i27 = HEAP32[i4 >> 2] | 0;
  do {
   if ((i27 | 0) == 0) {
    i28 = 19;
   } else {
    if ((HEAP32[i27 + 12 >> 2] | 0) != (HEAP32[i27 + 16 >> 2] | 0)) {
     if (i19) {
      break;
     } else {
      i29 = i25;
      break L14;
     }
    }
    if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i27 >> 2] | 0) + 36 >> 2] & 127](i27) | 0) == -1) {
     HEAP32[i4 >> 2] = 0;
     i28 = 19;
     break;
    } else {
     if (i19) {
      break;
     } else {
      i29 = i25;
      break L14;
     }
    }
   }
  } while (0);
  if ((i28 | 0) == 19) {
   i28 = 0;
   if (i19) {
    i29 = i25;
    break;
   }
  }
  i27 = HEAP8[i12] | 0;
  i30 = (i27 & 1) == 0;
  if (i30) {
   i31 = (i27 & 255) >>> 1;
  } else {
   i31 = HEAP32[i11 >> 2] | 0;
  }
  if ((i24 - i25 | 0) == (i31 | 0)) {
   if (i30) {
    i32 = (i27 & 255) >>> 1;
    i33 = (i27 & 255) >>> 1;
   } else {
    i27 = HEAP32[i11 >> 2] | 0;
    i32 = i27;
    i33 = i27;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i12, i32 << 1, 0);
   if ((HEAP8[i12] & 1) == 0) {
    i34 = 10;
   } else {
    i34 = (HEAP32[i12 >> 2] & -2) + -1 | 0;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i12, i34, 0);
   if ((HEAP8[i12] & 1) == 0) {
    i35 = i17;
   } else {
    i35 = HEAP32[i18 >> 2] | 0;
   }
   i36 = i35 + i33 | 0;
   i37 = i35;
  } else {
   i36 = i24;
   i37 = i25;
  }
  i27 = HEAP32[i26 + 12 >> 2] | 0;
  if ((i27 | 0) == (HEAP32[i26 + 16 >> 2] | 0)) {
   i38 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i26 >> 2] | 0) + 36 >> 2] & 127](i26) | 0;
  } else {
   i38 = HEAPU8[i27] | 0;
  }
  i27 = i38 & 255;
  i30 = (i36 | 0) == (i37 | 0);
  do {
   if (i30) {
    i39 = (HEAP8[i5] | 0) == i27 << 24 >> 24;
    if (!i39) {
     if (!((HEAP8[i16] | 0) == i27 << 24 >> 24)) {
      i28 = 40;
      break;
     }
    }
    HEAP8[i36] = i39 ? 43 : 45;
    i40 = i36 + 1 | 0;
    i41 = i23;
    i42 = 0;
   } else {
    i28 = 40;
   }
  } while (0);
  do {
   if ((i28 | 0) == 40) {
    i28 = 0;
    i19 = HEAP8[i10] | 0;
    if ((i19 & 1) == 0) {
     i43 = (i19 & 255) >>> 1;
    } else {
     i43 = HEAP32[i21 >> 2] | 0;
    }
    if ((i43 | 0) != 0 & i27 << 24 >> 24 == 0) {
     if ((i23 - i14 | 0) >= 160) {
      i40 = i36;
      i41 = i23;
      i42 = i13;
      break;
     }
     HEAP32[i23 >> 2] = i13;
     i40 = i36;
     i41 = i23 + 4 | 0;
     i42 = 0;
     break;
    } else {
     i44 = i9;
    }
    while (1) {
     i19 = i44 + 1 | 0;
     if ((HEAP8[i44] | 0) == i27 << 24 >> 24) {
      i45 = i44;
      break;
     }
     if ((i19 | 0) == (i15 | 0)) {
      i45 = i15;
      break;
     } else {
      i44 = i19;
     }
    }
    i19 = i45 - i20 | 0;
    if ((i19 | 0) > 23) {
     i29 = i37;
     break L14;
    }
    if ((i19 | 0) < 22) {
     HEAP8[i36] = HEAP8[4376 + i19 | 0] | 0;
     i40 = i36 + 1 | 0;
     i41 = i23;
     i42 = i13 + 1 | 0;
     break;
    }
    if (i30) {
     i29 = i36;
     break L14;
    }
    if ((i36 - i37 | 0) >= 3) {
     i29 = i37;
     break L14;
    }
    if ((HEAP8[i36 + -1 | 0] | 0) != 48) {
     i29 = i37;
     break L14;
    }
    HEAP8[i36] = HEAP8[4376 + i19 | 0] | 0;
    i40 = i36 + 1 | 0;
    i41 = i23;
    i42 = 0;
   }
  } while (0);
  i30 = HEAP32[i3 >> 2] | 0;
  i27 = i30 + 12 | 0;
  i19 = HEAP32[i27 >> 2] | 0;
  if ((i19 | 0) == (HEAP32[i30 + 16 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[i30 >> 2] | 0) + 40 >> 2] & 127](i30) | 0;
   i22 = i30;
   i23 = i41;
   i13 = i42;
   i24 = i40;
   i25 = i37;
   continue;
  } else {
   HEAP32[i27 >> 2] = i19 + 1;
   i22 = i30;
   i23 = i41;
   i13 = i42;
   i24 = i40;
   i25 = i37;
   continue;
  }
 }
 HEAP8[i29 + 3 | 0] = 0;
 if ((HEAP8[5728] | 0) == 0) {
  if ((___cxa_guard_acquire(5728) | 0) != 0) {
   HEAP32[1430] = _newlocale(2147483647, 5736, 0) | 0;
   ___cxa_guard_release(5728);
  }
 }
 i37 = HEAP32[1430] | 0;
 HEAP32[i8 >> 2] = i7;
 if ((__ZNSt3__110__sscanf_lEPKcP15__locale_structS1_z(i29, i37, 4416, i8) | 0) != 1) {
  HEAP32[i6 >> 2] = 4;
 }
 i8 = HEAP32[i3 >> 2] | 0;
 if ((i8 | 0) == 0) {
  i46 = 0;
 } else {
  if ((HEAP32[i8 + 12 >> 2] | 0) == (HEAP32[i8 + 16 >> 2] | 0)) {
   if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i8 >> 2] | 0) + 36 >> 2] & 127](i8) | 0) == -1) {
    HEAP32[i3 >> 2] = 0;
    i46 = 0;
   } else {
    i46 = i8;
   }
  } else {
   i46 = i8;
  }
 }
 i8 = (i46 | 0) == 0;
 i3 = HEAP32[i4 >> 2] | 0;
 do {
  if ((i3 | 0) == 0) {
   i28 = 72;
  } else {
   if ((HEAP32[i3 + 12 >> 2] | 0) != (HEAP32[i3 + 16 >> 2] | 0)) {
    if (!i8) {
     break;
    }
    HEAP32[i1 >> 2] = i46;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i12);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i10);
    STACKTOP = i2;
    return;
   }
   if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 127](i3) | 0) == -1) {
    HEAP32[i4 >> 2] = 0;
    i28 = 72;
    break;
   }
   if (i8 ^ (i3 | 0) == 0) {
    HEAP32[i1 >> 2] = i46;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i12);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i10);
    STACKTOP = i2;
    return;
   }
  }
 } while (0);
 if ((i28 | 0) == 72) {
  if (!i8) {
   HEAP32[i1 >> 2] = i46;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i12);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i10);
   STACKTOP = i2;
   return;
  }
 }
 HEAP32[i6 >> 2] = HEAP32[i6 >> 2] | 2;
 HEAP32[i1 >> 2] = i46;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i12);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i10);
 STACKTOP = i2;
 return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv(i1, i2, i3, i4, i5, i6, i7) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 var i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0, i49 = 0, i50 = 0, i51 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 304 | 0;
 i8 = i2;
 i9 = i2 + 200 | 0;
 i10 = i2 + 12 | 0;
 i11 = i2 + 24 | 0;
 i12 = i2 + 28 | 0;
 i13 = i2 + 40 | 0;
 HEAP32[i10 + 0 >> 2] = 0;
 HEAP32[i10 + 4 >> 2] = 0;
 HEAP32[i10 + 8 >> 2] = 0;
 __ZNKSt3__18ios_base6getlocEv(i11, i5);
 i5 = HEAP32[i11 >> 2] | 0;
 if (!((HEAP32[1456] | 0) == -1)) {
  HEAP32[i8 >> 2] = 5824;
  HEAP32[i8 + 4 >> 2] = 118;
  HEAP32[i8 + 8 >> 2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(5824, i8, 119);
 }
 i14 = (HEAP32[5828 >> 2] | 0) + -1 | 0;
 i15 = HEAP32[i5 + 8 >> 2] | 0;
 if (!((HEAP32[i5 + 12 >> 2] | 0) - i15 >> 2 >>> 0 > i14 >>> 0)) {
  i16 = ___cxa_allocate_exception(4) | 0;
  __ZNSt8bad_castC2Ev(i16);
  ___cxa_throw(i16 | 0, 13792, 107);
 }
 i5 = HEAP32[i15 + (i14 << 2) >> 2] | 0;
 if ((i5 | 0) == 0) {
  i16 = ___cxa_allocate_exception(4) | 0;
  __ZNSt8bad_castC2Ev(i16);
  ___cxa_throw(i16 | 0, 13792, 107);
 }
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[i5 >> 2] | 0) + 48 >> 2] & 7](i5, 4376, 4402 | 0, i9) | 0;
 __ZNSt3__114__shared_count16__release_sharedEv(HEAP32[i11 >> 2] | 0) | 0;
 HEAP32[i12 + 0 >> 2] = 0;
 HEAP32[i12 + 4 >> 2] = 0;
 HEAP32[i12 + 8 >> 2] = 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i12, 10, 0);
 if ((HEAP8[i12] & 1) == 0) {
  i11 = i12 + 1 | 0;
  i17 = i11;
  i18 = i12 + 8 | 0;
  i19 = i11;
 } else {
  i11 = i12 + 8 | 0;
  i17 = i12 + 1 | 0;
  i18 = i11;
  i19 = HEAP32[i11 >> 2] | 0;
 }
 i11 = i12 + 4 | 0;
 i5 = i9 + 96 | 0;
 i16 = i9 + 100 | 0;
 i14 = i13;
 i15 = i9 + 104 | 0;
 i20 = i9;
 i21 = i10 + 4 | 0;
 i22 = HEAP32[i3 >> 2] | 0;
 i23 = i13;
 i13 = 0;
 i24 = i19;
 i25 = i19;
 L14 : while (1) {
  if ((i22 | 0) == 0) {
   i26 = 1;
   i27 = 0;
  } else {
   i19 = HEAP32[i22 + 12 >> 2] | 0;
   if ((i19 | 0) == (HEAP32[i22 + 16 >> 2] | 0)) {
    i28 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i22 >> 2] | 0) + 36 >> 2] & 127](i22) | 0;
   } else {
    i28 = HEAP32[i19 >> 2] | 0;
   }
   if ((i28 | 0) == -1) {
    HEAP32[i3 >> 2] = 0;
    i26 = 1;
    i27 = 0;
   } else {
    i26 = 0;
    i27 = i22;
   }
  }
  i19 = HEAP32[i4 >> 2] | 0;
  do {
   if ((i19 | 0) == 0) {
    i29 = 22;
   } else {
    i30 = HEAP32[i19 + 12 >> 2] | 0;
    if ((i30 | 0) == (HEAP32[i19 + 16 >> 2] | 0)) {
     i31 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i19 >> 2] | 0) + 36 >> 2] & 127](i19) | 0;
    } else {
     i31 = HEAP32[i30 >> 2] | 0;
    }
    if ((i31 | 0) == -1) {
     HEAP32[i4 >> 2] = 0;
     i29 = 22;
     break;
    } else {
     if (i26) {
      break;
     } else {
      i32 = i25;
      break L14;
     }
    }
   }
  } while (0);
  if ((i29 | 0) == 22) {
   i29 = 0;
   if (i26) {
    i32 = i25;
    break;
   }
  }
  i19 = HEAP8[i12] | 0;
  i30 = (i19 & 1) == 0;
  if (i30) {
   i33 = (i19 & 255) >>> 1;
  } else {
   i33 = HEAP32[i11 >> 2] | 0;
  }
  if ((i24 - i25 | 0) == (i33 | 0)) {
   if (i30) {
    i34 = (i19 & 255) >>> 1;
    i35 = (i19 & 255) >>> 1;
   } else {
    i19 = HEAP32[i11 >> 2] | 0;
    i34 = i19;
    i35 = i19;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i12, i34 << 1, 0);
   if ((HEAP8[i12] & 1) == 0) {
    i36 = 10;
   } else {
    i36 = (HEAP32[i12 >> 2] & -2) + -1 | 0;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i12, i36, 0);
   if ((HEAP8[i12] & 1) == 0) {
    i37 = i17;
   } else {
    i37 = HEAP32[i18 >> 2] | 0;
   }
   i38 = i37 + i35 | 0;
   i39 = i37;
  } else {
   i38 = i24;
   i39 = i25;
  }
  i19 = HEAP32[i27 + 12 >> 2] | 0;
  if ((i19 | 0) == (HEAP32[i27 + 16 >> 2] | 0)) {
   i40 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i27 >> 2] | 0) + 36 >> 2] & 127](i27) | 0;
  } else {
   i40 = HEAP32[i19 >> 2] | 0;
  }
  i19 = (i38 | 0) == (i39 | 0);
  do {
   if (i19) {
    i30 = (HEAP32[i5 >> 2] | 0) == (i40 | 0);
    if (!i30) {
     if ((HEAP32[i16 >> 2] | 0) != (i40 | 0)) {
      i29 = 43;
      break;
     }
    }
    HEAP8[i38] = i30 ? 43 : 45;
    i41 = i38 + 1 | 0;
    i42 = i23;
    i43 = 0;
   } else {
    i29 = 43;
   }
  } while (0);
  do {
   if ((i29 | 0) == 43) {
    i29 = 0;
    i30 = HEAP8[i10] | 0;
    if ((i30 & 1) == 0) {
     i44 = (i30 & 255) >>> 1;
    } else {
     i44 = HEAP32[i21 >> 2] | 0;
    }
    if ((i44 | 0) != 0 & (i40 | 0) == 0) {
     if ((i23 - i14 | 0) >= 160) {
      i41 = i38;
      i42 = i23;
      i43 = i13;
      break;
     }
     HEAP32[i23 >> 2] = i13;
     i41 = i38;
     i42 = i23 + 4 | 0;
     i43 = 0;
     break;
    } else {
     i45 = i9;
    }
    while (1) {
     i30 = i45 + 4 | 0;
     if ((HEAP32[i45 >> 2] | 0) == (i40 | 0)) {
      i46 = i45;
      break;
     }
     if ((i30 | 0) == (i15 | 0)) {
      i46 = i15;
      break;
     } else {
      i45 = i30;
     }
    }
    i30 = i46 - i20 | 0;
    i47 = i30 >> 2;
    if ((i30 | 0) > 92) {
     i32 = i39;
     break L14;
    }
    if ((i30 | 0) < 88) {
     HEAP8[i38] = HEAP8[4376 + i47 | 0] | 0;
     i41 = i38 + 1 | 0;
     i42 = i23;
     i43 = i13 + 1 | 0;
     break;
    }
    if (i19) {
     i32 = i38;
     break L14;
    }
    if ((i38 - i39 | 0) >= 3) {
     i32 = i39;
     break L14;
    }
    if ((HEAP8[i38 + -1 | 0] | 0) != 48) {
     i32 = i39;
     break L14;
    }
    HEAP8[i38] = HEAP8[4376 + i47 | 0] | 0;
    i41 = i38 + 1 | 0;
    i42 = i23;
    i43 = 0;
   }
  } while (0);
  i19 = HEAP32[i3 >> 2] | 0;
  i47 = i19 + 12 | 0;
  i30 = HEAP32[i47 >> 2] | 0;
  if ((i30 | 0) == (HEAP32[i19 + 16 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[i19 >> 2] | 0) + 40 >> 2] & 127](i19) | 0;
   i22 = i19;
   i23 = i42;
   i13 = i43;
   i24 = i41;
   i25 = i39;
   continue;
  } else {
   HEAP32[i47 >> 2] = i30 + 4;
   i22 = i19;
   i23 = i42;
   i13 = i43;
   i24 = i41;
   i25 = i39;
   continue;
  }
 }
 HEAP8[i32 + 3 | 0] = 0;
 if ((HEAP8[5728] | 0) == 0) {
  if ((___cxa_guard_acquire(5728) | 0) != 0) {
   HEAP32[1430] = _newlocale(2147483647, 5736, 0) | 0;
   ___cxa_guard_release(5728);
  }
 }
 i39 = HEAP32[1430] | 0;
 HEAP32[i8 >> 2] = i7;
 if ((__ZNSt3__110__sscanf_lEPKcP15__locale_structS1_z(i32, i39, 4416, i8) | 0) != 1) {
  HEAP32[i6 >> 2] = 4;
 }
 i8 = HEAP32[i3 >> 2] | 0;
 if ((i8 | 0) == 0) {
  i48 = 0;
  i49 = 1;
 } else {
  i39 = HEAP32[i8 + 12 >> 2] | 0;
  if ((i39 | 0) == (HEAP32[i8 + 16 >> 2] | 0)) {
   i50 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i8 >> 2] | 0) + 36 >> 2] & 127](i8) | 0;
  } else {
   i50 = HEAP32[i39 >> 2] | 0;
  }
  if ((i50 | 0) == -1) {
   HEAP32[i3 >> 2] = 0;
   i48 = 0;
   i49 = 1;
  } else {
   i48 = i8;
   i49 = 0;
  }
 }
 i8 = HEAP32[i4 >> 2] | 0;
 do {
  if ((i8 | 0) == 0) {
   i29 = 78;
  } else {
   i3 = HEAP32[i8 + 12 >> 2] | 0;
   if ((i3 | 0) == (HEAP32[i8 + 16 >> 2] | 0)) {
    i51 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i8 >> 2] | 0) + 36 >> 2] & 127](i8) | 0;
   } else {
    i51 = HEAP32[i3 >> 2] | 0;
   }
   if ((i51 | 0) == -1) {
    HEAP32[i4 >> 2] = 0;
    i29 = 78;
    break;
   }
   if (i49) {
    HEAP32[i1 >> 2] = i48;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i12);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i10);
    STACKTOP = i2;
    return;
   }
  }
 } while (0);
 if ((i29 | 0) == 78) {
  if (!i49) {
   HEAP32[i1 >> 2] = i48;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i12);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i10);
   STACKTOP = i2;
   return;
  }
 }
 HEAP32[i6 >> 2] = HEAP32[i6 >> 2] | 2;
 HEAP32[i1 >> 2] = i48;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i12);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i10);
 STACKTOP = i2;
 return;
}
function __ZNSt3__111__money_getIwE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_SJ_Ri(i1, i2, i3, i4, i5, i6, i7, i8, i9, i10) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 i9 = i9 | 0;
 i10 = i10 | 0;
 var i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0;
 i11 = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 i12 = i11;
 i13 = i11 + 100 | 0;
 i14 = i11 + 88 | 0;
 i15 = i11 + 76 | 0;
 i16 = i11 + 64 | 0;
 i17 = i11 + 104 | 0;
 i18 = i11 + 36 | 0;
 i19 = i11 + 24 | 0;
 i20 = i11 + 12 | 0;
 i21 = i11 + 40 | 0;
 i22 = i11 + 52 | 0;
 if (i1) {
  i1 = HEAP32[i2 >> 2] | 0;
  if (!((HEAP32[1350] | 0) == -1)) {
   HEAP32[i12 >> 2] = 5400;
   HEAP32[i12 + 4 >> 2] = 118;
   HEAP32[i12 + 8 >> 2] = 0;
   __ZNSt3__111__call_onceERVmPvPFvS2_E(5400, i12, 119);
  }
  i23 = (HEAP32[5404 >> 2] | 0) + -1 | 0;
  i24 = HEAP32[i1 + 8 >> 2] | 0;
  if (!((HEAP32[i1 + 12 >> 2] | 0) - i24 >> 2 >>> 0 > i23 >>> 0)) {
   i25 = ___cxa_allocate_exception(4) | 0;
   __ZNSt8bad_castC2Ev(i25);
   ___cxa_throw(i25 | 0, 13792, 107);
  }
  i1 = HEAP32[i24 + (i23 << 2) >> 2] | 0;
  if ((i1 | 0) == 0) {
   i25 = ___cxa_allocate_exception(4) | 0;
   __ZNSt8bad_castC2Ev(i25);
   ___cxa_throw(i25 | 0, 13792, 107);
  }
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 44 >> 2] & 63](i13, i1);
  i25 = HEAP32[i13 >> 2] | 0;
  HEAP8[i3] = i25;
  HEAP8[i3 + 1 | 0] = i25 >> 8;
  HEAP8[i3 + 2 | 0] = i25 >> 16;
  HEAP8[i3 + 3 | 0] = i25 >> 24;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 32 >> 2] & 63](i14, i1);
  if ((HEAP8[i9] & 1) == 0) {
   HEAP32[i9 + 4 >> 2] = 0;
   HEAP8[i9] = 0;
  } else {
   HEAP32[HEAP32[i9 + 8 >> 2] >> 2] = 0;
   HEAP32[i9 + 4 >> 2] = 0;
  }
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj(i9, 0);
  HEAP32[i9 + 0 >> 2] = HEAP32[i14 + 0 >> 2];
  HEAP32[i9 + 4 >> 2] = HEAP32[i14 + 4 >> 2];
  HEAP32[i9 + 8 >> 2] = HEAP32[i14 + 8 >> 2];
  HEAP32[i14 + 0 >> 2] = 0;
  HEAP32[i14 + 4 >> 2] = 0;
  HEAP32[i14 + 8 >> 2] = 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(i14);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 28 >> 2] & 63](i15, i1);
  if ((HEAP8[i8] & 1) == 0) {
   HEAP32[i8 + 4 >> 2] = 0;
   HEAP8[i8] = 0;
  } else {
   HEAP32[HEAP32[i8 + 8 >> 2] >> 2] = 0;
   HEAP32[i8 + 4 >> 2] = 0;
  }
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj(i8, 0);
  HEAP32[i8 + 0 >> 2] = HEAP32[i15 + 0 >> 2];
  HEAP32[i8 + 4 >> 2] = HEAP32[i15 + 4 >> 2];
  HEAP32[i8 + 8 >> 2] = HEAP32[i15 + 8 >> 2];
  HEAP32[i15 + 0 >> 2] = 0;
  HEAP32[i15 + 4 >> 2] = 0;
  HEAP32[i15 + 8 >> 2] = 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(i15);
  HEAP32[i4 >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 12 >> 2] & 127](i1) | 0;
  HEAP32[i5 >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 16 >> 2] & 127](i1) | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 20 >> 2] & 63](i16, i1);
  if ((HEAP8[i6] & 1) == 0) {
   HEAP8[i6 + 1 | 0] = 0;
   HEAP8[i6] = 0;
  } else {
   HEAP8[HEAP32[i6 + 8 >> 2] | 0] = 0;
   HEAP32[i6 + 4 >> 2] = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj(i6, 0);
  HEAP32[i6 + 0 >> 2] = HEAP32[i16 + 0 >> 2];
  HEAP32[i6 + 4 >> 2] = HEAP32[i16 + 4 >> 2];
  HEAP32[i6 + 8 >> 2] = HEAP32[i16 + 8 >> 2];
  HEAP32[i16 + 0 >> 2] = 0;
  HEAP32[i16 + 4 >> 2] = 0;
  HEAP32[i16 + 8 >> 2] = 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i16);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 24 >> 2] & 63](i17, i1);
  if ((HEAP8[i7] & 1) == 0) {
   HEAP32[i7 + 4 >> 2] = 0;
   HEAP8[i7] = 0;
  } else {
   HEAP32[HEAP32[i7 + 8 >> 2] >> 2] = 0;
   HEAP32[i7 + 4 >> 2] = 0;
  }
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj(i7, 0);
  HEAP32[i7 + 0 >> 2] = HEAP32[i17 + 0 >> 2];
  HEAP32[i7 + 4 >> 2] = HEAP32[i17 + 4 >> 2];
  HEAP32[i7 + 8 >> 2] = HEAP32[i17 + 8 >> 2];
  HEAP32[i17 + 0 >> 2] = 0;
  HEAP32[i17 + 4 >> 2] = 0;
  HEAP32[i17 + 8 >> 2] = 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(i17);
  i26 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0;
  HEAP32[i10 >> 2] = i26;
  STACKTOP = i11;
  return;
 } else {
  i1 = HEAP32[i2 >> 2] | 0;
  if (!((HEAP32[1334] | 0) == -1)) {
   HEAP32[i12 >> 2] = 5336;
   HEAP32[i12 + 4 >> 2] = 118;
   HEAP32[i12 + 8 >> 2] = 0;
   __ZNSt3__111__call_onceERVmPvPFvS2_E(5336, i12, 119);
  }
  i12 = (HEAP32[5340 >> 2] | 0) + -1 | 0;
  i2 = HEAP32[i1 + 8 >> 2] | 0;
  if (!((HEAP32[i1 + 12 >> 2] | 0) - i2 >> 2 >>> 0 > i12 >>> 0)) {
   i27 = ___cxa_allocate_exception(4) | 0;
   __ZNSt8bad_castC2Ev(i27);
   ___cxa_throw(i27 | 0, 13792, 107);
  }
  i1 = HEAP32[i2 + (i12 << 2) >> 2] | 0;
  if ((i1 | 0) == 0) {
   i27 = ___cxa_allocate_exception(4) | 0;
   __ZNSt8bad_castC2Ev(i27);
   ___cxa_throw(i27 | 0, 13792, 107);
  }
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 44 >> 2] & 63](i18, i1);
  i27 = HEAP32[i18 >> 2] | 0;
  HEAP8[i3] = i27;
  HEAP8[i3 + 1 | 0] = i27 >> 8;
  HEAP8[i3 + 2 | 0] = i27 >> 16;
  HEAP8[i3 + 3 | 0] = i27 >> 24;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 32 >> 2] & 63](i19, i1);
  if ((HEAP8[i9] & 1) == 0) {
   HEAP32[i9 + 4 >> 2] = 0;
   HEAP8[i9] = 0;
  } else {
   HEAP32[HEAP32[i9 + 8 >> 2] >> 2] = 0;
   HEAP32[i9 + 4 >> 2] = 0;
  }
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj(i9, 0);
  HEAP32[i9 + 0 >> 2] = HEAP32[i19 + 0 >> 2];
  HEAP32[i9 + 4 >> 2] = HEAP32[i19 + 4 >> 2];
  HEAP32[i9 + 8 >> 2] = HEAP32[i19 + 8 >> 2];
  HEAP32[i19 + 0 >> 2] = 0;
  HEAP32[i19 + 4 >> 2] = 0;
  HEAP32[i19 + 8 >> 2] = 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(i19);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 28 >> 2] & 63](i20, i1);
  if ((HEAP8[i8] & 1) == 0) {
   HEAP32[i8 + 4 >> 2] = 0;
   HEAP8[i8] = 0;
  } else {
   HEAP32[HEAP32[i8 + 8 >> 2] >> 2] = 0;
   HEAP32[i8 + 4 >> 2] = 0;
  }
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj(i8, 0);
  HEAP32[i8 + 0 >> 2] = HEAP32[i20 + 0 >> 2];
  HEAP32[i8 + 4 >> 2] = HEAP32[i20 + 4 >> 2];
  HEAP32[i8 + 8 >> 2] = HEAP32[i20 + 8 >> 2];
  HEAP32[i20 + 0 >> 2] = 0;
  HEAP32[i20 + 4 >> 2] = 0;
  HEAP32[i20 + 8 >> 2] = 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(i20);
  HEAP32[i4 >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 12 >> 2] & 127](i1) | 0;
  HEAP32[i5 >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 16 >> 2] & 127](i1) | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 20 >> 2] & 63](i21, i1);
  if ((HEAP8[i6] & 1) == 0) {
   HEAP8[i6 + 1 | 0] = 0;
   HEAP8[i6] = 0;
  } else {
   HEAP8[HEAP32[i6 + 8 >> 2] | 0] = 0;
   HEAP32[i6 + 4 >> 2] = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj(i6, 0);
  HEAP32[i6 + 0 >> 2] = HEAP32[i21 + 0 >> 2];
  HEAP32[i6 + 4 >> 2] = HEAP32[i21 + 4 >> 2];
  HEAP32[i6 + 8 >> 2] = HEAP32[i21 + 8 >> 2];
  HEAP32[i21 + 0 >> 2] = 0;
  HEAP32[i21 + 4 >> 2] = 0;
  HEAP32[i21 + 8 >> 2] = 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i21);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 24 >> 2] & 63](i22, i1);
  if ((HEAP8[i7] & 1) == 0) {
   HEAP32[i7 + 4 >> 2] = 0;
   HEAP8[i7] = 0;
  } else {
   HEAP32[HEAP32[i7 + 8 >> 2] >> 2] = 0;
   HEAP32[i7 + 4 >> 2] = 0;
  }
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj(i7, 0);
  HEAP32[i7 + 0 >> 2] = HEAP32[i22 + 0 >> 2];
  HEAP32[i7 + 4 >> 2] = HEAP32[i22 + 4 >> 2];
  HEAP32[i7 + 8 >> 2] = HEAP32[i22 + 8 >> 2];
  HEAP32[i22 + 0 >> 2] = 0;
  HEAP32[i22 + 4 >> 2] = 0;
  HEAP32[i22 + 8 >> 2] = 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(i22);
  i26 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0;
  HEAP32[i10 >> 2] = i26;
  STACKTOP = i11;
  return;
 }
}
function __ZNSt3__111__money_getIcE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_SF_Ri(i1, i2, i3, i4, i5, i6, i7, i8, i9, i10) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 i9 = i9 | 0;
 i10 = i10 | 0;
 var i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0;
 i11 = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 i12 = i11;
 i13 = i11 + 100 | 0;
 i14 = i11 + 88 | 0;
 i15 = i11 + 76 | 0;
 i16 = i11 + 64 | 0;
 i17 = i11 + 104 | 0;
 i18 = i11 + 36 | 0;
 i19 = i11 + 24 | 0;
 i20 = i11 + 12 | 0;
 i21 = i11 + 40 | 0;
 i22 = i11 + 52 | 0;
 if (i1) {
  i1 = HEAP32[i2 >> 2] | 0;
  if (!((HEAP32[1318] | 0) == -1)) {
   HEAP32[i12 >> 2] = 5272;
   HEAP32[i12 + 4 >> 2] = 118;
   HEAP32[i12 + 8 >> 2] = 0;
   __ZNSt3__111__call_onceERVmPvPFvS2_E(5272, i12, 119);
  }
  i23 = (HEAP32[5276 >> 2] | 0) + -1 | 0;
  i24 = HEAP32[i1 + 8 >> 2] | 0;
  if (!((HEAP32[i1 + 12 >> 2] | 0) - i24 >> 2 >>> 0 > i23 >>> 0)) {
   i25 = ___cxa_allocate_exception(4) | 0;
   __ZNSt8bad_castC2Ev(i25);
   ___cxa_throw(i25 | 0, 13792, 107);
  }
  i1 = HEAP32[i24 + (i23 << 2) >> 2] | 0;
  if ((i1 | 0) == 0) {
   i25 = ___cxa_allocate_exception(4) | 0;
   __ZNSt8bad_castC2Ev(i25);
   ___cxa_throw(i25 | 0, 13792, 107);
  }
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 44 >> 2] & 63](i13, i1);
  i25 = HEAP32[i13 >> 2] | 0;
  HEAP8[i3] = i25;
  HEAP8[i3 + 1 | 0] = i25 >> 8;
  HEAP8[i3 + 2 | 0] = i25 >> 16;
  HEAP8[i3 + 3 | 0] = i25 >> 24;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 32 >> 2] & 63](i14, i1);
  if ((HEAP8[i9] & 1) == 0) {
   HEAP8[i9 + 1 | 0] = 0;
   HEAP8[i9] = 0;
  } else {
   HEAP8[HEAP32[i9 + 8 >> 2] | 0] = 0;
   HEAP32[i9 + 4 >> 2] = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj(i9, 0);
  HEAP32[i9 + 0 >> 2] = HEAP32[i14 + 0 >> 2];
  HEAP32[i9 + 4 >> 2] = HEAP32[i14 + 4 >> 2];
  HEAP32[i9 + 8 >> 2] = HEAP32[i14 + 8 >> 2];
  HEAP32[i14 + 0 >> 2] = 0;
  HEAP32[i14 + 4 >> 2] = 0;
  HEAP32[i14 + 8 >> 2] = 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i14);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 28 >> 2] & 63](i15, i1);
  if ((HEAP8[i8] & 1) == 0) {
   HEAP8[i8 + 1 | 0] = 0;
   HEAP8[i8] = 0;
  } else {
   HEAP8[HEAP32[i8 + 8 >> 2] | 0] = 0;
   HEAP32[i8 + 4 >> 2] = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj(i8, 0);
  HEAP32[i8 + 0 >> 2] = HEAP32[i15 + 0 >> 2];
  HEAP32[i8 + 4 >> 2] = HEAP32[i15 + 4 >> 2];
  HEAP32[i8 + 8 >> 2] = HEAP32[i15 + 8 >> 2];
  HEAP32[i15 + 0 >> 2] = 0;
  HEAP32[i15 + 4 >> 2] = 0;
  HEAP32[i15 + 8 >> 2] = 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i15);
  HEAP8[i4] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 12 >> 2] & 127](i1) | 0;
  HEAP8[i5] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 16 >> 2] & 127](i1) | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 20 >> 2] & 63](i16, i1);
  if ((HEAP8[i6] & 1) == 0) {
   HEAP8[i6 + 1 | 0] = 0;
   HEAP8[i6] = 0;
  } else {
   HEAP8[HEAP32[i6 + 8 >> 2] | 0] = 0;
   HEAP32[i6 + 4 >> 2] = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj(i6, 0);
  HEAP32[i6 + 0 >> 2] = HEAP32[i16 + 0 >> 2];
  HEAP32[i6 + 4 >> 2] = HEAP32[i16 + 4 >> 2];
  HEAP32[i6 + 8 >> 2] = HEAP32[i16 + 8 >> 2];
  HEAP32[i16 + 0 >> 2] = 0;
  HEAP32[i16 + 4 >> 2] = 0;
  HEAP32[i16 + 8 >> 2] = 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i16);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 24 >> 2] & 63](i17, i1);
  if ((HEAP8[i7] & 1) == 0) {
   HEAP8[i7 + 1 | 0] = 0;
   HEAP8[i7] = 0;
  } else {
   HEAP8[HEAP32[i7 + 8 >> 2] | 0] = 0;
   HEAP32[i7 + 4 >> 2] = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj(i7, 0);
  HEAP32[i7 + 0 >> 2] = HEAP32[i17 + 0 >> 2];
  HEAP32[i7 + 4 >> 2] = HEAP32[i17 + 4 >> 2];
  HEAP32[i7 + 8 >> 2] = HEAP32[i17 + 8 >> 2];
  HEAP32[i17 + 0 >> 2] = 0;
  HEAP32[i17 + 4 >> 2] = 0;
  HEAP32[i17 + 8 >> 2] = 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i17);
  i26 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0;
  HEAP32[i10 >> 2] = i26;
  STACKTOP = i11;
  return;
 } else {
  i1 = HEAP32[i2 >> 2] | 0;
  if (!((HEAP32[1302] | 0) == -1)) {
   HEAP32[i12 >> 2] = 5208;
   HEAP32[i12 + 4 >> 2] = 118;
   HEAP32[i12 + 8 >> 2] = 0;
   __ZNSt3__111__call_onceERVmPvPFvS2_E(5208, i12, 119);
  }
  i12 = (HEAP32[5212 >> 2] | 0) + -1 | 0;
  i2 = HEAP32[i1 + 8 >> 2] | 0;
  if (!((HEAP32[i1 + 12 >> 2] | 0) - i2 >> 2 >>> 0 > i12 >>> 0)) {
   i27 = ___cxa_allocate_exception(4) | 0;
   __ZNSt8bad_castC2Ev(i27);
   ___cxa_throw(i27 | 0, 13792, 107);
  }
  i1 = HEAP32[i2 + (i12 << 2) >> 2] | 0;
  if ((i1 | 0) == 0) {
   i27 = ___cxa_allocate_exception(4) | 0;
   __ZNSt8bad_castC2Ev(i27);
   ___cxa_throw(i27 | 0, 13792, 107);
  }
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 44 >> 2] & 63](i18, i1);
  i27 = HEAP32[i18 >> 2] | 0;
  HEAP8[i3] = i27;
  HEAP8[i3 + 1 | 0] = i27 >> 8;
  HEAP8[i3 + 2 | 0] = i27 >> 16;
  HEAP8[i3 + 3 | 0] = i27 >> 24;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 32 >> 2] & 63](i19, i1);
  if ((HEAP8[i9] & 1) == 0) {
   HEAP8[i9 + 1 | 0] = 0;
   HEAP8[i9] = 0;
  } else {
   HEAP8[HEAP32[i9 + 8 >> 2] | 0] = 0;
   HEAP32[i9 + 4 >> 2] = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj(i9, 0);
  HEAP32[i9 + 0 >> 2] = HEAP32[i19 + 0 >> 2];
  HEAP32[i9 + 4 >> 2] = HEAP32[i19 + 4 >> 2];
  HEAP32[i9 + 8 >> 2] = HEAP32[i19 + 8 >> 2];
  HEAP32[i19 + 0 >> 2] = 0;
  HEAP32[i19 + 4 >> 2] = 0;
  HEAP32[i19 + 8 >> 2] = 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i19);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 28 >> 2] & 63](i20, i1);
  if ((HEAP8[i8] & 1) == 0) {
   HEAP8[i8 + 1 | 0] = 0;
   HEAP8[i8] = 0;
  } else {
   HEAP8[HEAP32[i8 + 8 >> 2] | 0] = 0;
   HEAP32[i8 + 4 >> 2] = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj(i8, 0);
  HEAP32[i8 + 0 >> 2] = HEAP32[i20 + 0 >> 2];
  HEAP32[i8 + 4 >> 2] = HEAP32[i20 + 4 >> 2];
  HEAP32[i8 + 8 >> 2] = HEAP32[i20 + 8 >> 2];
  HEAP32[i20 + 0 >> 2] = 0;
  HEAP32[i20 + 4 >> 2] = 0;
  HEAP32[i20 + 8 >> 2] = 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i20);
  HEAP8[i4] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 12 >> 2] & 127](i1) | 0;
  HEAP8[i5] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 16 >> 2] & 127](i1) | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 20 >> 2] & 63](i21, i1);
  if ((HEAP8[i6] & 1) == 0) {
   HEAP8[i6 + 1 | 0] = 0;
   HEAP8[i6] = 0;
  } else {
   HEAP8[HEAP32[i6 + 8 >> 2] | 0] = 0;
   HEAP32[i6 + 4 >> 2] = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj(i6, 0);
  HEAP32[i6 + 0 >> 2] = HEAP32[i21 + 0 >> 2];
  HEAP32[i6 + 4 >> 2] = HEAP32[i21 + 4 >> 2];
  HEAP32[i6 + 8 >> 2] = HEAP32[i21 + 8 >> 2];
  HEAP32[i21 + 0 >> 2] = 0;
  HEAP32[i21 + 4 >> 2] = 0;
  HEAP32[i21 + 8 >> 2] = 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i21);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 24 >> 2] & 63](i22, i1);
  if ((HEAP8[i7] & 1) == 0) {
   HEAP8[i7 + 1 | 0] = 0;
   HEAP8[i7] = 0;
  } else {
   HEAP8[HEAP32[i7 + 8 >> 2] | 0] = 0;
   HEAP32[i7 + 4 >> 2] = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj(i7, 0);
  HEAP32[i7 + 0 >> 2] = HEAP32[i22 + 0 >> 2];
  HEAP32[i7 + 4 >> 2] = HEAP32[i22 + 4 >> 2];
  HEAP32[i7 + 8 >> 2] = HEAP32[i22 + 8 >> 2];
  HEAP32[i22 + 0 >> 2] = 0;
  HEAP32[i22 + 4 >> 2] = 0;
  HEAP32[i22 + 8 >> 2] = 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i22);
  i26 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0;
  HEAP32[i10 >> 2] = i26;
  STACKTOP = i11;
  return;
 }
}
function __ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb(i1, i2, i3, i4, i5, i6, i7) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 var i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0, i49 = 0, i50 = 0, i51 = 0, i52 = 0, i53 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 i9 = i8;
 i10 = (i4 - i3 | 0) / 12 | 0;
 if (i10 >>> 0 > 100) {
  i11 = _malloc(i10) | 0;
  if ((i11 | 0) == 0) {
   __ZSt17__throw_bad_allocv();
  } else {
   i12 = i11;
   i13 = i11;
  }
 } else {
  i12 = 0;
  i13 = i9;
 }
 i9 = (i3 | 0) == (i4 | 0);
 if (i9) {
  i14 = 0;
  i15 = i10;
 } else {
  i11 = i3;
  i16 = 0;
  i17 = i10;
  i10 = i13;
  while (1) {
   i18 = HEAP8[i11] | 0;
   if ((i18 & 1) == 0) {
    i19 = (i18 & 255) >>> 1;
   } else {
    i19 = HEAP32[i11 + 4 >> 2] | 0;
   }
   if ((i19 | 0) == 0) {
    HEAP8[i10] = 2;
    i20 = i16 + 1 | 0;
    i21 = i17 + -1 | 0;
   } else {
    HEAP8[i10] = 1;
    i20 = i16;
    i21 = i17;
   }
   i18 = i11 + 12 | 0;
   if ((i18 | 0) == (i4 | 0)) {
    i14 = i20;
    i15 = i21;
    break;
   } else {
    i11 = i18;
    i16 = i20;
    i17 = i21;
    i10 = i10 + 1 | 0;
   }
  }
 }
 i10 = 0;
 i21 = i14;
 i14 = i15;
 L17 : while (1) {
  i15 = HEAP32[i1 >> 2] | 0;
  do {
   if ((i15 | 0) == 0) {
    i22 = 1;
   } else {
    i17 = HEAP32[i15 + 12 >> 2] | 0;
    if ((i17 | 0) == (HEAP32[i15 + 16 >> 2] | 0)) {
     i23 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i15 >> 2] | 0) + 36 >> 2] & 127](i15) | 0;
    } else {
     i23 = HEAP32[i17 >> 2] | 0;
    }
    if ((i23 | 0) == -1) {
     HEAP32[i1 >> 2] = 0;
     i22 = 1;
     break;
    } else {
     i22 = (HEAP32[i1 >> 2] | 0) == 0;
     break;
    }
   }
  } while (0);
  i15 = HEAP32[i2 >> 2] | 0;
  if ((i15 | 0) == 0) {
   i24 = 0;
   i25 = 1;
  } else {
   i17 = HEAP32[i15 + 12 >> 2] | 0;
   if ((i17 | 0) == (HEAP32[i15 + 16 >> 2] | 0)) {
    i26 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i15 >> 2] | 0) + 36 >> 2] & 127](i15) | 0;
   } else {
    i26 = HEAP32[i17 >> 2] | 0;
   }
   if ((i26 | 0) == -1) {
    HEAP32[i2 >> 2] = 0;
    i24 = 0;
    i25 = 1;
   } else {
    i24 = i15;
    i25 = 0;
   }
  }
  i27 = HEAP32[i1 >> 2] | 0;
  if (!((i22 ^ i25) & (i14 | 0) != 0)) {
   break;
  }
  i15 = HEAP32[i27 + 12 >> 2] | 0;
  if ((i15 | 0) == (HEAP32[i27 + 16 >> 2] | 0)) {
   i28 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i27 >> 2] | 0) + 36 >> 2] & 127](i27) | 0;
  } else {
   i28 = HEAP32[i15 >> 2] | 0;
  }
  if (i7) {
   i29 = i28;
  } else {
   i29 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i5 >> 2] | 0) + 28 >> 2] & 31](i5, i28) | 0;
  }
  i15 = i10 + 1 | 0;
  if (i9) {
   i10 = i15;
   continue;
  }
  L46 : do {
   if (i7) {
    i17 = 0;
    i20 = i3;
    i16 = i21;
    i11 = i14;
    i19 = i13;
    while (1) {
     do {
      if ((HEAP8[i19] | 0) == 1) {
       i18 = HEAP8[i20] | 0;
       i30 = (i18 & 1) == 0;
       if (i30) {
        i31 = i20 + 4 | 0;
       } else {
        i31 = HEAP32[i20 + 8 >> 2] | 0;
       }
       if ((i29 | 0) != (HEAP32[i31 + (i10 << 2) >> 2] | 0)) {
        HEAP8[i19] = 0;
        i32 = i17;
        i33 = i16;
        i34 = i11 + -1 | 0;
        break;
       }
       if (i30) {
        i35 = (i18 & 255) >>> 1;
       } else {
        i35 = HEAP32[i20 + 4 >> 2] | 0;
       }
       if ((i35 | 0) == (i15 | 0)) {
        HEAP8[i19] = 2;
        i32 = 1;
        i33 = i16 + 1 | 0;
        i34 = i11 + -1 | 0;
       } else {
        i32 = 1;
        i33 = i16;
        i34 = i11;
       }
      } else {
       i32 = i17;
       i33 = i16;
       i34 = i11;
      }
     } while (0);
     i18 = i20 + 12 | 0;
     if ((i18 | 0) == (i4 | 0)) {
      i36 = i32;
      i37 = i33;
      i38 = i34;
      break L46;
     }
     i17 = i32;
     i20 = i18;
     i16 = i33;
     i11 = i34;
     i19 = i19 + 1 | 0;
    }
   } else {
    i19 = 0;
    i11 = i3;
    i16 = i21;
    i20 = i14;
    i17 = i13;
    while (1) {
     do {
      if ((HEAP8[i17] | 0) == 1) {
       if ((HEAP8[i11] & 1) == 0) {
        i39 = i11 + 4 | 0;
       } else {
        i39 = HEAP32[i11 + 8 >> 2] | 0;
       }
       if ((i29 | 0) != (FUNCTION_TABLE_iii[HEAP32[(HEAP32[i5 >> 2] | 0) + 28 >> 2] & 31](i5, HEAP32[i39 + (i10 << 2) >> 2] | 0) | 0)) {
        HEAP8[i17] = 0;
        i40 = i19;
        i41 = i16;
        i42 = i20 + -1 | 0;
        break;
       }
       i18 = HEAP8[i11] | 0;
       if ((i18 & 1) == 0) {
        i43 = (i18 & 255) >>> 1;
       } else {
        i43 = HEAP32[i11 + 4 >> 2] | 0;
       }
       if ((i43 | 0) == (i15 | 0)) {
        HEAP8[i17] = 2;
        i40 = 1;
        i41 = i16 + 1 | 0;
        i42 = i20 + -1 | 0;
       } else {
        i40 = 1;
        i41 = i16;
        i42 = i20;
       }
      } else {
       i40 = i19;
       i41 = i16;
       i42 = i20;
      }
     } while (0);
     i18 = i11 + 12 | 0;
     if ((i18 | 0) == (i4 | 0)) {
      i36 = i40;
      i37 = i41;
      i38 = i42;
      break L46;
     }
     i19 = i40;
     i11 = i18;
     i16 = i41;
     i20 = i42;
     i17 = i17 + 1 | 0;
    }
   }
  } while (0);
  if (!i36) {
   i10 = i15;
   i21 = i37;
   i14 = i38;
   continue;
  }
  i17 = HEAP32[i1 >> 2] | 0;
  i20 = i17 + 12 | 0;
  i16 = HEAP32[i20 >> 2] | 0;
  if ((i16 | 0) == (HEAP32[i17 + 16 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[i17 >> 2] | 0) + 40 >> 2] & 127](i17) | 0;
  } else {
   HEAP32[i20 >> 2] = i16 + 4;
  }
  if ((i38 + i37 | 0) >>> 0 < 2) {
   i10 = i15;
   i21 = i37;
   i14 = i38;
   continue;
  } else {
   i44 = i3;
   i45 = i37;
   i46 = i13;
  }
  while (1) {
   if ((HEAP8[i46] | 0) == 2) {
    i16 = HEAP8[i44] | 0;
    if ((i16 & 1) == 0) {
     i47 = (i16 & 255) >>> 1;
    } else {
     i47 = HEAP32[i44 + 4 >> 2] | 0;
    }
    if ((i47 | 0) == (i15 | 0)) {
     i48 = i45;
    } else {
     HEAP8[i46] = 0;
     i48 = i45 + -1 | 0;
    }
   } else {
    i48 = i45;
   }
   i16 = i44 + 12 | 0;
   if ((i16 | 0) == (i4 | 0)) {
    i10 = i15;
    i21 = i48;
    i14 = i38;
    continue L17;
   } else {
    i44 = i16;
    i45 = i48;
    i46 = i46 + 1 | 0;
   }
  }
 }
 do {
  if ((i27 | 0) == 0) {
   i49 = 1;
  } else {
   i46 = HEAP32[i27 + 12 >> 2] | 0;
   if ((i46 | 0) == (HEAP32[i27 + 16 >> 2] | 0)) {
    i50 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i27 >> 2] | 0) + 36 >> 2] & 127](i27) | 0;
   } else {
    i50 = HEAP32[i46 >> 2] | 0;
   }
   if ((i50 | 0) == -1) {
    HEAP32[i1 >> 2] = 0;
    i49 = 1;
    break;
   } else {
    i49 = (HEAP32[i1 >> 2] | 0) == 0;
    break;
   }
  }
 } while (0);
 do {
  if ((i24 | 0) == 0) {
   i51 = 85;
  } else {
   i1 = HEAP32[i24 + 12 >> 2] | 0;
   if ((i1 | 0) == (HEAP32[i24 + 16 >> 2] | 0)) {
    i52 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i24 >> 2] | 0) + 36 >> 2] & 127](i24) | 0;
   } else {
    i52 = HEAP32[i1 >> 2] | 0;
   }
   if ((i52 | 0) == -1) {
    HEAP32[i2 >> 2] = 0;
    i51 = 85;
    break;
   } else {
    if (i49) {
     break;
    } else {
     i51 = 87;
     break;
    }
   }
  }
 } while (0);
 if ((i51 | 0) == 85) {
  if (i49) {
   i51 = 87;
  }
 }
 if ((i51 | 0) == 87) {
  HEAP32[i6 >> 2] = HEAP32[i6 >> 2] | 2;
 }
 L124 : do {
  if (i9) {
   i51 = 92;
  } else {
   if ((HEAP8[i13] | 0) == 2) {
    i53 = i3;
   } else {
    i49 = i3;
    i2 = i13;
    while (1) {
     i52 = i49 + 12 | 0;
     i24 = i2 + 1 | 0;
     if ((i52 | 0) == (i4 | 0)) {
      i51 = 92;
      break L124;
     }
     if ((HEAP8[i24] | 0) == 2) {
      i53 = i52;
      break;
     } else {
      i49 = i52;
      i2 = i24;
     }
    }
   }
  }
 } while (0);
 if ((i51 | 0) == 92) {
  HEAP32[i6 >> 2] = HEAP32[i6 >> 2] | 4;
  i53 = i4;
 }
 if ((i12 | 0) == 0) {
  STACKTOP = i8;
  return i53 | 0;
 }
 _free(i12);
 STACKTOP = i8;
 return i53 | 0;
}
function __ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb(i1, i2, i3, i4, i5, i6, i7) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 var i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0, i49 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 i9 = i8;
 i10 = (i4 - i3 | 0) / 12 | 0;
 if (i10 >>> 0 > 100) {
  i11 = _malloc(i10) | 0;
  if ((i11 | 0) == 0) {
   __ZSt17__throw_bad_allocv();
  } else {
   i12 = i11;
   i13 = i11;
  }
 } else {
  i12 = 0;
  i13 = i9;
 }
 i9 = (i3 | 0) == (i4 | 0);
 if (i9) {
  i14 = 0;
  i15 = i10;
 } else {
  i11 = i3;
  i16 = 0;
  i17 = i10;
  i10 = i13;
  while (1) {
   i18 = HEAP8[i11] | 0;
   if ((i18 & 1) == 0) {
    i19 = (i18 & 255) >>> 1;
   } else {
    i19 = HEAP32[i11 + 4 >> 2] | 0;
   }
   if ((i19 | 0) == 0) {
    HEAP8[i10] = 2;
    i20 = i16 + 1 | 0;
    i21 = i17 + -1 | 0;
   } else {
    HEAP8[i10] = 1;
    i20 = i16;
    i21 = i17;
   }
   i18 = i11 + 12 | 0;
   if ((i18 | 0) == (i4 | 0)) {
    i14 = i20;
    i15 = i21;
    break;
   } else {
    i11 = i18;
    i16 = i20;
    i17 = i21;
    i10 = i10 + 1 | 0;
   }
  }
 }
 i10 = 0;
 i21 = i14;
 i14 = i15;
 L17 : while (1) {
  i15 = HEAP32[i1 >> 2] | 0;
  do {
   if ((i15 | 0) == 0) {
    i22 = 0;
   } else {
    if ((HEAP32[i15 + 12 >> 2] | 0) == (HEAP32[i15 + 16 >> 2] | 0)) {
     if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i15 >> 2] | 0) + 36 >> 2] & 127](i15) | 0) == -1) {
      HEAP32[i1 >> 2] = 0;
      i22 = 0;
      break;
     } else {
      i22 = HEAP32[i1 >> 2] | 0;
      break;
     }
    } else {
     i22 = i15;
    }
   }
  } while (0);
  i15 = (i22 | 0) == 0;
  i17 = HEAP32[i2 >> 2] | 0;
  if ((i17 | 0) == 0) {
   i23 = 0;
  } else {
   if ((HEAP32[i17 + 12 >> 2] | 0) == (HEAP32[i17 + 16 >> 2] | 0)) {
    if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i17 >> 2] | 0) + 36 >> 2] & 127](i17) | 0) == -1) {
     HEAP32[i2 >> 2] = 0;
     i23 = 0;
    } else {
     i23 = i17;
    }
   } else {
    i23 = i17;
   }
  }
  i24 = (i23 | 0) == 0;
  i25 = HEAP32[i1 >> 2] | 0;
  if (!((i15 ^ i24) & (i14 | 0) != 0)) {
   break;
  }
  i15 = HEAP32[i25 + 12 >> 2] | 0;
  if ((i15 | 0) == (HEAP32[i25 + 16 >> 2] | 0)) {
   i26 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i25 >> 2] | 0) + 36 >> 2] & 127](i25) | 0;
  } else {
   i26 = HEAPU8[i15] | 0;
  }
  i15 = i26 & 255;
  if (i7) {
   i27 = i15;
  } else {
   i27 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i5 >> 2] | 0) + 12 >> 2] & 31](i5, i15) | 0;
  }
  i15 = i10 + 1 | 0;
  if (i9) {
   i10 = i15;
   continue;
  }
  L40 : do {
   if (i7) {
    i17 = 0;
    i20 = i3;
    i16 = i21;
    i11 = i14;
    i19 = i13;
    while (1) {
     do {
      if ((HEAP8[i19] | 0) == 1) {
       i18 = HEAP8[i20] | 0;
       i28 = (i18 & 1) == 0;
       if (i28) {
        i29 = i20 + 1 | 0;
       } else {
        i29 = HEAP32[i20 + 8 >> 2] | 0;
       }
       if (!(i27 << 24 >> 24 == (HEAP8[i29 + i10 | 0] | 0))) {
        HEAP8[i19] = 0;
        i30 = i17;
        i31 = i16;
        i32 = i11 + -1 | 0;
        break;
       }
       if (i28) {
        i33 = (i18 & 255) >>> 1;
       } else {
        i33 = HEAP32[i20 + 4 >> 2] | 0;
       }
       if ((i33 | 0) == (i15 | 0)) {
        HEAP8[i19] = 2;
        i30 = 1;
        i31 = i16 + 1 | 0;
        i32 = i11 + -1 | 0;
       } else {
        i30 = 1;
        i31 = i16;
        i32 = i11;
       }
      } else {
       i30 = i17;
       i31 = i16;
       i32 = i11;
      }
     } while (0);
     i18 = i20 + 12 | 0;
     if ((i18 | 0) == (i4 | 0)) {
      i34 = i30;
      i35 = i31;
      i36 = i32;
      break L40;
     }
     i17 = i30;
     i20 = i18;
     i16 = i31;
     i11 = i32;
     i19 = i19 + 1 | 0;
    }
   } else {
    i19 = 0;
    i11 = i3;
    i16 = i21;
    i20 = i14;
    i17 = i13;
    while (1) {
     do {
      if ((HEAP8[i17] | 0) == 1) {
       if ((HEAP8[i11] & 1) == 0) {
        i37 = i11 + 1 | 0;
       } else {
        i37 = HEAP32[i11 + 8 >> 2] | 0;
       }
       if (!(i27 << 24 >> 24 == (FUNCTION_TABLE_iii[HEAP32[(HEAP32[i5 >> 2] | 0) + 12 >> 2] & 31](i5, HEAP8[i37 + i10 | 0] | 0) | 0) << 24 >> 24)) {
        HEAP8[i17] = 0;
        i38 = i19;
        i39 = i16;
        i40 = i20 + -1 | 0;
        break;
       }
       i18 = HEAP8[i11] | 0;
       if ((i18 & 1) == 0) {
        i41 = (i18 & 255) >>> 1;
       } else {
        i41 = HEAP32[i11 + 4 >> 2] | 0;
       }
       if ((i41 | 0) == (i15 | 0)) {
        HEAP8[i17] = 2;
        i38 = 1;
        i39 = i16 + 1 | 0;
        i40 = i20 + -1 | 0;
       } else {
        i38 = 1;
        i39 = i16;
        i40 = i20;
       }
      } else {
       i38 = i19;
       i39 = i16;
       i40 = i20;
      }
     } while (0);
     i18 = i11 + 12 | 0;
     if ((i18 | 0) == (i4 | 0)) {
      i34 = i38;
      i35 = i39;
      i36 = i40;
      break L40;
     }
     i19 = i38;
     i11 = i18;
     i16 = i39;
     i20 = i40;
     i17 = i17 + 1 | 0;
    }
   }
  } while (0);
  if (!i34) {
   i10 = i15;
   i21 = i35;
   i14 = i36;
   continue;
  }
  i17 = HEAP32[i1 >> 2] | 0;
  i20 = i17 + 12 | 0;
  i16 = HEAP32[i20 >> 2] | 0;
  if ((i16 | 0) == (HEAP32[i17 + 16 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[i17 >> 2] | 0) + 40 >> 2] & 127](i17) | 0;
  } else {
   HEAP32[i20 >> 2] = i16 + 1;
  }
  if ((i36 + i35 | 0) >>> 0 < 2) {
   i10 = i15;
   i21 = i35;
   i14 = i36;
   continue;
  } else {
   i42 = i3;
   i43 = i35;
   i44 = i13;
  }
  while (1) {
   if ((HEAP8[i44] | 0) == 2) {
    i16 = HEAP8[i42] | 0;
    if ((i16 & 1) == 0) {
     i45 = (i16 & 255) >>> 1;
    } else {
     i45 = HEAP32[i42 + 4 >> 2] | 0;
    }
    if ((i45 | 0) == (i15 | 0)) {
     i46 = i43;
    } else {
     HEAP8[i44] = 0;
     i46 = i43 + -1 | 0;
    }
   } else {
    i46 = i43;
   }
   i16 = i42 + 12 | 0;
   if ((i16 | 0) == (i4 | 0)) {
    i10 = i15;
    i21 = i46;
    i14 = i36;
    continue L17;
   } else {
    i42 = i16;
    i43 = i46;
    i44 = i44 + 1 | 0;
   }
  }
 }
 do {
  if ((i25 | 0) == 0) {
   i47 = 0;
  } else {
   if ((HEAP32[i25 + 12 >> 2] | 0) == (HEAP32[i25 + 16 >> 2] | 0)) {
    if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i25 >> 2] | 0) + 36 >> 2] & 127](i25) | 0) == -1) {
     HEAP32[i1 >> 2] = 0;
     i47 = 0;
     break;
    } else {
     i47 = HEAP32[i1 >> 2] | 0;
     break;
    }
   } else {
    i47 = i25;
   }
  }
 } while (0);
 i25 = (i47 | 0) == 0;
 do {
  if (i24) {
   i48 = 78;
  } else {
   if ((HEAP32[i23 + 12 >> 2] | 0) != (HEAP32[i23 + 16 >> 2] | 0)) {
    if (i25) {
     break;
    } else {
     i48 = 80;
     break;
    }
   }
   if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i23 >> 2] | 0) + 36 >> 2] & 127](i23) | 0) == -1) {
    HEAP32[i2 >> 2] = 0;
    i48 = 78;
    break;
   } else {
    if (i25) {
     break;
    } else {
     i48 = 80;
     break;
    }
   }
  }
 } while (0);
 if ((i48 | 0) == 78) {
  if (i25) {
   i48 = 80;
  }
 }
 if ((i48 | 0) == 80) {
  HEAP32[i6 >> 2] = HEAP32[i6 >> 2] | 2;
 }
 L114 : do {
  if (i9) {
   i48 = 85;
  } else {
   if ((HEAP8[i13] | 0) == 2) {
    i49 = i3;
   } else {
    i25 = i3;
    i2 = i13;
    while (1) {
     i23 = i25 + 12 | 0;
     i24 = i2 + 1 | 0;
     if ((i23 | 0) == (i4 | 0)) {
      i48 = 85;
      break L114;
     }
     if ((HEAP8[i24] | 0) == 2) {
      i49 = i23;
      break;
     } else {
      i25 = i23;
      i2 = i24;
     }
    }
   }
  }
 } while (0);
 if ((i48 | 0) == 85) {
  HEAP32[i6 >> 2] = HEAP32[i6 >> 2] | 4;
  i49 = i4;
 }
 if ((i12 | 0) == 0) {
  STACKTOP = i8;
  return i49 | 0;
 }
 _free(i12);
 STACKTOP = i8;
 return i49 | 0;
}
function __ZNSt3__19__num_putIwE23__widen_and_group_floatEPcS2_S2_PwRS3_S4_RKNS_6localeE(i1, i2, i3, i4, i5, i6, i7) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 var i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i9 = i8;
 i10 = i8 + 12 | 0;
 i11 = HEAP32[i7 >> 2] | 0;
 if (!((HEAP32[1456] | 0) == -1)) {
  HEAP32[i9 >> 2] = 5824;
  HEAP32[i9 + 4 >> 2] = 118;
  HEAP32[i9 + 8 >> 2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(5824, i9, 119);
 }
 i12 = (HEAP32[5828 >> 2] | 0) + -1 | 0;
 i13 = HEAP32[i11 + 8 >> 2] | 0;
 if (!((HEAP32[i11 + 12 >> 2] | 0) - i13 >> 2 >>> 0 > i12 >>> 0)) {
  i14 = ___cxa_allocate_exception(4) | 0;
  __ZNSt8bad_castC2Ev(i14);
  ___cxa_throw(i14 | 0, 13792, 107);
 }
 i11 = HEAP32[i13 + (i12 << 2) >> 2] | 0;
 if ((i11 | 0) == 0) {
  i14 = ___cxa_allocate_exception(4) | 0;
  __ZNSt8bad_castC2Ev(i14);
  ___cxa_throw(i14 | 0, 13792, 107);
 }
 i14 = HEAP32[i7 >> 2] | 0;
 if (!((HEAP32[1496] | 0) == -1)) {
  HEAP32[i9 >> 2] = 5984;
  HEAP32[i9 + 4 >> 2] = 118;
  HEAP32[i9 + 8 >> 2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(5984, i9, 119);
 }
 i9 = (HEAP32[5988 >> 2] | 0) + -1 | 0;
 i7 = HEAP32[i14 + 8 >> 2] | 0;
 if (!((HEAP32[i14 + 12 >> 2] | 0) - i7 >> 2 >>> 0 > i9 >>> 0)) {
  i15 = ___cxa_allocate_exception(4) | 0;
  __ZNSt8bad_castC2Ev(i15);
  ___cxa_throw(i15 | 0, 13792, 107);
 }
 i14 = HEAP32[i7 + (i9 << 2) >> 2] | 0;
 if ((i14 | 0) == 0) {
  i15 = ___cxa_allocate_exception(4) | 0;
  __ZNSt8bad_castC2Ev(i15);
  ___cxa_throw(i15 | 0, 13792, 107);
 }
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[i14 >> 2] | 0) + 20 >> 2] & 63](i10, i14);
 HEAP32[i6 >> 2] = i4;
 i15 = HEAP8[i1] | 0;
 if (i15 << 24 >> 24 == 43 | i15 << 24 >> 24 == 45) {
  i9 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i11 >> 2] | 0) + 44 >> 2] & 31](i11, i15) | 0;
  i15 = HEAP32[i6 >> 2] | 0;
  HEAP32[i6 >> 2] = i15 + 4;
  HEAP32[i15 >> 2] = i9;
  i16 = i1 + 1 | 0;
 } else {
  i16 = i1;
 }
 i9 = i3;
 L22 : do {
  if ((i9 - i16 | 0) > 1) {
   if ((HEAP8[i16] | 0) == 48) {
    i15 = i16 + 1 | 0;
    i7 = HEAP8[i15] | 0;
    if (i7 << 24 >> 24 == 88 | i7 << 24 >> 24 == 120) {
     i7 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i11 >> 2] | 0) + 44 >> 2] & 31](i11, 48) | 0;
     i12 = HEAP32[i6 >> 2] | 0;
     HEAP32[i6 >> 2] = i12 + 4;
     HEAP32[i12 >> 2] = i7;
     i7 = i16 + 2 | 0;
     i12 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i11 >> 2] | 0) + 44 >> 2] & 31](i11, HEAP8[i15] | 0) | 0;
     i15 = HEAP32[i6 >> 2] | 0;
     HEAP32[i6 >> 2] = i15 + 4;
     HEAP32[i15 >> 2] = i12;
     if (i7 >>> 0 < i3 >>> 0) {
      i12 = i7;
      while (1) {
       i15 = HEAP8[i12] | 0;
       if ((HEAP8[5728] | 0) == 0) {
        if ((___cxa_guard_acquire(5728) | 0) != 0) {
         HEAP32[1430] = _newlocale(2147483647, 5736, 0) | 0;
         ___cxa_guard_release(5728);
        }
       }
       i13 = i12 + 1 | 0;
       if ((_isxdigit_l(i15 << 24 >> 24 | 0, HEAP32[1430] | 0) | 0) == 0) {
        i17 = i7;
        i18 = i12;
        break L22;
       }
       if (i13 >>> 0 < i3 >>> 0) {
        i12 = i13;
       } else {
        i17 = i7;
        i18 = i13;
        break;
       }
      }
     } else {
      i17 = i7;
      i18 = i7;
     }
    } else {
     i19 = 14;
    }
   } else {
    i19 = 14;
   }
  } else {
   i19 = 14;
  }
 } while (0);
 L33 : do {
  if ((i19 | 0) == 14) {
   if (i16 >>> 0 < i3 >>> 0) {
    i12 = i16;
    while (1) {
     i13 = HEAP8[i12] | 0;
     if ((HEAP8[5728] | 0) == 0) {
      if ((___cxa_guard_acquire(5728) | 0) != 0) {
       HEAP32[1430] = _newlocale(2147483647, 5736, 0) | 0;
       ___cxa_guard_release(5728);
      }
     }
     i15 = i12 + 1 | 0;
     if ((_isdigit_l(i13 << 24 >> 24 | 0, HEAP32[1430] | 0) | 0) == 0) {
      i17 = i16;
      i18 = i12;
      break L33;
     }
     if (i15 >>> 0 < i3 >>> 0) {
      i12 = i15;
     } else {
      i17 = i16;
      i18 = i15;
      break;
     }
    }
   } else {
    i17 = i16;
    i18 = i16;
   }
  }
 } while (0);
 i16 = HEAP8[i10] | 0;
 if ((i16 & 1) == 0) {
  i20 = (i16 & 255) >>> 1;
 } else {
  i20 = HEAP32[i10 + 4 >> 2] | 0;
 }
 if ((i20 | 0) == 0) {
  FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[i11 >> 2] | 0) + 48 >> 2] & 7](i11, i17, i18, HEAP32[i6 >> 2] | 0) | 0;
  i20 = (HEAP32[i6 >> 2] | 0) + (i18 - i17 << 2) | 0;
  HEAP32[i6 >> 2] = i20;
  i21 = i20;
 } else {
  if ((i17 | 0) != (i18 | 0)) {
   i20 = i18 + -1 | 0;
   if (i20 >>> 0 > i17 >>> 0) {
    i16 = i17;
    i19 = i20;
    do {
     i20 = HEAP8[i16] | 0;
     HEAP8[i16] = HEAP8[i19] | 0;
     HEAP8[i19] = i20;
     i16 = i16 + 1 | 0;
     i19 = i19 + -1 | 0;
    } while (i16 >>> 0 < i19 >>> 0);
   }
  }
  i19 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i14 >> 2] | 0) + 16 >> 2] & 127](i14) | 0;
  if (i17 >>> 0 < i18 >>> 0) {
   i16 = i10 + 1 | 0;
   i20 = i10 + 4 | 0;
   i12 = i10 + 8 | 0;
   i7 = 0;
   i15 = 0;
   i13 = i17;
   while (1) {
    i22 = (HEAP8[i10] & 1) == 0;
    if ((HEAP8[(i22 ? i16 : HEAP32[i12 >> 2] | 0) + i15 | 0] | 0) > 0) {
     if ((i7 | 0) == (HEAP8[(i22 ? i16 : HEAP32[i12 >> 2] | 0) + i15 | 0] | 0)) {
      i22 = HEAP32[i6 >> 2] | 0;
      HEAP32[i6 >> 2] = i22 + 4;
      HEAP32[i22 >> 2] = i19;
      i22 = HEAP8[i10] | 0;
      if ((i22 & 1) == 0) {
       i23 = (i22 & 255) >>> 1;
      } else {
       i23 = HEAP32[i20 >> 2] | 0;
      }
      i24 = 0;
      i25 = (i15 >>> 0 < (i23 + -1 | 0) >>> 0) + i15 | 0;
     } else {
      i24 = i7;
      i25 = i15;
     }
    } else {
     i24 = i7;
     i25 = i15;
    }
    i22 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i11 >> 2] | 0) + 44 >> 2] & 31](i11, HEAP8[i13] | 0) | 0;
    i26 = HEAP32[i6 >> 2] | 0;
    i27 = i26 + 4 | 0;
    HEAP32[i6 >> 2] = i27;
    HEAP32[i26 >> 2] = i22;
    i22 = i13 + 1 | 0;
    if (i22 >>> 0 < i18 >>> 0) {
     i7 = i24 + 1 | 0;
     i15 = i25;
     i13 = i22;
    } else {
     i28 = i27;
     break;
    }
   }
  } else {
   i28 = HEAP32[i6 >> 2] | 0;
  }
  i13 = i4 + (i17 - i1 << 2) | 0;
  if ((i13 | 0) == (i28 | 0)) {
   i21 = i28;
  } else {
   i17 = i28 + -4 | 0;
   if (i17 >>> 0 > i13 >>> 0) {
    i25 = i13;
    i13 = i17;
    while (1) {
     i17 = HEAP32[i25 >> 2] | 0;
     HEAP32[i25 >> 2] = HEAP32[i13 >> 2];
     HEAP32[i13 >> 2] = i17;
     i17 = i25 + 4 | 0;
     i15 = i13 + -4 | 0;
     if (i17 >>> 0 < i15 >>> 0) {
      i25 = i17;
      i13 = i15;
     } else {
      i21 = i28;
      break;
     }
    }
   } else {
    i21 = i28;
   }
  }
 }
 L73 : do {
  if (i18 >>> 0 < i3 >>> 0) {
   i28 = i18;
   while (1) {
    i13 = HEAP8[i28] | 0;
    if (i13 << 24 >> 24 == 46) {
     break;
    }
    i25 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i11 >> 2] | 0) + 44 >> 2] & 31](i11, i13) | 0;
    i13 = HEAP32[i6 >> 2] | 0;
    i15 = i13 + 4 | 0;
    HEAP32[i6 >> 2] = i15;
    HEAP32[i13 >> 2] = i25;
    i25 = i28 + 1 | 0;
    if (i25 >>> 0 < i3 >>> 0) {
     i28 = i25;
    } else {
     i29 = i15;
     i30 = i25;
     break L73;
    }
   }
   i25 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i14 >> 2] | 0) + 12 >> 2] & 127](i14) | 0;
   i15 = HEAP32[i6 >> 2] | 0;
   i13 = i15 + 4 | 0;
   HEAP32[i6 >> 2] = i13;
   HEAP32[i15 >> 2] = i25;
   i29 = i13;
   i30 = i28 + 1 | 0;
  } else {
   i29 = i21;
   i30 = i18;
  }
 } while (0);
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[i11 >> 2] | 0) + 48 >> 2] & 7](i11, i30, i3, i29) | 0;
 i29 = (HEAP32[i6 >> 2] | 0) + (i9 - i30 << 2) | 0;
 HEAP32[i6 >> 2] = i29;
 if ((i2 | 0) == (i3 | 0)) {
  i31 = i29;
  HEAP32[i5 >> 2] = i31;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i10);
  STACKTOP = i8;
  return;
 }
 i31 = i4 + (i2 - i1 << 2) | 0;
 HEAP32[i5 >> 2] = i31;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i10);
 STACKTOP = i8;
 return;
}
function __ZNSt3__19__num_putIcE23__widen_and_group_floatEPcS2_S2_S2_RS2_S3_RKNS_6localeE(i1, i2, i3, i4, i5, i6, i7) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 var i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i9 = i8;
 i10 = i8 + 12 | 0;
 i11 = HEAP32[i7 >> 2] | 0;
 if (!((HEAP32[1458] | 0) == -1)) {
  HEAP32[i9 >> 2] = 5832;
  HEAP32[i9 + 4 >> 2] = 118;
  HEAP32[i9 + 8 >> 2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(5832, i9, 119);
 }
 i12 = (HEAP32[5836 >> 2] | 0) + -1 | 0;
 i13 = HEAP32[i11 + 8 >> 2] | 0;
 if (!((HEAP32[i11 + 12 >> 2] | 0) - i13 >> 2 >>> 0 > i12 >>> 0)) {
  i14 = ___cxa_allocate_exception(4) | 0;
  __ZNSt8bad_castC2Ev(i14);
  ___cxa_throw(i14 | 0, 13792, 107);
 }
 i11 = HEAP32[i13 + (i12 << 2) >> 2] | 0;
 if ((i11 | 0) == 0) {
  i14 = ___cxa_allocate_exception(4) | 0;
  __ZNSt8bad_castC2Ev(i14);
  ___cxa_throw(i14 | 0, 13792, 107);
 }
 i14 = HEAP32[i7 >> 2] | 0;
 if (!((HEAP32[1494] | 0) == -1)) {
  HEAP32[i9 >> 2] = 5976;
  HEAP32[i9 + 4 >> 2] = 118;
  HEAP32[i9 + 8 >> 2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(5976, i9, 119);
 }
 i9 = (HEAP32[5980 >> 2] | 0) + -1 | 0;
 i7 = HEAP32[i14 + 8 >> 2] | 0;
 if (!((HEAP32[i14 + 12 >> 2] | 0) - i7 >> 2 >>> 0 > i9 >>> 0)) {
  i15 = ___cxa_allocate_exception(4) | 0;
  __ZNSt8bad_castC2Ev(i15);
  ___cxa_throw(i15 | 0, 13792, 107);
 }
 i14 = HEAP32[i7 + (i9 << 2) >> 2] | 0;
 if ((i14 | 0) == 0) {
  i15 = ___cxa_allocate_exception(4) | 0;
  __ZNSt8bad_castC2Ev(i15);
  ___cxa_throw(i15 | 0, 13792, 107);
 }
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[i14 >> 2] | 0) + 20 >> 2] & 63](i10, i14);
 HEAP32[i6 >> 2] = i4;
 i15 = HEAP8[i1] | 0;
 if (i15 << 24 >> 24 == 43 | i15 << 24 >> 24 == 45) {
  i9 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i11 >> 2] | 0) + 28 >> 2] & 31](i11, i15) | 0;
  i15 = HEAP32[i6 >> 2] | 0;
  HEAP32[i6 >> 2] = i15 + 1;
  HEAP8[i15] = i9;
  i16 = i1 + 1 | 0;
 } else {
  i16 = i1;
 }
 i9 = i3;
 L22 : do {
  if ((i9 - i16 | 0) > 1) {
   if ((HEAP8[i16] | 0) == 48) {
    i15 = i16 + 1 | 0;
    i7 = HEAP8[i15] | 0;
    if (i7 << 24 >> 24 == 88 | i7 << 24 >> 24 == 120) {
     i7 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i11 >> 2] | 0) + 28 >> 2] & 31](i11, 48) | 0;
     i12 = HEAP32[i6 >> 2] | 0;
     HEAP32[i6 >> 2] = i12 + 1;
     HEAP8[i12] = i7;
     i7 = i16 + 2 | 0;
     i12 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i11 >> 2] | 0) + 28 >> 2] & 31](i11, HEAP8[i15] | 0) | 0;
     i15 = HEAP32[i6 >> 2] | 0;
     HEAP32[i6 >> 2] = i15 + 1;
     HEAP8[i15] = i12;
     if (i7 >>> 0 < i3 >>> 0) {
      i12 = i7;
      while (1) {
       i15 = HEAP8[i12] | 0;
       if ((HEAP8[5728] | 0) == 0) {
        if ((___cxa_guard_acquire(5728) | 0) != 0) {
         HEAP32[1430] = _newlocale(2147483647, 5736, 0) | 0;
         ___cxa_guard_release(5728);
        }
       }
       i13 = i12 + 1 | 0;
       if ((_isxdigit_l(i15 << 24 >> 24 | 0, HEAP32[1430] | 0) | 0) == 0) {
        i17 = i7;
        i18 = i12;
        break L22;
       }
       if (i13 >>> 0 < i3 >>> 0) {
        i12 = i13;
       } else {
        i17 = i7;
        i18 = i13;
        break;
       }
      }
     } else {
      i17 = i7;
      i18 = i7;
     }
    } else {
     i19 = 14;
    }
   } else {
    i19 = 14;
   }
  } else {
   i19 = 14;
  }
 } while (0);
 L33 : do {
  if ((i19 | 0) == 14) {
   if (i16 >>> 0 < i3 >>> 0) {
    i12 = i16;
    while (1) {
     i13 = HEAP8[i12] | 0;
     if ((HEAP8[5728] | 0) == 0) {
      if ((___cxa_guard_acquire(5728) | 0) != 0) {
       HEAP32[1430] = _newlocale(2147483647, 5736, 0) | 0;
       ___cxa_guard_release(5728);
      }
     }
     i15 = i12 + 1 | 0;
     if ((_isdigit_l(i13 << 24 >> 24 | 0, HEAP32[1430] | 0) | 0) == 0) {
      i17 = i16;
      i18 = i12;
      break L33;
     }
     if (i15 >>> 0 < i3 >>> 0) {
      i12 = i15;
     } else {
      i17 = i16;
      i18 = i15;
      break;
     }
    }
   } else {
    i17 = i16;
    i18 = i16;
   }
  }
 } while (0);
 i16 = HEAP8[i10] | 0;
 if ((i16 & 1) == 0) {
  i20 = (i16 & 255) >>> 1;
 } else {
  i20 = HEAP32[i10 + 4 >> 2] | 0;
 }
 if ((i20 | 0) == 0) {
  FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[i11 >> 2] | 0) + 32 >> 2] & 7](i11, i17, i18, HEAP32[i6 >> 2] | 0) | 0;
  HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + (i18 - i17);
 } else {
  if ((i17 | 0) != (i18 | 0)) {
   i20 = i18 + -1 | 0;
   if (i20 >>> 0 > i17 >>> 0) {
    i16 = i17;
    i19 = i20;
    do {
     i20 = HEAP8[i16] | 0;
     HEAP8[i16] = HEAP8[i19] | 0;
     HEAP8[i19] = i20;
     i16 = i16 + 1 | 0;
     i19 = i19 + -1 | 0;
    } while (i16 >>> 0 < i19 >>> 0);
   }
  }
  i19 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i14 >> 2] | 0) + 16 >> 2] & 127](i14) | 0;
  if (i17 >>> 0 < i18 >>> 0) {
   i16 = i10 + 1 | 0;
   i20 = i10 + 4 | 0;
   i12 = i10 + 8 | 0;
   i7 = 0;
   i15 = 0;
   i13 = i17;
   while (1) {
    i21 = (HEAP8[i10] & 1) == 0;
    if ((HEAP8[(i21 ? i16 : HEAP32[i12 >> 2] | 0) + i15 | 0] | 0) > 0) {
     if ((i7 | 0) == (HEAP8[(i21 ? i16 : HEAP32[i12 >> 2] | 0) + i15 | 0] | 0)) {
      i21 = HEAP32[i6 >> 2] | 0;
      HEAP32[i6 >> 2] = i21 + 1;
      HEAP8[i21] = i19;
      i21 = HEAP8[i10] | 0;
      if ((i21 & 1) == 0) {
       i22 = (i21 & 255) >>> 1;
      } else {
       i22 = HEAP32[i20 >> 2] | 0;
      }
      i23 = 0;
      i24 = (i15 >>> 0 < (i22 + -1 | 0) >>> 0) + i15 | 0;
     } else {
      i23 = i7;
      i24 = i15;
     }
    } else {
     i23 = i7;
     i24 = i15;
    }
    i21 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i11 >> 2] | 0) + 28 >> 2] & 31](i11, HEAP8[i13] | 0) | 0;
    i25 = HEAP32[i6 >> 2] | 0;
    HEAP32[i6 >> 2] = i25 + 1;
    HEAP8[i25] = i21;
    i13 = i13 + 1 | 0;
    if (!(i13 >>> 0 < i18 >>> 0)) {
     break;
    } else {
     i7 = i23 + 1 | 0;
     i15 = i24;
    }
   }
  }
  i24 = i4 + (i17 - i1) | 0;
  i17 = HEAP32[i6 >> 2] | 0;
  if ((i24 | 0) != (i17 | 0)) {
   i15 = i17 + -1 | 0;
   if (i15 >>> 0 > i24 >>> 0) {
    i17 = i24;
    i24 = i15;
    do {
     i15 = HEAP8[i17] | 0;
     HEAP8[i17] = HEAP8[i24] | 0;
     HEAP8[i24] = i15;
     i17 = i17 + 1 | 0;
     i24 = i24 + -1 | 0;
    } while (i17 >>> 0 < i24 >>> 0);
   }
  }
 }
 L72 : do {
  if (i18 >>> 0 < i3 >>> 0) {
   i24 = i18;
   while (1) {
    i17 = HEAP8[i24] | 0;
    if (i17 << 24 >> 24 == 46) {
     break;
    }
    i15 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i11 >> 2] | 0) + 28 >> 2] & 31](i11, i17) | 0;
    i17 = HEAP32[i6 >> 2] | 0;
    HEAP32[i6 >> 2] = i17 + 1;
    HEAP8[i17] = i15;
    i15 = i24 + 1 | 0;
    if (i15 >>> 0 < i3 >>> 0) {
     i24 = i15;
    } else {
     i26 = i15;
     break L72;
    }
   }
   i15 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i14 >> 2] | 0) + 12 >> 2] & 127](i14) | 0;
   i17 = HEAP32[i6 >> 2] | 0;
   HEAP32[i6 >> 2] = i17 + 1;
   HEAP8[i17] = i15;
   i26 = i24 + 1 | 0;
  } else {
   i26 = i18;
  }
 } while (0);
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[i11 >> 2] | 0) + 32 >> 2] & 7](i11, i26, i3, HEAP32[i6 >> 2] | 0) | 0;
 i11 = (HEAP32[i6 >> 2] | 0) + (i9 - i26) | 0;
 HEAP32[i6 >> 2] = i11;
 if ((i2 | 0) == (i3 | 0)) {
  i27 = i11;
  HEAP32[i5 >> 2] = i27;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i10);
  STACKTOP = i8;
  return;
 }
 i27 = i4 + (i2 - i1) | 0;
 HEAP32[i5 >> 2] = i27;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i10);
 STACKTOP = i8;
 return;
}
function _main(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, d32 = 0.0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i4 = i3;
 i5 = i3 + 24 | 0;
 i6 = i3 + 16 | 0;
 HEAP32[i5 >> 2] = 0;
 i7 = i5 + 4 | 0;
 HEAP32[i7 >> 2] = 0;
 HEAP32[i6 >> 2] = 0;
 i8 = i6 + 4 | 0;
 HEAP32[i8 >> 2] = 0;
 do {
  if ((i1 | 0) > 1) {
   i9 = 0;
   i10 = 0;
   i11 = 1;
   L2 : while (1) {
    i12 = HEAP32[i2 + (i11 << 2) >> 2] | 0;
    if ((_strcmp(i12, 600) | 0) == 0) {
     i13 = 3;
     break;
    }
    if ((_strcmp(i12, 608) | 0) == 0) {
     i13 = 5;
     break;
    }
    do {
     if ((_strcmp(i12, 616) | 0) == 0) {
      HEAP8[48] = 1;
      i14 = i9;
      i15 = i10;
      i16 = i11;
     } else {
      if ((_strcmp(i12, 624) | 0) == 0) {
       i17 = i11 + 2 | 0;
       if ((i17 | 0) > (i1 | 0)) {
        i13 = 10;
        break L2;
       }
       i18 = HEAP32[i2 + (i11 + 1 << 2) >> 2] | 0;
       i19 = HEAP32[i2 + (i17 << 2) >> 2] | 0;
       if ((HEAP8[i18] | 0) == 45) {
        i13 = 13;
        break L2;
       }
       if ((HEAP8[i19] | 0) == 45) {
        i13 = 13;
        break L2;
       }
       i20 = __Z18ReadMatrixFromFilePcRi(i18, i7) | 0;
       HEAP32[i5 >> 2] = i20;
       i18 = __Z18ReadMatrixFromFilePcRi(i19, i8) | 0;
       HEAP32[i6 >> 2] = i18;
       i14 = i18;
       i15 = i20;
       i16 = i17;
       break;
      }
      if ((_strcmp(i12, 672) | 0) == 0) {
       i17 = i11 + 1 | 0;
       HEAP32[8] = _atoi(HEAP32[i2 + (i17 << 2) >> 2] | 0) | 0;
       i14 = i9;
       i15 = i10;
       i16 = i17;
       break;
      }
      if ((_strcmp(i12, 680) | 0) == 0) {
       i17 = i11 + 1 | 0;
       i20 = 1 << (_atoi(HEAP32[i2 + (i17 << 2) >> 2] | 0) | 0);
       i18 = i20 >>> 0 > 1073741823 ? -1 : i20 << 2;
       i19 = __Znaj(i18) | 0;
       if ((i20 | 0) > 0) {
        i21 = 0;
        while (1) {
         HEAP32[i19 + (i21 << 2) >> 2] = __Znaj(i18) | 0;
         i22 = i21 + 1 | 0;
         if ((i22 | 0) == (i20 | 0)) {
          i23 = 0;
          break;
         } else {
          i21 = i22;
         }
        }
        do {
         i21 = HEAP32[i19 + (i23 << 2) >> 2] | 0;
         i22 = 0;
         do {
          HEAP32[i21 + (i22 << 2) >> 2] = (_rand() | 0) & 15;
          i22 = i22 + 1 | 0;
         } while ((i22 | 0) != (i20 | 0));
         i23 = i23 + 1 | 0;
        } while ((i23 | 0) != (i20 | 0));
        HEAP32[i5 >> 2] = i19;
        i22 = __Znaj(i18) | 0;
        i21 = 0;
        while (1) {
         HEAP32[i22 + (i21 << 2) >> 2] = __Znaj(i18) | 0;
         i24 = i21 + 1 | 0;
         if ((i24 | 0) == (i20 | 0)) {
          i25 = 0;
          break;
         } else {
          i21 = i24;
         }
        }
        while (1) {
         i21 = HEAP32[i22 + (i25 << 2) >> 2] | 0;
         i24 = 0;
         do {
          HEAP32[i21 + (i24 << 2) >> 2] = (_rand() | 0) & 15;
          i24 = i24 + 1 | 0;
         } while ((i24 | 0) != (i20 | 0));
         i24 = i25 + 1 | 0;
         if ((i24 | 0) == (i20 | 0)) {
          i26 = i22;
          break;
         } else {
          i25 = i24;
         }
        }
       } else {
        HEAP32[i5 >> 2] = i19;
        i26 = __Znaj(i18) | 0;
       }
       HEAP32[i6 >> 2] = i26;
       HEAP32[i7 >> 2] = i20;
       HEAP32[i8 >> 2] = i20;
       i14 = i26;
       i15 = i19;
       i16 = i17;
      } else {
       i14 = i9;
       i15 = i10;
       i16 = i11;
      }
     }
    } while (0);
    i12 = i16 + 1 | 0;
    if ((i12 | 0) < (i1 | 0)) {
     i9 = i14;
     i10 = i15;
     i11 = i12;
    } else {
     i13 = 31;
     break;
    }
   }
   if ((i13 | 0) == 3) {
    __Z5Testsv();
    i27 = 0;
    STACKTOP = i3;
    return i27 | 0;
   } else if ((i13 | 0) == 5) {
    __Z10FindCutOffv();
    i27 = 0;
    STACKTOP = i3;
    return i27 | 0;
   } else if ((i13 | 0) == 10) {
    HEAP32[i4 >> 2] = i1 + -1 - i11;
    _printf(632, i4 | 0) | 0;
    i27 = -1;
    STACKTOP = i3;
    return i27 | 0;
   } else if ((i13 | 0) == 13) {
    _puts(1032) | 0;
    i27 = -1;
    STACKTOP = i3;
    return i27 | 0;
   } else if ((i13 | 0) == 31) {
    if ((i15 | 0) == 0) {
     i28 = i14;
     i13 = 32;
     break;
    } else {
     i29 = i14;
     break;
    }
   }
  } else {
   i28 = 0;
   i13 = 32;
  }
 } while (0);
 if ((i13 | 0) == 32) {
  i13 = __Znaj(4096) | 0;
  i14 = 0;
  while (1) {
   HEAP32[i13 + (i14 << 2) >> 2] = __Znaj(4096) | 0;
   i15 = i14 + 1 | 0;
   if ((i15 | 0) == 1024) {
    i30 = 0;
    break;
   } else {
    i14 = i15;
   }
  }
  do {
   i14 = HEAP32[i13 + (i30 << 2) >> 2] | 0;
   i15 = 0;
   do {
    HEAP32[i14 + (i15 << 2) >> 2] = (_rand() | 0) & 15;
    i15 = i15 + 1 | 0;
   } while ((i15 | 0) != 1024);
   i30 = i30 + 1 | 0;
  } while ((i30 | 0) != 1024);
  HEAP32[i5 >> 2] = i13;
  HEAP32[i7 >> 2] = 1024;
  i29 = i28;
 }
 if ((i29 | 0) == 0) {
  i29 = __Znaj(4096) | 0;
  i28 = 0;
  while (1) {
   HEAP32[i29 + (i28 << 2) >> 2] = __Znaj(4096) | 0;
   i13 = i28 + 1 | 0;
   if ((i13 | 0) == 1024) {
    i31 = 0;
    break;
   } else {
    i28 = i13;
   }
  }
  do {
   i28 = HEAP32[i29 + (i31 << 2) >> 2] | 0;
   i13 = 0;
   do {
    HEAP32[i28 + (i13 << 2) >> 2] = (_rand() | 0) & 15;
    i13 = i13 + 1 | 0;
   } while ((i13 | 0) != 1024);
   i31 = i31 + 1 | 0;
  } while ((i31 | 0) != 1024);
  HEAP32[i6 >> 2] = i29;
  HEAP32[i8 >> 2] = 1024;
 }
 d32 = +__Z21ExecuteMultiplicationRK6MatrixS1_PFiiPPiS3_S3_E(i5, i6, 6);
 HEAPF64[tempDoublePtr >> 3] = d32;
 HEAP32[i4 >> 2] = HEAP32[tempDoublePtr >> 2];
 HEAP32[i4 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
 _printf(688, i4 | 0) | 0;
 HEAP32[10] = HEAP32[8];
 d32 = +__Z21ExecuteMultiplicationRK6MatrixS1_PFiiPPiS3_S3_E(i5, i6, 7);
 HEAP32[i4 >> 2] = HEAP32[10];
 i29 = i4 + 4 | 0;
 HEAPF64[tempDoublePtr >> 3] = d32;
 HEAP32[i29 >> 2] = HEAP32[tempDoublePtr >> 2];
 HEAP32[i29 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
 _printf(712, i4 | 0) | 0;
 HEAP32[10] = HEAP32[8] >> 1;
 d32 = +__Z21ExecuteMultiplicationRK6MatrixS1_PFiiPPiS3_S3_E(i5, i6, 7);
 HEAP32[i4 >> 2] = HEAP32[10];
 i29 = i4 + 4 | 0;
 HEAPF64[tempDoublePtr >> 3] = d32;
 HEAP32[i29 >> 2] = HEAP32[tempDoublePtr >> 2];
 HEAP32[i29 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
 _printf(712, i4 | 0) | 0;
 HEAP32[10] = HEAP32[8] << 1;
 d32 = +__Z21ExecuteMultiplicationRK6MatrixS1_PFiiPPiS3_S3_E(i5, i6, 7);
 HEAP32[i4 >> 2] = HEAP32[10];
 i29 = i4 + 4 | 0;
 HEAPF64[tempDoublePtr >> 3] = d32;
 HEAP32[i29 >> 2] = HEAP32[tempDoublePtr >> 2];
 HEAP32[i29 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
 _printf(712, i4 | 0) | 0;
 i4 = HEAP32[i7 >> 2] | 0;
 i7 = HEAP32[i5 >> 2] | 0;
 if ((i7 | 0) != 0) {
  if ((i4 | 0) > 0) {
   i5 = 0;
   do {
    i29 = HEAP32[i7 + (i5 << 2) >> 2] | 0;
    if ((i29 | 0) != 0) {
     __ZdaPv(i29);
    }
    i5 = i5 + 1 | 0;
   } while ((i5 | 0) != (i4 | 0));
  }
  __ZdaPv(i7);
 }
 i7 = HEAP32[i8 >> 2] | 0;
 i8 = HEAP32[i6 >> 2] | 0;
 if ((i8 | 0) == 0) {
  i27 = 0;
  STACKTOP = i3;
  return i27 | 0;
 }
 if ((i7 | 0) > 0) {
  i6 = 0;
  do {
   i4 = HEAP32[i8 + (i6 << 2) >> 2] | 0;
   if ((i4 | 0) != 0) {
    __ZdaPv(i4);
   }
   i6 = i6 + 1 | 0;
  } while ((i6 | 0) != (i7 | 0));
 }
 __ZdaPv(i8);
 i27 = 0;
 STACKTOP = i3;
 return i27 | 0;
}
function _mbsrtowcs(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0, i49 = 0, i50 = 0, i51 = 0, i52 = 0, i53 = 0, i54 = 0, i55 = 0, i56 = 0, i57 = 0, i58 = 0, i59 = 0, i60 = 0;
 i5 = STACKTOP;
 i6 = HEAP32[i2 >> 2] | 0;
 if ((i4 | 0) == 0) {
  i7 = 5;
 } else {
  i8 = HEAP32[i4 >> 2] | 0;
  if ((i8 | 0) == 0) {
   i7 = 5;
  } else {
   if ((i1 | 0) == 0) {
    i9 = i3;
    i10 = i8;
    i11 = i6;
    i7 = 16;
   } else {
    HEAP32[i4 >> 2] = 0;
    i12 = i1;
    i13 = i3;
    i14 = i8;
    i15 = i6;
    i7 = 36;
   }
  }
 }
 if ((i7 | 0) == 5) {
  if ((i1 | 0) == 0) {
   i16 = i3;
   i17 = i6;
   i7 = 7;
  } else {
   i18 = i1;
   i19 = i3;
   i20 = i6;
   i7 = 6;
  }
 }
 L7 : while (1) {
  if ((i7 | 0) == 6) {
   i7 = 0;
   if ((i19 | 0) == 0) {
    i21 = i3;
    i7 = 53;
    break;
   } else {
    i22 = i18;
    i23 = i19;
    i24 = i20;
   }
   while (1) {
    i6 = HEAP8[i24] | 0;
    do {
     if (((i6 & 255) + -1 | 0) >>> 0 < 127) {
      if ((i24 & 3 | 0) == 0 & i23 >>> 0 > 3) {
       i8 = i22;
       i4 = i23;
       i25 = i24;
       while (1) {
        i26 = HEAP32[i25 >> 2] | 0;
        if (((i26 + -16843009 | i26) & -2139062144 | 0) != 0) {
         i7 = 30;
         break;
        }
        HEAP32[i8 >> 2] = i26 & 255;
        HEAP32[i8 + 4 >> 2] = HEAPU8[i25 + 1 | 0] | 0;
        HEAP32[i8 + 8 >> 2] = HEAPU8[i25 + 2 | 0] | 0;
        i27 = i25 + 4 | 0;
        i28 = i8 + 16 | 0;
        HEAP32[i8 + 12 >> 2] = HEAPU8[i25 + 3 | 0] | 0;
        i29 = i4 + -4 | 0;
        if (i29 >>> 0 > 3) {
         i8 = i28;
         i4 = i29;
         i25 = i27;
        } else {
         i7 = 31;
         break;
        }
       }
       if ((i7 | 0) == 30) {
        i7 = 0;
        i30 = i8;
        i31 = i4;
        i32 = i26 & 255;
        i33 = i25;
        break;
       } else if ((i7 | 0) == 31) {
        i7 = 0;
        i30 = i28;
        i31 = i29;
        i32 = HEAP8[i27] | 0;
        i33 = i27;
        break;
       }
      } else {
       i30 = i22;
       i31 = i23;
       i32 = i6;
       i33 = i24;
      }
     } else {
      i30 = i22;
      i31 = i23;
      i32 = i6;
      i33 = i24;
     }
    } while (0);
    i34 = i32 & 255;
    if (!((i34 + -1 | 0) >>> 0 < 127)) {
     break;
    }
    HEAP32[i30 >> 2] = i34;
    i6 = i31 + -1 | 0;
    if ((i6 | 0) == 0) {
     i21 = i3;
     i7 = 53;
     break L7;
    } else {
     i22 = i30 + 4 | 0;
     i23 = i6;
     i24 = i33 + 1 | 0;
    }
   }
   i6 = i34 + -194 | 0;
   if (i6 >>> 0 > 50) {
    i35 = i30;
    i36 = i31;
    i37 = i33;
    i7 = 47;
    break;
   }
   i12 = i30;
   i13 = i31;
   i14 = HEAP32[13488 + (i6 << 2) >> 2] | 0;
   i15 = i33 + 1 | 0;
   i7 = 36;
   continue;
  } else if ((i7 | 0) == 7) {
   i7 = 0;
   i6 = HEAP8[i17] | 0;
   if (((i6 & 255) + -1 | 0) >>> 0 < 127) {
    if ((i17 & 3 | 0) == 0) {
     i38 = HEAP32[i17 >> 2] | 0;
     if (((i38 + -16843009 | i38) & -2139062144 | 0) == 0) {
      i39 = i16;
      i40 = i17;
      while (1) {
       i41 = i40 + 4 | 0;
       i42 = i39 + -4 | 0;
       i43 = HEAP32[i41 >> 2] | 0;
       if (((i43 + -16843009 | i43) & -2139062144 | 0) == 0) {
        i39 = i42;
        i40 = i41;
       } else {
        i44 = i42;
        i45 = i43;
        i46 = i41;
        break;
       }
      }
     } else {
      i44 = i16;
      i45 = i38;
      i46 = i17;
     }
     i47 = i44;
     i48 = i45 & 255;
     i49 = i46;
    } else {
     i47 = i16;
     i48 = i6;
     i49 = i17;
    }
   } else {
    i47 = i16;
    i48 = i6;
    i49 = i17;
   }
   i40 = i48 & 255;
   if ((i40 + -1 | 0) >>> 0 < 127) {
    i16 = i47 + -1 | 0;
    i17 = i49 + 1 | 0;
    i7 = 7;
    continue;
   }
   i39 = i40 + -194 | 0;
   if (i39 >>> 0 > 50) {
    i35 = i1;
    i36 = i47;
    i37 = i49;
    i7 = 47;
    break;
   }
   i9 = i47;
   i10 = HEAP32[13488 + (i39 << 2) >> 2] | 0;
   i11 = i49 + 1 | 0;
   i7 = 16;
   continue;
  } else if ((i7 | 0) == 16) {
   i7 = 0;
   i39 = (HEAPU8[i11] | 0) >>> 3;
   if ((i39 + -16 | i39 + (i10 >> 26)) >>> 0 > 7) {
    i7 = 17;
    break;
   }
   i39 = i11 + 1 | 0;
   if ((i10 & 33554432 | 0) == 0) {
    i50 = i39;
   } else {
    if (((HEAPU8[i39] | 0) + -128 | 0) >>> 0 > 63) {
     i7 = 20;
     break;
    }
    i39 = i11 + 2 | 0;
    if ((i10 & 524288 | 0) == 0) {
     i50 = i39;
    } else {
     if (((HEAPU8[i39] | 0) + -128 | 0) >>> 0 > 63) {
      i7 = 23;
      break;
     }
     i50 = i11 + 3 | 0;
    }
   }
   i16 = i9 + -1 | 0;
   i17 = i50;
   i7 = 7;
   continue;
  } else if ((i7 | 0) == 36) {
   i7 = 0;
   i39 = HEAPU8[i15] | 0;
   i40 = i39 >>> 3;
   if ((i40 + -16 | i40 + (i14 >> 26)) >>> 0 > 7) {
    i7 = 37;
    break;
   }
   i40 = i15 + 1 | 0;
   i51 = i39 + -128 | i14 << 6;
   if ((i51 | 0) < 0) {
    i39 = (HEAPU8[i40] | 0) + -128 | 0;
    if (i39 >>> 0 > 63) {
     i7 = 40;
     break;
    }
    i41 = i15 + 2 | 0;
    i52 = i39 | i51 << 6;
    if ((i52 | 0) < 0) {
     i39 = (HEAPU8[i41] | 0) + -128 | 0;
     if (i39 >>> 0 > 63) {
      i7 = 43;
      break;
     }
     i53 = i39 | i52 << 6;
     i54 = i15 + 3 | 0;
    } else {
     i53 = i52;
     i54 = i41;
    }
   } else {
    i53 = i51;
    i54 = i40;
   }
   HEAP32[i12 >> 2] = i53;
   i18 = i12 + 4 | 0;
   i19 = i13 + -1 | 0;
   i20 = i54;
   i7 = 6;
   continue;
  }
 }
 if ((i7 | 0) == 17) {
  i55 = i1;
  i56 = i9;
  i57 = i10;
  i58 = i11 + -1 | 0;
  i7 = 46;
 } else if ((i7 | 0) == 20) {
  i55 = i1;
  i56 = i9;
  i57 = i10;
  i58 = i11 + -1 | 0;
  i7 = 46;
 } else if ((i7 | 0) == 23) {
  i55 = i1;
  i56 = i9;
  i57 = i10;
  i58 = i11 + -1 | 0;
  i7 = 46;
 } else if ((i7 | 0) == 37) {
  i55 = i12;
  i56 = i13;
  i57 = i14;
  i58 = i15 + -1 | 0;
  i7 = 46;
 } else if ((i7 | 0) == 40) {
  i55 = i12;
  i56 = i13;
  i57 = i51;
  i58 = i15 + -1 | 0;
  i7 = 46;
 } else if ((i7 | 0) == 43) {
  i55 = i12;
  i56 = i13;
  i57 = i52;
  i58 = i15 + -1 | 0;
  i7 = 46;
 } else if ((i7 | 0) == 53) {
  STACKTOP = i5;
  return i21 | 0;
 }
 if ((i7 | 0) == 46) {
  if ((i57 | 0) == 0) {
   i35 = i55;
   i36 = i56;
   i37 = i58;
   i7 = 47;
  } else {
   i59 = i55;
   i60 = i58;
  }
 }
 if ((i7 | 0) == 47) {
  if ((HEAP8[i37] | 0) == 0) {
   if ((i35 | 0) != 0) {
    HEAP32[i35 >> 2] = 0;
    HEAP32[i2 >> 2] = 0;
   }
   i21 = i3 - i36 | 0;
   STACKTOP = i5;
   return i21 | 0;
  } else {
   i59 = i35;
   i60 = i37;
  }
 }
 HEAP32[(___errno_location() | 0) >> 2] = 84;
 if ((i59 | 0) == 0) {
  i21 = -1;
  STACKTOP = i5;
  return i21 | 0;
 }
 HEAP32[i2 >> 2] = i60;
 i21 = -1;
 STACKTOP = i5;
 return i21 | 0;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0;
 i6 = STACKTOP;
 if ((i1 | 0) == (HEAP32[i2 + 8 >> 2] | 0)) {
  if ((HEAP32[i2 + 4 >> 2] | 0) != (i3 | 0)) {
   STACKTOP = i6;
   return;
  }
  i7 = i2 + 28 | 0;
  if ((HEAP32[i7 >> 2] | 0) == 1) {
   STACKTOP = i6;
   return;
  }
  HEAP32[i7 >> 2] = i4;
  STACKTOP = i6;
  return;
 }
 if ((i1 | 0) == (HEAP32[i2 >> 2] | 0)) {
  if ((HEAP32[i2 + 16 >> 2] | 0) != (i3 | 0)) {
   i7 = i2 + 20 | 0;
   if ((HEAP32[i7 >> 2] | 0) != (i3 | 0)) {
    HEAP32[i2 + 32 >> 2] = i4;
    i8 = i2 + 44 | 0;
    if ((HEAP32[i8 >> 2] | 0) == 4) {
     STACKTOP = i6;
     return;
    }
    i9 = HEAP32[i1 + 12 >> 2] | 0;
    i10 = i1 + (i9 << 3) + 16 | 0;
    L19 : do {
     if ((i9 | 0) > 0) {
      i11 = i2 + 52 | 0;
      i12 = i2 + 53 | 0;
      i13 = i2 + 54 | 0;
      i14 = i1 + 8 | 0;
      i15 = i2 + 24 | 0;
      i16 = 0;
      i17 = 0;
      i18 = i1 + 16 | 0;
      L21 : while (1) {
       HEAP8[i11] = 0;
       HEAP8[i12] = 0;
       i19 = HEAP32[i18 + 4 >> 2] | 0;
       i20 = i19 >> 8;
       if ((i19 & 1 | 0) == 0) {
        i21 = i20;
       } else {
        i21 = HEAP32[(HEAP32[i3 >> 2] | 0) + i20 >> 2] | 0;
       }
       i20 = HEAP32[i18 >> 2] | 0;
       FUNCTION_TABLE_viiiiii[HEAP32[(HEAP32[i20 >> 2] | 0) + 20 >> 2] & 31](i20, i2, i3, i3 + i21 | 0, 2 - (i19 >>> 1 & 1) | 0, i5);
       if ((HEAP8[i13] | 0) != 0) {
        i22 = i16;
        i23 = i17;
        break;
       }
       do {
        if ((HEAP8[i12] | 0) == 0) {
         i24 = i16;
         i25 = i17;
        } else {
         if ((HEAP8[i11] | 0) == 0) {
          if ((HEAP32[i14 >> 2] & 1 | 0) == 0) {
           i22 = i16;
           i23 = 1;
           break L21;
          } else {
           i24 = i16;
           i25 = 1;
           break;
          }
         }
         if ((HEAP32[i15 >> 2] | 0) == 1) {
          i26 = 27;
          break L19;
         }
         if ((HEAP32[i14 >> 2] & 2 | 0) == 0) {
          i26 = 27;
          break L19;
         } else {
          i24 = 1;
          i25 = 1;
         }
        }
       } while (0);
       i19 = i18 + 8 | 0;
       if (i19 >>> 0 < i10 >>> 0) {
        i16 = i24;
        i17 = i25;
        i18 = i19;
       } else {
        i22 = i24;
        i23 = i25;
        break;
       }
      }
      if (i22) {
       i27 = i23;
       i26 = 26;
      } else {
       i28 = i23;
       i26 = 23;
      }
     } else {
      i28 = 0;
      i26 = 23;
     }
    } while (0);
    if ((i26 | 0) == 23) {
     HEAP32[i7 >> 2] = i3;
     i7 = i2 + 40 | 0;
     HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + 1;
     if ((HEAP32[i2 + 36 >> 2] | 0) == 1) {
      if ((HEAP32[i2 + 24 >> 2] | 0) == 2) {
       HEAP8[i2 + 54 | 0] = 1;
       if (i28) {
        i26 = 27;
       } else {
        i26 = 28;
       }
      } else {
       i27 = i28;
       i26 = 26;
      }
     } else {
      i27 = i28;
      i26 = 26;
     }
    }
    if ((i26 | 0) == 26) {
     if (i27) {
      i26 = 27;
     } else {
      i26 = 28;
     }
    }
    if ((i26 | 0) == 27) {
     HEAP32[i8 >> 2] = 3;
     STACKTOP = i6;
     return;
    } else if ((i26 | 0) == 28) {
     HEAP32[i8 >> 2] = 4;
     STACKTOP = i6;
     return;
    }
   }
  }
  if ((i4 | 0) != 1) {
   STACKTOP = i6;
   return;
  }
  HEAP32[i2 + 32 >> 2] = 1;
  STACKTOP = i6;
  return;
 }
 i8 = HEAP32[i1 + 12 >> 2] | 0;
 i27 = i1 + (i8 << 3) + 16 | 0;
 i28 = HEAP32[i1 + 20 >> 2] | 0;
 i7 = i28 >> 8;
 if ((i28 & 1 | 0) == 0) {
  i29 = i7;
 } else {
  i29 = HEAP32[(HEAP32[i3 >> 2] | 0) + i7 >> 2] | 0;
 }
 i7 = HEAP32[i1 + 16 >> 2] | 0;
 FUNCTION_TABLE_viiiii[HEAP32[(HEAP32[i7 >> 2] | 0) + 24 >> 2] & 3](i7, i2, i3 + i29 | 0, (i28 & 2 | 0) != 0 ? i4 : 2, i5);
 i28 = i1 + 24 | 0;
 if ((i8 | 0) <= 1) {
  STACKTOP = i6;
  return;
 }
 i8 = HEAP32[i1 + 8 >> 2] | 0;
 if ((i8 & 2 | 0) == 0) {
  i1 = i2 + 36 | 0;
  if ((HEAP32[i1 >> 2] | 0) != 1) {
   if ((i8 & 1 | 0) == 0) {
    i8 = i2 + 54 | 0;
    i29 = i28;
    while (1) {
     if ((HEAP8[i8] | 0) != 0) {
      i26 = 53;
      break;
     }
     if ((HEAP32[i1 >> 2] | 0) == 1) {
      i26 = 53;
      break;
     }
     i7 = HEAP32[i29 + 4 >> 2] | 0;
     i23 = i7 >> 8;
     if ((i7 & 1 | 0) == 0) {
      i30 = i23;
     } else {
      i30 = HEAP32[(HEAP32[i3 >> 2] | 0) + i23 >> 2] | 0;
     }
     i23 = HEAP32[i29 >> 2] | 0;
     FUNCTION_TABLE_viiiii[HEAP32[(HEAP32[i23 >> 2] | 0) + 24 >> 2] & 3](i23, i2, i3 + i30 | 0, (i7 & 2 | 0) != 0 ? i4 : 2, i5);
     i7 = i29 + 8 | 0;
     if (i7 >>> 0 < i27 >>> 0) {
      i29 = i7;
     } else {
      i26 = 53;
      break;
     }
    }
    if ((i26 | 0) == 53) {
     STACKTOP = i6;
     return;
    }
   }
   i29 = i2 + 24 | 0;
   i30 = i2 + 54 | 0;
   i8 = i28;
   while (1) {
    if ((HEAP8[i30] | 0) != 0) {
     i26 = 53;
     break;
    }
    if ((HEAP32[i1 >> 2] | 0) == 1) {
     if ((HEAP32[i29 >> 2] | 0) == 1) {
      i26 = 53;
      break;
     }
    }
    i7 = HEAP32[i8 + 4 >> 2] | 0;
    i23 = i7 >> 8;
    if ((i7 & 1 | 0) == 0) {
     i31 = i23;
    } else {
     i31 = HEAP32[(HEAP32[i3 >> 2] | 0) + i23 >> 2] | 0;
    }
    i23 = HEAP32[i8 >> 2] | 0;
    FUNCTION_TABLE_viiiii[HEAP32[(HEAP32[i23 >> 2] | 0) + 24 >> 2] & 3](i23, i2, i3 + i31 | 0, (i7 & 2 | 0) != 0 ? i4 : 2, i5);
    i7 = i8 + 8 | 0;
    if (i7 >>> 0 < i27 >>> 0) {
     i8 = i7;
    } else {
     i26 = 53;
     break;
    }
   }
   if ((i26 | 0) == 53) {
    STACKTOP = i6;
    return;
   }
  }
 }
 i8 = i2 + 54 | 0;
 i31 = i28;
 while (1) {
  if ((HEAP8[i8] | 0) != 0) {
   i26 = 53;
   break;
  }
  i28 = HEAP32[i31 + 4 >> 2] | 0;
  i29 = i28 >> 8;
  if ((i28 & 1 | 0) == 0) {
   i32 = i29;
  } else {
   i32 = HEAP32[(HEAP32[i3 >> 2] | 0) + i29 >> 2] | 0;
  }
  i29 = HEAP32[i31 >> 2] | 0;
  FUNCTION_TABLE_viiiii[HEAP32[(HEAP32[i29 >> 2] | 0) + 24 >> 2] & 3](i29, i2, i3 + i32 | 0, (i28 & 2 | 0) != 0 ? i4 : 2, i5);
  i28 = i31 + 8 | 0;
  if (i28 >>> 0 < i27 >>> 0) {
   i31 = i28;
  } else {
   i26 = 53;
   break;
  }
 }
 if ((i26 | 0) == 53) {
  STACKTOP = i6;
  return;
 }
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_(i1, i2, i3, i4, i5, i6, i7) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 var i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 224 | 0;
 i8 = i2 + 198 | 0;
 i9 = i2 + 196 | 0;
 i10 = i2 + 4 | 0;
 i11 = i2 + 16 | 0;
 i12 = i2 + 28 | 0;
 i13 = i2 + 32 | 0;
 i14 = i2;
 i15 = i2 + 192 | 0;
 i16 = HEAP32[i5 + 4 >> 2] & 74;
 if ((i16 | 0) == 8) {
  i17 = 16;
 } else if ((i16 | 0) == 0) {
  i17 = 0;
 } else if ((i16 | 0) == 64) {
  i17 = 8;
 } else {
  i17 = 10;
 }
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc(i10, i5, i8, i9);
 HEAP32[i11 + 0 >> 2] = 0;
 HEAP32[i11 + 4 >> 2] = 0;
 HEAP32[i11 + 8 >> 2] = 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i11, 10, 0);
 if ((HEAP8[i11] & 1) == 0) {
  i5 = i11 + 1 | 0;
  i18 = i5;
  i19 = i11 + 8 | 0;
  i20 = i5;
 } else {
  i5 = i11 + 8 | 0;
  i18 = i11 + 1 | 0;
  i19 = i5;
  i20 = HEAP32[i5 >> 2] | 0;
 }
 HEAP32[i12 >> 2] = i20;
 HEAP32[i14 >> 2] = i13;
 HEAP32[i15 >> 2] = 0;
 i5 = i11 + 4 | 0;
 i16 = HEAP8[i9] | 0;
 i9 = HEAP32[i3 >> 2] | 0;
 i21 = i20;
 L10 : while (1) {
  if ((i9 | 0) == 0) {
   i22 = 0;
  } else {
   if ((HEAP32[i9 + 12 >> 2] | 0) == (HEAP32[i9 + 16 >> 2] | 0)) {
    if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i9 >> 2] | 0) + 36 >> 2] & 127](i9) | 0) == -1) {
     HEAP32[i3 >> 2] = 0;
     i22 = 0;
    } else {
     i22 = i9;
    }
   } else {
    i22 = i9;
   }
  }
  i20 = (i22 | 0) == 0;
  i23 = HEAP32[i4 >> 2] | 0;
  do {
   if ((i23 | 0) == 0) {
    i24 = 18;
   } else {
    if ((HEAP32[i23 + 12 >> 2] | 0) != (HEAP32[i23 + 16 >> 2] | 0)) {
     if (i20) {
      i25 = i23;
      break;
     } else {
      i26 = i23;
      i27 = i21;
      break L10;
     }
    }
    if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i23 >> 2] | 0) + 36 >> 2] & 127](i23) | 0) == -1) {
     HEAP32[i4 >> 2] = 0;
     i24 = 18;
     break;
    } else {
     if (i20) {
      i25 = i23;
      break;
     } else {
      i26 = i23;
      i27 = i21;
      break L10;
     }
    }
   }
  } while (0);
  if ((i24 | 0) == 18) {
   i24 = 0;
   if (i20) {
    i26 = 0;
    i27 = i21;
    break;
   } else {
    i25 = 0;
   }
  }
  i23 = HEAP8[i11] | 0;
  i28 = (i23 & 1) == 0;
  if (i28) {
   i29 = (i23 & 255) >>> 1;
  } else {
   i29 = HEAP32[i5 >> 2] | 0;
  }
  if (((HEAP32[i12 >> 2] | 0) - i21 | 0) == (i29 | 0)) {
   if (i28) {
    i30 = (i23 & 255) >>> 1;
    i31 = (i23 & 255) >>> 1;
   } else {
    i23 = HEAP32[i5 >> 2] | 0;
    i30 = i23;
    i31 = i23;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i11, i30 << 1, 0);
   if ((HEAP8[i11] & 1) == 0) {
    i32 = 10;
   } else {
    i32 = (HEAP32[i11 >> 2] & -2) + -1 | 0;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i11, i32, 0);
   if ((HEAP8[i11] & 1) == 0) {
    i33 = i18;
   } else {
    i33 = HEAP32[i19 >> 2] | 0;
   }
   HEAP32[i12 >> 2] = i33 + i31;
   i34 = i33;
  } else {
   i34 = i21;
  }
  i23 = i22 + 12 | 0;
  i28 = HEAP32[i23 >> 2] | 0;
  i35 = i22 + 16 | 0;
  if ((i28 | 0) == (HEAP32[i35 >> 2] | 0)) {
   i36 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i22 >> 2] | 0) + 36 >> 2] & 127](i22) | 0;
  } else {
   i36 = HEAPU8[i28] | 0;
  }
  if ((__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_(i36 & 255, i17, i34, i12, i15, i16, i10, i13, i14, i8) | 0) != 0) {
   i26 = i25;
   i27 = i34;
   break;
  }
  i28 = HEAP32[i23 >> 2] | 0;
  if ((i28 | 0) == (HEAP32[i35 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[i22 >> 2] | 0) + 40 >> 2] & 127](i22) | 0;
   i9 = i22;
   i21 = i34;
   continue;
  } else {
   HEAP32[i23 >> 2] = i28 + 1;
   i9 = i22;
   i21 = i34;
   continue;
  }
 }
 i34 = HEAP8[i10] | 0;
 if ((i34 & 1) == 0) {
  i37 = (i34 & 255) >>> 1;
 } else {
  i37 = HEAP32[i10 + 4 >> 2] | 0;
 }
 if ((i37 | 0) != 0) {
  i37 = HEAP32[i14 >> 2] | 0;
  if ((i37 - i13 | 0) < 160) {
   i34 = HEAP32[i15 >> 2] | 0;
   HEAP32[i14 >> 2] = i37 + 4;
   HEAP32[i37 >> 2] = i34;
  }
 }
 i34 = __ZNSt3__127__num_get_unsigned_integralIyEET_PKcS3_Rji(i27, HEAP32[i12 >> 2] | 0, i6, i17) | 0;
 i17 = i7;
 HEAP32[i17 >> 2] = i34;
 HEAP32[i17 + 4 >> 2] = tempRet0;
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj(i10, i13, HEAP32[i14 >> 2] | 0, i6);
 if ((i22 | 0) == 0) {
  i38 = 0;
 } else {
  if ((HEAP32[i22 + 12 >> 2] | 0) == (HEAP32[i22 + 16 >> 2] | 0)) {
   if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i22 >> 2] | 0) + 36 >> 2] & 127](i22) | 0) == -1) {
    HEAP32[i3 >> 2] = 0;
    i38 = 0;
   } else {
    i38 = i22;
   }
  } else {
   i38 = i22;
  }
 }
 i22 = (i38 | 0) == 0;
 do {
  if ((i26 | 0) == 0) {
   i24 = 54;
  } else {
   if ((HEAP32[i26 + 12 >> 2] | 0) != (HEAP32[i26 + 16 >> 2] | 0)) {
    if (!i22) {
     break;
    }
    HEAP32[i1 >> 2] = i38;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i11);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i10);
    STACKTOP = i2;
    return;
   }
   if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i26 >> 2] | 0) + 36 >> 2] & 127](i26) | 0) == -1) {
    HEAP32[i4 >> 2] = 0;
    i24 = 54;
    break;
   }
   if (i22 ^ (i26 | 0) == 0) {
    HEAP32[i1 >> 2] = i38;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i11);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i10);
    STACKTOP = i2;
    return;
   }
  }
 } while (0);
 if ((i24 | 0) == 54) {
  if (!i22) {
   HEAP32[i1 >> 2] = i38;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i11);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i10);
   STACKTOP = i2;
   return;
  }
 }
 HEAP32[i6 >> 2] = HEAP32[i6 >> 2] | 2;
 HEAP32[i1 >> 2] = i38;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i11);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i10);
 STACKTOP = i2;
 return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_(i1, i2, i3, i4, i5, i6, i7) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 var i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 224 | 0;
 i8 = i2 + 198 | 0;
 i9 = i2 + 196 | 0;
 i10 = i2 + 4 | 0;
 i11 = i2 + 16 | 0;
 i12 = i2 + 28 | 0;
 i13 = i2 + 32 | 0;
 i14 = i2;
 i15 = i2 + 192 | 0;
 i16 = HEAP32[i5 + 4 >> 2] & 74;
 if ((i16 | 0) == 0) {
  i17 = 0;
 } else if ((i16 | 0) == 8) {
  i17 = 16;
 } else if ((i16 | 0) == 64) {
  i17 = 8;
 } else {
  i17 = 10;
 }
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc(i10, i5, i8, i9);
 HEAP32[i11 + 0 >> 2] = 0;
 HEAP32[i11 + 4 >> 2] = 0;
 HEAP32[i11 + 8 >> 2] = 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i11, 10, 0);
 if ((HEAP8[i11] & 1) == 0) {
  i5 = i11 + 1 | 0;
  i18 = i5;
  i19 = i11 + 8 | 0;
  i20 = i5;
 } else {
  i5 = i11 + 8 | 0;
  i18 = i11 + 1 | 0;
  i19 = i5;
  i20 = HEAP32[i5 >> 2] | 0;
 }
 HEAP32[i12 >> 2] = i20;
 HEAP32[i14 >> 2] = i13;
 HEAP32[i15 >> 2] = 0;
 i5 = i11 + 4 | 0;
 i16 = HEAP8[i9] | 0;
 i9 = HEAP32[i3 >> 2] | 0;
 i21 = i20;
 L10 : while (1) {
  if ((i9 | 0) == 0) {
   i22 = 0;
  } else {
   if ((HEAP32[i9 + 12 >> 2] | 0) == (HEAP32[i9 + 16 >> 2] | 0)) {
    if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i9 >> 2] | 0) + 36 >> 2] & 127](i9) | 0) == -1) {
     HEAP32[i3 >> 2] = 0;
     i22 = 0;
    } else {
     i22 = i9;
    }
   } else {
    i22 = i9;
   }
  }
  i20 = (i22 | 0) == 0;
  i23 = HEAP32[i4 >> 2] | 0;
  do {
   if ((i23 | 0) == 0) {
    i24 = 18;
   } else {
    if ((HEAP32[i23 + 12 >> 2] | 0) != (HEAP32[i23 + 16 >> 2] | 0)) {
     if (i20) {
      i25 = i23;
      break;
     } else {
      i26 = i23;
      i27 = i21;
      break L10;
     }
    }
    if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i23 >> 2] | 0) + 36 >> 2] & 127](i23) | 0) == -1) {
     HEAP32[i4 >> 2] = 0;
     i24 = 18;
     break;
    } else {
     if (i20) {
      i25 = i23;
      break;
     } else {
      i26 = i23;
      i27 = i21;
      break L10;
     }
    }
   }
  } while (0);
  if ((i24 | 0) == 18) {
   i24 = 0;
   if (i20) {
    i26 = 0;
    i27 = i21;
    break;
   } else {
    i25 = 0;
   }
  }
  i23 = HEAP8[i11] | 0;
  i28 = (i23 & 1) == 0;
  if (i28) {
   i29 = (i23 & 255) >>> 1;
  } else {
   i29 = HEAP32[i5 >> 2] | 0;
  }
  if (((HEAP32[i12 >> 2] | 0) - i21 | 0) == (i29 | 0)) {
   if (i28) {
    i30 = (i23 & 255) >>> 1;
    i31 = (i23 & 255) >>> 1;
   } else {
    i23 = HEAP32[i5 >> 2] | 0;
    i30 = i23;
    i31 = i23;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i11, i30 << 1, 0);
   if ((HEAP8[i11] & 1) == 0) {
    i32 = 10;
   } else {
    i32 = (HEAP32[i11 >> 2] & -2) + -1 | 0;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i11, i32, 0);
   if ((HEAP8[i11] & 1) == 0) {
    i33 = i18;
   } else {
    i33 = HEAP32[i19 >> 2] | 0;
   }
   HEAP32[i12 >> 2] = i33 + i31;
   i34 = i33;
  } else {
   i34 = i21;
  }
  i23 = i22 + 12 | 0;
  i28 = HEAP32[i23 >> 2] | 0;
  i35 = i22 + 16 | 0;
  if ((i28 | 0) == (HEAP32[i35 >> 2] | 0)) {
   i36 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i22 >> 2] | 0) + 36 >> 2] & 127](i22) | 0;
  } else {
   i36 = HEAPU8[i28] | 0;
  }
  if ((__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_(i36 & 255, i17, i34, i12, i15, i16, i10, i13, i14, i8) | 0) != 0) {
   i26 = i25;
   i27 = i34;
   break;
  }
  i28 = HEAP32[i23 >> 2] | 0;
  if ((i28 | 0) == (HEAP32[i35 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[i22 >> 2] | 0) + 40 >> 2] & 127](i22) | 0;
   i9 = i22;
   i21 = i34;
   continue;
  } else {
   HEAP32[i23 >> 2] = i28 + 1;
   i9 = i22;
   i21 = i34;
   continue;
  }
 }
 i34 = HEAP8[i10] | 0;
 if ((i34 & 1) == 0) {
  i37 = (i34 & 255) >>> 1;
 } else {
  i37 = HEAP32[i10 + 4 >> 2] | 0;
 }
 if ((i37 | 0) != 0) {
  i37 = HEAP32[i14 >> 2] | 0;
  if ((i37 - i13 | 0) < 160) {
   i34 = HEAP32[i15 >> 2] | 0;
   HEAP32[i14 >> 2] = i37 + 4;
   HEAP32[i37 >> 2] = i34;
  }
 }
 i34 = __ZNSt3__125__num_get_signed_integralIxEET_PKcS3_Rji(i27, HEAP32[i12 >> 2] | 0, i6, i17) | 0;
 i17 = i7;
 HEAP32[i17 >> 2] = i34;
 HEAP32[i17 + 4 >> 2] = tempRet0;
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj(i10, i13, HEAP32[i14 >> 2] | 0, i6);
 if ((i22 | 0) == 0) {
  i38 = 0;
 } else {
  if ((HEAP32[i22 + 12 >> 2] | 0) == (HEAP32[i22 + 16 >> 2] | 0)) {
   if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i22 >> 2] | 0) + 36 >> 2] & 127](i22) | 0) == -1) {
    HEAP32[i3 >> 2] = 0;
    i38 = 0;
   } else {
    i38 = i22;
   }
  } else {
   i38 = i22;
  }
 }
 i22 = (i38 | 0) == 0;
 do {
  if ((i26 | 0) == 0) {
   i24 = 54;
  } else {
   if ((HEAP32[i26 + 12 >> 2] | 0) != (HEAP32[i26 + 16 >> 2] | 0)) {
    if (!i22) {
     break;
    }
    HEAP32[i1 >> 2] = i38;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i11);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i10);
    STACKTOP = i2;
    return;
   }
   if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i26 >> 2] | 0) + 36 >> 2] & 127](i26) | 0) == -1) {
    HEAP32[i4 >> 2] = 0;
    i24 = 54;
    break;
   }
   if (i22 ^ (i26 | 0) == 0) {
    HEAP32[i1 >> 2] = i38;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i11);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i10);
    STACKTOP = i2;
    return;
   }
  }
 } while (0);
 if ((i24 | 0) == 54) {
  if (!i22) {
   HEAP32[i1 >> 2] = i38;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i11);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i10);
   STACKTOP = i2;
   return;
  }
 }
 HEAP32[i6 >> 2] = HEAP32[i6 >> 2] | 2;
 HEAP32[i1 >> 2] = i38;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i11);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i10);
 STACKTOP = i2;
 return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_(i1, i2, i3, i4, i5, i6, i7) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 var i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 i8 = i2 + 200 | 0;
 i9 = i2 + 199 | 0;
 i10 = i2 + 198 | 0;
 i11 = i2 + 8 | 0;
 i12 = i2 + 20 | 0;
 i13 = i2 + 192 | 0;
 i14 = i2 + 32 | 0;
 i15 = i2;
 i16 = i2 + 4 | 0;
 i17 = i2 + 197 | 0;
 i18 = i2 + 196 | 0;
 __ZNSt3__19__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_(i11, i5, i8, i9, i10);
 HEAP32[i12 + 0 >> 2] = 0;
 HEAP32[i12 + 4 >> 2] = 0;
 HEAP32[i12 + 8 >> 2] = 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i12, 10, 0);
 if ((HEAP8[i12] & 1) == 0) {
  i5 = i12 + 1 | 0;
  i19 = i5;
  i20 = i12 + 8 | 0;
  i21 = i5;
 } else {
  i5 = i12 + 8 | 0;
  i19 = i12 + 1 | 0;
  i20 = i5;
  i21 = HEAP32[i5 >> 2] | 0;
 }
 HEAP32[i13 >> 2] = i21;
 HEAP32[i15 >> 2] = i14;
 HEAP32[i16 >> 2] = 0;
 HEAP8[i17] = 1;
 HEAP8[i18] = 69;
 i5 = i12 + 4 | 0;
 i22 = HEAP8[i9] | 0;
 i9 = HEAP8[i10] | 0;
 i10 = HEAP32[i3 >> 2] | 0;
 i23 = i21;
 L5 : while (1) {
  if ((i10 | 0) == 0) {
   i24 = 0;
  } else {
   if ((HEAP32[i10 + 12 >> 2] | 0) == (HEAP32[i10 + 16 >> 2] | 0)) {
    if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i10 >> 2] | 0) + 36 >> 2] & 127](i10) | 0) == -1) {
     HEAP32[i3 >> 2] = 0;
     i24 = 0;
    } else {
     i24 = i10;
    }
   } else {
    i24 = i10;
   }
  }
  i21 = (i24 | 0) == 0;
  i25 = HEAP32[i4 >> 2] | 0;
  do {
   if ((i25 | 0) == 0) {
    i26 = 14;
   } else {
    if ((HEAP32[i25 + 12 >> 2] | 0) != (HEAP32[i25 + 16 >> 2] | 0)) {
     if (i21) {
      i27 = i25;
      break;
     } else {
      i28 = i25;
      i29 = i23;
      break L5;
     }
    }
    if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i25 >> 2] | 0) + 36 >> 2] & 127](i25) | 0) == -1) {
     HEAP32[i4 >> 2] = 0;
     i26 = 14;
     break;
    } else {
     if (i21) {
      i27 = i25;
      break;
     } else {
      i28 = i25;
      i29 = i23;
      break L5;
     }
    }
   }
  } while (0);
  if ((i26 | 0) == 14) {
   i26 = 0;
   if (i21) {
    i28 = 0;
    i29 = i23;
    break;
   } else {
    i27 = 0;
   }
  }
  i25 = HEAP8[i12] | 0;
  i30 = (i25 & 1) == 0;
  if (i30) {
   i31 = (i25 & 255) >>> 1;
  } else {
   i31 = HEAP32[i5 >> 2] | 0;
  }
  if (((HEAP32[i13 >> 2] | 0) - i23 | 0) == (i31 | 0)) {
   if (i30) {
    i32 = (i25 & 255) >>> 1;
    i33 = (i25 & 255) >>> 1;
   } else {
    i25 = HEAP32[i5 >> 2] | 0;
    i32 = i25;
    i33 = i25;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i12, i32 << 1, 0);
   if ((HEAP8[i12] & 1) == 0) {
    i34 = 10;
   } else {
    i34 = (HEAP32[i12 >> 2] & -2) + -1 | 0;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i12, i34, 0);
   if ((HEAP8[i12] & 1) == 0) {
    i35 = i19;
   } else {
    i35 = HEAP32[i20 >> 2] | 0;
   }
   HEAP32[i13 >> 2] = i35 + i33;
   i36 = i35;
  } else {
   i36 = i23;
  }
  i25 = i24 + 12 | 0;
  i30 = HEAP32[i25 >> 2] | 0;
  i37 = i24 + 16 | 0;
  if ((i30 | 0) == (HEAP32[i37 >> 2] | 0)) {
   i38 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i24 >> 2] | 0) + 36 >> 2] & 127](i24) | 0;
  } else {
   i38 = HEAPU8[i30] | 0;
  }
  if ((__ZNSt3__19__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_(i38 & 255, i17, i18, i36, i13, i22, i9, i11, i14, i15, i16, i8) | 0) != 0) {
   i28 = i27;
   i29 = i36;
   break;
  }
  i30 = HEAP32[i25 >> 2] | 0;
  if ((i30 | 0) == (HEAP32[i37 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[i24 >> 2] | 0) + 40 >> 2] & 127](i24) | 0;
   i10 = i24;
   i23 = i36;
   continue;
  } else {
   HEAP32[i25 >> 2] = i30 + 1;
   i10 = i24;
   i23 = i36;
   continue;
  }
 }
 i36 = HEAP8[i11] | 0;
 if ((i36 & 1) == 0) {
  i39 = (i36 & 255) >>> 1;
 } else {
  i39 = HEAP32[i11 + 4 >> 2] | 0;
 }
 if ((i39 | 0) != 0) {
  if ((HEAP8[i17] | 0) != 0) {
   i17 = HEAP32[i15 >> 2] | 0;
   if ((i17 - i14 | 0) < 160) {
    i39 = HEAP32[i16 >> 2] | 0;
    HEAP32[i15 >> 2] = i17 + 4;
    HEAP32[i17 >> 2] = i39;
   }
  }
 }
 HEAPF32[i7 >> 2] = +__ZNSt3__115__num_get_floatIfEET_PKcS3_Rj(i29, HEAP32[i13 >> 2] | 0, i6);
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj(i11, i14, HEAP32[i15 >> 2] | 0, i6);
 if ((i24 | 0) == 0) {
  i40 = 0;
 } else {
  if ((HEAP32[i24 + 12 >> 2] | 0) == (HEAP32[i24 + 16 >> 2] | 0)) {
   if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i24 >> 2] | 0) + 36 >> 2] & 127](i24) | 0) == -1) {
    HEAP32[i3 >> 2] = 0;
    i40 = 0;
   } else {
    i40 = i24;
   }
  } else {
   i40 = i24;
  }
 }
 i24 = (i40 | 0) == 0;
 do {
  if ((i28 | 0) == 0) {
   i26 = 51;
  } else {
   if ((HEAP32[i28 + 12 >> 2] | 0) != (HEAP32[i28 + 16 >> 2] | 0)) {
    if (!i24) {
     break;
    }
    HEAP32[i1 >> 2] = i40;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i12);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i11);
    STACKTOP = i2;
    return;
   }
   if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i28 >> 2] | 0) + 36 >> 2] & 127](i28) | 0) == -1) {
    HEAP32[i4 >> 2] = 0;
    i26 = 51;
    break;
   }
   if (i24 ^ (i28 | 0) == 0) {
    HEAP32[i1 >> 2] = i40;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i12);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i11);
    STACKTOP = i2;
    return;
   }
  }
 } while (0);
 if ((i26 | 0) == 51) {
  if (!i24) {
   HEAP32[i1 >> 2] = i40;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i12);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i11);
   STACKTOP = i2;
   return;
  }
 }
 HEAP32[i6 >> 2] = HEAP32[i6 >> 2] | 2;
 HEAP32[i1 >> 2] = i40;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i12);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i11);
 STACKTOP = i2;
 return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_(i1, i2, i3, i4, i5, i6, i7) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 var i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 i8 = i2 + 200 | 0;
 i9 = i2 + 199 | 0;
 i10 = i2 + 198 | 0;
 i11 = i2 + 8 | 0;
 i12 = i2 + 20 | 0;
 i13 = i2 + 192 | 0;
 i14 = i2 + 32 | 0;
 i15 = i2;
 i16 = i2 + 4 | 0;
 i17 = i2 + 197 | 0;
 i18 = i2 + 196 | 0;
 __ZNSt3__19__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_(i11, i5, i8, i9, i10);
 HEAP32[i12 + 0 >> 2] = 0;
 HEAP32[i12 + 4 >> 2] = 0;
 HEAP32[i12 + 8 >> 2] = 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i12, 10, 0);
 if ((HEAP8[i12] & 1) == 0) {
  i5 = i12 + 1 | 0;
  i19 = i5;
  i20 = i12 + 8 | 0;
  i21 = i5;
 } else {
  i5 = i12 + 8 | 0;
  i19 = i12 + 1 | 0;
  i20 = i5;
  i21 = HEAP32[i5 >> 2] | 0;
 }
 HEAP32[i13 >> 2] = i21;
 HEAP32[i15 >> 2] = i14;
 HEAP32[i16 >> 2] = 0;
 HEAP8[i17] = 1;
 HEAP8[i18] = 69;
 i5 = i12 + 4 | 0;
 i22 = HEAP8[i9] | 0;
 i9 = HEAP8[i10] | 0;
 i10 = HEAP32[i3 >> 2] | 0;
 i23 = i21;
 L5 : while (1) {
  if ((i10 | 0) == 0) {
   i24 = 0;
  } else {
   if ((HEAP32[i10 + 12 >> 2] | 0) == (HEAP32[i10 + 16 >> 2] | 0)) {
    if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i10 >> 2] | 0) + 36 >> 2] & 127](i10) | 0) == -1) {
     HEAP32[i3 >> 2] = 0;
     i24 = 0;
    } else {
     i24 = i10;
    }
   } else {
    i24 = i10;
   }
  }
  i21 = (i24 | 0) == 0;
  i25 = HEAP32[i4 >> 2] | 0;
  do {
   if ((i25 | 0) == 0) {
    i26 = 14;
   } else {
    if ((HEAP32[i25 + 12 >> 2] | 0) != (HEAP32[i25 + 16 >> 2] | 0)) {
     if (i21) {
      i27 = i25;
      break;
     } else {
      i28 = i25;
      i29 = i23;
      break L5;
     }
    }
    if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i25 >> 2] | 0) + 36 >> 2] & 127](i25) | 0) == -1) {
     HEAP32[i4 >> 2] = 0;
     i26 = 14;
     break;
    } else {
     if (i21) {
      i27 = i25;
      break;
     } else {
      i28 = i25;
      i29 = i23;
      break L5;
     }
    }
   }
  } while (0);
  if ((i26 | 0) == 14) {
   i26 = 0;
   if (i21) {
    i28 = 0;
    i29 = i23;
    break;
   } else {
    i27 = 0;
   }
  }
  i25 = HEAP8[i12] | 0;
  i30 = (i25 & 1) == 0;
  if (i30) {
   i31 = (i25 & 255) >>> 1;
  } else {
   i31 = HEAP32[i5 >> 2] | 0;
  }
  if (((HEAP32[i13 >> 2] | 0) - i23 | 0) == (i31 | 0)) {
   if (i30) {
    i32 = (i25 & 255) >>> 1;
    i33 = (i25 & 255) >>> 1;
   } else {
    i25 = HEAP32[i5 >> 2] | 0;
    i32 = i25;
    i33 = i25;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i12, i32 << 1, 0);
   if ((HEAP8[i12] & 1) == 0) {
    i34 = 10;
   } else {
    i34 = (HEAP32[i12 >> 2] & -2) + -1 | 0;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i12, i34, 0);
   if ((HEAP8[i12] & 1) == 0) {
    i35 = i19;
   } else {
    i35 = HEAP32[i20 >> 2] | 0;
   }
   HEAP32[i13 >> 2] = i35 + i33;
   i36 = i35;
  } else {
   i36 = i23;
  }
  i25 = i24 + 12 | 0;
  i30 = HEAP32[i25 >> 2] | 0;
  i37 = i24 + 16 | 0;
  if ((i30 | 0) == (HEAP32[i37 >> 2] | 0)) {
   i38 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i24 >> 2] | 0) + 36 >> 2] & 127](i24) | 0;
  } else {
   i38 = HEAPU8[i30] | 0;
  }
  if ((__ZNSt3__19__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_(i38 & 255, i17, i18, i36, i13, i22, i9, i11, i14, i15, i16, i8) | 0) != 0) {
   i28 = i27;
   i29 = i36;
   break;
  }
  i30 = HEAP32[i25 >> 2] | 0;
  if ((i30 | 0) == (HEAP32[i37 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[i24 >> 2] | 0) + 40 >> 2] & 127](i24) | 0;
   i10 = i24;
   i23 = i36;
   continue;
  } else {
   HEAP32[i25 >> 2] = i30 + 1;
   i10 = i24;
   i23 = i36;
   continue;
  }
 }
 i36 = HEAP8[i11] | 0;
 if ((i36 & 1) == 0) {
  i39 = (i36 & 255) >>> 1;
 } else {
  i39 = HEAP32[i11 + 4 >> 2] | 0;
 }
 if ((i39 | 0) != 0) {
  if ((HEAP8[i17] | 0) != 0) {
   i17 = HEAP32[i15 >> 2] | 0;
   if ((i17 - i14 | 0) < 160) {
    i39 = HEAP32[i16 >> 2] | 0;
    HEAP32[i15 >> 2] = i17 + 4;
    HEAP32[i17 >> 2] = i39;
   }
  }
 }
 HEAPF64[i7 >> 3] = +__ZNSt3__115__num_get_floatIeEET_PKcS3_Rj(i29, HEAP32[i13 >> 2] | 0, i6);
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj(i11, i14, HEAP32[i15 >> 2] | 0, i6);
 if ((i24 | 0) == 0) {
  i40 = 0;
 } else {
  if ((HEAP32[i24 + 12 >> 2] | 0) == (HEAP32[i24 + 16 >> 2] | 0)) {
   if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i24 >> 2] | 0) + 36 >> 2] & 127](i24) | 0) == -1) {
    HEAP32[i3 >> 2] = 0;
    i40 = 0;
   } else {
    i40 = i24;
   }
  } else {
   i40 = i24;
  }
 }
 i24 = (i40 | 0) == 0;
 do {
  if ((i28 | 0) == 0) {
   i26 = 51;
  } else {
   if ((HEAP32[i28 + 12 >> 2] | 0) != (HEAP32[i28 + 16 >> 2] | 0)) {
    if (!i24) {
     break;
    }
    HEAP32[i1 >> 2] = i40;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i12);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i11);
    STACKTOP = i2;
    return;
   }
   if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i28 >> 2] | 0) + 36 >> 2] & 127](i28) | 0) == -1) {
    HEAP32[i4 >> 2] = 0;
    i26 = 51;
    break;
   }
   if (i24 ^ (i28 | 0) == 0) {
    HEAP32[i1 >> 2] = i40;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i12);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i11);
    STACKTOP = i2;
    return;
   }
  }
 } while (0);
 if ((i26 | 0) == 51) {
  if (!i24) {
   HEAP32[i1 >> 2] = i40;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i12);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i11);
   STACKTOP = i2;
   return;
  }
 }
 HEAP32[i6 >> 2] = HEAP32[i6 >> 2] | 2;
 HEAP32[i1 >> 2] = i40;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i12);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i11);
 STACKTOP = i2;
 return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_(i1, i2, i3, i4, i5, i6, i7) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 var i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 i8 = i2 + 200 | 0;
 i9 = i2 + 199 | 0;
 i10 = i2 + 198 | 0;
 i11 = i2 + 8 | 0;
 i12 = i2 + 20 | 0;
 i13 = i2 + 192 | 0;
 i14 = i2 + 32 | 0;
 i15 = i2;
 i16 = i2 + 4 | 0;
 i17 = i2 + 197 | 0;
 i18 = i2 + 196 | 0;
 __ZNSt3__19__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_(i11, i5, i8, i9, i10);
 HEAP32[i12 + 0 >> 2] = 0;
 HEAP32[i12 + 4 >> 2] = 0;
 HEAP32[i12 + 8 >> 2] = 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i12, 10, 0);
 if ((HEAP8[i12] & 1) == 0) {
  i5 = i12 + 1 | 0;
  i19 = i5;
  i20 = i12 + 8 | 0;
  i21 = i5;
 } else {
  i5 = i12 + 8 | 0;
  i19 = i12 + 1 | 0;
  i20 = i5;
  i21 = HEAP32[i5 >> 2] | 0;
 }
 HEAP32[i13 >> 2] = i21;
 HEAP32[i15 >> 2] = i14;
 HEAP32[i16 >> 2] = 0;
 HEAP8[i17] = 1;
 HEAP8[i18] = 69;
 i5 = i12 + 4 | 0;
 i22 = HEAP8[i9] | 0;
 i9 = HEAP8[i10] | 0;
 i10 = HEAP32[i3 >> 2] | 0;
 i23 = i21;
 L5 : while (1) {
  if ((i10 | 0) == 0) {
   i24 = 0;
  } else {
   if ((HEAP32[i10 + 12 >> 2] | 0) == (HEAP32[i10 + 16 >> 2] | 0)) {
    if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i10 >> 2] | 0) + 36 >> 2] & 127](i10) | 0) == -1) {
     HEAP32[i3 >> 2] = 0;
     i24 = 0;
    } else {
     i24 = i10;
    }
   } else {
    i24 = i10;
   }
  }
  i21 = (i24 | 0) == 0;
  i25 = HEAP32[i4 >> 2] | 0;
  do {
   if ((i25 | 0) == 0) {
    i26 = 14;
   } else {
    if ((HEAP32[i25 + 12 >> 2] | 0) != (HEAP32[i25 + 16 >> 2] | 0)) {
     if (i21) {
      i27 = i25;
      break;
     } else {
      i28 = i25;
      i29 = i23;
      break L5;
     }
    }
    if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i25 >> 2] | 0) + 36 >> 2] & 127](i25) | 0) == -1) {
     HEAP32[i4 >> 2] = 0;
     i26 = 14;
     break;
    } else {
     if (i21) {
      i27 = i25;
      break;
     } else {
      i28 = i25;
      i29 = i23;
      break L5;
     }
    }
   }
  } while (0);
  if ((i26 | 0) == 14) {
   i26 = 0;
   if (i21) {
    i28 = 0;
    i29 = i23;
    break;
   } else {
    i27 = 0;
   }
  }
  i25 = HEAP8[i12] | 0;
  i30 = (i25 & 1) == 0;
  if (i30) {
   i31 = (i25 & 255) >>> 1;
  } else {
   i31 = HEAP32[i5 >> 2] | 0;
  }
  if (((HEAP32[i13 >> 2] | 0) - i23 | 0) == (i31 | 0)) {
   if (i30) {
    i32 = (i25 & 255) >>> 1;
    i33 = (i25 & 255) >>> 1;
   } else {
    i25 = HEAP32[i5 >> 2] | 0;
    i32 = i25;
    i33 = i25;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i12, i32 << 1, 0);
   if ((HEAP8[i12] & 1) == 0) {
    i34 = 10;
   } else {
    i34 = (HEAP32[i12 >> 2] & -2) + -1 | 0;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i12, i34, 0);
   if ((HEAP8[i12] & 1) == 0) {
    i35 = i19;
   } else {
    i35 = HEAP32[i20 >> 2] | 0;
   }
   HEAP32[i13 >> 2] = i35 + i33;
   i36 = i35;
  } else {
   i36 = i23;
  }
  i25 = i24 + 12 | 0;
  i30 = HEAP32[i25 >> 2] | 0;
  i37 = i24 + 16 | 0;
  if ((i30 | 0) == (HEAP32[i37 >> 2] | 0)) {
   i38 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i24 >> 2] | 0) + 36 >> 2] & 127](i24) | 0;
  } else {
   i38 = HEAPU8[i30] | 0;
  }
  if ((__ZNSt3__19__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_(i38 & 255, i17, i18, i36, i13, i22, i9, i11, i14, i15, i16, i8) | 0) != 0) {
   i28 = i27;
   i29 = i36;
   break;
  }
  i30 = HEAP32[i25 >> 2] | 0;
  if ((i30 | 0) == (HEAP32[i37 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[i24 >> 2] | 0) + 40 >> 2] & 127](i24) | 0;
   i10 = i24;
   i23 = i36;
   continue;
  } else {
   HEAP32[i25 >> 2] = i30 + 1;
   i10 = i24;
   i23 = i36;
   continue;
  }
 }
 i36 = HEAP8[i11] | 0;
 if ((i36 & 1) == 0) {
  i39 = (i36 & 255) >>> 1;
 } else {
  i39 = HEAP32[i11 + 4 >> 2] | 0;
 }
 if ((i39 | 0) != 0) {
  if ((HEAP8[i17] | 0) != 0) {
   i17 = HEAP32[i15 >> 2] | 0;
   if ((i17 - i14 | 0) < 160) {
    i39 = HEAP32[i16 >> 2] | 0;
    HEAP32[i15 >> 2] = i17 + 4;
    HEAP32[i17 >> 2] = i39;
   }
  }
 }
 HEAPF64[i7 >> 3] = +__ZNSt3__115__num_get_floatIdEET_PKcS3_Rj(i29, HEAP32[i13 >> 2] | 0, i6);
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj(i11, i14, HEAP32[i15 >> 2] | 0, i6);
 if ((i24 | 0) == 0) {
  i40 = 0;
 } else {
  if ((HEAP32[i24 + 12 >> 2] | 0) == (HEAP32[i24 + 16 >> 2] | 0)) {
   if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i24 >> 2] | 0) + 36 >> 2] & 127](i24) | 0) == -1) {
    HEAP32[i3 >> 2] = 0;
    i40 = 0;
   } else {
    i40 = i24;
   }
  } else {
   i40 = i24;
  }
 }
 i24 = (i40 | 0) == 0;
 do {
  if ((i28 | 0) == 0) {
   i26 = 51;
  } else {
   if ((HEAP32[i28 + 12 >> 2] | 0) != (HEAP32[i28 + 16 >> 2] | 0)) {
    if (!i24) {
     break;
    }
    HEAP32[i1 >> 2] = i40;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i12);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i11);
    STACKTOP = i2;
    return;
   }
   if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i28 >> 2] | 0) + 36 >> 2] & 127](i28) | 0) == -1) {
    HEAP32[i4 >> 2] = 0;
    i26 = 51;
    break;
   }
   if (i24 ^ (i28 | 0) == 0) {
    HEAP32[i1 >> 2] = i40;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i12);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i11);
    STACKTOP = i2;
    return;
   }
  }
 } while (0);
 if ((i26 | 0) == 51) {
  if (!i24) {
   HEAP32[i1 >> 2] = i40;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i12);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i11);
   STACKTOP = i2;
   return;
  }
 }
 HEAP32[i6 >> 2] = HEAP32[i6 >> 2] | 2;
 HEAP32[i1 >> 2] = i40;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i12);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i11);
 STACKTOP = i2;
 return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_(i1, i2, i3, i4, i5, i6, i7) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 var i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 304 | 0;
 i8 = i2 + 200 | 0;
 i9 = i2;
 i10 = i2 + 4 | 0;
 i11 = i2 + 16 | 0;
 i12 = i2 + 28 | 0;
 i13 = i2 + 32 | 0;
 i14 = i2 + 192 | 0;
 i15 = i2 + 196 | 0;
 i16 = HEAP32[i5 + 4 >> 2] & 74;
 if ((i16 | 0) == 8) {
  i17 = 16;
 } else if ((i16 | 0) == 0) {
  i17 = 0;
 } else if ((i16 | 0) == 64) {
  i17 = 8;
 } else {
  i17 = 10;
 }
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw(i10, i5, i8, i9);
 HEAP32[i11 + 0 >> 2] = 0;
 HEAP32[i11 + 4 >> 2] = 0;
 HEAP32[i11 + 8 >> 2] = 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i11, 10, 0);
 if ((HEAP8[i11] & 1) == 0) {
  i5 = i11 + 1 | 0;
  i18 = i5;
  i19 = i11 + 8 | 0;
  i20 = i5;
 } else {
  i5 = i11 + 8 | 0;
  i18 = i11 + 1 | 0;
  i19 = i5;
  i20 = HEAP32[i5 >> 2] | 0;
 }
 HEAP32[i12 >> 2] = i20;
 HEAP32[i14 >> 2] = i13;
 HEAP32[i15 >> 2] = 0;
 i5 = i11 + 4 | 0;
 i16 = HEAP32[i9 >> 2] | 0;
 i9 = HEAP32[i3 >> 2] | 0;
 i21 = i20;
 L10 : while (1) {
  if ((i9 | 0) == 0) {
   i22 = 1;
   i23 = 0;
  } else {
   i20 = HEAP32[i9 + 12 >> 2] | 0;
   if ((i20 | 0) == (HEAP32[i9 + 16 >> 2] | 0)) {
    i24 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i9 >> 2] | 0) + 36 >> 2] & 127](i9) | 0;
   } else {
    i24 = HEAP32[i20 >> 2] | 0;
   }
   if ((i24 | 0) == -1) {
    HEAP32[i3 >> 2] = 0;
    i22 = 1;
    i23 = 0;
   } else {
    i22 = 0;
    i23 = i9;
   }
  }
  i20 = HEAP32[i4 >> 2] | 0;
  do {
   if ((i20 | 0) == 0) {
    i25 = 21;
   } else {
    i26 = HEAP32[i20 + 12 >> 2] | 0;
    if ((i26 | 0) == (HEAP32[i20 + 16 >> 2] | 0)) {
     i27 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i20 >> 2] | 0) + 36 >> 2] & 127](i20) | 0;
    } else {
     i27 = HEAP32[i26 >> 2] | 0;
    }
    if ((i27 | 0) == -1) {
     HEAP32[i4 >> 2] = 0;
     i25 = 21;
     break;
    } else {
     if (i22) {
      i28 = i20;
      break;
     } else {
      i29 = i20;
      i30 = i21;
      break L10;
     }
    }
   }
  } while (0);
  if ((i25 | 0) == 21) {
   i25 = 0;
   if (i22) {
    i29 = 0;
    i30 = i21;
    break;
   } else {
    i28 = 0;
   }
  }
  i20 = HEAP8[i11] | 0;
  i26 = (i20 & 1) == 0;
  if (i26) {
   i31 = (i20 & 255) >>> 1;
  } else {
   i31 = HEAP32[i5 >> 2] | 0;
  }
  if (((HEAP32[i12 >> 2] | 0) - i21 | 0) == (i31 | 0)) {
   if (i26) {
    i32 = (i20 & 255) >>> 1;
    i33 = (i20 & 255) >>> 1;
   } else {
    i20 = HEAP32[i5 >> 2] | 0;
    i32 = i20;
    i33 = i20;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i11, i32 << 1, 0);
   if ((HEAP8[i11] & 1) == 0) {
    i34 = 10;
   } else {
    i34 = (HEAP32[i11 >> 2] & -2) + -1 | 0;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i11, i34, 0);
   if ((HEAP8[i11] & 1) == 0) {
    i35 = i18;
   } else {
    i35 = HEAP32[i19 >> 2] | 0;
   }
   HEAP32[i12 >> 2] = i35 + i33;
   i36 = i35;
  } else {
   i36 = i21;
  }
  i20 = i23 + 12 | 0;
  i26 = HEAP32[i20 >> 2] | 0;
  i37 = i23 + 16 | 0;
  if ((i26 | 0) == (HEAP32[i37 >> 2] | 0)) {
   i38 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i23 >> 2] | 0) + 36 >> 2] & 127](i23) | 0;
  } else {
   i38 = HEAP32[i26 >> 2] | 0;
  }
  if ((__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw(i38, i17, i36, i12, i15, i16, i10, i13, i14, i8) | 0) != 0) {
   i29 = i28;
   i30 = i36;
   break;
  }
  i26 = HEAP32[i20 >> 2] | 0;
  if ((i26 | 0) == (HEAP32[i37 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[i23 >> 2] | 0) + 40 >> 2] & 127](i23) | 0;
   i9 = i23;
   i21 = i36;
   continue;
  } else {
   HEAP32[i20 >> 2] = i26 + 4;
   i9 = i23;
   i21 = i36;
   continue;
  }
 }
 i36 = HEAP8[i10] | 0;
 if ((i36 & 1) == 0) {
  i39 = (i36 & 255) >>> 1;
 } else {
  i39 = HEAP32[i10 + 4 >> 2] | 0;
 }
 if ((i39 | 0) != 0) {
  i39 = HEAP32[i14 >> 2] | 0;
  if ((i39 - i13 | 0) < 160) {
   i36 = HEAP32[i15 >> 2] | 0;
   HEAP32[i14 >> 2] = i39 + 4;
   HEAP32[i39 >> 2] = i36;
  }
 }
 i36 = __ZNSt3__127__num_get_unsigned_integralIyEET_PKcS3_Rji(i30, HEAP32[i12 >> 2] | 0, i6, i17) | 0;
 i17 = i7;
 HEAP32[i17 >> 2] = i36;
 HEAP32[i17 + 4 >> 2] = tempRet0;
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj(i10, i13, HEAP32[i14 >> 2] | 0, i6);
 if ((i23 | 0) == 0) {
  i40 = 0;
  i41 = 1;
 } else {
  i14 = HEAP32[i23 + 12 >> 2] | 0;
  if ((i14 | 0) == (HEAP32[i23 + 16 >> 2] | 0)) {
   i42 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i23 >> 2] | 0) + 36 >> 2] & 127](i23) | 0;
  } else {
   i42 = HEAP32[i14 >> 2] | 0;
  }
  if ((i42 | 0) == -1) {
   HEAP32[i3 >> 2] = 0;
   i40 = 0;
   i41 = 1;
  } else {
   i40 = i23;
   i41 = 0;
  }
 }
 do {
  if ((i29 | 0) == 0) {
   i25 = 60;
  } else {
   i23 = HEAP32[i29 + 12 >> 2] | 0;
   if ((i23 | 0) == (HEAP32[i29 + 16 >> 2] | 0)) {
    i43 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i29 >> 2] | 0) + 36 >> 2] & 127](i29) | 0;
   } else {
    i43 = HEAP32[i23 >> 2] | 0;
   }
   if ((i43 | 0) == -1) {
    HEAP32[i4 >> 2] = 0;
    i25 = 60;
    break;
   }
   if (i41) {
    HEAP32[i1 >> 2] = i40;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i11);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i10);
    STACKTOP = i2;
    return;
   }
  }
 } while (0);
 if ((i25 | 0) == 60) {
  if (!i41) {
   HEAP32[i1 >> 2] = i40;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i11);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i10);
   STACKTOP = i2;
   return;
  }
 }
 HEAP32[i6 >> 2] = HEAP32[i6 >> 2] | 2;
 HEAP32[i1 >> 2] = i40;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i11);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i10);
 STACKTOP = i2;
 return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_(i1, i2, i3, i4, i5, i6, i7) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 var i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 304 | 0;
 i8 = i2 + 200 | 0;
 i9 = i2;
 i10 = i2 + 4 | 0;
 i11 = i2 + 16 | 0;
 i12 = i2 + 28 | 0;
 i13 = i2 + 32 | 0;
 i14 = i2 + 192 | 0;
 i15 = i2 + 196 | 0;
 i16 = HEAP32[i5 + 4 >> 2] & 74;
 if ((i16 | 0) == 8) {
  i17 = 16;
 } else if ((i16 | 0) == 0) {
  i17 = 0;
 } else if ((i16 | 0) == 64) {
  i17 = 8;
 } else {
  i17 = 10;
 }
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw(i10, i5, i8, i9);
 HEAP32[i11 + 0 >> 2] = 0;
 HEAP32[i11 + 4 >> 2] = 0;
 HEAP32[i11 + 8 >> 2] = 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i11, 10, 0);
 if ((HEAP8[i11] & 1) == 0) {
  i5 = i11 + 1 | 0;
  i18 = i5;
  i19 = i11 + 8 | 0;
  i20 = i5;
 } else {
  i5 = i11 + 8 | 0;
  i18 = i11 + 1 | 0;
  i19 = i5;
  i20 = HEAP32[i5 >> 2] | 0;
 }
 HEAP32[i12 >> 2] = i20;
 HEAP32[i14 >> 2] = i13;
 HEAP32[i15 >> 2] = 0;
 i5 = i11 + 4 | 0;
 i16 = HEAP32[i9 >> 2] | 0;
 i9 = HEAP32[i3 >> 2] | 0;
 i21 = i20;
 L10 : while (1) {
  if ((i9 | 0) == 0) {
   i22 = 1;
   i23 = 0;
  } else {
   i20 = HEAP32[i9 + 12 >> 2] | 0;
   if ((i20 | 0) == (HEAP32[i9 + 16 >> 2] | 0)) {
    i24 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i9 >> 2] | 0) + 36 >> 2] & 127](i9) | 0;
   } else {
    i24 = HEAP32[i20 >> 2] | 0;
   }
   if ((i24 | 0) == -1) {
    HEAP32[i3 >> 2] = 0;
    i22 = 1;
    i23 = 0;
   } else {
    i22 = 0;
    i23 = i9;
   }
  }
  i20 = HEAP32[i4 >> 2] | 0;
  do {
   if ((i20 | 0) == 0) {
    i25 = 21;
   } else {
    i26 = HEAP32[i20 + 12 >> 2] | 0;
    if ((i26 | 0) == (HEAP32[i20 + 16 >> 2] | 0)) {
     i27 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i20 >> 2] | 0) + 36 >> 2] & 127](i20) | 0;
    } else {
     i27 = HEAP32[i26 >> 2] | 0;
    }
    if ((i27 | 0) == -1) {
     HEAP32[i4 >> 2] = 0;
     i25 = 21;
     break;
    } else {
     if (i22) {
      i28 = i20;
      break;
     } else {
      i29 = i20;
      i30 = i21;
      break L10;
     }
    }
   }
  } while (0);
  if ((i25 | 0) == 21) {
   i25 = 0;
   if (i22) {
    i29 = 0;
    i30 = i21;
    break;
   } else {
    i28 = 0;
   }
  }
  i20 = HEAP8[i11] | 0;
  i26 = (i20 & 1) == 0;
  if (i26) {
   i31 = (i20 & 255) >>> 1;
  } else {
   i31 = HEAP32[i5 >> 2] | 0;
  }
  if (((HEAP32[i12 >> 2] | 0) - i21 | 0) == (i31 | 0)) {
   if (i26) {
    i32 = (i20 & 255) >>> 1;
    i33 = (i20 & 255) >>> 1;
   } else {
    i20 = HEAP32[i5 >> 2] | 0;
    i32 = i20;
    i33 = i20;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i11, i32 << 1, 0);
   if ((HEAP8[i11] & 1) == 0) {
    i34 = 10;
   } else {
    i34 = (HEAP32[i11 >> 2] & -2) + -1 | 0;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i11, i34, 0);
   if ((HEAP8[i11] & 1) == 0) {
    i35 = i18;
   } else {
    i35 = HEAP32[i19 >> 2] | 0;
   }
   HEAP32[i12 >> 2] = i35 + i33;
   i36 = i35;
  } else {
   i36 = i21;
  }
  i20 = i23 + 12 | 0;
  i26 = HEAP32[i20 >> 2] | 0;
  i37 = i23 + 16 | 0;
  if ((i26 | 0) == (HEAP32[i37 >> 2] | 0)) {
   i38 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i23 >> 2] | 0) + 36 >> 2] & 127](i23) | 0;
  } else {
   i38 = HEAP32[i26 >> 2] | 0;
  }
  if ((__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw(i38, i17, i36, i12, i15, i16, i10, i13, i14, i8) | 0) != 0) {
   i29 = i28;
   i30 = i36;
   break;
  }
  i26 = HEAP32[i20 >> 2] | 0;
  if ((i26 | 0) == (HEAP32[i37 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[i23 >> 2] | 0) + 40 >> 2] & 127](i23) | 0;
   i9 = i23;
   i21 = i36;
   continue;
  } else {
   HEAP32[i20 >> 2] = i26 + 4;
   i9 = i23;
   i21 = i36;
   continue;
  }
 }
 i36 = HEAP8[i10] | 0;
 if ((i36 & 1) == 0) {
  i39 = (i36 & 255) >>> 1;
 } else {
  i39 = HEAP32[i10 + 4 >> 2] | 0;
 }
 if ((i39 | 0) != 0) {
  i39 = HEAP32[i14 >> 2] | 0;
  if ((i39 - i13 | 0) < 160) {
   i36 = HEAP32[i15 >> 2] | 0;
   HEAP32[i14 >> 2] = i39 + 4;
   HEAP32[i39 >> 2] = i36;
  }
 }
 i36 = __ZNSt3__125__num_get_signed_integralIxEET_PKcS3_Rji(i30, HEAP32[i12 >> 2] | 0, i6, i17) | 0;
 i17 = i7;
 HEAP32[i17 >> 2] = i36;
 HEAP32[i17 + 4 >> 2] = tempRet0;
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj(i10, i13, HEAP32[i14 >> 2] | 0, i6);
 if ((i23 | 0) == 0) {
  i40 = 0;
  i41 = 1;
 } else {
  i14 = HEAP32[i23 + 12 >> 2] | 0;
  if ((i14 | 0) == (HEAP32[i23 + 16 >> 2] | 0)) {
   i42 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i23 >> 2] | 0) + 36 >> 2] & 127](i23) | 0;
  } else {
   i42 = HEAP32[i14 >> 2] | 0;
  }
  if ((i42 | 0) == -1) {
   HEAP32[i3 >> 2] = 0;
   i40 = 0;
   i41 = 1;
  } else {
   i40 = i23;
   i41 = 0;
  }
 }
 do {
  if ((i29 | 0) == 0) {
   i25 = 60;
  } else {
   i23 = HEAP32[i29 + 12 >> 2] | 0;
   if ((i23 | 0) == (HEAP32[i29 + 16 >> 2] | 0)) {
    i43 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i29 >> 2] | 0) + 36 >> 2] & 127](i29) | 0;
   } else {
    i43 = HEAP32[i23 >> 2] | 0;
   }
   if ((i43 | 0) == -1) {
    HEAP32[i4 >> 2] = 0;
    i25 = 60;
    break;
   }
   if (i41) {
    HEAP32[i1 >> 2] = i40;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i11);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i10);
    STACKTOP = i2;
    return;
   }
  }
 } while (0);
 if ((i25 | 0) == 60) {
  if (!i41) {
   HEAP32[i1 >> 2] = i40;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i11);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i10);
   STACKTOP = i2;
   return;
  }
 }
 HEAP32[i6 >> 2] = HEAP32[i6 >> 2] | 2;
 HEAP32[i1 >> 2] = i40;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i11);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i10);
 STACKTOP = i2;
 return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_(i1, i2, i3, i4, i5, i6, i7) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 var i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 224 | 0;
 i8 = i2 + 198 | 0;
 i9 = i2 + 196 | 0;
 i10 = i2 + 4 | 0;
 i11 = i2 + 16 | 0;
 i12 = i2 + 28 | 0;
 i13 = i2 + 32 | 0;
 i14 = i2;
 i15 = i2 + 192 | 0;
 i16 = HEAP32[i5 + 4 >> 2] & 74;
 if ((i16 | 0) == 64) {
  i17 = 8;
 } else if ((i16 | 0) == 0) {
  i17 = 0;
 } else if ((i16 | 0) == 8) {
  i17 = 16;
 } else {
  i17 = 10;
 }
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc(i10, i5, i8, i9);
 HEAP32[i11 + 0 >> 2] = 0;
 HEAP32[i11 + 4 >> 2] = 0;
 HEAP32[i11 + 8 >> 2] = 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i11, 10, 0);
 if ((HEAP8[i11] & 1) == 0) {
  i5 = i11 + 1 | 0;
  i18 = i5;
  i19 = i11 + 8 | 0;
  i20 = i5;
 } else {
  i5 = i11 + 8 | 0;
  i18 = i11 + 1 | 0;
  i19 = i5;
  i20 = HEAP32[i5 >> 2] | 0;
 }
 HEAP32[i12 >> 2] = i20;
 HEAP32[i14 >> 2] = i13;
 HEAP32[i15 >> 2] = 0;
 i5 = i11 + 4 | 0;
 i16 = HEAP8[i9] | 0;
 i9 = HEAP32[i3 >> 2] | 0;
 i21 = i20;
 L10 : while (1) {
  if ((i9 | 0) == 0) {
   i22 = 0;
  } else {
   if ((HEAP32[i9 + 12 >> 2] | 0) == (HEAP32[i9 + 16 >> 2] | 0)) {
    if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i9 >> 2] | 0) + 36 >> 2] & 127](i9) | 0) == -1) {
     HEAP32[i3 >> 2] = 0;
     i22 = 0;
    } else {
     i22 = i9;
    }
   } else {
    i22 = i9;
   }
  }
  i20 = (i22 | 0) == 0;
  i23 = HEAP32[i4 >> 2] | 0;
  do {
   if ((i23 | 0) == 0) {
    i24 = 18;
   } else {
    if ((HEAP32[i23 + 12 >> 2] | 0) != (HEAP32[i23 + 16 >> 2] | 0)) {
     if (i20) {
      i25 = i23;
      break;
     } else {
      i26 = i23;
      i27 = i21;
      break L10;
     }
    }
    if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i23 >> 2] | 0) + 36 >> 2] & 127](i23) | 0) == -1) {
     HEAP32[i4 >> 2] = 0;
     i24 = 18;
     break;
    } else {
     if (i20) {
      i25 = i23;
      break;
     } else {
      i26 = i23;
      i27 = i21;
      break L10;
     }
    }
   }
  } while (0);
  if ((i24 | 0) == 18) {
   i24 = 0;
   if (i20) {
    i26 = 0;
    i27 = i21;
    break;
   } else {
    i25 = 0;
   }
  }
  i23 = HEAP8[i11] | 0;
  i28 = (i23 & 1) == 0;
  if (i28) {
   i29 = (i23 & 255) >>> 1;
  } else {
   i29 = HEAP32[i5 >> 2] | 0;
  }
  if (((HEAP32[i12 >> 2] | 0) - i21 | 0) == (i29 | 0)) {
   if (i28) {
    i30 = (i23 & 255) >>> 1;
    i31 = (i23 & 255) >>> 1;
   } else {
    i23 = HEAP32[i5 >> 2] | 0;
    i30 = i23;
    i31 = i23;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i11, i30 << 1, 0);
   if ((HEAP8[i11] & 1) == 0) {
    i32 = 10;
   } else {
    i32 = (HEAP32[i11 >> 2] & -2) + -1 | 0;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i11, i32, 0);
   if ((HEAP8[i11] & 1) == 0) {
    i33 = i18;
   } else {
    i33 = HEAP32[i19 >> 2] | 0;
   }
   HEAP32[i12 >> 2] = i33 + i31;
   i34 = i33;
  } else {
   i34 = i21;
  }
  i23 = i22 + 12 | 0;
  i28 = HEAP32[i23 >> 2] | 0;
  i35 = i22 + 16 | 0;
  if ((i28 | 0) == (HEAP32[i35 >> 2] | 0)) {
   i36 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i22 >> 2] | 0) + 36 >> 2] & 127](i22) | 0;
  } else {
   i36 = HEAPU8[i28] | 0;
  }
  if ((__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_(i36 & 255, i17, i34, i12, i15, i16, i10, i13, i14, i8) | 0) != 0) {
   i26 = i25;
   i27 = i34;
   break;
  }
  i28 = HEAP32[i23 >> 2] | 0;
  if ((i28 | 0) == (HEAP32[i35 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[i22 >> 2] | 0) + 40 >> 2] & 127](i22) | 0;
   i9 = i22;
   i21 = i34;
   continue;
  } else {
   HEAP32[i23 >> 2] = i28 + 1;
   i9 = i22;
   i21 = i34;
   continue;
  }
 }
 i34 = HEAP8[i10] | 0;
 if ((i34 & 1) == 0) {
  i37 = (i34 & 255) >>> 1;
 } else {
  i37 = HEAP32[i10 + 4 >> 2] | 0;
 }
 if ((i37 | 0) != 0) {
  i37 = HEAP32[i14 >> 2] | 0;
  if ((i37 - i13 | 0) < 160) {
   i34 = HEAP32[i15 >> 2] | 0;
   HEAP32[i14 >> 2] = i37 + 4;
   HEAP32[i37 >> 2] = i34;
  }
 }
 HEAP16[i7 >> 1] = __ZNSt3__127__num_get_unsigned_integralItEET_PKcS3_Rji(i27, HEAP32[i12 >> 2] | 0, i6, i17) | 0;
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj(i10, i13, HEAP32[i14 >> 2] | 0, i6);
 if ((i22 | 0) == 0) {
  i38 = 0;
 } else {
  if ((HEAP32[i22 + 12 >> 2] | 0) == (HEAP32[i22 + 16 >> 2] | 0)) {
   if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i22 >> 2] | 0) + 36 >> 2] & 127](i22) | 0) == -1) {
    HEAP32[i3 >> 2] = 0;
    i38 = 0;
   } else {
    i38 = i22;
   }
  } else {
   i38 = i22;
  }
 }
 i22 = (i38 | 0) == 0;
 do {
  if ((i26 | 0) == 0) {
   i24 = 54;
  } else {
   if ((HEAP32[i26 + 12 >> 2] | 0) != (HEAP32[i26 + 16 >> 2] | 0)) {
    if (!i22) {
     break;
    }
    HEAP32[i1 >> 2] = i38;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i11);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i10);
    STACKTOP = i2;
    return;
   }
   if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i26 >> 2] | 0) + 36 >> 2] & 127](i26) | 0) == -1) {
    HEAP32[i4 >> 2] = 0;
    i24 = 54;
    break;
   }
   if (i22 ^ (i26 | 0) == 0) {
    HEAP32[i1 >> 2] = i38;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i11);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i10);
    STACKTOP = i2;
    return;
   }
  }
 } while (0);
 if ((i24 | 0) == 54) {
  if (!i22) {
   HEAP32[i1 >> 2] = i38;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i11);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i10);
   STACKTOP = i2;
   return;
  }
 }
 HEAP32[i6 >> 2] = HEAP32[i6 >> 2] | 2;
 HEAP32[i1 >> 2] = i38;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i11);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i10);
 STACKTOP = i2;
 return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_(i1, i2, i3, i4, i5, i6, i7) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 var i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 224 | 0;
 i8 = i2 + 198 | 0;
 i9 = i2 + 196 | 0;
 i10 = i2 + 4 | 0;
 i11 = i2 + 16 | 0;
 i12 = i2 + 28 | 0;
 i13 = i2 + 32 | 0;
 i14 = i2;
 i15 = i2 + 192 | 0;
 i16 = HEAP32[i5 + 4 >> 2] & 74;
 if ((i16 | 0) == 64) {
  i17 = 8;
 } else if ((i16 | 0) == 0) {
  i17 = 0;
 } else if ((i16 | 0) == 8) {
  i17 = 16;
 } else {
  i17 = 10;
 }
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc(i10, i5, i8, i9);
 HEAP32[i11 + 0 >> 2] = 0;
 HEAP32[i11 + 4 >> 2] = 0;
 HEAP32[i11 + 8 >> 2] = 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i11, 10, 0);
 if ((HEAP8[i11] & 1) == 0) {
  i5 = i11 + 1 | 0;
  i18 = i5;
  i19 = i11 + 8 | 0;
  i20 = i5;
 } else {
  i5 = i11 + 8 | 0;
  i18 = i11 + 1 | 0;
  i19 = i5;
  i20 = HEAP32[i5 >> 2] | 0;
 }
 HEAP32[i12 >> 2] = i20;
 HEAP32[i14 >> 2] = i13;
 HEAP32[i15 >> 2] = 0;
 i5 = i11 + 4 | 0;
 i16 = HEAP8[i9] | 0;
 i9 = HEAP32[i3 >> 2] | 0;
 i21 = i20;
 L10 : while (1) {
  if ((i9 | 0) == 0) {
   i22 = 0;
  } else {
   if ((HEAP32[i9 + 12 >> 2] | 0) == (HEAP32[i9 + 16 >> 2] | 0)) {
    if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i9 >> 2] | 0) + 36 >> 2] & 127](i9) | 0) == -1) {
     HEAP32[i3 >> 2] = 0;
     i22 = 0;
    } else {
     i22 = i9;
    }
   } else {
    i22 = i9;
   }
  }
  i20 = (i22 | 0) == 0;
  i23 = HEAP32[i4 >> 2] | 0;
  do {
   if ((i23 | 0) == 0) {
    i24 = 18;
   } else {
    if ((HEAP32[i23 + 12 >> 2] | 0) != (HEAP32[i23 + 16 >> 2] | 0)) {
     if (i20) {
      i25 = i23;
      break;
     } else {
      i26 = i23;
      i27 = i21;
      break L10;
     }
    }
    if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i23 >> 2] | 0) + 36 >> 2] & 127](i23) | 0) == -1) {
     HEAP32[i4 >> 2] = 0;
     i24 = 18;
     break;
    } else {
     if (i20) {
      i25 = i23;
      break;
     } else {
      i26 = i23;
      i27 = i21;
      break L10;
     }
    }
   }
  } while (0);
  if ((i24 | 0) == 18) {
   i24 = 0;
   if (i20) {
    i26 = 0;
    i27 = i21;
    break;
   } else {
    i25 = 0;
   }
  }
  i23 = HEAP8[i11] | 0;
  i28 = (i23 & 1) == 0;
  if (i28) {
   i29 = (i23 & 255) >>> 1;
  } else {
   i29 = HEAP32[i5 >> 2] | 0;
  }
  if (((HEAP32[i12 >> 2] | 0) - i21 | 0) == (i29 | 0)) {
   if (i28) {
    i30 = (i23 & 255) >>> 1;
    i31 = (i23 & 255) >>> 1;
   } else {
    i23 = HEAP32[i5 >> 2] | 0;
    i30 = i23;
    i31 = i23;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i11, i30 << 1, 0);
   if ((HEAP8[i11] & 1) == 0) {
    i32 = 10;
   } else {
    i32 = (HEAP32[i11 >> 2] & -2) + -1 | 0;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i11, i32, 0);
   if ((HEAP8[i11] & 1) == 0) {
    i33 = i18;
   } else {
    i33 = HEAP32[i19 >> 2] | 0;
   }
   HEAP32[i12 >> 2] = i33 + i31;
   i34 = i33;
  } else {
   i34 = i21;
  }
  i23 = i22 + 12 | 0;
  i28 = HEAP32[i23 >> 2] | 0;
  i35 = i22 + 16 | 0;
  if ((i28 | 0) == (HEAP32[i35 >> 2] | 0)) {
   i36 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i22 >> 2] | 0) + 36 >> 2] & 127](i22) | 0;
  } else {
   i36 = HEAPU8[i28] | 0;
  }
  if ((__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_(i36 & 255, i17, i34, i12, i15, i16, i10, i13, i14, i8) | 0) != 0) {
   i26 = i25;
   i27 = i34;
   break;
  }
  i28 = HEAP32[i23 >> 2] | 0;
  if ((i28 | 0) == (HEAP32[i35 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[i22 >> 2] | 0) + 40 >> 2] & 127](i22) | 0;
   i9 = i22;
   i21 = i34;
   continue;
  } else {
   HEAP32[i23 >> 2] = i28 + 1;
   i9 = i22;
   i21 = i34;
   continue;
  }
 }
 i34 = HEAP8[i10] | 0;
 if ((i34 & 1) == 0) {
  i37 = (i34 & 255) >>> 1;
 } else {
  i37 = HEAP32[i10 + 4 >> 2] | 0;
 }
 if ((i37 | 0) != 0) {
  i37 = HEAP32[i14 >> 2] | 0;
  if ((i37 - i13 | 0) < 160) {
   i34 = HEAP32[i15 >> 2] | 0;
   HEAP32[i14 >> 2] = i37 + 4;
   HEAP32[i37 >> 2] = i34;
  }
 }
 HEAP32[i7 >> 2] = __ZNSt3__127__num_get_unsigned_integralImEET_PKcS3_Rji(i27, HEAP32[i12 >> 2] | 0, i6, i17) | 0;
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj(i10, i13, HEAP32[i14 >> 2] | 0, i6);
 if ((i22 | 0) == 0) {
  i38 = 0;
 } else {
  if ((HEAP32[i22 + 12 >> 2] | 0) == (HEAP32[i22 + 16 >> 2] | 0)) {
   if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i22 >> 2] | 0) + 36 >> 2] & 127](i22) | 0) == -1) {
    HEAP32[i3 >> 2] = 0;
    i38 = 0;
   } else {
    i38 = i22;
   }
  } else {
   i38 = i22;
  }
 }
 i22 = (i38 | 0) == 0;
 do {
  if ((i26 | 0) == 0) {
   i24 = 54;
  } else {
   if ((HEAP32[i26 + 12 >> 2] | 0) != (HEAP32[i26 + 16 >> 2] | 0)) {
    if (!i22) {
     break;
    }
    HEAP32[i1 >> 2] = i38;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i11);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i10);
    STACKTOP = i2;
    return;
   }
   if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i26 >> 2] | 0) + 36 >> 2] & 127](i26) | 0) == -1) {
    HEAP32[i4 >> 2] = 0;
    i24 = 54;
    break;
   }
   if (i22 ^ (i26 | 0) == 0) {
    HEAP32[i1 >> 2] = i38;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i11);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i10);
    STACKTOP = i2;
    return;
   }
  }
 } while (0);
 if ((i24 | 0) == 54) {
  if (!i22) {
   HEAP32[i1 >> 2] = i38;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i11);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i10);
   STACKTOP = i2;
   return;
  }
 }
 HEAP32[i6 >> 2] = HEAP32[i6 >> 2] | 2;
 HEAP32[i1 >> 2] = i38;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i11);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i10);
 STACKTOP = i2;
 return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_(i1, i2, i3, i4, i5, i6, i7) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 var i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 224 | 0;
 i8 = i2 + 198 | 0;
 i9 = i2 + 196 | 0;
 i10 = i2 + 4 | 0;
 i11 = i2 + 16 | 0;
 i12 = i2 + 28 | 0;
 i13 = i2 + 32 | 0;
 i14 = i2;
 i15 = i2 + 192 | 0;
 i16 = HEAP32[i5 + 4 >> 2] & 74;
 if ((i16 | 0) == 8) {
  i17 = 16;
 } else if ((i16 | 0) == 0) {
  i17 = 0;
 } else if ((i16 | 0) == 64) {
  i17 = 8;
 } else {
  i17 = 10;
 }
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc(i10, i5, i8, i9);
 HEAP32[i11 + 0 >> 2] = 0;
 HEAP32[i11 + 4 >> 2] = 0;
 HEAP32[i11 + 8 >> 2] = 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i11, 10, 0);
 if ((HEAP8[i11] & 1) == 0) {
  i5 = i11 + 1 | 0;
  i18 = i5;
  i19 = i11 + 8 | 0;
  i20 = i5;
 } else {
  i5 = i11 + 8 | 0;
  i18 = i11 + 1 | 0;
  i19 = i5;
  i20 = HEAP32[i5 >> 2] | 0;
 }
 HEAP32[i12 >> 2] = i20;
 HEAP32[i14 >> 2] = i13;
 HEAP32[i15 >> 2] = 0;
 i5 = i11 + 4 | 0;
 i16 = HEAP8[i9] | 0;
 i9 = HEAP32[i3 >> 2] | 0;
 i21 = i20;
 L10 : while (1) {
  if ((i9 | 0) == 0) {
   i22 = 0;
  } else {
   if ((HEAP32[i9 + 12 >> 2] | 0) == (HEAP32[i9 + 16 >> 2] | 0)) {
    if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i9 >> 2] | 0) + 36 >> 2] & 127](i9) | 0) == -1) {
     HEAP32[i3 >> 2] = 0;
     i22 = 0;
    } else {
     i22 = i9;
    }
   } else {
    i22 = i9;
   }
  }
  i20 = (i22 | 0) == 0;
  i23 = HEAP32[i4 >> 2] | 0;
  do {
   if ((i23 | 0) == 0) {
    i24 = 18;
   } else {
    if ((HEAP32[i23 + 12 >> 2] | 0) != (HEAP32[i23 + 16 >> 2] | 0)) {
     if (i20) {
      i25 = i23;
      break;
     } else {
      i26 = i23;
      i27 = i21;
      break L10;
     }
    }
    if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i23 >> 2] | 0) + 36 >> 2] & 127](i23) | 0) == -1) {
     HEAP32[i4 >> 2] = 0;
     i24 = 18;
     break;
    } else {
     if (i20) {
      i25 = i23;
      break;
     } else {
      i26 = i23;
      i27 = i21;
      break L10;
     }
    }
   }
  } while (0);
  if ((i24 | 0) == 18) {
   i24 = 0;
   if (i20) {
    i26 = 0;
    i27 = i21;
    break;
   } else {
    i25 = 0;
   }
  }
  i23 = HEAP8[i11] | 0;
  i28 = (i23 & 1) == 0;
  if (i28) {
   i29 = (i23 & 255) >>> 1;
  } else {
   i29 = HEAP32[i5 >> 2] | 0;
  }
  if (((HEAP32[i12 >> 2] | 0) - i21 | 0) == (i29 | 0)) {
   if (i28) {
    i30 = (i23 & 255) >>> 1;
    i31 = (i23 & 255) >>> 1;
   } else {
    i23 = HEAP32[i5 >> 2] | 0;
    i30 = i23;
    i31 = i23;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i11, i30 << 1, 0);
   if ((HEAP8[i11] & 1) == 0) {
    i32 = 10;
   } else {
    i32 = (HEAP32[i11 >> 2] & -2) + -1 | 0;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i11, i32, 0);
   if ((HEAP8[i11] & 1) == 0) {
    i33 = i18;
   } else {
    i33 = HEAP32[i19 >> 2] | 0;
   }
   HEAP32[i12 >> 2] = i33 + i31;
   i34 = i33;
  } else {
   i34 = i21;
  }
  i23 = i22 + 12 | 0;
  i28 = HEAP32[i23 >> 2] | 0;
  i35 = i22 + 16 | 0;
  if ((i28 | 0) == (HEAP32[i35 >> 2] | 0)) {
   i36 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i22 >> 2] | 0) + 36 >> 2] & 127](i22) | 0;
  } else {
   i36 = HEAPU8[i28] | 0;
  }
  if ((__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_(i36 & 255, i17, i34, i12, i15, i16, i10, i13, i14, i8) | 0) != 0) {
   i26 = i25;
   i27 = i34;
   break;
  }
  i28 = HEAP32[i23 >> 2] | 0;
  if ((i28 | 0) == (HEAP32[i35 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[i22 >> 2] | 0) + 40 >> 2] & 127](i22) | 0;
   i9 = i22;
   i21 = i34;
   continue;
  } else {
   HEAP32[i23 >> 2] = i28 + 1;
   i9 = i22;
   i21 = i34;
   continue;
  }
 }
 i34 = HEAP8[i10] | 0;
 if ((i34 & 1) == 0) {
  i37 = (i34 & 255) >>> 1;
 } else {
  i37 = HEAP32[i10 + 4 >> 2] | 0;
 }
 if ((i37 | 0) != 0) {
  i37 = HEAP32[i14 >> 2] | 0;
  if ((i37 - i13 | 0) < 160) {
   i34 = HEAP32[i15 >> 2] | 0;
   HEAP32[i14 >> 2] = i37 + 4;
   HEAP32[i37 >> 2] = i34;
  }
 }
 HEAP32[i7 >> 2] = __ZNSt3__127__num_get_unsigned_integralIjEET_PKcS3_Rji(i27, HEAP32[i12 >> 2] | 0, i6, i17) | 0;
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj(i10, i13, HEAP32[i14 >> 2] | 0, i6);
 if ((i22 | 0) == 0) {
  i38 = 0;
 } else {
  if ((HEAP32[i22 + 12 >> 2] | 0) == (HEAP32[i22 + 16 >> 2] | 0)) {
   if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i22 >> 2] | 0) + 36 >> 2] & 127](i22) | 0) == -1) {
    HEAP32[i3 >> 2] = 0;
    i38 = 0;
   } else {
    i38 = i22;
   }
  } else {
   i38 = i22;
  }
 }
 i22 = (i38 | 0) == 0;
 do {
  if ((i26 | 0) == 0) {
   i24 = 54;
  } else {
   if ((HEAP32[i26 + 12 >> 2] | 0) != (HEAP32[i26 + 16 >> 2] | 0)) {
    if (!i22) {
     break;
    }
    HEAP32[i1 >> 2] = i38;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i11);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i10);
    STACKTOP = i2;
    return;
   }
   if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i26 >> 2] | 0) + 36 >> 2] & 127](i26) | 0) == -1) {
    HEAP32[i4 >> 2] = 0;
    i24 = 54;
    break;
   }
   if (i22 ^ (i26 | 0) == 0) {
    HEAP32[i1 >> 2] = i38;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i11);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i10);
    STACKTOP = i2;
    return;
   }
  }
 } while (0);
 if ((i24 | 0) == 54) {
  if (!i22) {
   HEAP32[i1 >> 2] = i38;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i11);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i10);
   STACKTOP = i2;
   return;
  }
 }
 HEAP32[i6 >> 2] = HEAP32[i6 >> 2] | 2;
 HEAP32[i1 >> 2] = i38;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i11);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i10);
 STACKTOP = i2;
 return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_(i1, i2, i3, i4, i5, i6, i7) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 var i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 224 | 0;
 i8 = i2 + 198 | 0;
 i9 = i2 + 196 | 0;
 i10 = i2 + 4 | 0;
 i11 = i2 + 16 | 0;
 i12 = i2 + 28 | 0;
 i13 = i2 + 32 | 0;
 i14 = i2;
 i15 = i2 + 192 | 0;
 i16 = HEAP32[i5 + 4 >> 2] & 74;
 if ((i16 | 0) == 0) {
  i17 = 0;
 } else if ((i16 | 0) == 8) {
  i17 = 16;
 } else if ((i16 | 0) == 64) {
  i17 = 8;
 } else {
  i17 = 10;
 }
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc(i10, i5, i8, i9);
 HEAP32[i11 + 0 >> 2] = 0;
 HEAP32[i11 + 4 >> 2] = 0;
 HEAP32[i11 + 8 >> 2] = 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i11, 10, 0);
 if ((HEAP8[i11] & 1) == 0) {
  i5 = i11 + 1 | 0;
  i18 = i5;
  i19 = i11 + 8 | 0;
  i20 = i5;
 } else {
  i5 = i11 + 8 | 0;
  i18 = i11 + 1 | 0;
  i19 = i5;
  i20 = HEAP32[i5 >> 2] | 0;
 }
 HEAP32[i12 >> 2] = i20;
 HEAP32[i14 >> 2] = i13;
 HEAP32[i15 >> 2] = 0;
 i5 = i11 + 4 | 0;
 i16 = HEAP8[i9] | 0;
 i9 = HEAP32[i3 >> 2] | 0;
 i21 = i20;
 L10 : while (1) {
  if ((i9 | 0) == 0) {
   i22 = 0;
  } else {
   if ((HEAP32[i9 + 12 >> 2] | 0) == (HEAP32[i9 + 16 >> 2] | 0)) {
    if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i9 >> 2] | 0) + 36 >> 2] & 127](i9) | 0) == -1) {
     HEAP32[i3 >> 2] = 0;
     i22 = 0;
    } else {
     i22 = i9;
    }
   } else {
    i22 = i9;
   }
  }
  i20 = (i22 | 0) == 0;
  i23 = HEAP32[i4 >> 2] | 0;
  do {
   if ((i23 | 0) == 0) {
    i24 = 18;
   } else {
    if ((HEAP32[i23 + 12 >> 2] | 0) != (HEAP32[i23 + 16 >> 2] | 0)) {
     if (i20) {
      i25 = i23;
      break;
     } else {
      i26 = i23;
      i27 = i21;
      break L10;
     }
    }
    if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i23 >> 2] | 0) + 36 >> 2] & 127](i23) | 0) == -1) {
     HEAP32[i4 >> 2] = 0;
     i24 = 18;
     break;
    } else {
     if (i20) {
      i25 = i23;
      break;
     } else {
      i26 = i23;
      i27 = i21;
      break L10;
     }
    }
   }
  } while (0);
  if ((i24 | 0) == 18) {
   i24 = 0;
   if (i20) {
    i26 = 0;
    i27 = i21;
    break;
   } else {
    i25 = 0;
   }
  }
  i23 = HEAP8[i11] | 0;
  i28 = (i23 & 1) == 0;
  if (i28) {
   i29 = (i23 & 255) >>> 1;
  } else {
   i29 = HEAP32[i5 >> 2] | 0;
  }
  if (((HEAP32[i12 >> 2] | 0) - i21 | 0) == (i29 | 0)) {
   if (i28) {
    i30 = (i23 & 255) >>> 1;
    i31 = (i23 & 255) >>> 1;
   } else {
    i23 = HEAP32[i5 >> 2] | 0;
    i30 = i23;
    i31 = i23;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i11, i30 << 1, 0);
   if ((HEAP8[i11] & 1) == 0) {
    i32 = 10;
   } else {
    i32 = (HEAP32[i11 >> 2] & -2) + -1 | 0;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i11, i32, 0);
   if ((HEAP8[i11] & 1) == 0) {
    i33 = i18;
   } else {
    i33 = HEAP32[i19 >> 2] | 0;
   }
   HEAP32[i12 >> 2] = i33 + i31;
   i34 = i33;
  } else {
   i34 = i21;
  }
  i23 = i22 + 12 | 0;
  i28 = HEAP32[i23 >> 2] | 0;
  i35 = i22 + 16 | 0;
  if ((i28 | 0) == (HEAP32[i35 >> 2] | 0)) {
   i36 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i22 >> 2] | 0) + 36 >> 2] & 127](i22) | 0;
  } else {
   i36 = HEAPU8[i28] | 0;
  }
  if ((__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_(i36 & 255, i17, i34, i12, i15, i16, i10, i13, i14, i8) | 0) != 0) {
   i26 = i25;
   i27 = i34;
   break;
  }
  i28 = HEAP32[i23 >> 2] | 0;
  if ((i28 | 0) == (HEAP32[i35 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[i22 >> 2] | 0) + 40 >> 2] & 127](i22) | 0;
   i9 = i22;
   i21 = i34;
   continue;
  } else {
   HEAP32[i23 >> 2] = i28 + 1;
   i9 = i22;
   i21 = i34;
   continue;
  }
 }
 i34 = HEAP8[i10] | 0;
 if ((i34 & 1) == 0) {
  i37 = (i34 & 255) >>> 1;
 } else {
  i37 = HEAP32[i10 + 4 >> 2] | 0;
 }
 if ((i37 | 0) != 0) {
  i37 = HEAP32[i14 >> 2] | 0;
  if ((i37 - i13 | 0) < 160) {
   i34 = HEAP32[i15 >> 2] | 0;
   HEAP32[i14 >> 2] = i37 + 4;
   HEAP32[i37 >> 2] = i34;
  }
 }
 HEAP32[i7 >> 2] = __ZNSt3__125__num_get_signed_integralIlEET_PKcS3_Rji(i27, HEAP32[i12 >> 2] | 0, i6, i17) | 0;
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj(i10, i13, HEAP32[i14 >> 2] | 0, i6);
 if ((i22 | 0) == 0) {
  i38 = 0;
 } else {
  if ((HEAP32[i22 + 12 >> 2] | 0) == (HEAP32[i22 + 16 >> 2] | 0)) {
   if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i22 >> 2] | 0) + 36 >> 2] & 127](i22) | 0) == -1) {
    HEAP32[i3 >> 2] = 0;
    i38 = 0;
   } else {
    i38 = i22;
   }
  } else {
   i38 = i22;
  }
 }
 i22 = (i38 | 0) == 0;
 do {
  if ((i26 | 0) == 0) {
   i24 = 54;
  } else {
   if ((HEAP32[i26 + 12 >> 2] | 0) != (HEAP32[i26 + 16 >> 2] | 0)) {
    if (!i22) {
     break;
    }
    HEAP32[i1 >> 2] = i38;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i11);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i10);
    STACKTOP = i2;
    return;
   }
   if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i26 >> 2] | 0) + 36 >> 2] & 127](i26) | 0) == -1) {
    HEAP32[i4 >> 2] = 0;
    i24 = 54;
    break;
   }
   if (i22 ^ (i26 | 0) == 0) {
    HEAP32[i1 >> 2] = i38;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i11);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i10);
    STACKTOP = i2;
    return;
   }
  }
 } while (0);
 if ((i24 | 0) == 54) {
  if (!i22) {
   HEAP32[i1 >> 2] = i38;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i11);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i10);
   STACKTOP = i2;
   return;
  }
 }
 HEAP32[i6 >> 2] = HEAP32[i6 >> 2] | 2;
 HEAP32[i1 >> 2] = i38;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i11);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i10);
 STACKTOP = i2;
 return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_(i1, i2, i3, i4, i5, i6, i7) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 var i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 352 | 0;
 i8 = i2 + 176 | 0;
 i9 = i2 + 332 | 0;
 i10 = i2 + 328 | 0;
 i11 = i2 + 316 | 0;
 i12 = i2 + 304 | 0;
 i13 = i2 + 168 | 0;
 i14 = i2 + 8 | 0;
 i15 = i2 + 4 | 0;
 i16 = i2;
 i17 = i2 + 337 | 0;
 i18 = i2 + 336 | 0;
 __ZNSt3__19__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_(i11, i5, i8, i9, i10);
 HEAP32[i12 + 0 >> 2] = 0;
 HEAP32[i12 + 4 >> 2] = 0;
 HEAP32[i12 + 8 >> 2] = 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i12, 10, 0);
 if ((HEAP8[i12] & 1) == 0) {
  i5 = i12 + 1 | 0;
  i19 = i5;
  i20 = i12 + 8 | 0;
  i21 = i5;
 } else {
  i5 = i12 + 8 | 0;
  i19 = i12 + 1 | 0;
  i20 = i5;
  i21 = HEAP32[i5 >> 2] | 0;
 }
 HEAP32[i13 >> 2] = i21;
 HEAP32[i15 >> 2] = i14;
 HEAP32[i16 >> 2] = 0;
 HEAP8[i17] = 1;
 HEAP8[i18] = 69;
 i5 = i12 + 4 | 0;
 i22 = HEAP32[i9 >> 2] | 0;
 i9 = HEAP32[i10 >> 2] | 0;
 i10 = HEAP32[i3 >> 2] | 0;
 i23 = i21;
 L5 : while (1) {
  if ((i10 | 0) == 0) {
   i24 = 1;
   i25 = 0;
  } else {
   i21 = HEAP32[i10 + 12 >> 2] | 0;
   if ((i21 | 0) == (HEAP32[i10 + 16 >> 2] | 0)) {
    i26 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i10 >> 2] | 0) + 36 >> 2] & 127](i10) | 0;
   } else {
    i26 = HEAP32[i21 >> 2] | 0;
   }
   if ((i26 | 0) == -1) {
    HEAP32[i3 >> 2] = 0;
    i24 = 1;
    i25 = 0;
   } else {
    i24 = 0;
    i25 = i10;
   }
  }
  i21 = HEAP32[i4 >> 2] | 0;
  do {
   if ((i21 | 0) == 0) {
    i27 = 17;
   } else {
    i28 = HEAP32[i21 + 12 >> 2] | 0;
    if ((i28 | 0) == (HEAP32[i21 + 16 >> 2] | 0)) {
     i29 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i21 >> 2] | 0) + 36 >> 2] & 127](i21) | 0;
    } else {
     i29 = HEAP32[i28 >> 2] | 0;
    }
    if ((i29 | 0) == -1) {
     HEAP32[i4 >> 2] = 0;
     i27 = 17;
     break;
    } else {
     if (i24) {
      i30 = i21;
      break;
     } else {
      i31 = i21;
      i32 = i23;
      break L5;
     }
    }
   }
  } while (0);
  if ((i27 | 0) == 17) {
   i27 = 0;
   if (i24) {
    i31 = 0;
    i32 = i23;
    break;
   } else {
    i30 = 0;
   }
  }
  i21 = HEAP8[i12] | 0;
  i28 = (i21 & 1) == 0;
  if (i28) {
   i33 = (i21 & 255) >>> 1;
  } else {
   i33 = HEAP32[i5 >> 2] | 0;
  }
  if (((HEAP32[i13 >> 2] | 0) - i23 | 0) == (i33 | 0)) {
   if (i28) {
    i34 = (i21 & 255) >>> 1;
    i35 = (i21 & 255) >>> 1;
   } else {
    i21 = HEAP32[i5 >> 2] | 0;
    i34 = i21;
    i35 = i21;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i12, i34 << 1, 0);
   if ((HEAP8[i12] & 1) == 0) {
    i36 = 10;
   } else {
    i36 = (HEAP32[i12 >> 2] & -2) + -1 | 0;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i12, i36, 0);
   if ((HEAP8[i12] & 1) == 0) {
    i37 = i19;
   } else {
    i37 = HEAP32[i20 >> 2] | 0;
   }
   HEAP32[i13 >> 2] = i37 + i35;
   i38 = i37;
  } else {
   i38 = i23;
  }
  i21 = i25 + 12 | 0;
  i28 = HEAP32[i21 >> 2] | 0;
  i39 = i25 + 16 | 0;
  if ((i28 | 0) == (HEAP32[i39 >> 2] | 0)) {
   i40 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i25 >> 2] | 0) + 36 >> 2] & 127](i25) | 0;
  } else {
   i40 = HEAP32[i28 >> 2] | 0;
  }
  if ((__ZNSt3__19__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw(i40, i17, i18, i38, i13, i22, i9, i11, i14, i15, i16, i8) | 0) != 0) {
   i31 = i30;
   i32 = i38;
   break;
  }
  i28 = HEAP32[i21 >> 2] | 0;
  if ((i28 | 0) == (HEAP32[i39 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[i25 >> 2] | 0) + 40 >> 2] & 127](i25) | 0;
   i10 = i25;
   i23 = i38;
   continue;
  } else {
   HEAP32[i21 >> 2] = i28 + 4;
   i10 = i25;
   i23 = i38;
   continue;
  }
 }
 i38 = HEAP8[i11] | 0;
 if ((i38 & 1) == 0) {
  i41 = (i38 & 255) >>> 1;
 } else {
  i41 = HEAP32[i11 + 4 >> 2] | 0;
 }
 if ((i41 | 0) != 0) {
  if ((HEAP8[i17] | 0) != 0) {
   i17 = HEAP32[i15 >> 2] | 0;
   if ((i17 - i14 | 0) < 160) {
    i41 = HEAP32[i16 >> 2] | 0;
    HEAP32[i15 >> 2] = i17 + 4;
    HEAP32[i17 >> 2] = i41;
   }
  }
 }
 HEAPF32[i7 >> 2] = +__ZNSt3__115__num_get_floatIfEET_PKcS3_Rj(i32, HEAP32[i13 >> 2] | 0, i6);
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj(i11, i14, HEAP32[i15 >> 2] | 0, i6);
 if ((i25 | 0) == 0) {
  i42 = 0;
  i43 = 1;
 } else {
  i15 = HEAP32[i25 + 12 >> 2] | 0;
  if ((i15 | 0) == (HEAP32[i25 + 16 >> 2] | 0)) {
   i44 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i25 >> 2] | 0) + 36 >> 2] & 127](i25) | 0;
  } else {
   i44 = HEAP32[i15 >> 2] | 0;
  }
  if ((i44 | 0) == -1) {
   HEAP32[i3 >> 2] = 0;
   i42 = 0;
   i43 = 1;
  } else {
   i42 = i25;
   i43 = 0;
  }
 }
 do {
  if ((i31 | 0) == 0) {
   i27 = 57;
  } else {
   i25 = HEAP32[i31 + 12 >> 2] | 0;
   if ((i25 | 0) == (HEAP32[i31 + 16 >> 2] | 0)) {
    i45 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i31 >> 2] | 0) + 36 >> 2] & 127](i31) | 0;
   } else {
    i45 = HEAP32[i25 >> 2] | 0;
   }
   if ((i45 | 0) == -1) {
    HEAP32[i4 >> 2] = 0;
    i27 = 57;
    break;
   }
   if (i43) {
    HEAP32[i1 >> 2] = i42;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i12);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i11);
    STACKTOP = i2;
    return;
   }
  }
 } while (0);
 if ((i27 | 0) == 57) {
  if (!i43) {
   HEAP32[i1 >> 2] = i42;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i12);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i11);
   STACKTOP = i2;
   return;
  }
 }
 HEAP32[i6 >> 2] = HEAP32[i6 >> 2] | 2;
 HEAP32[i1 >> 2] = i42;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i12);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i11);
 STACKTOP = i2;
 return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_(i1, i2, i3, i4, i5, i6, i7) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 var i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 352 | 0;
 i8 = i2 + 176 | 0;
 i9 = i2 + 332 | 0;
 i10 = i2 + 328 | 0;
 i11 = i2 + 316 | 0;
 i12 = i2 + 304 | 0;
 i13 = i2 + 168 | 0;
 i14 = i2 + 8 | 0;
 i15 = i2 + 4 | 0;
 i16 = i2;
 i17 = i2 + 337 | 0;
 i18 = i2 + 336 | 0;
 __ZNSt3__19__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_(i11, i5, i8, i9, i10);
 HEAP32[i12 + 0 >> 2] = 0;
 HEAP32[i12 + 4 >> 2] = 0;
 HEAP32[i12 + 8 >> 2] = 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i12, 10, 0);
 if ((HEAP8[i12] & 1) == 0) {
  i5 = i12 + 1 | 0;
  i19 = i5;
  i20 = i12 + 8 | 0;
  i21 = i5;
 } else {
  i5 = i12 + 8 | 0;
  i19 = i12 + 1 | 0;
  i20 = i5;
  i21 = HEAP32[i5 >> 2] | 0;
 }
 HEAP32[i13 >> 2] = i21;
 HEAP32[i15 >> 2] = i14;
 HEAP32[i16 >> 2] = 0;
 HEAP8[i17] = 1;
 HEAP8[i18] = 69;
 i5 = i12 + 4 | 0;
 i22 = HEAP32[i9 >> 2] | 0;
 i9 = HEAP32[i10 >> 2] | 0;
 i10 = HEAP32[i3 >> 2] | 0;
 i23 = i21;
 L5 : while (1) {
  if ((i10 | 0) == 0) {
   i24 = 1;
   i25 = 0;
  } else {
   i21 = HEAP32[i10 + 12 >> 2] | 0;
   if ((i21 | 0) == (HEAP32[i10 + 16 >> 2] | 0)) {
    i26 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i10 >> 2] | 0) + 36 >> 2] & 127](i10) | 0;
   } else {
    i26 = HEAP32[i21 >> 2] | 0;
   }
   if ((i26 | 0) == -1) {
    HEAP32[i3 >> 2] = 0;
    i24 = 1;
    i25 = 0;
   } else {
    i24 = 0;
    i25 = i10;
   }
  }
  i21 = HEAP32[i4 >> 2] | 0;
  do {
   if ((i21 | 0) == 0) {
    i27 = 17;
   } else {
    i28 = HEAP32[i21 + 12 >> 2] | 0;
    if ((i28 | 0) == (HEAP32[i21 + 16 >> 2] | 0)) {
     i29 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i21 >> 2] | 0) + 36 >> 2] & 127](i21) | 0;
    } else {
     i29 = HEAP32[i28 >> 2] | 0;
    }
    if ((i29 | 0) == -1) {
     HEAP32[i4 >> 2] = 0;
     i27 = 17;
     break;
    } else {
     if (i24) {
      i30 = i21;
      break;
     } else {
      i31 = i21;
      i32 = i23;
      break L5;
     }
    }
   }
  } while (0);
  if ((i27 | 0) == 17) {
   i27 = 0;
   if (i24) {
    i31 = 0;
    i32 = i23;
    break;
   } else {
    i30 = 0;
   }
  }
  i21 = HEAP8[i12] | 0;
  i28 = (i21 & 1) == 0;
  if (i28) {
   i33 = (i21 & 255) >>> 1;
  } else {
   i33 = HEAP32[i5 >> 2] | 0;
  }
  if (((HEAP32[i13 >> 2] | 0) - i23 | 0) == (i33 | 0)) {
   if (i28) {
    i34 = (i21 & 255) >>> 1;
    i35 = (i21 & 255) >>> 1;
   } else {
    i21 = HEAP32[i5 >> 2] | 0;
    i34 = i21;
    i35 = i21;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i12, i34 << 1, 0);
   if ((HEAP8[i12] & 1) == 0) {
    i36 = 10;
   } else {
    i36 = (HEAP32[i12 >> 2] & -2) + -1 | 0;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i12, i36, 0);
   if ((HEAP8[i12] & 1) == 0) {
    i37 = i19;
   } else {
    i37 = HEAP32[i20 >> 2] | 0;
   }
   HEAP32[i13 >> 2] = i37 + i35;
   i38 = i37;
  } else {
   i38 = i23;
  }
  i21 = i25 + 12 | 0;
  i28 = HEAP32[i21 >> 2] | 0;
  i39 = i25 + 16 | 0;
  if ((i28 | 0) == (HEAP32[i39 >> 2] | 0)) {
   i40 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i25 >> 2] | 0) + 36 >> 2] & 127](i25) | 0;
  } else {
   i40 = HEAP32[i28 >> 2] | 0;
  }
  if ((__ZNSt3__19__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw(i40, i17, i18, i38, i13, i22, i9, i11, i14, i15, i16, i8) | 0) != 0) {
   i31 = i30;
   i32 = i38;
   break;
  }
  i28 = HEAP32[i21 >> 2] | 0;
  if ((i28 | 0) == (HEAP32[i39 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[i25 >> 2] | 0) + 40 >> 2] & 127](i25) | 0;
   i10 = i25;
   i23 = i38;
   continue;
  } else {
   HEAP32[i21 >> 2] = i28 + 4;
   i10 = i25;
   i23 = i38;
   continue;
  }
 }
 i38 = HEAP8[i11] | 0;
 if ((i38 & 1) == 0) {
  i41 = (i38 & 255) >>> 1;
 } else {
  i41 = HEAP32[i11 + 4 >> 2] | 0;
 }
 if ((i41 | 0) != 0) {
  if ((HEAP8[i17] | 0) != 0) {
   i17 = HEAP32[i15 >> 2] | 0;
   if ((i17 - i14 | 0) < 160) {
    i41 = HEAP32[i16 >> 2] | 0;
    HEAP32[i15 >> 2] = i17 + 4;
    HEAP32[i17 >> 2] = i41;
   }
  }
 }
 HEAPF64[i7 >> 3] = +__ZNSt3__115__num_get_floatIeEET_PKcS3_Rj(i32, HEAP32[i13 >> 2] | 0, i6);
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj(i11, i14, HEAP32[i15 >> 2] | 0, i6);
 if ((i25 | 0) == 0) {
  i42 = 0;
  i43 = 1;
 } else {
  i15 = HEAP32[i25 + 12 >> 2] | 0;
  if ((i15 | 0) == (HEAP32[i25 + 16 >> 2] | 0)) {
   i44 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i25 >> 2] | 0) + 36 >> 2] & 127](i25) | 0;
  } else {
   i44 = HEAP32[i15 >> 2] | 0;
  }
  if ((i44 | 0) == -1) {
   HEAP32[i3 >> 2] = 0;
   i42 = 0;
   i43 = 1;
  } else {
   i42 = i25;
   i43 = 0;
  }
 }
 do {
  if ((i31 | 0) == 0) {
   i27 = 57;
  } else {
   i25 = HEAP32[i31 + 12 >> 2] | 0;
   if ((i25 | 0) == (HEAP32[i31 + 16 >> 2] | 0)) {
    i45 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i31 >> 2] | 0) + 36 >> 2] & 127](i31) | 0;
   } else {
    i45 = HEAP32[i25 >> 2] | 0;
   }
   if ((i45 | 0) == -1) {
    HEAP32[i4 >> 2] = 0;
    i27 = 57;
    break;
   }
   if (i43) {
    HEAP32[i1 >> 2] = i42;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i12);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i11);
    STACKTOP = i2;
    return;
   }
  }
 } while (0);
 if ((i27 | 0) == 57) {
  if (!i43) {
   HEAP32[i1 >> 2] = i42;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i12);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i11);
   STACKTOP = i2;
   return;
  }
 }
 HEAP32[i6 >> 2] = HEAP32[i6 >> 2] | 2;
 HEAP32[i1 >> 2] = i42;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i12);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i11);
 STACKTOP = i2;
 return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_(i1, i2, i3, i4, i5, i6, i7) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 var i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 352 | 0;
 i8 = i2 + 176 | 0;
 i9 = i2 + 332 | 0;
 i10 = i2 + 328 | 0;
 i11 = i2 + 316 | 0;
 i12 = i2 + 304 | 0;
 i13 = i2 + 168 | 0;
 i14 = i2 + 8 | 0;
 i15 = i2 + 4 | 0;
 i16 = i2;
 i17 = i2 + 337 | 0;
 i18 = i2 + 336 | 0;
 __ZNSt3__19__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_(i11, i5, i8, i9, i10);
 HEAP32[i12 + 0 >> 2] = 0;
 HEAP32[i12 + 4 >> 2] = 0;
 HEAP32[i12 + 8 >> 2] = 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i12, 10, 0);
 if ((HEAP8[i12] & 1) == 0) {
  i5 = i12 + 1 | 0;
  i19 = i5;
  i20 = i12 + 8 | 0;
  i21 = i5;
 } else {
  i5 = i12 + 8 | 0;
  i19 = i12 + 1 | 0;
  i20 = i5;
  i21 = HEAP32[i5 >> 2] | 0;
 }
 HEAP32[i13 >> 2] = i21;
 HEAP32[i15 >> 2] = i14;
 HEAP32[i16 >> 2] = 0;
 HEAP8[i17] = 1;
 HEAP8[i18] = 69;
 i5 = i12 + 4 | 0;
 i22 = HEAP32[i9 >> 2] | 0;
 i9 = HEAP32[i10 >> 2] | 0;
 i10 = HEAP32[i3 >> 2] | 0;
 i23 = i21;
 L5 : while (1) {
  if ((i10 | 0) == 0) {
   i24 = 1;
   i25 = 0;
  } else {
   i21 = HEAP32[i10 + 12 >> 2] | 0;
   if ((i21 | 0) == (HEAP32[i10 + 16 >> 2] | 0)) {
    i26 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i10 >> 2] | 0) + 36 >> 2] & 127](i10) | 0;
   } else {
    i26 = HEAP32[i21 >> 2] | 0;
   }
   if ((i26 | 0) == -1) {
    HEAP32[i3 >> 2] = 0;
    i24 = 1;
    i25 = 0;
   } else {
    i24 = 0;
    i25 = i10;
   }
  }
  i21 = HEAP32[i4 >> 2] | 0;
  do {
   if ((i21 | 0) == 0) {
    i27 = 17;
   } else {
    i28 = HEAP32[i21 + 12 >> 2] | 0;
    if ((i28 | 0) == (HEAP32[i21 + 16 >> 2] | 0)) {
     i29 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i21 >> 2] | 0) + 36 >> 2] & 127](i21) | 0;
    } else {
     i29 = HEAP32[i28 >> 2] | 0;
    }
    if ((i29 | 0) == -1) {
     HEAP32[i4 >> 2] = 0;
     i27 = 17;
     break;
    } else {
     if (i24) {
      i30 = i21;
      break;
     } else {
      i31 = i21;
      i32 = i23;
      break L5;
     }
    }
   }
  } while (0);
  if ((i27 | 0) == 17) {
   i27 = 0;
   if (i24) {
    i31 = 0;
    i32 = i23;
    break;
   } else {
    i30 = 0;
   }
  }
  i21 = HEAP8[i12] | 0;
  i28 = (i21 & 1) == 0;
  if (i28) {
   i33 = (i21 & 255) >>> 1;
  } else {
   i33 = HEAP32[i5 >> 2] | 0;
  }
  if (((HEAP32[i13 >> 2] | 0) - i23 | 0) == (i33 | 0)) {
   if (i28) {
    i34 = (i21 & 255) >>> 1;
    i35 = (i21 & 255) >>> 1;
   } else {
    i21 = HEAP32[i5 >> 2] | 0;
    i34 = i21;
    i35 = i21;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i12, i34 << 1, 0);
   if ((HEAP8[i12] & 1) == 0) {
    i36 = 10;
   } else {
    i36 = (HEAP32[i12 >> 2] & -2) + -1 | 0;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i12, i36, 0);
   if ((HEAP8[i12] & 1) == 0) {
    i37 = i19;
   } else {
    i37 = HEAP32[i20 >> 2] | 0;
   }
   HEAP32[i13 >> 2] = i37 + i35;
   i38 = i37;
  } else {
   i38 = i23;
  }
  i21 = i25 + 12 | 0;
  i28 = HEAP32[i21 >> 2] | 0;
  i39 = i25 + 16 | 0;
  if ((i28 | 0) == (HEAP32[i39 >> 2] | 0)) {
   i40 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i25 >> 2] | 0) + 36 >> 2] & 127](i25) | 0;
  } else {
   i40 = HEAP32[i28 >> 2] | 0;
  }
  if ((__ZNSt3__19__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw(i40, i17, i18, i38, i13, i22, i9, i11, i14, i15, i16, i8) | 0) != 0) {
   i31 = i30;
   i32 = i38;
   break;
  }
  i28 = HEAP32[i21 >> 2] | 0;
  if ((i28 | 0) == (HEAP32[i39 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[i25 >> 2] | 0) + 40 >> 2] & 127](i25) | 0;
   i10 = i25;
   i23 = i38;
   continue;
  } else {
   HEAP32[i21 >> 2] = i28 + 4;
   i10 = i25;
   i23 = i38;
   continue;
  }
 }
 i38 = HEAP8[i11] | 0;
 if ((i38 & 1) == 0) {
  i41 = (i38 & 255) >>> 1;
 } else {
  i41 = HEAP32[i11 + 4 >> 2] | 0;
 }
 if ((i41 | 0) != 0) {
  if ((HEAP8[i17] | 0) != 0) {
   i17 = HEAP32[i15 >> 2] | 0;
   if ((i17 - i14 | 0) < 160) {
    i41 = HEAP32[i16 >> 2] | 0;
    HEAP32[i15 >> 2] = i17 + 4;
    HEAP32[i17 >> 2] = i41;
   }
  }
 }
 HEAPF64[i7 >> 3] = +__ZNSt3__115__num_get_floatIdEET_PKcS3_Rj(i32, HEAP32[i13 >> 2] | 0, i6);
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj(i11, i14, HEAP32[i15 >> 2] | 0, i6);
 if ((i25 | 0) == 0) {
  i42 = 0;
  i43 = 1;
 } else {
  i15 = HEAP32[i25 + 12 >> 2] | 0;
  if ((i15 | 0) == (HEAP32[i25 + 16 >> 2] | 0)) {
   i44 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i25 >> 2] | 0) + 36 >> 2] & 127](i25) | 0;
  } else {
   i44 = HEAP32[i15 >> 2] | 0;
  }
  if ((i44 | 0) == -1) {
   HEAP32[i3 >> 2] = 0;
   i42 = 0;
   i43 = 1;
  } else {
   i42 = i25;
   i43 = 0;
  }
 }
 do {
  if ((i31 | 0) == 0) {
   i27 = 57;
  } else {
   i25 = HEAP32[i31 + 12 >> 2] | 0;
   if ((i25 | 0) == (HEAP32[i31 + 16 >> 2] | 0)) {
    i45 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i31 >> 2] | 0) + 36 >> 2] & 127](i31) | 0;
   } else {
    i45 = HEAP32[i25 >> 2] | 0;
   }
   if ((i45 | 0) == -1) {
    HEAP32[i4 >> 2] = 0;
    i27 = 57;
    break;
   }
   if (i43) {
    HEAP32[i1 >> 2] = i42;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i12);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i11);
    STACKTOP = i2;
    return;
   }
  }
 } while (0);
 if ((i27 | 0) == 57) {
  if (!i43) {
   HEAP32[i1 >> 2] = i42;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i12);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i11);
   STACKTOP = i2;
   return;
  }
 }
 HEAP32[i6 >> 2] = HEAP32[i6 >> 2] | 2;
 HEAP32[i1 >> 2] = i42;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i12);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i11);
 STACKTOP = i2;
 return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_(i1, i2, i3, i4, i5, i6, i7) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 var i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 304 | 0;
 i8 = i2 + 200 | 0;
 i9 = i2;
 i10 = i2 + 4 | 0;
 i11 = i2 + 16 | 0;
 i12 = i2 + 28 | 0;
 i13 = i2 + 32 | 0;
 i14 = i2 + 192 | 0;
 i15 = i2 + 196 | 0;
 i16 = HEAP32[i5 + 4 >> 2] & 74;
 if ((i16 | 0) == 64) {
  i17 = 8;
 } else if ((i16 | 0) == 8) {
  i17 = 16;
 } else if ((i16 | 0) == 0) {
  i17 = 0;
 } else {
  i17 = 10;
 }
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw(i10, i5, i8, i9);
 HEAP32[i11 + 0 >> 2] = 0;
 HEAP32[i11 + 4 >> 2] = 0;
 HEAP32[i11 + 8 >> 2] = 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i11, 10, 0);
 if ((HEAP8[i11] & 1) == 0) {
  i5 = i11 + 1 | 0;
  i18 = i5;
  i19 = i11 + 8 | 0;
  i20 = i5;
 } else {
  i5 = i11 + 8 | 0;
  i18 = i11 + 1 | 0;
  i19 = i5;
  i20 = HEAP32[i5 >> 2] | 0;
 }
 HEAP32[i12 >> 2] = i20;
 HEAP32[i14 >> 2] = i13;
 HEAP32[i15 >> 2] = 0;
 i5 = i11 + 4 | 0;
 i16 = HEAP32[i9 >> 2] | 0;
 i9 = HEAP32[i3 >> 2] | 0;
 i21 = i20;
 L10 : while (1) {
  if ((i9 | 0) == 0) {
   i22 = 1;
   i23 = 0;
  } else {
   i20 = HEAP32[i9 + 12 >> 2] | 0;
   if ((i20 | 0) == (HEAP32[i9 + 16 >> 2] | 0)) {
    i24 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i9 >> 2] | 0) + 36 >> 2] & 127](i9) | 0;
   } else {
    i24 = HEAP32[i20 >> 2] | 0;
   }
   if ((i24 | 0) == -1) {
    HEAP32[i3 >> 2] = 0;
    i22 = 1;
    i23 = 0;
   } else {
    i22 = 0;
    i23 = i9;
   }
  }
  i20 = HEAP32[i4 >> 2] | 0;
  do {
   if ((i20 | 0) == 0) {
    i25 = 21;
   } else {
    i26 = HEAP32[i20 + 12 >> 2] | 0;
    if ((i26 | 0) == (HEAP32[i20 + 16 >> 2] | 0)) {
     i27 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i20 >> 2] | 0) + 36 >> 2] & 127](i20) | 0;
    } else {
     i27 = HEAP32[i26 >> 2] | 0;
    }
    if ((i27 | 0) == -1) {
     HEAP32[i4 >> 2] = 0;
     i25 = 21;
     break;
    } else {
     if (i22) {
      i28 = i20;
      break;
     } else {
      i29 = i20;
      i30 = i21;
      break L10;
     }
    }
   }
  } while (0);
  if ((i25 | 0) == 21) {
   i25 = 0;
   if (i22) {
    i29 = 0;
    i30 = i21;
    break;
   } else {
    i28 = 0;
   }
  }
  i20 = HEAP8[i11] | 0;
  i26 = (i20 & 1) == 0;
  if (i26) {
   i31 = (i20 & 255) >>> 1;
  } else {
   i31 = HEAP32[i5 >> 2] | 0;
  }
  if (((HEAP32[i12 >> 2] | 0) - i21 | 0) == (i31 | 0)) {
   if (i26) {
    i32 = (i20 & 255) >>> 1;
    i33 = (i20 & 255) >>> 1;
   } else {
    i20 = HEAP32[i5 >> 2] | 0;
    i32 = i20;
    i33 = i20;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i11, i32 << 1, 0);
   if ((HEAP8[i11] & 1) == 0) {
    i34 = 10;
   } else {
    i34 = (HEAP32[i11 >> 2] & -2) + -1 | 0;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i11, i34, 0);
   if ((HEAP8[i11] & 1) == 0) {
    i35 = i18;
   } else {
    i35 = HEAP32[i19 >> 2] | 0;
   }
   HEAP32[i12 >> 2] = i35 + i33;
   i36 = i35;
  } else {
   i36 = i21;
  }
  i20 = i23 + 12 | 0;
  i26 = HEAP32[i20 >> 2] | 0;
  i37 = i23 + 16 | 0;
  if ((i26 | 0) == (HEAP32[i37 >> 2] | 0)) {
   i38 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i23 >> 2] | 0) + 36 >> 2] & 127](i23) | 0;
  } else {
   i38 = HEAP32[i26 >> 2] | 0;
  }
  if ((__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw(i38, i17, i36, i12, i15, i16, i10, i13, i14, i8) | 0) != 0) {
   i29 = i28;
   i30 = i36;
   break;
  }
  i26 = HEAP32[i20 >> 2] | 0;
  if ((i26 | 0) == (HEAP32[i37 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[i23 >> 2] | 0) + 40 >> 2] & 127](i23) | 0;
   i9 = i23;
   i21 = i36;
   continue;
  } else {
   HEAP32[i20 >> 2] = i26 + 4;
   i9 = i23;
   i21 = i36;
   continue;
  }
 }
 i36 = HEAP8[i10] | 0;
 if ((i36 & 1) == 0) {
  i39 = (i36 & 255) >>> 1;
 } else {
  i39 = HEAP32[i10 + 4 >> 2] | 0;
 }
 if ((i39 | 0) != 0) {
  i39 = HEAP32[i14 >> 2] | 0;
  if ((i39 - i13 | 0) < 160) {
   i36 = HEAP32[i15 >> 2] | 0;
   HEAP32[i14 >> 2] = i39 + 4;
   HEAP32[i39 >> 2] = i36;
  }
 }
 HEAP16[i7 >> 1] = __ZNSt3__127__num_get_unsigned_integralItEET_PKcS3_Rji(i30, HEAP32[i12 >> 2] | 0, i6, i17) | 0;
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj(i10, i13, HEAP32[i14 >> 2] | 0, i6);
 if ((i23 | 0) == 0) {
  i40 = 0;
  i41 = 1;
 } else {
  i14 = HEAP32[i23 + 12 >> 2] | 0;
  if ((i14 | 0) == (HEAP32[i23 + 16 >> 2] | 0)) {
   i42 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i23 >> 2] | 0) + 36 >> 2] & 127](i23) | 0;
  } else {
   i42 = HEAP32[i14 >> 2] | 0;
  }
  if ((i42 | 0) == -1) {
   HEAP32[i3 >> 2] = 0;
   i40 = 0;
   i41 = 1;
  } else {
   i40 = i23;
   i41 = 0;
  }
 }
 do {
  if ((i29 | 0) == 0) {
   i25 = 60;
  } else {
   i23 = HEAP32[i29 + 12 >> 2] | 0;
   if ((i23 | 0) == (HEAP32[i29 + 16 >> 2] | 0)) {
    i43 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i29 >> 2] | 0) + 36 >> 2] & 127](i29) | 0;
   } else {
    i43 = HEAP32[i23 >> 2] | 0;
   }
   if ((i43 | 0) == -1) {
    HEAP32[i4 >> 2] = 0;
    i25 = 60;
    break;
   }
   if (i41) {
    HEAP32[i1 >> 2] = i40;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i11);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i10);
    STACKTOP = i2;
    return;
   }
  }
 } while (0);
 if ((i25 | 0) == 60) {
  if (!i41) {
   HEAP32[i1 >> 2] = i40;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i11);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i10);
   STACKTOP = i2;
   return;
  }
 }
 HEAP32[i6 >> 2] = HEAP32[i6 >> 2] | 2;
 HEAP32[i1 >> 2] = i40;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i11);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i10);
 STACKTOP = i2;
 return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_(i1, i2, i3, i4, i5, i6, i7) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 var i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 304 | 0;
 i8 = i2 + 200 | 0;
 i9 = i2;
 i10 = i2 + 4 | 0;
 i11 = i2 + 16 | 0;
 i12 = i2 + 28 | 0;
 i13 = i2 + 32 | 0;
 i14 = i2 + 192 | 0;
 i15 = i2 + 196 | 0;
 i16 = HEAP32[i5 + 4 >> 2] & 74;
 if ((i16 | 0) == 8) {
  i17 = 16;
 } else if ((i16 | 0) == 64) {
  i17 = 8;
 } else if ((i16 | 0) == 0) {
  i17 = 0;
 } else {
  i17 = 10;
 }
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw(i10, i5, i8, i9);
 HEAP32[i11 + 0 >> 2] = 0;
 HEAP32[i11 + 4 >> 2] = 0;
 HEAP32[i11 + 8 >> 2] = 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i11, 10, 0);
 if ((HEAP8[i11] & 1) == 0) {
  i5 = i11 + 1 | 0;
  i18 = i5;
  i19 = i11 + 8 | 0;
  i20 = i5;
 } else {
  i5 = i11 + 8 | 0;
  i18 = i11 + 1 | 0;
  i19 = i5;
  i20 = HEAP32[i5 >> 2] | 0;
 }
 HEAP32[i12 >> 2] = i20;
 HEAP32[i14 >> 2] = i13;
 HEAP32[i15 >> 2] = 0;
 i5 = i11 + 4 | 0;
 i16 = HEAP32[i9 >> 2] | 0;
 i9 = HEAP32[i3 >> 2] | 0;
 i21 = i20;
 L10 : while (1) {
  if ((i9 | 0) == 0) {
   i22 = 1;
   i23 = 0;
  } else {
   i20 = HEAP32[i9 + 12 >> 2] | 0;
   if ((i20 | 0) == (HEAP32[i9 + 16 >> 2] | 0)) {
    i24 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i9 >> 2] | 0) + 36 >> 2] & 127](i9) | 0;
   } else {
    i24 = HEAP32[i20 >> 2] | 0;
   }
   if ((i24 | 0) == -1) {
    HEAP32[i3 >> 2] = 0;
    i22 = 1;
    i23 = 0;
   } else {
    i22 = 0;
    i23 = i9;
   }
  }
  i20 = HEAP32[i4 >> 2] | 0;
  do {
   if ((i20 | 0) == 0) {
    i25 = 21;
   } else {
    i26 = HEAP32[i20 + 12 >> 2] | 0;
    if ((i26 | 0) == (HEAP32[i20 + 16 >> 2] | 0)) {
     i27 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i20 >> 2] | 0) + 36 >> 2] & 127](i20) | 0;
    } else {
     i27 = HEAP32[i26 >> 2] | 0;
    }
    if ((i27 | 0) == -1) {
     HEAP32[i4 >> 2] = 0;
     i25 = 21;
     break;
    } else {
     if (i22) {
      i28 = i20;
      break;
     } else {
      i29 = i20;
      i30 = i21;
      break L10;
     }
    }
   }
  } while (0);
  if ((i25 | 0) == 21) {
   i25 = 0;
   if (i22) {
    i29 = 0;
    i30 = i21;
    break;
   } else {
    i28 = 0;
   }
  }
  i20 = HEAP8[i11] | 0;
  i26 = (i20 & 1) == 0;
  if (i26) {
   i31 = (i20 & 255) >>> 1;
  } else {
   i31 = HEAP32[i5 >> 2] | 0;
  }
  if (((HEAP32[i12 >> 2] | 0) - i21 | 0) == (i31 | 0)) {
   if (i26) {
    i32 = (i20 & 255) >>> 1;
    i33 = (i20 & 255) >>> 1;
   } else {
    i20 = HEAP32[i5 >> 2] | 0;
    i32 = i20;
    i33 = i20;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i11, i32 << 1, 0);
   if ((HEAP8[i11] & 1) == 0) {
    i34 = 10;
   } else {
    i34 = (HEAP32[i11 >> 2] & -2) + -1 | 0;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i11, i34, 0);
   if ((HEAP8[i11] & 1) == 0) {
    i35 = i18;
   } else {
    i35 = HEAP32[i19 >> 2] | 0;
   }
   HEAP32[i12 >> 2] = i35 + i33;
   i36 = i35;
  } else {
   i36 = i21;
  }
  i20 = i23 + 12 | 0;
  i26 = HEAP32[i20 >> 2] | 0;
  i37 = i23 + 16 | 0;
  if ((i26 | 0) == (HEAP32[i37 >> 2] | 0)) {
   i38 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i23 >> 2] | 0) + 36 >> 2] & 127](i23) | 0;
  } else {
   i38 = HEAP32[i26 >> 2] | 0;
  }
  if ((__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw(i38, i17, i36, i12, i15, i16, i10, i13, i14, i8) | 0) != 0) {
   i29 = i28;
   i30 = i36;
   break;
  }
  i26 = HEAP32[i20 >> 2] | 0;
  if ((i26 | 0) == (HEAP32[i37 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[i23 >> 2] | 0) + 40 >> 2] & 127](i23) | 0;
   i9 = i23;
   i21 = i36;
   continue;
  } else {
   HEAP32[i20 >> 2] = i26 + 4;
   i9 = i23;
   i21 = i36;
   continue;
  }
 }
 i36 = HEAP8[i10] | 0;
 if ((i36 & 1) == 0) {
  i39 = (i36 & 255) >>> 1;
 } else {
  i39 = HEAP32[i10 + 4 >> 2] | 0;
 }
 if ((i39 | 0) != 0) {
  i39 = HEAP32[i14 >> 2] | 0;
  if ((i39 - i13 | 0) < 160) {
   i36 = HEAP32[i15 >> 2] | 0;
   HEAP32[i14 >> 2] = i39 + 4;
   HEAP32[i39 >> 2] = i36;
  }
 }
 HEAP32[i7 >> 2] = __ZNSt3__127__num_get_unsigned_integralImEET_PKcS3_Rji(i30, HEAP32[i12 >> 2] | 0, i6, i17) | 0;
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj(i10, i13, HEAP32[i14 >> 2] | 0, i6);
 if ((i23 | 0) == 0) {
  i40 = 0;
  i41 = 1;
 } else {
  i14 = HEAP32[i23 + 12 >> 2] | 0;
  if ((i14 | 0) == (HEAP32[i23 + 16 >> 2] | 0)) {
   i42 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i23 >> 2] | 0) + 36 >> 2] & 127](i23) | 0;
  } else {
   i42 = HEAP32[i14 >> 2] | 0;
  }
  if ((i42 | 0) == -1) {
   HEAP32[i3 >> 2] = 0;
   i40 = 0;
   i41 = 1;
  } else {
   i40 = i23;
   i41 = 0;
  }
 }
 do {
  if ((i29 | 0) == 0) {
   i25 = 60;
  } else {
   i23 = HEAP32[i29 + 12 >> 2] | 0;
   if ((i23 | 0) == (HEAP32[i29 + 16 >> 2] | 0)) {
    i43 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i29 >> 2] | 0) + 36 >> 2] & 127](i29) | 0;
   } else {
    i43 = HEAP32[i23 >> 2] | 0;
   }
   if ((i43 | 0) == -1) {
    HEAP32[i4 >> 2] = 0;
    i25 = 60;
    break;
   }
   if (i41) {
    HEAP32[i1 >> 2] = i40;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i11);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i10);
    STACKTOP = i2;
    return;
   }
  }
 } while (0);
 if ((i25 | 0) == 60) {
  if (!i41) {
   HEAP32[i1 >> 2] = i40;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i11);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i10);
   STACKTOP = i2;
   return;
  }
 }
 HEAP32[i6 >> 2] = HEAP32[i6 >> 2] | 2;
 HEAP32[i1 >> 2] = i40;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i11);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i10);
 STACKTOP = i2;
 return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_(i1, i2, i3, i4, i5, i6, i7) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 var i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 304 | 0;
 i8 = i2 + 200 | 0;
 i9 = i2;
 i10 = i2 + 4 | 0;
 i11 = i2 + 16 | 0;
 i12 = i2 + 28 | 0;
 i13 = i2 + 32 | 0;
 i14 = i2 + 192 | 0;
 i15 = i2 + 196 | 0;
 i16 = HEAP32[i5 + 4 >> 2] & 74;
 if ((i16 | 0) == 8) {
  i17 = 16;
 } else if ((i16 | 0) == 64) {
  i17 = 8;
 } else if ((i16 | 0) == 0) {
  i17 = 0;
 } else {
  i17 = 10;
 }
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw(i10, i5, i8, i9);
 HEAP32[i11 + 0 >> 2] = 0;
 HEAP32[i11 + 4 >> 2] = 0;
 HEAP32[i11 + 8 >> 2] = 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i11, 10, 0);
 if ((HEAP8[i11] & 1) == 0) {
  i5 = i11 + 1 | 0;
  i18 = i5;
  i19 = i11 + 8 | 0;
  i20 = i5;
 } else {
  i5 = i11 + 8 | 0;
  i18 = i11 + 1 | 0;
  i19 = i5;
  i20 = HEAP32[i5 >> 2] | 0;
 }
 HEAP32[i12 >> 2] = i20;
 HEAP32[i14 >> 2] = i13;
 HEAP32[i15 >> 2] = 0;
 i5 = i11 + 4 | 0;
 i16 = HEAP32[i9 >> 2] | 0;
 i9 = HEAP32[i3 >> 2] | 0;
 i21 = i20;
 L10 : while (1) {
  if ((i9 | 0) == 0) {
   i22 = 1;
   i23 = 0;
  } else {
   i20 = HEAP32[i9 + 12 >> 2] | 0;
   if ((i20 | 0) == (HEAP32[i9 + 16 >> 2] | 0)) {
    i24 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i9 >> 2] | 0) + 36 >> 2] & 127](i9) | 0;
   } else {
    i24 = HEAP32[i20 >> 2] | 0;
   }
   if ((i24 | 0) == -1) {
    HEAP32[i3 >> 2] = 0;
    i22 = 1;
    i23 = 0;
   } else {
    i22 = 0;
    i23 = i9;
   }
  }
  i20 = HEAP32[i4 >> 2] | 0;
  do {
   if ((i20 | 0) == 0) {
    i25 = 21;
   } else {
    i26 = HEAP32[i20 + 12 >> 2] | 0;
    if ((i26 | 0) == (HEAP32[i20 + 16 >> 2] | 0)) {
     i27 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i20 >> 2] | 0) + 36 >> 2] & 127](i20) | 0;
    } else {
     i27 = HEAP32[i26 >> 2] | 0;
    }
    if ((i27 | 0) == -1) {
     HEAP32[i4 >> 2] = 0;
     i25 = 21;
     break;
    } else {
     if (i22) {
      i28 = i20;
      break;
     } else {
      i29 = i20;
      i30 = i21;
      break L10;
     }
    }
   }
  } while (0);
  if ((i25 | 0) == 21) {
   i25 = 0;
   if (i22) {
    i29 = 0;
    i30 = i21;
    break;
   } else {
    i28 = 0;
   }
  }
  i20 = HEAP8[i11] | 0;
  i26 = (i20 & 1) == 0;
  if (i26) {
   i31 = (i20 & 255) >>> 1;
  } else {
   i31 = HEAP32[i5 >> 2] | 0;
  }
  if (((HEAP32[i12 >> 2] | 0) - i21 | 0) == (i31 | 0)) {
   if (i26) {
    i32 = (i20 & 255) >>> 1;
    i33 = (i20 & 255) >>> 1;
   } else {
    i20 = HEAP32[i5 >> 2] | 0;
    i32 = i20;
    i33 = i20;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i11, i32 << 1, 0);
   if ((HEAP8[i11] & 1) == 0) {
    i34 = 10;
   } else {
    i34 = (HEAP32[i11 >> 2] & -2) + -1 | 0;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i11, i34, 0);
   if ((HEAP8[i11] & 1) == 0) {
    i35 = i18;
   } else {
    i35 = HEAP32[i19 >> 2] | 0;
   }
   HEAP32[i12 >> 2] = i35 + i33;
   i36 = i35;
  } else {
   i36 = i21;
  }
  i20 = i23 + 12 | 0;
  i26 = HEAP32[i20 >> 2] | 0;
  i37 = i23 + 16 | 0;
  if ((i26 | 0) == (HEAP32[i37 >> 2] | 0)) {
   i38 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i23 >> 2] | 0) + 36 >> 2] & 127](i23) | 0;
  } else {
   i38 = HEAP32[i26 >> 2] | 0;
  }
  if ((__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw(i38, i17, i36, i12, i15, i16, i10, i13, i14, i8) | 0) != 0) {
   i29 = i28;
   i30 = i36;
   break;
  }
  i26 = HEAP32[i20 >> 2] | 0;
  if ((i26 | 0) == (HEAP32[i37 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[i23 >> 2] | 0) + 40 >> 2] & 127](i23) | 0;
   i9 = i23;
   i21 = i36;
   continue;
  } else {
   HEAP32[i20 >> 2] = i26 + 4;
   i9 = i23;
   i21 = i36;
   continue;
  }
 }
 i36 = HEAP8[i10] | 0;
 if ((i36 & 1) == 0) {
  i39 = (i36 & 255) >>> 1;
 } else {
  i39 = HEAP32[i10 + 4 >> 2] | 0;
 }
 if ((i39 | 0) != 0) {
  i39 = HEAP32[i14 >> 2] | 0;
  if ((i39 - i13 | 0) < 160) {
   i36 = HEAP32[i15 >> 2] | 0;
   HEAP32[i14 >> 2] = i39 + 4;
   HEAP32[i39 >> 2] = i36;
  }
 }
 HEAP32[i7 >> 2] = __ZNSt3__127__num_get_unsigned_integralIjEET_PKcS3_Rji(i30, HEAP32[i12 >> 2] | 0, i6, i17) | 0;
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj(i10, i13, HEAP32[i14 >> 2] | 0, i6);
 if ((i23 | 0) == 0) {
  i40 = 0;
  i41 = 1;
 } else {
  i14 = HEAP32[i23 + 12 >> 2] | 0;
  if ((i14 | 0) == (HEAP32[i23 + 16 >> 2] | 0)) {
   i42 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i23 >> 2] | 0) + 36 >> 2] & 127](i23) | 0;
  } else {
   i42 = HEAP32[i14 >> 2] | 0;
  }
  if ((i42 | 0) == -1) {
   HEAP32[i3 >> 2] = 0;
   i40 = 0;
   i41 = 1;
  } else {
   i40 = i23;
   i41 = 0;
  }
 }
 do {
  if ((i29 | 0) == 0) {
   i25 = 60;
  } else {
   i23 = HEAP32[i29 + 12 >> 2] | 0;
   if ((i23 | 0) == (HEAP32[i29 + 16 >> 2] | 0)) {
    i43 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i29 >> 2] | 0) + 36 >> 2] & 127](i29) | 0;
   } else {
    i43 = HEAP32[i23 >> 2] | 0;
   }
   if ((i43 | 0) == -1) {
    HEAP32[i4 >> 2] = 0;
    i25 = 60;
    break;
   }
   if (i41) {
    HEAP32[i1 >> 2] = i40;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i11);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i10);
    STACKTOP = i2;
    return;
   }
  }
 } while (0);
 if ((i25 | 0) == 60) {
  if (!i41) {
   HEAP32[i1 >> 2] = i40;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i11);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i10);
   STACKTOP = i2;
   return;
  }
 }
 HEAP32[i6 >> 2] = HEAP32[i6 >> 2] | 2;
 HEAP32[i1 >> 2] = i40;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i11);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i10);
 STACKTOP = i2;
 return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_(i1, i2, i3, i4, i5, i6, i7) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 var i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 304 | 0;
 i8 = i2 + 200 | 0;
 i9 = i2;
 i10 = i2 + 4 | 0;
 i11 = i2 + 16 | 0;
 i12 = i2 + 28 | 0;
 i13 = i2 + 32 | 0;
 i14 = i2 + 192 | 0;
 i15 = i2 + 196 | 0;
 i16 = HEAP32[i5 + 4 >> 2] & 74;
 if ((i16 | 0) == 64) {
  i17 = 8;
 } else if ((i16 | 0) == 0) {
  i17 = 0;
 } else if ((i16 | 0) == 8) {
  i17 = 16;
 } else {
  i17 = 10;
 }
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw(i10, i5, i8, i9);
 HEAP32[i11 + 0 >> 2] = 0;
 HEAP32[i11 + 4 >> 2] = 0;
 HEAP32[i11 + 8 >> 2] = 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i11, 10, 0);
 if ((HEAP8[i11] & 1) == 0) {
  i5 = i11 + 1 | 0;
  i18 = i5;
  i19 = i11 + 8 | 0;
  i20 = i5;
 } else {
  i5 = i11 + 8 | 0;
  i18 = i11 + 1 | 0;
  i19 = i5;
  i20 = HEAP32[i5 >> 2] | 0;
 }
 HEAP32[i12 >> 2] = i20;
 HEAP32[i14 >> 2] = i13;
 HEAP32[i15 >> 2] = 0;
 i5 = i11 + 4 | 0;
 i16 = HEAP32[i9 >> 2] | 0;
 i9 = HEAP32[i3 >> 2] | 0;
 i21 = i20;
 L10 : while (1) {
  if ((i9 | 0) == 0) {
   i22 = 1;
   i23 = 0;
  } else {
   i20 = HEAP32[i9 + 12 >> 2] | 0;
   if ((i20 | 0) == (HEAP32[i9 + 16 >> 2] | 0)) {
    i24 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i9 >> 2] | 0) + 36 >> 2] & 127](i9) | 0;
   } else {
    i24 = HEAP32[i20 >> 2] | 0;
   }
   if ((i24 | 0) == -1) {
    HEAP32[i3 >> 2] = 0;
    i22 = 1;
    i23 = 0;
   } else {
    i22 = 0;
    i23 = i9;
   }
  }
  i20 = HEAP32[i4 >> 2] | 0;
  do {
   if ((i20 | 0) == 0) {
    i25 = 21;
   } else {
    i26 = HEAP32[i20 + 12 >> 2] | 0;
    if ((i26 | 0) == (HEAP32[i20 + 16 >> 2] | 0)) {
     i27 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i20 >> 2] | 0) + 36 >> 2] & 127](i20) | 0;
    } else {
     i27 = HEAP32[i26 >> 2] | 0;
    }
    if ((i27 | 0) == -1) {
     HEAP32[i4 >> 2] = 0;
     i25 = 21;
     break;
    } else {
     if (i22) {
      i28 = i20;
      break;
     } else {
      i29 = i20;
      i30 = i21;
      break L10;
     }
    }
   }
  } while (0);
  if ((i25 | 0) == 21) {
   i25 = 0;
   if (i22) {
    i29 = 0;
    i30 = i21;
    break;
   } else {
    i28 = 0;
   }
  }
  i20 = HEAP8[i11] | 0;
  i26 = (i20 & 1) == 0;
  if (i26) {
   i31 = (i20 & 255) >>> 1;
  } else {
   i31 = HEAP32[i5 >> 2] | 0;
  }
  if (((HEAP32[i12 >> 2] | 0) - i21 | 0) == (i31 | 0)) {
   if (i26) {
    i32 = (i20 & 255) >>> 1;
    i33 = (i20 & 255) >>> 1;
   } else {
    i20 = HEAP32[i5 >> 2] | 0;
    i32 = i20;
    i33 = i20;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i11, i32 << 1, 0);
   if ((HEAP8[i11] & 1) == 0) {
    i34 = 10;
   } else {
    i34 = (HEAP32[i11 >> 2] & -2) + -1 | 0;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i11, i34, 0);
   if ((HEAP8[i11] & 1) == 0) {
    i35 = i18;
   } else {
    i35 = HEAP32[i19 >> 2] | 0;
   }
   HEAP32[i12 >> 2] = i35 + i33;
   i36 = i35;
  } else {
   i36 = i21;
  }
  i20 = i23 + 12 | 0;
  i26 = HEAP32[i20 >> 2] | 0;
  i37 = i23 + 16 | 0;
  if ((i26 | 0) == (HEAP32[i37 >> 2] | 0)) {
   i38 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i23 >> 2] | 0) + 36 >> 2] & 127](i23) | 0;
  } else {
   i38 = HEAP32[i26 >> 2] | 0;
  }
  if ((__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw(i38, i17, i36, i12, i15, i16, i10, i13, i14, i8) | 0) != 0) {
   i29 = i28;
   i30 = i36;
   break;
  }
  i26 = HEAP32[i20 >> 2] | 0;
  if ((i26 | 0) == (HEAP32[i37 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[i23 >> 2] | 0) + 40 >> 2] & 127](i23) | 0;
   i9 = i23;
   i21 = i36;
   continue;
  } else {
   HEAP32[i20 >> 2] = i26 + 4;
   i9 = i23;
   i21 = i36;
   continue;
  }
 }
 i36 = HEAP8[i10] | 0;
 if ((i36 & 1) == 0) {
  i39 = (i36 & 255) >>> 1;
 } else {
  i39 = HEAP32[i10 + 4 >> 2] | 0;
 }
 if ((i39 | 0) != 0) {
  i39 = HEAP32[i14 >> 2] | 0;
  if ((i39 - i13 | 0) < 160) {
   i36 = HEAP32[i15 >> 2] | 0;
   HEAP32[i14 >> 2] = i39 + 4;
   HEAP32[i39 >> 2] = i36;
  }
 }
 HEAP32[i7 >> 2] = __ZNSt3__125__num_get_signed_integralIlEET_PKcS3_Rji(i30, HEAP32[i12 >> 2] | 0, i6, i17) | 0;
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj(i10, i13, HEAP32[i14 >> 2] | 0, i6);
 if ((i23 | 0) == 0) {
  i40 = 0;
  i41 = 1;
 } else {
  i14 = HEAP32[i23 + 12 >> 2] | 0;
  if ((i14 | 0) == (HEAP32[i23 + 16 >> 2] | 0)) {
   i42 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i23 >> 2] | 0) + 36 >> 2] & 127](i23) | 0;
  } else {
   i42 = HEAP32[i14 >> 2] | 0;
  }
  if ((i42 | 0) == -1) {
   HEAP32[i3 >> 2] = 0;
   i40 = 0;
   i41 = 1;
  } else {
   i40 = i23;
   i41 = 0;
  }
 }
 do {
  if ((i29 | 0) == 0) {
   i25 = 60;
  } else {
   i23 = HEAP32[i29 + 12 >> 2] | 0;
   if ((i23 | 0) == (HEAP32[i29 + 16 >> 2] | 0)) {
    i43 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i29 >> 2] | 0) + 36 >> 2] & 127](i29) | 0;
   } else {
    i43 = HEAP32[i23 >> 2] | 0;
   }
   if ((i43 | 0) == -1) {
    HEAP32[i4 >> 2] = 0;
    i25 = 60;
    break;
   }
   if (i41) {
    HEAP32[i1 >> 2] = i40;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i11);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i10);
    STACKTOP = i2;
    return;
   }
  }
 } while (0);
 if ((i25 | 0) == 60) {
  if (!i41) {
   HEAP32[i1 >> 2] = i40;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i11);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i10);
   STACKTOP = i2;
   return;
  }
 }
 HEAP32[i6 >> 2] = HEAP32[i6 >> 2] | 2;
 HEAP32[i1 >> 2] = i40;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i11);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i10);
 STACKTOP = i2;
 return;
}
function _try_realloc_chunk(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0;
 i3 = STACKTOP;
 i4 = i1 + 4 | 0;
 i5 = HEAP32[i4 >> 2] | 0;
 i6 = i5 & -8;
 i7 = i1 + i6 | 0;
 i8 = HEAP32[14168 >> 2] | 0;
 if (i1 >>> 0 < i8 >>> 0) {
  _abort();
 }
 i9 = i5 & 3;
 if (!((i9 | 0) != 1 & i1 >>> 0 < i7 >>> 0)) {
  _abort();
 }
 i10 = i1 + (i6 | 4) | 0;
 i11 = HEAP32[i10 >> 2] | 0;
 if ((i11 & 1 | 0) == 0) {
  _abort();
 }
 if ((i9 | 0) == 0) {
  if (i2 >>> 0 < 256) {
   i12 = 0;
   STACKTOP = i3;
   return i12 | 0;
  }
  if (!(i6 >>> 0 < (i2 + 4 | 0) >>> 0)) {
   if (!((i6 - i2 | 0) >>> 0 > HEAP32[14632 >> 2] << 1 >>> 0)) {
    i12 = i1;
    STACKTOP = i3;
    return i12 | 0;
   }
  }
  i12 = 0;
  STACKTOP = i3;
  return i12 | 0;
 }
 if (!(i6 >>> 0 < i2 >>> 0)) {
  i9 = i6 - i2 | 0;
  if (!(i9 >>> 0 > 15)) {
   i12 = i1;
   STACKTOP = i3;
   return i12 | 0;
  }
  HEAP32[i4 >> 2] = i5 & 1 | i2 | 2;
  HEAP32[i1 + (i2 + 4) >> 2] = i9 | 3;
  HEAP32[i10 >> 2] = HEAP32[i10 >> 2] | 1;
  _dispose_chunk(i1 + i2 | 0, i9);
  i12 = i1;
  STACKTOP = i3;
  return i12 | 0;
 }
 if ((i7 | 0) == (HEAP32[14176 >> 2] | 0)) {
  i9 = (HEAP32[14164 >> 2] | 0) + i6 | 0;
  if (!(i9 >>> 0 > i2 >>> 0)) {
   i12 = 0;
   STACKTOP = i3;
   return i12 | 0;
  }
  i10 = i9 - i2 | 0;
  HEAP32[i4 >> 2] = i5 & 1 | i2 | 2;
  HEAP32[i1 + (i2 + 4) >> 2] = i10 | 1;
  HEAP32[14176 >> 2] = i1 + i2;
  HEAP32[14164 >> 2] = i10;
  i12 = i1;
  STACKTOP = i3;
  return i12 | 0;
 }
 if ((i7 | 0) == (HEAP32[14172 >> 2] | 0)) {
  i10 = (HEAP32[14160 >> 2] | 0) + i6 | 0;
  if (i10 >>> 0 < i2 >>> 0) {
   i12 = 0;
   STACKTOP = i3;
   return i12 | 0;
  }
  i9 = i10 - i2 | 0;
  if (i9 >>> 0 > 15) {
   HEAP32[i4 >> 2] = i5 & 1 | i2 | 2;
   HEAP32[i1 + (i2 + 4) >> 2] = i9 | 1;
   HEAP32[i1 + i10 >> 2] = i9;
   i13 = i1 + (i10 + 4) | 0;
   HEAP32[i13 >> 2] = HEAP32[i13 >> 2] & -2;
   i14 = i1 + i2 | 0;
   i15 = i9;
  } else {
   HEAP32[i4 >> 2] = i5 & 1 | i10 | 2;
   i5 = i1 + (i10 + 4) | 0;
   HEAP32[i5 >> 2] = HEAP32[i5 >> 2] | 1;
   i14 = 0;
   i15 = 0;
  }
  HEAP32[14160 >> 2] = i15;
  HEAP32[14172 >> 2] = i14;
  i12 = i1;
  STACKTOP = i3;
  return i12 | 0;
 }
 if ((i11 & 2 | 0) != 0) {
  i12 = 0;
  STACKTOP = i3;
  return i12 | 0;
 }
 i14 = (i11 & -8) + i6 | 0;
 if (i14 >>> 0 < i2 >>> 0) {
  i12 = 0;
  STACKTOP = i3;
  return i12 | 0;
 }
 i15 = i14 - i2 | 0;
 i5 = i11 >>> 3;
 do {
  if (i11 >>> 0 < 256) {
   i10 = HEAP32[i1 + (i6 + 8) >> 2] | 0;
   i9 = HEAP32[i1 + (i6 + 12) >> 2] | 0;
   i13 = 14192 + (i5 << 1 << 2) | 0;
   if ((i10 | 0) != (i13 | 0)) {
    if (i10 >>> 0 < i8 >>> 0) {
     _abort();
    }
    if ((HEAP32[i10 + 12 >> 2] | 0) != (i7 | 0)) {
     _abort();
    }
   }
   if ((i9 | 0) == (i10 | 0)) {
    HEAP32[3538] = HEAP32[3538] & ~(1 << i5);
    break;
   }
   if ((i9 | 0) == (i13 | 0)) {
    i16 = i9 + 8 | 0;
   } else {
    if (i9 >>> 0 < i8 >>> 0) {
     _abort();
    }
    i13 = i9 + 8 | 0;
    if ((HEAP32[i13 >> 2] | 0) == (i7 | 0)) {
     i16 = i13;
    } else {
     _abort();
    }
   }
   HEAP32[i10 + 12 >> 2] = i9;
   HEAP32[i16 >> 2] = i10;
  } else {
   i10 = HEAP32[i1 + (i6 + 24) >> 2] | 0;
   i9 = HEAP32[i1 + (i6 + 12) >> 2] | 0;
   do {
    if ((i9 | 0) == (i7 | 0)) {
     i13 = i1 + (i6 + 20) | 0;
     i17 = HEAP32[i13 >> 2] | 0;
     if ((i17 | 0) == 0) {
      i18 = i1 + (i6 + 16) | 0;
      i19 = HEAP32[i18 >> 2] | 0;
      if ((i19 | 0) == 0) {
       i20 = 0;
       break;
      } else {
       i21 = i19;
       i22 = i18;
      }
     } else {
      i21 = i17;
      i22 = i13;
     }
     while (1) {
      i13 = i21 + 20 | 0;
      i17 = HEAP32[i13 >> 2] | 0;
      if ((i17 | 0) != 0) {
       i21 = i17;
       i22 = i13;
       continue;
      }
      i13 = i21 + 16 | 0;
      i17 = HEAP32[i13 >> 2] | 0;
      if ((i17 | 0) == 0) {
       break;
      } else {
       i21 = i17;
       i22 = i13;
      }
     }
     if (i22 >>> 0 < i8 >>> 0) {
      _abort();
     } else {
      HEAP32[i22 >> 2] = 0;
      i20 = i21;
      break;
     }
    } else {
     i13 = HEAP32[i1 + (i6 + 8) >> 2] | 0;
     if (i13 >>> 0 < i8 >>> 0) {
      _abort();
     }
     i17 = i13 + 12 | 0;
     if ((HEAP32[i17 >> 2] | 0) != (i7 | 0)) {
      _abort();
     }
     i18 = i9 + 8 | 0;
     if ((HEAP32[i18 >> 2] | 0) == (i7 | 0)) {
      HEAP32[i17 >> 2] = i9;
      HEAP32[i18 >> 2] = i13;
      i20 = i9;
      break;
     } else {
      _abort();
     }
    }
   } while (0);
   if ((i10 | 0) != 0) {
    i9 = HEAP32[i1 + (i6 + 28) >> 2] | 0;
    i13 = 14456 + (i9 << 2) | 0;
    if ((i7 | 0) == (HEAP32[i13 >> 2] | 0)) {
     HEAP32[i13 >> 2] = i20;
     if ((i20 | 0) == 0) {
      HEAP32[14156 >> 2] = HEAP32[14156 >> 2] & ~(1 << i9);
      break;
     }
    } else {
     if (i10 >>> 0 < (HEAP32[14168 >> 2] | 0) >>> 0) {
      _abort();
     }
     i9 = i10 + 16 | 0;
     if ((HEAP32[i9 >> 2] | 0) == (i7 | 0)) {
      HEAP32[i9 >> 2] = i20;
     } else {
      HEAP32[i10 + 20 >> 2] = i20;
     }
     if ((i20 | 0) == 0) {
      break;
     }
    }
    if (i20 >>> 0 < (HEAP32[14168 >> 2] | 0) >>> 0) {
     _abort();
    }
    HEAP32[i20 + 24 >> 2] = i10;
    i9 = HEAP32[i1 + (i6 + 16) >> 2] | 0;
    do {
     if ((i9 | 0) != 0) {
      if (i9 >>> 0 < (HEAP32[14168 >> 2] | 0) >>> 0) {
       _abort();
      } else {
       HEAP32[i20 + 16 >> 2] = i9;
       HEAP32[i9 + 24 >> 2] = i20;
       break;
      }
     }
    } while (0);
    i9 = HEAP32[i1 + (i6 + 20) >> 2] | 0;
    if ((i9 | 0) != 0) {
     if (i9 >>> 0 < (HEAP32[14168 >> 2] | 0) >>> 0) {
      _abort();
     } else {
      HEAP32[i20 + 20 >> 2] = i9;
      HEAP32[i9 + 24 >> 2] = i20;
      break;
     }
    }
   }
  }
 } while (0);
 if (i15 >>> 0 < 16) {
  HEAP32[i4 >> 2] = i14 | HEAP32[i4 >> 2] & 1 | 2;
  i20 = i1 + (i14 | 4) | 0;
  HEAP32[i20 >> 2] = HEAP32[i20 >> 2] | 1;
  i12 = i1;
  STACKTOP = i3;
  return i12 | 0;
 } else {
  HEAP32[i4 >> 2] = HEAP32[i4 >> 2] & 1 | i2 | 2;
  HEAP32[i1 + (i2 + 4) >> 2] = i15 | 3;
  i4 = i1 + (i14 | 4) | 0;
  HEAP32[i4 >> 2] = HEAP32[i4 >> 2] | 1;
  _dispose_chunk(i1 + i2 | 0, i15);
  i12 = i1;
  STACKTOP = i3;
  return i12 | 0;
 }
 return 0;
}
function __ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0;
 i6 = STACKTOP;
 i7 = HEAP32[i1 >> 2] | 0;
 do {
  if ((i7 | 0) == 0) {
   i8 = 0;
  } else {
   if ((HEAP32[i7 + 12 >> 2] | 0) == (HEAP32[i7 + 16 >> 2] | 0)) {
    if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i7 >> 2] | 0) + 36 >> 2] & 127](i7) | 0) == -1) {
     HEAP32[i1 >> 2] = 0;
     i8 = 0;
     break;
    } else {
     i8 = HEAP32[i1 >> 2] | 0;
     break;
    }
   } else {
    i8 = i7;
   }
  }
 } while (0);
 i7 = (i8 | 0) == 0;
 i8 = HEAP32[i2 >> 2] | 0;
 do {
  if ((i8 | 0) == 0) {
   i9 = 11;
  } else {
   if ((HEAP32[i8 + 12 >> 2] | 0) == (HEAP32[i8 + 16 >> 2] | 0)) {
    if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i8 >> 2] | 0) + 36 >> 2] & 127](i8) | 0) == -1) {
     HEAP32[i2 >> 2] = 0;
     i9 = 11;
     break;
    }
   }
   if (i7) {
    i10 = i8;
   } else {
    i9 = 12;
   }
  }
 } while (0);
 if ((i9 | 0) == 11) {
  if (i7) {
   i9 = 12;
  } else {
   i10 = 0;
  }
 }
 if ((i9 | 0) == 12) {
  HEAP32[i3 >> 2] = HEAP32[i3 >> 2] | 6;
  i11 = 0;
  STACKTOP = i6;
  return i11 | 0;
 }
 i7 = HEAP32[i1 >> 2] | 0;
 i8 = HEAP32[i7 + 12 >> 2] | 0;
 if ((i8 | 0) == (HEAP32[i7 + 16 >> 2] | 0)) {
  i12 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i7 >> 2] | 0) + 36 >> 2] & 127](i7) | 0;
 } else {
  i12 = HEAPU8[i8] | 0;
 }
 i8 = i12 & 255;
 if (i8 << 24 >> 24 > -1) {
  i7 = i4 + 8 | 0;
  if (!((HEAP16[(HEAP32[i7 >> 2] | 0) + (i12 << 24 >> 24 << 1) >> 1] & 2048) == 0)) {
   i12 = (FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 31](i4, i8, 0) | 0) << 24 >> 24;
   i8 = HEAP32[i1 >> 2] | 0;
   i13 = i8 + 12 | 0;
   i14 = HEAP32[i13 >> 2] | 0;
   if ((i14 | 0) == (HEAP32[i8 + 16 >> 2] | 0)) {
    FUNCTION_TABLE_ii[HEAP32[(HEAP32[i8 >> 2] | 0) + 40 >> 2] & 127](i8) | 0;
    i15 = i5;
    i16 = i10;
    i17 = i10;
    i18 = i12;
   } else {
    HEAP32[i13 >> 2] = i14 + 1;
    i15 = i5;
    i16 = i10;
    i17 = i10;
    i18 = i12;
   }
   while (1) {
    i19 = i18 + -48 | 0;
    i12 = i15 + -1 | 0;
    i10 = HEAP32[i1 >> 2] | 0;
    do {
     if ((i10 | 0) == 0) {
      i20 = 0;
     } else {
      if ((HEAP32[i10 + 12 >> 2] | 0) == (HEAP32[i10 + 16 >> 2] | 0)) {
       if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i10 >> 2] | 0) + 36 >> 2] & 127](i10) | 0) == -1) {
        HEAP32[i1 >> 2] = 0;
        i20 = 0;
        break;
       } else {
        i20 = HEAP32[i1 >> 2] | 0;
        break;
       }
      } else {
       i20 = i10;
      }
     }
    } while (0);
    i10 = (i20 | 0) == 0;
    if ((i17 | 0) == 0) {
     i21 = i16;
     i22 = 0;
    } else {
     if ((HEAP32[i17 + 12 >> 2] | 0) == (HEAP32[i17 + 16 >> 2] | 0)) {
      if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i17 >> 2] | 0) + 36 >> 2] & 127](i17) | 0) == -1) {
       HEAP32[i2 >> 2] = 0;
       i21 = 0;
       i22 = 0;
      } else {
       i21 = i16;
       i22 = i16;
      }
     } else {
      i21 = i16;
      i22 = i17;
     }
    }
    i23 = HEAP32[i1 >> 2] | 0;
    if (!((i10 ^ (i22 | 0) == 0) & (i12 | 0) > 0)) {
     i9 = 40;
     break;
    }
    i10 = HEAP32[i23 + 12 >> 2] | 0;
    if ((i10 | 0) == (HEAP32[i23 + 16 >> 2] | 0)) {
     i24 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i23 >> 2] | 0) + 36 >> 2] & 127](i23) | 0;
    } else {
     i24 = HEAPU8[i10] | 0;
    }
    i10 = i24 & 255;
    if (!(i10 << 24 >> 24 > -1)) {
     i11 = i19;
     i9 = 52;
     break;
    }
    if ((HEAP16[(HEAP32[i7 >> 2] | 0) + (i24 << 24 >> 24 << 1) >> 1] & 2048) == 0) {
     i11 = i19;
     i9 = 52;
     break;
    }
    i5 = ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 31](i4, i10, 0) | 0) << 24 >> 24) + (i19 * 10 | 0) | 0;
    i10 = HEAP32[i1 >> 2] | 0;
    i14 = i10 + 12 | 0;
    i13 = HEAP32[i14 >> 2] | 0;
    if ((i13 | 0) == (HEAP32[i10 + 16 >> 2] | 0)) {
     FUNCTION_TABLE_ii[HEAP32[(HEAP32[i10 >> 2] | 0) + 40 >> 2] & 127](i10) | 0;
     i15 = i12;
     i16 = i21;
     i17 = i22;
     i18 = i5;
     continue;
    } else {
     HEAP32[i14 >> 2] = i13 + 1;
     i15 = i12;
     i16 = i21;
     i17 = i22;
     i18 = i5;
     continue;
    }
   }
   if ((i9 | 0) == 40) {
    do {
     if ((i23 | 0) == 0) {
      i25 = 0;
     } else {
      if ((HEAP32[i23 + 12 >> 2] | 0) == (HEAP32[i23 + 16 >> 2] | 0)) {
       if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i23 >> 2] | 0) + 36 >> 2] & 127](i23) | 0) == -1) {
        HEAP32[i1 >> 2] = 0;
        i25 = 0;
        break;
       } else {
        i25 = HEAP32[i1 >> 2] | 0;
        break;
       }
      } else {
       i25 = i23;
      }
     }
    } while (0);
    i23 = (i25 | 0) == 0;
    do {
     if ((i21 | 0) == 0) {
      i9 = 50;
     } else {
      if ((HEAP32[i21 + 12 >> 2] | 0) == (HEAP32[i21 + 16 >> 2] | 0)) {
       if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i21 >> 2] | 0) + 36 >> 2] & 127](i21) | 0) == -1) {
        HEAP32[i2 >> 2] = 0;
        i9 = 50;
        break;
       }
      }
      if (i23) {
       i11 = i19;
       STACKTOP = i6;
       return i11 | 0;
      }
     }
    } while (0);
    if ((i9 | 0) == 50) {
     if (!i23) {
      i11 = i19;
      STACKTOP = i6;
      return i11 | 0;
     }
    }
    HEAP32[i3 >> 2] = HEAP32[i3 >> 2] | 2;
    i11 = i19;
    STACKTOP = i6;
    return i11 | 0;
   } else if ((i9 | 0) == 52) {
    STACKTOP = i6;
    return i11 | 0;
   }
  }
 }
 HEAP32[i3 >> 2] = HEAP32[i3 >> 2] | 4;
 i11 = 0;
 STACKTOP = i6;
 return i11 | 0;
}
function __ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0;
 i6 = STACKTOP;
 i7 = HEAP32[i1 >> 2] | 0;
 do {
  if ((i7 | 0) == 0) {
   i8 = 1;
  } else {
   i9 = HEAP32[i7 + 12 >> 2] | 0;
   if ((i9 | 0) == (HEAP32[i7 + 16 >> 2] | 0)) {
    i10 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i7 >> 2] | 0) + 36 >> 2] & 127](i7) | 0;
   } else {
    i10 = HEAP32[i9 >> 2] | 0;
   }
   if ((i10 | 0) == -1) {
    HEAP32[i1 >> 2] = 0;
    i8 = 1;
    break;
   } else {
    i8 = (HEAP32[i1 >> 2] | 0) == 0;
    break;
   }
  }
 } while (0);
 i10 = HEAP32[i2 >> 2] | 0;
 do {
  if ((i10 | 0) == 0) {
   i11 = 14;
  } else {
   i7 = HEAP32[i10 + 12 >> 2] | 0;
   if ((i7 | 0) == (HEAP32[i10 + 16 >> 2] | 0)) {
    i12 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i10 >> 2] | 0) + 36 >> 2] & 127](i10) | 0;
   } else {
    i12 = HEAP32[i7 >> 2] | 0;
   }
   if ((i12 | 0) == -1) {
    HEAP32[i2 >> 2] = 0;
    i11 = 14;
    break;
   } else {
    if (i8) {
     i13 = i10;
     break;
    } else {
     i11 = 16;
     break;
    }
   }
  }
 } while (0);
 if ((i11 | 0) == 14) {
  if (i8) {
   i11 = 16;
  } else {
   i13 = 0;
  }
 }
 if ((i11 | 0) == 16) {
  HEAP32[i3 >> 2] = HEAP32[i3 >> 2] | 6;
  i14 = 0;
  STACKTOP = i6;
  return i14 | 0;
 }
 i8 = HEAP32[i1 >> 2] | 0;
 i10 = HEAP32[i8 + 12 >> 2] | 0;
 if ((i10 | 0) == (HEAP32[i8 + 16 >> 2] | 0)) {
  i15 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i8 >> 2] | 0) + 36 >> 2] & 127](i8) | 0;
 } else {
  i15 = HEAP32[i10 >> 2] | 0;
 }
 if (!(FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i4 >> 2] | 0) + 12 >> 2] & 31](i4, 2048, i15) | 0)) {
  HEAP32[i3 >> 2] = HEAP32[i3 >> 2] | 4;
  i14 = 0;
  STACKTOP = i6;
  return i14 | 0;
 }
 i10 = (FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i4 >> 2] | 0) + 52 >> 2] & 31](i4, i15, 0) | 0) << 24 >> 24;
 i15 = HEAP32[i1 >> 2] | 0;
 i8 = i15 + 12 | 0;
 i12 = HEAP32[i8 >> 2] | 0;
 if ((i12 | 0) == (HEAP32[i15 + 16 >> 2] | 0)) {
  FUNCTION_TABLE_ii[HEAP32[(HEAP32[i15 >> 2] | 0) + 40 >> 2] & 127](i15) | 0;
  i16 = i5;
  i17 = i13;
  i18 = i13;
  i19 = i10;
 } else {
  HEAP32[i8 >> 2] = i12 + 4;
  i16 = i5;
  i17 = i13;
  i18 = i13;
  i19 = i10;
 }
 while (1) {
  i20 = i19 + -48 | 0;
  i10 = i16 + -1 | 0;
  i13 = HEAP32[i1 >> 2] | 0;
  do {
   if ((i13 | 0) == 0) {
    i21 = 1;
   } else {
    i5 = HEAP32[i13 + 12 >> 2] | 0;
    if ((i5 | 0) == (HEAP32[i13 + 16 >> 2] | 0)) {
     i22 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i13 >> 2] | 0) + 36 >> 2] & 127](i13) | 0;
    } else {
     i22 = HEAP32[i5 >> 2] | 0;
    }
    if ((i22 | 0) == -1) {
     HEAP32[i1 >> 2] = 0;
     i21 = 1;
     break;
    } else {
     i21 = (HEAP32[i1 >> 2] | 0) == 0;
     break;
    }
   }
  } while (0);
  do {
   if ((i18 | 0) == 0) {
    i23 = i17;
    i24 = 0;
    i25 = 1;
   } else {
    i13 = HEAP32[i18 + 12 >> 2] | 0;
    if ((i13 | 0) == (HEAP32[i18 + 16 >> 2] | 0)) {
     i26 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i18 >> 2] | 0) + 36 >> 2] & 127](i18) | 0;
    } else {
     i26 = HEAP32[i13 >> 2] | 0;
    }
    if ((i26 | 0) == -1) {
     HEAP32[i2 >> 2] = 0;
     i23 = 0;
     i24 = 0;
     i25 = 1;
     break;
    } else {
     i23 = i17;
     i24 = i17;
     i25 = (i17 | 0) == 0;
     break;
    }
   }
  } while (0);
  i27 = HEAP32[i1 >> 2] | 0;
  if (!((i21 ^ i25) & (i10 | 0) > 0)) {
   break;
  }
  i13 = HEAP32[i27 + 12 >> 2] | 0;
  if ((i13 | 0) == (HEAP32[i27 + 16 >> 2] | 0)) {
   i28 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i27 >> 2] | 0) + 36 >> 2] & 127](i27) | 0;
  } else {
   i28 = HEAP32[i13 >> 2] | 0;
  }
  if (!(FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i4 >> 2] | 0) + 12 >> 2] & 31](i4, 2048, i28) | 0)) {
   i14 = i20;
   i11 = 63;
   break;
  }
  i13 = ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i4 >> 2] | 0) + 52 >> 2] & 31](i4, i28, 0) | 0) << 24 >> 24) + (i20 * 10 | 0) | 0;
  i5 = HEAP32[i1 >> 2] | 0;
  i12 = i5 + 12 | 0;
  i8 = HEAP32[i12 >> 2] | 0;
  if ((i8 | 0) == (HEAP32[i5 + 16 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[i5 >> 2] | 0) + 40 >> 2] & 127](i5) | 0;
   i16 = i10;
   i17 = i23;
   i18 = i24;
   i19 = i13;
   continue;
  } else {
   HEAP32[i12 >> 2] = i8 + 4;
   i16 = i10;
   i17 = i23;
   i18 = i24;
   i19 = i13;
   continue;
  }
 }
 if ((i11 | 0) == 63) {
  STACKTOP = i6;
  return i14 | 0;
 }
 do {
  if ((i27 | 0) == 0) {
   i29 = 1;
  } else {
   i19 = HEAP32[i27 + 12 >> 2] | 0;
   if ((i19 | 0) == (HEAP32[i27 + 16 >> 2] | 0)) {
    i30 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i27 >> 2] | 0) + 36 >> 2] & 127](i27) | 0;
   } else {
    i30 = HEAP32[i19 >> 2] | 0;
   }
   if ((i30 | 0) == -1) {
    HEAP32[i1 >> 2] = 0;
    i29 = 1;
    break;
   } else {
    i29 = (HEAP32[i1 >> 2] | 0) == 0;
    break;
   }
  }
 } while (0);
 do {
  if ((i23 | 0) == 0) {
   i11 = 60;
  } else {
   i1 = HEAP32[i23 + 12 >> 2] | 0;
   if ((i1 | 0) == (HEAP32[i23 + 16 >> 2] | 0)) {
    i31 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i23 >> 2] | 0) + 36 >> 2] & 127](i23) | 0;
   } else {
    i31 = HEAP32[i1 >> 2] | 0;
   }
   if ((i31 | 0) == -1) {
    HEAP32[i2 >> 2] = 0;
    i11 = 60;
    break;
   }
   if (i29) {
    i14 = i20;
    STACKTOP = i6;
    return i14 | 0;
   }
  }
 } while (0);
 if ((i11 | 0) == 60) {
  if (!i29) {
   i14 = i20;
   STACKTOP = i6;
   return i14 | 0;
  }
 }
 HEAP32[i3 >> 2] = HEAP32[i3 >> 2] | 2;
 i14 = i20;
 STACKTOP = i6;
 return i14 | 0;
}
function __ZNSt3__19__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE(i1, i2, i3, i4, i5, i6, i7) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 var i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i9 = i8;
 i10 = i8 + 12 | 0;
 i11 = HEAP32[i7 >> 2] | 0;
 if (!((HEAP32[1456] | 0) == -1)) {
  HEAP32[i9 >> 2] = 5824;
  HEAP32[i9 + 4 >> 2] = 118;
  HEAP32[i9 + 8 >> 2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(5824, i9, 119);
 }
 i12 = (HEAP32[5828 >> 2] | 0) + -1 | 0;
 i13 = HEAP32[i11 + 8 >> 2] | 0;
 if (!((HEAP32[i11 + 12 >> 2] | 0) - i13 >> 2 >>> 0 > i12 >>> 0)) {
  i14 = ___cxa_allocate_exception(4) | 0;
  __ZNSt8bad_castC2Ev(i14);
  ___cxa_throw(i14 | 0, 13792, 107);
 }
 i11 = HEAP32[i13 + (i12 << 2) >> 2] | 0;
 if ((i11 | 0) == 0) {
  i14 = ___cxa_allocate_exception(4) | 0;
  __ZNSt8bad_castC2Ev(i14);
  ___cxa_throw(i14 | 0, 13792, 107);
 }
 i14 = HEAP32[i7 >> 2] | 0;
 if (!((HEAP32[1496] | 0) == -1)) {
  HEAP32[i9 >> 2] = 5984;
  HEAP32[i9 + 4 >> 2] = 118;
  HEAP32[i9 + 8 >> 2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(5984, i9, 119);
 }
 i9 = (HEAP32[5988 >> 2] | 0) + -1 | 0;
 i7 = HEAP32[i14 + 8 >> 2] | 0;
 if (!((HEAP32[i14 + 12 >> 2] | 0) - i7 >> 2 >>> 0 > i9 >>> 0)) {
  i15 = ___cxa_allocate_exception(4) | 0;
  __ZNSt8bad_castC2Ev(i15);
  ___cxa_throw(i15 | 0, 13792, 107);
 }
 i14 = HEAP32[i7 + (i9 << 2) >> 2] | 0;
 if ((i14 | 0) == 0) {
  i15 = ___cxa_allocate_exception(4) | 0;
  __ZNSt8bad_castC2Ev(i15);
  ___cxa_throw(i15 | 0, 13792, 107);
 }
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[i14 >> 2] | 0) + 20 >> 2] & 63](i10, i14);
 i15 = HEAP8[i10] | 0;
 if ((i15 & 1) == 0) {
  i16 = (i15 & 255) >>> 1;
 } else {
  i16 = HEAP32[i10 + 4 >> 2] | 0;
 }
 if ((i16 | 0) == 0) {
  FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[i11 >> 2] | 0) + 48 >> 2] & 7](i11, i1, i3, i4) | 0;
  i16 = i4 + (i3 - i1 << 2) | 0;
  HEAP32[i6 >> 2] = i16;
  i17 = i16;
 } else {
  HEAP32[i6 >> 2] = i4;
  i16 = HEAP8[i1] | 0;
  if (i16 << 24 >> 24 == 43 | i16 << 24 >> 24 == 45) {
   i15 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i11 >> 2] | 0) + 44 >> 2] & 31](i11, i16) | 0;
   i16 = HEAP32[i6 >> 2] | 0;
   HEAP32[i6 >> 2] = i16 + 4;
   HEAP32[i16 >> 2] = i15;
   i18 = i1 + 1 | 0;
  } else {
   i18 = i1;
  }
  if ((i3 - i18 | 0) > 1) {
   if ((HEAP8[i18] | 0) == 48) {
    i15 = i18 + 1 | 0;
    i16 = HEAP8[i15] | 0;
    if (i16 << 24 >> 24 == 88 | i16 << 24 >> 24 == 120) {
     i16 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i11 >> 2] | 0) + 44 >> 2] & 31](i11, 48) | 0;
     i9 = HEAP32[i6 >> 2] | 0;
     HEAP32[i6 >> 2] = i9 + 4;
     HEAP32[i9 >> 2] = i16;
     i16 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i11 >> 2] | 0) + 44 >> 2] & 31](i11, HEAP8[i15] | 0) | 0;
     i15 = HEAP32[i6 >> 2] | 0;
     HEAP32[i6 >> 2] = i15 + 4;
     HEAP32[i15 >> 2] = i16;
     i19 = i18 + 2 | 0;
    } else {
     i19 = i18;
    }
   } else {
    i19 = i18;
   }
  } else {
   i19 = i18;
  }
  if ((i19 | 0) != (i3 | 0)) {
   i18 = i3 + -1 | 0;
   if (i18 >>> 0 > i19 >>> 0) {
    i16 = i19;
    i15 = i18;
    do {
     i18 = HEAP8[i16] | 0;
     HEAP8[i16] = HEAP8[i15] | 0;
     HEAP8[i15] = i18;
     i16 = i16 + 1 | 0;
     i15 = i15 + -1 | 0;
    } while (i16 >>> 0 < i15 >>> 0);
   }
  }
  i15 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i14 >> 2] | 0) + 16 >> 2] & 127](i14) | 0;
  if (i19 >>> 0 < i3 >>> 0) {
   i14 = i10 + 1 | 0;
   i16 = i10 + 4 | 0;
   i18 = i10 + 8 | 0;
   i9 = 0;
   i7 = 0;
   i12 = i19;
   while (1) {
    i13 = (HEAP8[i10] & 1) == 0;
    if ((HEAP8[(i13 ? i14 : HEAP32[i18 >> 2] | 0) + i7 | 0] | 0) == 0) {
     i20 = i9;
     i21 = i7;
    } else {
     if ((i9 | 0) == (HEAP8[(i13 ? i14 : HEAP32[i18 >> 2] | 0) + i7 | 0] | 0)) {
      i13 = HEAP32[i6 >> 2] | 0;
      HEAP32[i6 >> 2] = i13 + 4;
      HEAP32[i13 >> 2] = i15;
      i13 = HEAP8[i10] | 0;
      if ((i13 & 1) == 0) {
       i22 = (i13 & 255) >>> 1;
      } else {
       i22 = HEAP32[i16 >> 2] | 0;
      }
      i20 = 0;
      i21 = (i7 >>> 0 < (i22 + -1 | 0) >>> 0) + i7 | 0;
     } else {
      i20 = i9;
      i21 = i7;
     }
    }
    i13 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i11 >> 2] | 0) + 44 >> 2] & 31](i11, HEAP8[i12] | 0) | 0;
    i23 = HEAP32[i6 >> 2] | 0;
    i24 = i23 + 4 | 0;
    HEAP32[i6 >> 2] = i24;
    HEAP32[i23 >> 2] = i13;
    i13 = i12 + 1 | 0;
    if (i13 >>> 0 < i3 >>> 0) {
     i9 = i20 + 1 | 0;
     i7 = i21;
     i12 = i13;
    } else {
     i25 = i24;
     break;
    }
   }
  } else {
   i25 = HEAP32[i6 >> 2] | 0;
  }
  i6 = i4 + (i19 - i1 << 2) | 0;
  if ((i6 | 0) == (i25 | 0)) {
   i17 = i25;
  } else {
   i19 = i25 + -4 | 0;
   if (i19 >>> 0 > i6 >>> 0) {
    i12 = i6;
    i6 = i19;
    while (1) {
     i19 = HEAP32[i12 >> 2] | 0;
     HEAP32[i12 >> 2] = HEAP32[i6 >> 2];
     HEAP32[i6 >> 2] = i19;
     i19 = i12 + 4 | 0;
     i21 = i6 + -4 | 0;
     if (i19 >>> 0 < i21 >>> 0) {
      i12 = i19;
      i6 = i21;
     } else {
      i17 = i25;
      break;
     }
    }
   } else {
    i17 = i25;
   }
  }
 }
 if ((i2 | 0) == (i3 | 0)) {
  i26 = i17;
  HEAP32[i5 >> 2] = i26;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i10);
  STACKTOP = i8;
  return;
 }
 i26 = i4 + (i2 - i1 << 2) | 0;
 HEAP32[i5 >> 2] = i26;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i10);
 STACKTOP = i8;
 return;
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwe(i1, i2, i3, i4, i5, d6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 d6 = +d6;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 304 | 0;
 i7 = i2 + 8 | 0;
 i8 = i2;
 i9 = i2 + 272 | 0;
 i10 = i2 + 264 | 0;
 i11 = i2 + 36 | 0;
 i12 = i2 + 268 | 0;
 i13 = i2 + 24 | 0;
 i14 = i2 + 20 | 0;
 i15 = i2 + 28 | 0;
 i16 = i2 + 32 | 0;
 i17 = i8;
 HEAP32[i17 >> 2] = 37;
 HEAP32[i17 + 4 >> 2] = 0;
 i17 = i8 + 1 | 0;
 i18 = i4 + 4 | 0;
 i19 = HEAP32[i18 >> 2] | 0;
 if ((i19 & 2048 | 0) == 0) {
  i20 = i17;
 } else {
  HEAP8[i17] = 43;
  i20 = i8 + 2 | 0;
 }
 if ((i19 & 1024 | 0) == 0) {
  i21 = i20;
 } else {
  HEAP8[i20] = 35;
  i21 = i20 + 1 | 0;
 }
 i20 = i19 & 260;
 i17 = i19 >>> 14;
 do {
  if ((i20 | 0) == 260) {
   HEAP8[i21] = 76;
   i19 = i21 + 1 | 0;
   if ((i17 & 1 | 0) == 0) {
    HEAP8[i19] = 97;
    i22 = 0;
    break;
   } else {
    HEAP8[i19] = 65;
    i22 = 0;
    break;
   }
  } else {
   HEAP8[i21] = 46;
   HEAP8[i21 + 1 | 0] = 42;
   HEAP8[i21 + 2 | 0] = 76;
   i19 = i21 + 3 | 0;
   if ((i20 | 0) == 256) {
    if ((i17 & 1 | 0) == 0) {
     HEAP8[i19] = 101;
     i22 = 1;
     break;
    } else {
     HEAP8[i19] = 69;
     i22 = 1;
     break;
    }
   } else if ((i20 | 0) == 4) {
    if ((i17 & 1 | 0) == 0) {
     HEAP8[i19] = 102;
     i22 = 1;
     break;
    } else {
     HEAP8[i19] = 70;
     i22 = 1;
     break;
    }
   } else {
    if ((i17 & 1 | 0) == 0) {
     HEAP8[i19] = 103;
     i22 = 1;
     break;
    } else {
     HEAP8[i19] = 71;
     i22 = 1;
     break;
    }
   }
  }
 } while (0);
 HEAP32[i10 >> 2] = i9;
 if ((HEAP8[5728] | 0) == 0) {
  if ((___cxa_guard_acquire(5728) | 0) != 0) {
   HEAP32[1430] = _newlocale(2147483647, 5736, 0) | 0;
   ___cxa_guard_release(5728);
  }
 }
 i17 = HEAP32[1430] | 0;
 if (i22) {
  HEAP32[i7 >> 2] = HEAP32[i4 + 8 >> 2];
  i20 = i7 + 4 | 0;
  HEAPF64[tempDoublePtr >> 3] = d6;
  HEAP32[i20 >> 2] = HEAP32[tempDoublePtr >> 2];
  HEAP32[i20 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
  i23 = __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz(i9, 30, i17, i8, i7) | 0;
 } else {
  HEAPF64[tempDoublePtr >> 3] = d6;
  HEAP32[i7 >> 2] = HEAP32[tempDoublePtr >> 2];
  HEAP32[i7 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
  i23 = __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz(i9, 30, i17, i8, i7) | 0;
 }
 if ((i23 | 0) > 29) {
  i17 = (HEAP8[5728] | 0) == 0;
  if (i22) {
   if (i17) {
    if ((___cxa_guard_acquire(5728) | 0) != 0) {
     HEAP32[1430] = _newlocale(2147483647, 5736, 0) | 0;
     ___cxa_guard_release(5728);
    }
   }
   i22 = HEAP32[1430] | 0;
   HEAP32[i7 >> 2] = HEAP32[i4 + 8 >> 2];
   i20 = i7 + 4 | 0;
   HEAPF64[tempDoublePtr >> 3] = d6;
   HEAP32[i20 >> 2] = HEAP32[tempDoublePtr >> 2];
   HEAP32[i20 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
   i24 = __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz(i10, i22, i8, i7) | 0;
  } else {
   if (i17) {
    if ((___cxa_guard_acquire(5728) | 0) != 0) {
     HEAP32[1430] = _newlocale(2147483647, 5736, 0) | 0;
     ___cxa_guard_release(5728);
    }
   }
   i17 = HEAP32[1430] | 0;
   HEAPF64[tempDoublePtr >> 3] = d6;
   HEAP32[i7 >> 2] = HEAP32[tempDoublePtr >> 2];
   HEAP32[i7 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
   i24 = __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz(i10, i17, i8, i7) | 0;
  }
  i8 = HEAP32[i10 >> 2] | 0;
  if ((i8 | 0) == 0) {
   __ZSt17__throw_bad_allocv();
  } else {
   i25 = i8;
   i26 = i8;
   i27 = i24;
  }
 } else {
  i25 = HEAP32[i10 >> 2] | 0;
  i26 = 0;
  i27 = i23;
 }
 i23 = i25 + i27 | 0;
 i10 = HEAP32[i18 >> 2] & 176;
 do {
  if ((i10 | 0) == 32) {
   i28 = i23;
  } else if ((i10 | 0) == 16) {
   i18 = HEAP8[i25] | 0;
   if (i18 << 24 >> 24 == 43 | i18 << 24 >> 24 == 45) {
    i28 = i25 + 1 | 0;
    break;
   }
   if ((i27 | 0) > 1 & i18 << 24 >> 24 == 48) {
    i18 = HEAP8[i25 + 1 | 0] | 0;
    if (i18 << 24 >> 24 == 88 | i18 << 24 >> 24 == 120) {
     i28 = i25 + 2 | 0;
    } else {
     i29 = 44;
    }
   } else {
    i29 = 44;
   }
  } else {
   i29 = 44;
  }
 } while (0);
 if ((i29 | 0) == 44) {
  i28 = i25;
 }
 if ((i25 | 0) == (i9 | 0)) {
  i30 = i9;
  i31 = 0;
  i32 = i11;
 } else {
  i11 = _malloc(i27 << 3) | 0;
  if ((i11 | 0) == 0) {
   __ZSt17__throw_bad_allocv();
  } else {
   i30 = i25;
   i31 = i11;
   i32 = i11;
  }
 }
 __ZNKSt3__18ios_base6getlocEv(i14, i4);
 __ZNSt3__19__num_putIwE23__widen_and_group_floatEPcS2_S2_PwRS3_S4_RKNS_6localeE(i30, i28, i23, i32, i12, i13, i14);
 __ZNSt3__114__shared_count16__release_sharedEv(HEAP32[i14 >> 2] | 0) | 0;
 HEAP32[i16 >> 2] = HEAP32[i3 >> 2];
 i14 = HEAP32[i12 >> 2] | 0;
 i12 = HEAP32[i13 >> 2] | 0;
 HEAP32[i7 + 0 >> 2] = HEAP32[i16 + 0 >> 2];
 __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(i15, i7, i32, i14, i12, i4, i5);
 i5 = HEAP32[i15 >> 2] | 0;
 HEAP32[i3 >> 2] = i5;
 HEAP32[i1 >> 2] = i5;
 if ((i31 | 0) != 0) {
  _free(i31);
 }
 if ((i26 | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 _free(i26);
 STACKTOP = i2;
 return;
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEce(i1, i2, i3, i4, i5, d6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 d6 = +d6;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 i7 = i2 + 8 | 0;
 i8 = i2;
 i9 = i2 + 44 | 0;
 i10 = i2 + 36 | 0;
 i11 = i2 + 74 | 0;
 i12 = i2 + 40 | 0;
 i13 = i2 + 24 | 0;
 i14 = i2 + 20 | 0;
 i15 = i2 + 28 | 0;
 i16 = i2 + 32 | 0;
 i17 = i8;
 HEAP32[i17 >> 2] = 37;
 HEAP32[i17 + 4 >> 2] = 0;
 i17 = i8 + 1 | 0;
 i18 = i4 + 4 | 0;
 i19 = HEAP32[i18 >> 2] | 0;
 if ((i19 & 2048 | 0) == 0) {
  i20 = i17;
 } else {
  HEAP8[i17] = 43;
  i20 = i8 + 2 | 0;
 }
 if ((i19 & 1024 | 0) == 0) {
  i21 = i20;
 } else {
  HEAP8[i20] = 35;
  i21 = i20 + 1 | 0;
 }
 i20 = i19 & 260;
 i17 = i19 >>> 14;
 do {
  if ((i20 | 0) == 260) {
   HEAP8[i21] = 76;
   i19 = i21 + 1 | 0;
   if ((i17 & 1 | 0) == 0) {
    HEAP8[i19] = 97;
    i22 = 0;
    break;
   } else {
    HEAP8[i19] = 65;
    i22 = 0;
    break;
   }
  } else {
   HEAP8[i21] = 46;
   HEAP8[i21 + 1 | 0] = 42;
   HEAP8[i21 + 2 | 0] = 76;
   i19 = i21 + 3 | 0;
   if ((i20 | 0) == 4) {
    if ((i17 & 1 | 0) == 0) {
     HEAP8[i19] = 102;
     i22 = 1;
     break;
    } else {
     HEAP8[i19] = 70;
     i22 = 1;
     break;
    }
   } else if ((i20 | 0) == 256) {
    if ((i17 & 1 | 0) == 0) {
     HEAP8[i19] = 101;
     i22 = 1;
     break;
    } else {
     HEAP8[i19] = 69;
     i22 = 1;
     break;
    }
   } else {
    if ((i17 & 1 | 0) == 0) {
     HEAP8[i19] = 103;
     i22 = 1;
     break;
    } else {
     HEAP8[i19] = 71;
     i22 = 1;
     break;
    }
   }
  }
 } while (0);
 HEAP32[i10 >> 2] = i9;
 if ((HEAP8[5728] | 0) == 0) {
  if ((___cxa_guard_acquire(5728) | 0) != 0) {
   HEAP32[1430] = _newlocale(2147483647, 5736, 0) | 0;
   ___cxa_guard_release(5728);
  }
 }
 i17 = HEAP32[1430] | 0;
 if (i22) {
  HEAP32[i7 >> 2] = HEAP32[i4 + 8 >> 2];
  i20 = i7 + 4 | 0;
  HEAPF64[tempDoublePtr >> 3] = d6;
  HEAP32[i20 >> 2] = HEAP32[tempDoublePtr >> 2];
  HEAP32[i20 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
  i23 = __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz(i9, 30, i17, i8, i7) | 0;
 } else {
  HEAPF64[tempDoublePtr >> 3] = d6;
  HEAP32[i7 >> 2] = HEAP32[tempDoublePtr >> 2];
  HEAP32[i7 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
  i23 = __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz(i9, 30, i17, i8, i7) | 0;
 }
 if ((i23 | 0) > 29) {
  i17 = (HEAP8[5728] | 0) == 0;
  if (i22) {
   if (i17) {
    if ((___cxa_guard_acquire(5728) | 0) != 0) {
     HEAP32[1430] = _newlocale(2147483647, 5736, 0) | 0;
     ___cxa_guard_release(5728);
    }
   }
   i22 = HEAP32[1430] | 0;
   HEAP32[i7 >> 2] = HEAP32[i4 + 8 >> 2];
   i20 = i7 + 4 | 0;
   HEAPF64[tempDoublePtr >> 3] = d6;
   HEAP32[i20 >> 2] = HEAP32[tempDoublePtr >> 2];
   HEAP32[i20 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
   i24 = __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz(i10, i22, i8, i7) | 0;
  } else {
   if (i17) {
    if ((___cxa_guard_acquire(5728) | 0) != 0) {
     HEAP32[1430] = _newlocale(2147483647, 5736, 0) | 0;
     ___cxa_guard_release(5728);
    }
   }
   i17 = HEAP32[1430] | 0;
   HEAPF64[tempDoublePtr >> 3] = d6;
   HEAP32[i7 >> 2] = HEAP32[tempDoublePtr >> 2];
   HEAP32[i7 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
   i24 = __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz(i10, i17, i8, i7) | 0;
  }
  i8 = HEAP32[i10 >> 2] | 0;
  if ((i8 | 0) == 0) {
   __ZSt17__throw_bad_allocv();
  } else {
   i25 = i8;
   i26 = i8;
   i27 = i24;
  }
 } else {
  i25 = HEAP32[i10 >> 2] | 0;
  i26 = 0;
  i27 = i23;
 }
 i23 = i25 + i27 | 0;
 i10 = HEAP32[i18 >> 2] & 176;
 do {
  if ((i10 | 0) == 16) {
   i18 = HEAP8[i25] | 0;
   if (i18 << 24 >> 24 == 43 | i18 << 24 >> 24 == 45) {
    i28 = i25 + 1 | 0;
    break;
   }
   if ((i27 | 0) > 1 & i18 << 24 >> 24 == 48) {
    i18 = HEAP8[i25 + 1 | 0] | 0;
    if (i18 << 24 >> 24 == 88 | i18 << 24 >> 24 == 120) {
     i28 = i25 + 2 | 0;
    } else {
     i29 = 44;
    }
   } else {
    i29 = 44;
   }
  } else if ((i10 | 0) == 32) {
   i28 = i23;
  } else {
   i29 = 44;
  }
 } while (0);
 if ((i29 | 0) == 44) {
  i28 = i25;
 }
 if ((i25 | 0) == (i9 | 0)) {
  i30 = i9;
  i31 = 0;
  i32 = i11;
 } else {
  i11 = _malloc(i27 << 1) | 0;
  if ((i11 | 0) == 0) {
   __ZSt17__throw_bad_allocv();
  } else {
   i30 = i25;
   i31 = i11;
   i32 = i11;
  }
 }
 __ZNKSt3__18ios_base6getlocEv(i14, i4);
 __ZNSt3__19__num_putIcE23__widen_and_group_floatEPcS2_S2_S2_RS2_S3_RKNS_6localeE(i30, i28, i23, i32, i12, i13, i14);
 __ZNSt3__114__shared_count16__release_sharedEv(HEAP32[i14 >> 2] | 0) | 0;
 HEAP32[i16 >> 2] = HEAP32[i3 >> 2];
 i14 = HEAP32[i12 >> 2] | 0;
 i12 = HEAP32[i13 >> 2] | 0;
 HEAP32[i7 + 0 >> 2] = HEAP32[i16 + 0 >> 2];
 __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(i15, i7, i32, i14, i12, i4, i5);
 i5 = HEAP32[i15 >> 2] | 0;
 HEAP32[i3 >> 2] = i5;
 HEAP32[i1 >> 2] = i5;
 if ((i31 | 0) != 0) {
  _free(i31);
 }
 if ((i26 | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 _free(i26);
 STACKTOP = i2;
 return;
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwd(i1, i2, i3, i4, i5, d6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 d6 = +d6;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 304 | 0;
 i7 = i2 + 8 | 0;
 i8 = i2;
 i9 = i2 + 272 | 0;
 i10 = i2 + 264 | 0;
 i11 = i2 + 36 | 0;
 i12 = i2 + 268 | 0;
 i13 = i2 + 24 | 0;
 i14 = i2 + 20 | 0;
 i15 = i2 + 28 | 0;
 i16 = i2 + 32 | 0;
 i17 = i8;
 HEAP32[i17 >> 2] = 37;
 HEAP32[i17 + 4 >> 2] = 0;
 i17 = i8 + 1 | 0;
 i18 = i4 + 4 | 0;
 i19 = HEAP32[i18 >> 2] | 0;
 if ((i19 & 2048 | 0) == 0) {
  i20 = i17;
 } else {
  HEAP8[i17] = 43;
  i20 = i8 + 2 | 0;
 }
 if ((i19 & 1024 | 0) == 0) {
  i21 = i20;
 } else {
  HEAP8[i20] = 35;
  i21 = i20 + 1 | 0;
 }
 i20 = i19 & 260;
 i17 = i19 >>> 14;
 do {
  if ((i20 | 0) == 260) {
   if ((i17 & 1 | 0) == 0) {
    HEAP8[i21] = 97;
    i22 = 0;
    break;
   } else {
    HEAP8[i21] = 65;
    i22 = 0;
    break;
   }
  } else {
   HEAP8[i21] = 46;
   i19 = i21 + 2 | 0;
   HEAP8[i21 + 1 | 0] = 42;
   if ((i20 | 0) == 4) {
    if ((i17 & 1 | 0) == 0) {
     HEAP8[i19] = 102;
     i22 = 1;
     break;
    } else {
     HEAP8[i19] = 70;
     i22 = 1;
     break;
    }
   } else if ((i20 | 0) == 256) {
    if ((i17 & 1 | 0) == 0) {
     HEAP8[i19] = 101;
     i22 = 1;
     break;
    } else {
     HEAP8[i19] = 69;
     i22 = 1;
     break;
    }
   } else {
    if ((i17 & 1 | 0) == 0) {
     HEAP8[i19] = 103;
     i22 = 1;
     break;
    } else {
     HEAP8[i19] = 71;
     i22 = 1;
     break;
    }
   }
  }
 } while (0);
 HEAP32[i10 >> 2] = i9;
 if ((HEAP8[5728] | 0) == 0) {
  if ((___cxa_guard_acquire(5728) | 0) != 0) {
   HEAP32[1430] = _newlocale(2147483647, 5736, 0) | 0;
   ___cxa_guard_release(5728);
  }
 }
 i17 = HEAP32[1430] | 0;
 if (i22) {
  HEAP32[i7 >> 2] = HEAP32[i4 + 8 >> 2];
  i20 = i7 + 4 | 0;
  HEAPF64[tempDoublePtr >> 3] = d6;
  HEAP32[i20 >> 2] = HEAP32[tempDoublePtr >> 2];
  HEAP32[i20 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
  i23 = __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz(i9, 30, i17, i8, i7) | 0;
 } else {
  HEAPF64[tempDoublePtr >> 3] = d6;
  HEAP32[i7 >> 2] = HEAP32[tempDoublePtr >> 2];
  HEAP32[i7 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
  i23 = __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz(i9, 30, i17, i8, i7) | 0;
 }
 if ((i23 | 0) > 29) {
  i17 = (HEAP8[5728] | 0) == 0;
  if (i22) {
   if (i17) {
    if ((___cxa_guard_acquire(5728) | 0) != 0) {
     HEAP32[1430] = _newlocale(2147483647, 5736, 0) | 0;
     ___cxa_guard_release(5728);
    }
   }
   i22 = HEAP32[1430] | 0;
   HEAP32[i7 >> 2] = HEAP32[i4 + 8 >> 2];
   i20 = i7 + 4 | 0;
   HEAPF64[tempDoublePtr >> 3] = d6;
   HEAP32[i20 >> 2] = HEAP32[tempDoublePtr >> 2];
   HEAP32[i20 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
   i24 = __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz(i10, i22, i8, i7) | 0;
  } else {
   if (i17) {
    if ((___cxa_guard_acquire(5728) | 0) != 0) {
     HEAP32[1430] = _newlocale(2147483647, 5736, 0) | 0;
     ___cxa_guard_release(5728);
    }
   }
   i17 = HEAP32[1430] | 0;
   HEAP32[i7 >> 2] = HEAP32[i4 + 8 >> 2];
   i22 = i7 + 4 | 0;
   HEAPF64[tempDoublePtr >> 3] = d6;
   HEAP32[i22 >> 2] = HEAP32[tempDoublePtr >> 2];
   HEAP32[i22 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
   i24 = __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz(i10, i17, i8, i7) | 0;
  }
  i8 = HEAP32[i10 >> 2] | 0;
  if ((i8 | 0) == 0) {
   __ZSt17__throw_bad_allocv();
  } else {
   i25 = i8;
   i26 = i8;
   i27 = i24;
  }
 } else {
  i25 = HEAP32[i10 >> 2] | 0;
  i26 = 0;
  i27 = i23;
 }
 i23 = i25 + i27 | 0;
 i10 = HEAP32[i18 >> 2] & 176;
 do {
  if ((i10 | 0) == 32) {
   i28 = i23;
  } else if ((i10 | 0) == 16) {
   i18 = HEAP8[i25] | 0;
   if (i18 << 24 >> 24 == 43 | i18 << 24 >> 24 == 45) {
    i28 = i25 + 1 | 0;
    break;
   }
   if ((i27 | 0) > 1 & i18 << 24 >> 24 == 48) {
    i18 = HEAP8[i25 + 1 | 0] | 0;
    if (i18 << 24 >> 24 == 88 | i18 << 24 >> 24 == 120) {
     i28 = i25 + 2 | 0;
    } else {
     i29 = 44;
    }
   } else {
    i29 = 44;
   }
  } else {
   i29 = 44;
  }
 } while (0);
 if ((i29 | 0) == 44) {
  i28 = i25;
 }
 if ((i25 | 0) == (i9 | 0)) {
  i30 = i9;
  i31 = 0;
  i32 = i11;
 } else {
  i11 = _malloc(i27 << 3) | 0;
  if ((i11 | 0) == 0) {
   __ZSt17__throw_bad_allocv();
  } else {
   i30 = i25;
   i31 = i11;
   i32 = i11;
  }
 }
 __ZNKSt3__18ios_base6getlocEv(i14, i4);
 __ZNSt3__19__num_putIwE23__widen_and_group_floatEPcS2_S2_PwRS3_S4_RKNS_6localeE(i30, i28, i23, i32, i12, i13, i14);
 __ZNSt3__114__shared_count16__release_sharedEv(HEAP32[i14 >> 2] | 0) | 0;
 HEAP32[i16 >> 2] = HEAP32[i3 >> 2];
 i14 = HEAP32[i12 >> 2] | 0;
 i12 = HEAP32[i13 >> 2] | 0;
 HEAP32[i7 + 0 >> 2] = HEAP32[i16 + 0 >> 2];
 __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(i15, i7, i32, i14, i12, i4, i5);
 i5 = HEAP32[i15 >> 2] | 0;
 HEAP32[i3 >> 2] = i5;
 HEAP32[i1 >> 2] = i5;
 if ((i31 | 0) != 0) {
  _free(i31);
 }
 if ((i26 | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 _free(i26);
 STACKTOP = i2;
 return;
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcd(i1, i2, i3, i4, i5, d6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 d6 = +d6;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 i7 = i2 + 8 | 0;
 i8 = i2;
 i9 = i2 + 44 | 0;
 i10 = i2 + 36 | 0;
 i11 = i2 + 74 | 0;
 i12 = i2 + 40 | 0;
 i13 = i2 + 24 | 0;
 i14 = i2 + 20 | 0;
 i15 = i2 + 28 | 0;
 i16 = i2 + 32 | 0;
 i17 = i8;
 HEAP32[i17 >> 2] = 37;
 HEAP32[i17 + 4 >> 2] = 0;
 i17 = i8 + 1 | 0;
 i18 = i4 + 4 | 0;
 i19 = HEAP32[i18 >> 2] | 0;
 if ((i19 & 2048 | 0) == 0) {
  i20 = i17;
 } else {
  HEAP8[i17] = 43;
  i20 = i8 + 2 | 0;
 }
 if ((i19 & 1024 | 0) == 0) {
  i21 = i20;
 } else {
  HEAP8[i20] = 35;
  i21 = i20 + 1 | 0;
 }
 i20 = i19 & 260;
 i17 = i19 >>> 14;
 do {
  if ((i20 | 0) == 260) {
   if ((i17 & 1 | 0) == 0) {
    HEAP8[i21] = 97;
    i22 = 0;
    break;
   } else {
    HEAP8[i21] = 65;
    i22 = 0;
    break;
   }
  } else {
   HEAP8[i21] = 46;
   i19 = i21 + 2 | 0;
   HEAP8[i21 + 1 | 0] = 42;
   if ((i20 | 0) == 256) {
    if ((i17 & 1 | 0) == 0) {
     HEAP8[i19] = 101;
     i22 = 1;
     break;
    } else {
     HEAP8[i19] = 69;
     i22 = 1;
     break;
    }
   } else if ((i20 | 0) == 4) {
    if ((i17 & 1 | 0) == 0) {
     HEAP8[i19] = 102;
     i22 = 1;
     break;
    } else {
     HEAP8[i19] = 70;
     i22 = 1;
     break;
    }
   } else {
    if ((i17 & 1 | 0) == 0) {
     HEAP8[i19] = 103;
     i22 = 1;
     break;
    } else {
     HEAP8[i19] = 71;
     i22 = 1;
     break;
    }
   }
  }
 } while (0);
 HEAP32[i10 >> 2] = i9;
 if ((HEAP8[5728] | 0) == 0) {
  if ((___cxa_guard_acquire(5728) | 0) != 0) {
   HEAP32[1430] = _newlocale(2147483647, 5736, 0) | 0;
   ___cxa_guard_release(5728);
  }
 }
 i17 = HEAP32[1430] | 0;
 if (i22) {
  HEAP32[i7 >> 2] = HEAP32[i4 + 8 >> 2];
  i20 = i7 + 4 | 0;
  HEAPF64[tempDoublePtr >> 3] = d6;
  HEAP32[i20 >> 2] = HEAP32[tempDoublePtr >> 2];
  HEAP32[i20 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
  i23 = __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz(i9, 30, i17, i8, i7) | 0;
 } else {
  HEAPF64[tempDoublePtr >> 3] = d6;
  HEAP32[i7 >> 2] = HEAP32[tempDoublePtr >> 2];
  HEAP32[i7 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
  i23 = __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz(i9, 30, i17, i8, i7) | 0;
 }
 if ((i23 | 0) > 29) {
  i17 = (HEAP8[5728] | 0) == 0;
  if (i22) {
   if (i17) {
    if ((___cxa_guard_acquire(5728) | 0) != 0) {
     HEAP32[1430] = _newlocale(2147483647, 5736, 0) | 0;
     ___cxa_guard_release(5728);
    }
   }
   i22 = HEAP32[1430] | 0;
   HEAP32[i7 >> 2] = HEAP32[i4 + 8 >> 2];
   i20 = i7 + 4 | 0;
   HEAPF64[tempDoublePtr >> 3] = d6;
   HEAP32[i20 >> 2] = HEAP32[tempDoublePtr >> 2];
   HEAP32[i20 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
   i24 = __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz(i10, i22, i8, i7) | 0;
  } else {
   if (i17) {
    if ((___cxa_guard_acquire(5728) | 0) != 0) {
     HEAP32[1430] = _newlocale(2147483647, 5736, 0) | 0;
     ___cxa_guard_release(5728);
    }
   }
   i17 = HEAP32[1430] | 0;
   HEAP32[i7 >> 2] = HEAP32[i4 + 8 >> 2];
   i22 = i7 + 4 | 0;
   HEAPF64[tempDoublePtr >> 3] = d6;
   HEAP32[i22 >> 2] = HEAP32[tempDoublePtr >> 2];
   HEAP32[i22 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
   i24 = __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz(i10, i17, i8, i7) | 0;
  }
  i8 = HEAP32[i10 >> 2] | 0;
  if ((i8 | 0) == 0) {
   __ZSt17__throw_bad_allocv();
  } else {
   i25 = i8;
   i26 = i8;
   i27 = i24;
  }
 } else {
  i25 = HEAP32[i10 >> 2] | 0;
  i26 = 0;
  i27 = i23;
 }
 i23 = i25 + i27 | 0;
 i10 = HEAP32[i18 >> 2] & 176;
 do {
  if ((i10 | 0) == 32) {
   i28 = i23;
  } else if ((i10 | 0) == 16) {
   i18 = HEAP8[i25] | 0;
   if (i18 << 24 >> 24 == 43 | i18 << 24 >> 24 == 45) {
    i28 = i25 + 1 | 0;
    break;
   }
   if ((i27 | 0) > 1 & i18 << 24 >> 24 == 48) {
    i18 = HEAP8[i25 + 1 | 0] | 0;
    if (i18 << 24 >> 24 == 88 | i18 << 24 >> 24 == 120) {
     i28 = i25 + 2 | 0;
    } else {
     i29 = 44;
    }
   } else {
    i29 = 44;
   }
  } else {
   i29 = 44;
  }
 } while (0);
 if ((i29 | 0) == 44) {
  i28 = i25;
 }
 if ((i25 | 0) == (i9 | 0)) {
  i30 = i9;
  i31 = 0;
  i32 = i11;
 } else {
  i11 = _malloc(i27 << 1) | 0;
  if ((i11 | 0) == 0) {
   __ZSt17__throw_bad_allocv();
  } else {
   i30 = i25;
   i31 = i11;
   i32 = i11;
  }
 }
 __ZNKSt3__18ios_base6getlocEv(i14, i4);
 __ZNSt3__19__num_putIcE23__widen_and_group_floatEPcS2_S2_S2_RS2_S3_RKNS_6localeE(i30, i28, i23, i32, i12, i13, i14);
 __ZNSt3__114__shared_count16__release_sharedEv(HEAP32[i14 >> 2] | 0) | 0;
 HEAP32[i16 >> 2] = HEAP32[i3 >> 2];
 i14 = HEAP32[i12 >> 2] | 0;
 i12 = HEAP32[i13 >> 2] | 0;
 HEAP32[i7 + 0 >> 2] = HEAP32[i16 + 0 >> 2];
 __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(i15, i7, i32, i14, i12, i4, i5);
 i5 = HEAP32[i15 >> 2] | 0;
 HEAP32[i3 >> 2] = i5;
 HEAP32[i1 >> 2] = i5;
 if ((i31 | 0) != 0) {
  _free(i31);
 }
 if ((i26 | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 _free(i26);
 STACKTOP = i2;
 return;
}
function __ZNKSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwe(i1, i2, i3, i4, i5, i6, d7) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 d7 = +d7;
 var i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 992 | 0;
 i8 = i2;
 i9 = i2 + 888 | 0;
 i10 = i2 + 872 | 0;
 i11 = i2 + 472 | 0;
 i12 = i2 + 464 | 0;
 i13 = i2 + 460 | 0;
 i14 = i2 + 456 | 0;
 i15 = i2 + 452 | 0;
 i16 = i2 + 876 | 0;
 i17 = i2 + 432 | 0;
 i18 = i2 + 420 | 0;
 i19 = i2 + 416 | 0;
 i20 = i2 + 16 | 0;
 i21 = i2 + 12 | 0;
 i22 = i2 + 444 | 0;
 i23 = i2 + 448 | 0;
 HEAP32[i10 >> 2] = i9;
 HEAPF64[tempDoublePtr >> 3] = d7;
 HEAP32[i8 >> 2] = HEAP32[tempDoublePtr >> 2];
 HEAP32[i8 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
 i24 = _snprintf(i9 | 0, 100, 5584, i8 | 0) | 0;
 if (i24 >>> 0 > 99) {
  if ((HEAP8[5728] | 0) == 0) {
   if ((___cxa_guard_acquire(5728) | 0) != 0) {
    HEAP32[1430] = _newlocale(2147483647, 5736, 0) | 0;
    ___cxa_guard_release(5728);
   }
  }
  i9 = HEAP32[1430] | 0;
  HEAPF64[tempDoublePtr >> 3] = d7;
  HEAP32[i8 >> 2] = HEAP32[tempDoublePtr >> 2];
  HEAP32[i8 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
  i25 = __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz(i10, i9, 5584, i8) | 0;
  i9 = HEAP32[i10 >> 2] | 0;
  if ((i9 | 0) == 0) {
   __ZSt17__throw_bad_allocv();
  }
  i26 = _malloc(i25 << 2) | 0;
  if ((i26 | 0) == 0) {
   __ZSt17__throw_bad_allocv();
  } else {
   i27 = i26;
   i28 = i9;
   i29 = i26;
   i30 = i25;
  }
 } else {
  i27 = 0;
  i28 = 0;
  i29 = i11;
  i30 = i24;
 }
 __ZNKSt3__18ios_base6getlocEv(i12, i5);
 i24 = HEAP32[i12 >> 2] | 0;
 if (!((HEAP32[1456] | 0) == -1)) {
  HEAP32[i8 >> 2] = 5824;
  HEAP32[i8 + 4 >> 2] = 118;
  HEAP32[i8 + 8 >> 2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(5824, i8, 119);
 }
 i11 = (HEAP32[5828 >> 2] | 0) + -1 | 0;
 i25 = HEAP32[i24 + 8 >> 2] | 0;
 if (!((HEAP32[i24 + 12 >> 2] | 0) - i25 >> 2 >>> 0 > i11 >>> 0)) {
  i31 = ___cxa_allocate_exception(4) | 0;
  __ZNSt8bad_castC2Ev(i31);
  ___cxa_throw(i31 | 0, 13792, 107);
 }
 i24 = HEAP32[i25 + (i11 << 2) >> 2] | 0;
 if ((i24 | 0) == 0) {
  i31 = ___cxa_allocate_exception(4) | 0;
  __ZNSt8bad_castC2Ev(i31);
  ___cxa_throw(i31 | 0, 13792, 107);
 }
 i31 = HEAP32[i10 >> 2] | 0;
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[i24 >> 2] | 0) + 48 >> 2] & 7](i24, i31, i31 + i30 | 0, i29) | 0;
 if ((i30 | 0) == 0) {
  i32 = 0;
 } else {
  i32 = (HEAP8[HEAP32[i10 >> 2] | 0] | 0) == 45;
 }
 HEAP32[i13 >> 2] = 0;
 HEAP32[i16 + 0 >> 2] = 0;
 HEAP32[i16 + 4 >> 2] = 0;
 HEAP32[i16 + 8 >> 2] = 0;
 HEAP32[i17 + 0 >> 2] = 0;
 HEAP32[i17 + 4 >> 2] = 0;
 HEAP32[i17 + 8 >> 2] = 0;
 HEAP32[i18 + 0 >> 2] = 0;
 HEAP32[i18 + 4 >> 2] = 0;
 HEAP32[i18 + 8 >> 2] = 0;
 __ZNSt3__111__money_putIwE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_Ri(i4, i32, i12, i13, i14, i15, i16, i17, i18, i19);
 i4 = HEAP32[i19 >> 2] | 0;
 if ((i30 | 0) > (i4 | 0)) {
  i19 = HEAP8[i18] | 0;
  if ((i19 & 1) == 0) {
   i33 = (i19 & 255) >>> 1;
  } else {
   i33 = HEAP32[i18 + 4 >> 2] | 0;
  }
  i19 = HEAP8[i17] | 0;
  if ((i19 & 1) == 0) {
   i34 = (i19 & 255) >>> 1;
  } else {
   i34 = HEAP32[i17 + 4 >> 2] | 0;
  }
  i35 = i33 + (i30 - i4 << 1 | 1) + i34 | 0;
 } else {
  i34 = HEAP8[i18] | 0;
  if ((i34 & 1) == 0) {
   i36 = (i34 & 255) >>> 1;
  } else {
   i36 = HEAP32[i18 + 4 >> 2] | 0;
  }
  i34 = HEAP8[i17] | 0;
  if ((i34 & 1) == 0) {
   i37 = (i34 & 255) >>> 1;
  } else {
   i37 = HEAP32[i17 + 4 >> 2] | 0;
  }
  i35 = i36 + 2 + i37 | 0;
 }
 i37 = i35 + i4 | 0;
 if (i37 >>> 0 > 100) {
  i35 = _malloc(i37 << 2) | 0;
  if ((i35 | 0) == 0) {
   __ZSt17__throw_bad_allocv();
  } else {
   i38 = i35;
   i39 = i35;
  }
 } else {
  i38 = 0;
  i39 = i20;
 }
 __ZNSt3__111__money_putIwE8__formatEPwRS2_S3_jPKwS5_RKNS_5ctypeIwEEbRKNS_10money_base7patternEwwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNSE_IwNSF_IwEENSH_IwEEEESQ_i(i39, i21, i22, HEAP32[i5 + 4 >> 2] | 0, i29, i29 + (i30 << 2) | 0, i24, i32, i13, HEAP32[i14 >> 2] | 0, HEAP32[i15 >> 2] | 0, i16, i17, i18, i4);
 HEAP32[i23 >> 2] = HEAP32[i3 >> 2];
 i3 = HEAP32[i21 >> 2] | 0;
 i21 = HEAP32[i22 >> 2] | 0;
 HEAP32[i8 + 0 >> 2] = HEAP32[i23 + 0 >> 2];
 __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(i1, i8, i39, i3, i21, i5, i6);
 if ((i38 | 0) != 0) {
  _free(i38);
 }
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(i18);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(i17);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i16);
 __ZNSt3__114__shared_count16__release_sharedEv(HEAP32[i12 >> 2] | 0) | 0;
 if ((i27 | 0) != 0) {
  _free(i27);
 }
 if ((i28 | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 _free(i28);
 STACKTOP = i2;
 return;
}
function __ZNSt3__19__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE(i1, i2, i3, i4, i5, i6, i7) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 var i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i9 = i8;
 i10 = i8 + 12 | 0;
 i11 = HEAP32[i7 >> 2] | 0;
 if (!((HEAP32[1458] | 0) == -1)) {
  HEAP32[i9 >> 2] = 5832;
  HEAP32[i9 + 4 >> 2] = 118;
  HEAP32[i9 + 8 >> 2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(5832, i9, 119);
 }
 i12 = (HEAP32[5836 >> 2] | 0) + -1 | 0;
 i13 = HEAP32[i11 + 8 >> 2] | 0;
 if (!((HEAP32[i11 + 12 >> 2] | 0) - i13 >> 2 >>> 0 > i12 >>> 0)) {
  i14 = ___cxa_allocate_exception(4) | 0;
  __ZNSt8bad_castC2Ev(i14);
  ___cxa_throw(i14 | 0, 13792, 107);
 }
 i11 = HEAP32[i13 + (i12 << 2) >> 2] | 0;
 if ((i11 | 0) == 0) {
  i14 = ___cxa_allocate_exception(4) | 0;
  __ZNSt8bad_castC2Ev(i14);
  ___cxa_throw(i14 | 0, 13792, 107);
 }
 i14 = HEAP32[i7 >> 2] | 0;
 if (!((HEAP32[1494] | 0) == -1)) {
  HEAP32[i9 >> 2] = 5976;
  HEAP32[i9 + 4 >> 2] = 118;
  HEAP32[i9 + 8 >> 2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(5976, i9, 119);
 }
 i9 = (HEAP32[5980 >> 2] | 0) + -1 | 0;
 i7 = HEAP32[i14 + 8 >> 2] | 0;
 if (!((HEAP32[i14 + 12 >> 2] | 0) - i7 >> 2 >>> 0 > i9 >>> 0)) {
  i15 = ___cxa_allocate_exception(4) | 0;
  __ZNSt8bad_castC2Ev(i15);
  ___cxa_throw(i15 | 0, 13792, 107);
 }
 i14 = HEAP32[i7 + (i9 << 2) >> 2] | 0;
 if ((i14 | 0) == 0) {
  i15 = ___cxa_allocate_exception(4) | 0;
  __ZNSt8bad_castC2Ev(i15);
  ___cxa_throw(i15 | 0, 13792, 107);
 }
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[i14 >> 2] | 0) + 20 >> 2] & 63](i10, i14);
 i15 = HEAP8[i10] | 0;
 if ((i15 & 1) == 0) {
  i16 = (i15 & 255) >>> 1;
 } else {
  i16 = HEAP32[i10 + 4 >> 2] | 0;
 }
 if ((i16 | 0) == 0) {
  FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[i11 >> 2] | 0) + 32 >> 2] & 7](i11, i1, i3, i4) | 0;
  HEAP32[i6 >> 2] = i4 + (i3 - i1);
 } else {
  HEAP32[i6 >> 2] = i4;
  i16 = HEAP8[i1] | 0;
  if (i16 << 24 >> 24 == 43 | i16 << 24 >> 24 == 45) {
   i15 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i11 >> 2] | 0) + 28 >> 2] & 31](i11, i16) | 0;
   i16 = HEAP32[i6 >> 2] | 0;
   HEAP32[i6 >> 2] = i16 + 1;
   HEAP8[i16] = i15;
   i17 = i1 + 1 | 0;
  } else {
   i17 = i1;
  }
  if ((i3 - i17 | 0) > 1) {
   if ((HEAP8[i17] | 0) == 48) {
    i15 = i17 + 1 | 0;
    i16 = HEAP8[i15] | 0;
    if (i16 << 24 >> 24 == 88 | i16 << 24 >> 24 == 120) {
     i16 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i11 >> 2] | 0) + 28 >> 2] & 31](i11, 48) | 0;
     i9 = HEAP32[i6 >> 2] | 0;
     HEAP32[i6 >> 2] = i9 + 1;
     HEAP8[i9] = i16;
     i16 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i11 >> 2] | 0) + 28 >> 2] & 31](i11, HEAP8[i15] | 0) | 0;
     i15 = HEAP32[i6 >> 2] | 0;
     HEAP32[i6 >> 2] = i15 + 1;
     HEAP8[i15] = i16;
     i18 = i17 + 2 | 0;
    } else {
     i18 = i17;
    }
   } else {
    i18 = i17;
   }
  } else {
   i18 = i17;
  }
  if ((i18 | 0) != (i3 | 0)) {
   i17 = i3 + -1 | 0;
   if (i17 >>> 0 > i18 >>> 0) {
    i16 = i18;
    i15 = i17;
    do {
     i17 = HEAP8[i16] | 0;
     HEAP8[i16] = HEAP8[i15] | 0;
     HEAP8[i15] = i17;
     i16 = i16 + 1 | 0;
     i15 = i15 + -1 | 0;
    } while (i16 >>> 0 < i15 >>> 0);
   }
  }
  i15 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i14 >> 2] | 0) + 16 >> 2] & 127](i14) | 0;
  if (i18 >>> 0 < i3 >>> 0) {
   i14 = i10 + 1 | 0;
   i16 = i10 + 4 | 0;
   i17 = i10 + 8 | 0;
   i9 = 0;
   i7 = 0;
   i12 = i18;
   while (1) {
    i13 = (HEAP8[i10] & 1) == 0;
    if ((HEAP8[(i13 ? i14 : HEAP32[i17 >> 2] | 0) + i7 | 0] | 0) == 0) {
     i19 = i9;
     i20 = i7;
    } else {
     if ((i9 | 0) == (HEAP8[(i13 ? i14 : HEAP32[i17 >> 2] | 0) + i7 | 0] | 0)) {
      i13 = HEAP32[i6 >> 2] | 0;
      HEAP32[i6 >> 2] = i13 + 1;
      HEAP8[i13] = i15;
      i13 = HEAP8[i10] | 0;
      if ((i13 & 1) == 0) {
       i21 = (i13 & 255) >>> 1;
      } else {
       i21 = HEAP32[i16 >> 2] | 0;
      }
      i19 = 0;
      i20 = (i7 >>> 0 < (i21 + -1 | 0) >>> 0) + i7 | 0;
     } else {
      i19 = i9;
      i20 = i7;
     }
    }
    i13 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i11 >> 2] | 0) + 28 >> 2] & 31](i11, HEAP8[i12] | 0) | 0;
    i22 = HEAP32[i6 >> 2] | 0;
    HEAP32[i6 >> 2] = i22 + 1;
    HEAP8[i22] = i13;
    i12 = i12 + 1 | 0;
    if (!(i12 >>> 0 < i3 >>> 0)) {
     break;
    } else {
     i9 = i19 + 1 | 0;
     i7 = i20;
    }
   }
  }
  i20 = i4 + (i18 - i1) | 0;
  i18 = HEAP32[i6 >> 2] | 0;
  if ((i20 | 0) != (i18 | 0)) {
   i7 = i18 + -1 | 0;
   if (i7 >>> 0 > i20 >>> 0) {
    i18 = i20;
    i20 = i7;
    do {
     i7 = HEAP8[i18] | 0;
     HEAP8[i18] = HEAP8[i20] | 0;
     HEAP8[i20] = i7;
     i18 = i18 + 1 | 0;
     i20 = i20 + -1 | 0;
    } while (i18 >>> 0 < i20 >>> 0);
   }
  }
 }
 if ((i2 | 0) == (i3 | 0)) {
  i23 = HEAP32[i6 >> 2] | 0;
  HEAP32[i5 >> 2] = i23;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i10);
  STACKTOP = i8;
  return;
 } else {
  i23 = i4 + (i2 - i1) | 0;
  HEAP32[i5 >> 2] = i23;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i10);
  STACKTOP = i8;
  return;
 }
}
function __ZNKSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEce(i1, i2, i3, i4, i5, i6, d7) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 d7 = +d7;
 var i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 384 | 0;
 i8 = i2;
 i9 = i2 + 276 | 0;
 i10 = i2 + 52 | 0;
 i11 = i2 + 176 | 0;
 i12 = i2 + 60 | 0;
 i13 = i2 + 56 | 0;
 i14 = i2 + 376 | 0;
 i15 = i2 + 377 | 0;
 i16 = i2 + 64 | 0;
 i17 = i2 + 32 | 0;
 i18 = i2 + 20 | 0;
 i19 = i2 + 16 | 0;
 i20 = i2 + 76 | 0;
 i21 = i2 + 12 | 0;
 i22 = i2 + 44 | 0;
 i23 = i2 + 48 | 0;
 HEAP32[i10 >> 2] = i9;
 HEAPF64[tempDoublePtr >> 3] = d7;
 HEAP32[i8 >> 2] = HEAP32[tempDoublePtr >> 2];
 HEAP32[i8 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
 i24 = _snprintf(i9 | 0, 100, 5584, i8 | 0) | 0;
 if (i24 >>> 0 > 99) {
  if ((HEAP8[5728] | 0) == 0) {
   if ((___cxa_guard_acquire(5728) | 0) != 0) {
    HEAP32[1430] = _newlocale(2147483647, 5736, 0) | 0;
    ___cxa_guard_release(5728);
   }
  }
  i9 = HEAP32[1430] | 0;
  HEAPF64[tempDoublePtr >> 3] = d7;
  HEAP32[i8 >> 2] = HEAP32[tempDoublePtr >> 2];
  HEAP32[i8 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
  i25 = __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz(i10, i9, 5584, i8) | 0;
  i9 = HEAP32[i10 >> 2] | 0;
  if ((i9 | 0) == 0) {
   __ZSt17__throw_bad_allocv();
  }
  i26 = _malloc(i25) | 0;
  if ((i26 | 0) == 0) {
   __ZSt17__throw_bad_allocv();
  } else {
   i27 = i26;
   i28 = i9;
   i29 = i26;
   i30 = i25;
  }
 } else {
  i27 = 0;
  i28 = 0;
  i29 = i11;
  i30 = i24;
 }
 __ZNKSt3__18ios_base6getlocEv(i12, i5);
 i24 = HEAP32[i12 >> 2] | 0;
 if (!((HEAP32[1458] | 0) == -1)) {
  HEAP32[i8 >> 2] = 5832;
  HEAP32[i8 + 4 >> 2] = 118;
  HEAP32[i8 + 8 >> 2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(5832, i8, 119);
 }
 i11 = (HEAP32[5836 >> 2] | 0) + -1 | 0;
 i25 = HEAP32[i24 + 8 >> 2] | 0;
 if (!((HEAP32[i24 + 12 >> 2] | 0) - i25 >> 2 >>> 0 > i11 >>> 0)) {
  i31 = ___cxa_allocate_exception(4) | 0;
  __ZNSt8bad_castC2Ev(i31);
  ___cxa_throw(i31 | 0, 13792, 107);
 }
 i24 = HEAP32[i25 + (i11 << 2) >> 2] | 0;
 if ((i24 | 0) == 0) {
  i31 = ___cxa_allocate_exception(4) | 0;
  __ZNSt8bad_castC2Ev(i31);
  ___cxa_throw(i31 | 0, 13792, 107);
 }
 i31 = HEAP32[i10 >> 2] | 0;
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[i24 >> 2] | 0) + 32 >> 2] & 7](i24, i31, i31 + i30 | 0, i29) | 0;
 if ((i30 | 0) == 0) {
  i32 = 0;
 } else {
  i32 = (HEAP8[HEAP32[i10 >> 2] | 0] | 0) == 45;
 }
 HEAP32[i13 >> 2] = 0;
 HEAP32[i16 + 0 >> 2] = 0;
 HEAP32[i16 + 4 >> 2] = 0;
 HEAP32[i16 + 8 >> 2] = 0;
 HEAP32[i17 + 0 >> 2] = 0;
 HEAP32[i17 + 4 >> 2] = 0;
 HEAP32[i17 + 8 >> 2] = 0;
 HEAP32[i18 + 0 >> 2] = 0;
 HEAP32[i18 + 4 >> 2] = 0;
 HEAP32[i18 + 8 >> 2] = 0;
 __ZNSt3__111__money_putIcE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_Ri(i4, i32, i12, i13, i14, i15, i16, i17, i18, i19);
 i4 = HEAP32[i19 >> 2] | 0;
 if ((i30 | 0) > (i4 | 0)) {
  i19 = HEAP8[i18] | 0;
  if ((i19 & 1) == 0) {
   i33 = (i19 & 255) >>> 1;
  } else {
   i33 = HEAP32[i18 + 4 >> 2] | 0;
  }
  i19 = HEAP8[i17] | 0;
  if ((i19 & 1) == 0) {
   i34 = (i19 & 255) >>> 1;
  } else {
   i34 = HEAP32[i17 + 4 >> 2] | 0;
  }
  i35 = i33 + (i30 - i4 << 1 | 1) + i34 | 0;
 } else {
  i34 = HEAP8[i18] | 0;
  if ((i34 & 1) == 0) {
   i36 = (i34 & 255) >>> 1;
  } else {
   i36 = HEAP32[i18 + 4 >> 2] | 0;
  }
  i34 = HEAP8[i17] | 0;
  if ((i34 & 1) == 0) {
   i37 = (i34 & 255) >>> 1;
  } else {
   i37 = HEAP32[i17 + 4 >> 2] | 0;
  }
  i35 = i36 + 2 + i37 | 0;
 }
 i37 = i35 + i4 | 0;
 if (i37 >>> 0 > 100) {
  i35 = _malloc(i37) | 0;
  if ((i35 | 0) == 0) {
   __ZSt17__throw_bad_allocv();
  } else {
   i38 = i35;
   i39 = i35;
  }
 } else {
  i38 = 0;
  i39 = i20;
 }
 __ZNSt3__111__money_putIcE8__formatEPcRS2_S3_jPKcS5_RKNS_5ctypeIcEEbRKNS_10money_base7patternEccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESL_SL_i(i39, i21, i22, HEAP32[i5 + 4 >> 2] | 0, i29, i29 + i30 | 0, i24, i32, i13, HEAP8[i14] | 0, HEAP8[i15] | 0, i16, i17, i18, i4);
 HEAP32[i23 >> 2] = HEAP32[i3 >> 2];
 i3 = HEAP32[i21 >> 2] | 0;
 i21 = HEAP32[i22 >> 2] | 0;
 HEAP32[i8 + 0 >> 2] = HEAP32[i23 + 0 >> 2];
 __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(i1, i8, i39, i3, i21, i5, i6);
 if ((i38 | 0) != 0) {
  _free(i38);
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i18);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i17);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i16);
 __ZNSt3__114__shared_count16__release_sharedEv(HEAP32[i12 >> 2] | 0) | 0;
 if ((i27 | 0) != 0) {
  _free(i27);
 }
 if ((i28 | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 _free(i28);
 STACKTOP = i2;
 return;
}
function __ZNKSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwRKNS_12basic_stringIwS3_NS_9allocatorIwEEEE(i1, i2, i3, i4, i5, i6, i7) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 var i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 480 | 0;
 i8 = i2;
 i9 = i2 + 464 | 0;
 i10 = i2 + 460 | 0;
 i11 = i2 + 456 | 0;
 i12 = i2 + 452 | 0;
 i13 = i2 + 440 | 0;
 i14 = i2 + 468 | 0;
 i15 = i2 + 420 | 0;
 i16 = i2 + 416 | 0;
 i17 = i2 + 16 | 0;
 i18 = i2 + 12 | 0;
 i19 = i2 + 432 | 0;
 i20 = i2 + 436 | 0;
 __ZNKSt3__18ios_base6getlocEv(i9, i5);
 i21 = HEAP32[i9 >> 2] | 0;
 if (!((HEAP32[1456] | 0) == -1)) {
  HEAP32[i8 >> 2] = 5824;
  HEAP32[i8 + 4 >> 2] = 118;
  HEAP32[i8 + 8 >> 2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(5824, i8, 119);
 }
 i22 = (HEAP32[5828 >> 2] | 0) + -1 | 0;
 i23 = HEAP32[i21 + 8 >> 2] | 0;
 if (!((HEAP32[i21 + 12 >> 2] | 0) - i23 >> 2 >>> 0 > i22 >>> 0)) {
  i24 = ___cxa_allocate_exception(4) | 0;
  __ZNSt8bad_castC2Ev(i24);
  ___cxa_throw(i24 | 0, 13792, 107);
 }
 i21 = HEAP32[i23 + (i22 << 2) >> 2] | 0;
 if ((i21 | 0) == 0) {
  i24 = ___cxa_allocate_exception(4) | 0;
  __ZNSt8bad_castC2Ev(i24);
  ___cxa_throw(i24 | 0, 13792, 107);
 }
 i24 = HEAP8[i7] | 0;
 i22 = (i24 & 1) == 0;
 if (i22) {
  i25 = (i24 & 255) >>> 1;
 } else {
  i25 = HEAP32[i7 + 4 >> 2] | 0;
 }
 if ((i25 | 0) == 0) {
  i26 = 0;
 } else {
  if (i22) {
   i27 = i7 + 4 | 0;
  } else {
   i27 = HEAP32[i7 + 8 >> 2] | 0;
  }
  i22 = HEAP32[i27 >> 2] | 0;
  i26 = (i22 | 0) == (FUNCTION_TABLE_iii[HEAP32[(HEAP32[i21 >> 2] | 0) + 44 >> 2] & 31](i21, 45) | 0);
 }
 HEAP32[i10 >> 2] = 0;
 HEAP32[i13 + 0 >> 2] = 0;
 HEAP32[i13 + 4 >> 2] = 0;
 HEAP32[i13 + 8 >> 2] = 0;
 HEAP32[i14 + 0 >> 2] = 0;
 HEAP32[i14 + 4 >> 2] = 0;
 HEAP32[i14 + 8 >> 2] = 0;
 HEAP32[i15 + 0 >> 2] = 0;
 HEAP32[i15 + 4 >> 2] = 0;
 HEAP32[i15 + 8 >> 2] = 0;
 __ZNSt3__111__money_putIwE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_Ri(i4, i26, i9, i10, i11, i12, i13, i14, i15, i16);
 i4 = HEAP8[i7] | 0;
 i22 = (i4 & 1) == 0;
 if (i22) {
  i28 = (i4 & 255) >>> 1;
 } else {
  i28 = HEAP32[i7 + 4 >> 2] | 0;
 }
 i27 = HEAP32[i16 >> 2] | 0;
 if ((i28 | 0) > (i27 | 0)) {
  if (i22) {
   i29 = (i4 & 255) >>> 1;
  } else {
   i29 = HEAP32[i7 + 4 >> 2] | 0;
  }
  i22 = HEAP8[i15] | 0;
  if ((i22 & 1) == 0) {
   i30 = (i22 & 255) >>> 1;
  } else {
   i30 = HEAP32[i15 + 4 >> 2] | 0;
  }
  i22 = HEAP8[i14] | 0;
  if ((i22 & 1) == 0) {
   i31 = (i22 & 255) >>> 1;
  } else {
   i31 = HEAP32[i14 + 4 >> 2] | 0;
  }
  i32 = i30 + (i29 - i27 << 1 | 1) + i31 | 0;
 } else {
  i31 = HEAP8[i15] | 0;
  if ((i31 & 1) == 0) {
   i33 = (i31 & 255) >>> 1;
  } else {
   i33 = HEAP32[i15 + 4 >> 2] | 0;
  }
  i31 = HEAP8[i14] | 0;
  if ((i31 & 1) == 0) {
   i34 = (i31 & 255) >>> 1;
  } else {
   i34 = HEAP32[i14 + 4 >> 2] | 0;
  }
  i32 = i33 + 2 + i34 | 0;
 }
 i34 = i32 + i27 | 0;
 if (i34 >>> 0 > 100) {
  i32 = _malloc(i34 << 2) | 0;
  if ((i32 | 0) == 0) {
   __ZSt17__throw_bad_allocv();
  } else {
   i35 = i32;
   i36 = i32;
  }
 } else {
  i35 = 0;
  i36 = i17;
 }
 if ((i4 & 1) == 0) {
  i37 = i7 + 4 | 0;
  i38 = (i4 & 255) >>> 1;
 } else {
  i37 = HEAP32[i7 + 8 >> 2] | 0;
  i38 = HEAP32[i7 + 4 >> 2] | 0;
 }
 __ZNSt3__111__money_putIwE8__formatEPwRS2_S3_jPKwS5_RKNS_5ctypeIwEEbRKNS_10money_base7patternEwwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNSE_IwNSF_IwEENSH_IwEEEESQ_i(i36, i18, i19, HEAP32[i5 + 4 >> 2] | 0, i37, i37 + (i38 << 2) | 0, i21, i26, i10, HEAP32[i11 >> 2] | 0, HEAP32[i12 >> 2] | 0, i13, i14, i15, i27);
 HEAP32[i20 >> 2] = HEAP32[i3 >> 2];
 i3 = HEAP32[i18 >> 2] | 0;
 i18 = HEAP32[i19 >> 2] | 0;
 HEAP32[i8 + 0 >> 2] = HEAP32[i20 + 0 >> 2];
 __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(i1, i8, i36, i3, i18, i5, i6);
 if ((i35 | 0) == 0) {
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(i15);
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(i14);
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i13);
  i39 = HEAP32[i9 >> 2] | 0;
  __ZNSt3__114__shared_count16__release_sharedEv(i39) | 0;
  STACKTOP = i2;
  return;
 }
 _free(i35);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(i15);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(i14);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i13);
 i39 = HEAP32[i9 >> 2] | 0;
 __ZNSt3__114__shared_count16__release_sharedEv(i39) | 0;
 STACKTOP = i2;
 return;
}
function __ZNKSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEcRKNS_12basic_stringIcS3_NS_9allocatorIcEEEE(i1, i2, i3, i4, i5, i6, i7) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 var i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 176 | 0;
 i8 = i2;
 i9 = i2 + 52 | 0;
 i10 = i2 + 56 | 0;
 i11 = i2 + 172 | 0;
 i12 = i2 + 173 | 0;
 i13 = i2 + 40 | 0;
 i14 = i2 + 60 | 0;
 i15 = i2 + 20 | 0;
 i16 = i2 + 16 | 0;
 i17 = i2 + 72 | 0;
 i18 = i2 + 12 | 0;
 i19 = i2 + 32 | 0;
 i20 = i2 + 36 | 0;
 __ZNKSt3__18ios_base6getlocEv(i9, i5);
 i21 = HEAP32[i9 >> 2] | 0;
 if (!((HEAP32[1458] | 0) == -1)) {
  HEAP32[i8 >> 2] = 5832;
  HEAP32[i8 + 4 >> 2] = 118;
  HEAP32[i8 + 8 >> 2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(5832, i8, 119);
 }
 i22 = (HEAP32[5836 >> 2] | 0) + -1 | 0;
 i23 = HEAP32[i21 + 8 >> 2] | 0;
 if (!((HEAP32[i21 + 12 >> 2] | 0) - i23 >> 2 >>> 0 > i22 >>> 0)) {
  i24 = ___cxa_allocate_exception(4) | 0;
  __ZNSt8bad_castC2Ev(i24);
  ___cxa_throw(i24 | 0, 13792, 107);
 }
 i21 = HEAP32[i23 + (i22 << 2) >> 2] | 0;
 if ((i21 | 0) == 0) {
  i24 = ___cxa_allocate_exception(4) | 0;
  __ZNSt8bad_castC2Ev(i24);
  ___cxa_throw(i24 | 0, 13792, 107);
 }
 i24 = HEAP8[i7] | 0;
 i22 = (i24 & 1) == 0;
 if (i22) {
  i25 = (i24 & 255) >>> 1;
 } else {
  i25 = HEAP32[i7 + 4 >> 2] | 0;
 }
 if ((i25 | 0) == 0) {
  i26 = 0;
 } else {
  if (i22) {
   i27 = i7 + 1 | 0;
  } else {
   i27 = HEAP32[i7 + 8 >> 2] | 0;
  }
  i22 = HEAP8[i27] | 0;
  i26 = i22 << 24 >> 24 == (FUNCTION_TABLE_iii[HEAP32[(HEAP32[i21 >> 2] | 0) + 28 >> 2] & 31](i21, 45) | 0) << 24 >> 24;
 }
 HEAP32[i10 >> 2] = 0;
 HEAP32[i13 + 0 >> 2] = 0;
 HEAP32[i13 + 4 >> 2] = 0;
 HEAP32[i13 + 8 >> 2] = 0;
 HEAP32[i14 + 0 >> 2] = 0;
 HEAP32[i14 + 4 >> 2] = 0;
 HEAP32[i14 + 8 >> 2] = 0;
 HEAP32[i15 + 0 >> 2] = 0;
 HEAP32[i15 + 4 >> 2] = 0;
 HEAP32[i15 + 8 >> 2] = 0;
 __ZNSt3__111__money_putIcE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_Ri(i4, i26, i9, i10, i11, i12, i13, i14, i15, i16);
 i4 = HEAP8[i7] | 0;
 i22 = (i4 & 1) == 0;
 if (i22) {
  i28 = (i4 & 255) >>> 1;
 } else {
  i28 = HEAP32[i7 + 4 >> 2] | 0;
 }
 i27 = HEAP32[i16 >> 2] | 0;
 if ((i28 | 0) > (i27 | 0)) {
  if (i22) {
   i29 = (i4 & 255) >>> 1;
  } else {
   i29 = HEAP32[i7 + 4 >> 2] | 0;
  }
  i22 = HEAP8[i15] | 0;
  if ((i22 & 1) == 0) {
   i30 = (i22 & 255) >>> 1;
  } else {
   i30 = HEAP32[i15 + 4 >> 2] | 0;
  }
  i22 = HEAP8[i14] | 0;
  if ((i22 & 1) == 0) {
   i31 = (i22 & 255) >>> 1;
  } else {
   i31 = HEAP32[i14 + 4 >> 2] | 0;
  }
  i32 = i30 + (i29 - i27 << 1 | 1) + i31 | 0;
 } else {
  i31 = HEAP8[i15] | 0;
  if ((i31 & 1) == 0) {
   i33 = (i31 & 255) >>> 1;
  } else {
   i33 = HEAP32[i15 + 4 >> 2] | 0;
  }
  i31 = HEAP8[i14] | 0;
  if ((i31 & 1) == 0) {
   i34 = (i31 & 255) >>> 1;
  } else {
   i34 = HEAP32[i14 + 4 >> 2] | 0;
  }
  i32 = i33 + 2 + i34 | 0;
 }
 i34 = i32 + i27 | 0;
 if (i34 >>> 0 > 100) {
  i32 = _malloc(i34) | 0;
  if ((i32 | 0) == 0) {
   __ZSt17__throw_bad_allocv();
  } else {
   i35 = i32;
   i36 = i32;
  }
 } else {
  i35 = 0;
  i36 = i17;
 }
 if ((i4 & 1) == 0) {
  i37 = i7 + 1 | 0;
  i38 = (i4 & 255) >>> 1;
 } else {
  i37 = HEAP32[i7 + 8 >> 2] | 0;
  i38 = HEAP32[i7 + 4 >> 2] | 0;
 }
 __ZNSt3__111__money_putIcE8__formatEPcRS2_S3_jPKcS5_RKNS_5ctypeIcEEbRKNS_10money_base7patternEccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESL_SL_i(i36, i18, i19, HEAP32[i5 + 4 >> 2] | 0, i37, i37 + i38 | 0, i21, i26, i10, HEAP8[i11] | 0, HEAP8[i12] | 0, i13, i14, i15, i27);
 HEAP32[i20 >> 2] = HEAP32[i3 >> 2];
 i3 = HEAP32[i18 >> 2] | 0;
 i18 = HEAP32[i19 >> 2] | 0;
 HEAP32[i8 + 0 >> 2] = HEAP32[i20 + 0 >> 2];
 __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(i1, i8, i36, i3, i18, i5, i6);
 if ((i35 | 0) == 0) {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i15);
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i14);
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i13);
  i39 = HEAP32[i9 >> 2] | 0;
  __ZNSt3__114__shared_count16__release_sharedEv(i39) | 0;
  STACKTOP = i2;
  return;
 }
 _free(i35);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i15);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i14);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i13);
 i39 = HEAP32[i9 >> 2] | 0;
 __ZNSt3__114__shared_count16__release_sharedEv(i39) | 0;
 STACKTOP = i2;
 return;
}
function ___udivmoddi4(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0;
 i6 = i1;
 i7 = i2;
 i8 = i7;
 i9 = i3;
 i10 = i4;
 i11 = i10;
 if ((i8 | 0) == 0) {
  i12 = (i5 | 0) != 0;
  if ((i11 | 0) == 0) {
   if (i12) {
    HEAP32[i5 >> 2] = (i6 >>> 0) % (i9 >>> 0);
    HEAP32[i5 + 4 >> 2] = 0;
   }
   i13 = 0;
   i14 = (i6 >>> 0) / (i9 >>> 0) >>> 0;
   return (tempRet0 = i13, i14) | 0;
  } else {
   if (!i12) {
    i13 = 0;
    i14 = 0;
    return (tempRet0 = i13, i14) | 0;
   }
   HEAP32[i5 >> 2] = i1 | 0;
   HEAP32[i5 + 4 >> 2] = i2 & 0;
   i13 = 0;
   i14 = 0;
   return (tempRet0 = i13, i14) | 0;
  }
 }
 i12 = (i11 | 0) == 0;
 do {
  if ((i9 | 0) == 0) {
   if (i12) {
    if ((i5 | 0) != 0) {
     HEAP32[i5 >> 2] = (i8 >>> 0) % (i9 >>> 0);
     HEAP32[i5 + 4 >> 2] = 0;
    }
    i13 = 0;
    i14 = (i8 >>> 0) / (i9 >>> 0) >>> 0;
    return (tempRet0 = i13, i14) | 0;
   }
   if ((i6 | 0) == 0) {
    if ((i5 | 0) != 0) {
     HEAP32[i5 >> 2] = 0;
     HEAP32[i5 + 4 >> 2] = (i8 >>> 0) % (i11 >>> 0);
    }
    i13 = 0;
    i14 = (i8 >>> 0) / (i11 >>> 0) >>> 0;
    return (tempRet0 = i13, i14) | 0;
   }
   i15 = i11 - 1 | 0;
   if ((i15 & i11 | 0) == 0) {
    if ((i5 | 0) != 0) {
     HEAP32[i5 >> 2] = i1 | 0;
     HEAP32[i5 + 4 >> 2] = i15 & i8 | i2 & 0;
    }
    i13 = 0;
    i14 = i8 >>> ((_llvm_cttz_i32(i11 | 0) | 0) >>> 0);
    return (tempRet0 = i13, i14) | 0;
   }
   i15 = (_llvm_ctlz_i32(i11 | 0) | 0) - (_llvm_ctlz_i32(i8 | 0) | 0) | 0;
   if (i15 >>> 0 <= 30) {
    i16 = i15 + 1 | 0;
    i17 = 31 - i15 | 0;
    i18 = i16;
    i19 = i8 << i17 | i6 >>> (i16 >>> 0);
    i20 = i8 >>> (i16 >>> 0);
    i21 = 0;
    i22 = i6 << i17;
    break;
   }
   if ((i5 | 0) == 0) {
    i13 = 0;
    i14 = 0;
    return (tempRet0 = i13, i14) | 0;
   }
   HEAP32[i5 >> 2] = i1 | 0;
   HEAP32[i5 + 4 >> 2] = i7 | i2 & 0;
   i13 = 0;
   i14 = 0;
   return (tempRet0 = i13, i14) | 0;
  } else {
   if (!i12) {
    i17 = (_llvm_ctlz_i32(i11 | 0) | 0) - (_llvm_ctlz_i32(i8 | 0) | 0) | 0;
    if (i17 >>> 0 <= 31) {
     i16 = i17 + 1 | 0;
     i15 = 31 - i17 | 0;
     i23 = i17 - 31 >> 31;
     i18 = i16;
     i19 = i6 >>> (i16 >>> 0) & i23 | i8 << i15;
     i20 = i8 >>> (i16 >>> 0) & i23;
     i21 = 0;
     i22 = i6 << i15;
     break;
    }
    if ((i5 | 0) == 0) {
     i13 = 0;
     i14 = 0;
     return (tempRet0 = i13, i14) | 0;
    }
    HEAP32[i5 >> 2] = i1 | 0;
    HEAP32[i5 + 4 >> 2] = i7 | i2 & 0;
    i13 = 0;
    i14 = 0;
    return (tempRet0 = i13, i14) | 0;
   }
   i15 = i9 - 1 | 0;
   if ((i15 & i9 | 0) != 0) {
    i23 = (_llvm_ctlz_i32(i9 | 0) | 0) + 33 - (_llvm_ctlz_i32(i8 | 0) | 0) | 0;
    i16 = 64 - i23 | 0;
    i17 = 32 - i23 | 0;
    i24 = i17 >> 31;
    i25 = i23 - 32 | 0;
    i26 = i25 >> 31;
    i18 = i23;
    i19 = i17 - 1 >> 31 & i8 >>> (i25 >>> 0) | (i8 << i17 | i6 >>> (i23 >>> 0)) & i26;
    i20 = i26 & i8 >>> (i23 >>> 0);
    i21 = i6 << i16 & i24;
    i22 = (i8 << i16 | i6 >>> (i25 >>> 0)) & i24 | i6 << i17 & i23 - 33 >> 31;
    break;
   }
   if ((i5 | 0) != 0) {
    HEAP32[i5 >> 2] = i15 & i6;
    HEAP32[i5 + 4 >> 2] = 0;
   }
   if ((i9 | 0) == 1) {
    i13 = i7 | i2 & 0;
    i14 = i1 | 0 | 0;
    return (tempRet0 = i13, i14) | 0;
   } else {
    i15 = _llvm_cttz_i32(i9 | 0) | 0;
    i13 = i8 >>> (i15 >>> 0) | 0;
    i14 = i8 << 32 - i15 | i6 >>> (i15 >>> 0) | 0;
    return (tempRet0 = i13, i14) | 0;
   }
  }
 } while (0);
 if ((i18 | 0) == 0) {
  i27 = i22;
  i28 = i21;
  i29 = i20;
  i30 = i19;
  i31 = 0;
  i32 = 0;
 } else {
  i6 = i3 | 0 | 0;
  i3 = i10 | i4 & 0;
  i4 = _i64Add(i6, i3, -1, -1) | 0;
  i10 = tempRet0;
  i8 = i22;
  i22 = i21;
  i21 = i20;
  i20 = i19;
  i19 = i18;
  i18 = 0;
  while (1) {
   i33 = i22 >>> 31 | i8 << 1;
   i34 = i18 | i22 << 1;
   i9 = i20 << 1 | i8 >>> 31 | 0;
   i1 = i20 >>> 31 | i21 << 1 | 0;
   _i64Subtract(i4, i10, i9, i1) | 0;
   i2 = tempRet0;
   i7 = i2 >> 31 | ((i2 | 0) < 0 ? -1 : 0) << 1;
   i35 = i7 & 1;
   i36 = _i64Subtract(i9, i1, i7 & i6, (((i2 | 0) < 0 ? -1 : 0) >> 31 | ((i2 | 0) < 0 ? -1 : 0) << 1) & i3) | 0;
   i37 = tempRet0;
   i2 = i19 - 1 | 0;
   if ((i2 | 0) == 0) {
    break;
   } else {
    i8 = i33;
    i22 = i34;
    i21 = i37;
    i20 = i36;
    i19 = i2;
    i18 = i35;
   }
  }
  i27 = i33;
  i28 = i34;
  i29 = i37;
  i30 = i36;
  i31 = 0;
  i32 = i35;
 }
 i35 = i28;
 i28 = 0;
 if ((i5 | 0) != 0) {
  HEAP32[i5 >> 2] = i30;
  HEAP32[i5 + 4 >> 2] = i29;
 }
 i13 = (i35 | 0) >>> 31 | (i27 | i28) << 1 | (i28 << 1 | i35 >>> 31) & 0 | i31;
 i14 = (i35 << 1 | 0 >>> 31) & -2 | i32;
 return (tempRet0 = i13, i14) | 0;
}
function __ZNSt3__1L13utf8_to_utf16EPKhS1_RS1_PtS3_RS3_mNS_12codecvt_modeE(i1, i2, i3, i4, i5, i6, i7, i8) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 var i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0;
 i9 = STACKTOP;
 HEAP32[i3 >> 2] = i1;
 HEAP32[i6 >> 2] = i4;
 i4 = HEAP32[i3 >> 2] | 0;
 if ((i8 & 4 | 0) == 0) {
  i10 = i4;
 } else {
  if ((i2 - i4 | 0) > 2) {
   if ((HEAP8[i4] | 0) == -17) {
    if ((HEAP8[i4 + 1 | 0] | 0) == -69) {
     if ((HEAP8[i4 + 2 | 0] | 0) == -65) {
      i8 = i4 + 3 | 0;
      HEAP32[i3 >> 2] = i8;
      i10 = i8;
     } else {
      i10 = i4;
     }
    } else {
     i10 = i4;
    }
   } else {
    i10 = i4;
   }
  } else {
   i10 = i4;
  }
 }
 L8 : do {
  if (i10 >>> 0 < i2 >>> 0) {
   i4 = i2;
   i8 = i5;
   i1 = HEAP32[i6 >> 2] | 0;
   i11 = i10;
   L10 : while (1) {
    if (!(i1 >>> 0 < i5 >>> 0)) {
     i12 = i11;
     break L8;
    }
    i13 = HEAP8[i11] | 0;
    i14 = i13 & 255;
    if (i14 >>> 0 > i7 >>> 0) {
     i15 = 2;
     i16 = 41;
     break;
    }
    do {
     if (i13 << 24 >> 24 > -1) {
      HEAP16[i1 >> 1] = i13 & 255;
      HEAP32[i3 >> 2] = i11 + 1;
     } else {
      if ((i13 & 255) < 194) {
       i15 = 2;
       i16 = 41;
       break L10;
      }
      if ((i13 & 255) < 224) {
       if ((i4 - i11 | 0) < 2) {
        i15 = 1;
        i16 = 41;
        break L10;
       }
       i17 = HEAPU8[i11 + 1 | 0] | 0;
       if ((i17 & 192 | 0) != 128) {
        i15 = 2;
        i16 = 41;
        break L10;
       }
       i18 = i17 & 63 | i14 << 6 & 1984;
       if (i18 >>> 0 > i7 >>> 0) {
        i15 = 2;
        i16 = 41;
        break L10;
       }
       HEAP16[i1 >> 1] = i18;
       HEAP32[i3 >> 2] = i11 + 2;
       break;
      }
      if ((i13 & 255) < 240) {
       if ((i4 - i11 | 0) < 3) {
        i15 = 1;
        i16 = 41;
        break L10;
       }
       i18 = HEAP8[i11 + 1 | 0] | 0;
       i17 = HEAP8[i11 + 2 | 0] | 0;
       if ((i14 | 0) == 237) {
        if (!((i18 & -32) << 24 >> 24 == -128)) {
         i15 = 2;
         i16 = 41;
         break L10;
        }
       } else if ((i14 | 0) == 224) {
        if (!((i18 & -32) << 24 >> 24 == -96)) {
         i15 = 2;
         i16 = 41;
         break L10;
        }
       } else {
        if (!((i18 & -64) << 24 >> 24 == -128)) {
         i15 = 2;
         i16 = 41;
         break L10;
        }
       }
       i19 = i17 & 255;
       if ((i19 & 192 | 0) != 128) {
        i15 = 2;
        i16 = 41;
        break L10;
       }
       i17 = (i18 & 255) << 6 & 4032 | i14 << 12 | i19 & 63;
       if ((i17 & 65535) >>> 0 > i7 >>> 0) {
        i15 = 2;
        i16 = 41;
        break L10;
       }
       HEAP16[i1 >> 1] = i17;
       HEAP32[i3 >> 2] = i11 + 3;
       break;
      }
      if (!((i13 & 255) < 245)) {
       i15 = 2;
       i16 = 41;
       break L10;
      }
      if ((i4 - i11 | 0) < 4) {
       i15 = 1;
       i16 = 41;
       break L10;
      }
      i17 = HEAP8[i11 + 1 | 0] | 0;
      i19 = HEAP8[i11 + 2 | 0] | 0;
      i18 = HEAP8[i11 + 3 | 0] | 0;
      if ((i14 | 0) == 244) {
       if (!((i17 & -16) << 24 >> 24 == -128)) {
        i15 = 2;
        i16 = 41;
        break L10;
       }
      } else if ((i14 | 0) == 240) {
       if (!((i17 + 112 << 24 >> 24 & 255) < 48)) {
        i15 = 2;
        i16 = 41;
        break L10;
       }
      } else {
       if (!((i17 & -64) << 24 >> 24 == -128)) {
        i15 = 2;
        i16 = 41;
        break L10;
       }
      }
      i20 = i19 & 255;
      if ((i20 & 192 | 0) != 128) {
       i15 = 2;
       i16 = 41;
       break L10;
      }
      i19 = i18 & 255;
      if ((i19 & 192 | 0) != 128) {
       i15 = 2;
       i16 = 41;
       break L10;
      }
      if ((i8 - i1 | 0) < 4) {
       i15 = 1;
       i16 = 41;
       break L10;
      }
      i18 = i14 & 7;
      i21 = i17 & 255;
      i17 = i20 << 6;
      i22 = i19 & 63;
      if ((i21 << 12 & 258048 | i18 << 18 | i17 & 4032 | i22) >>> 0 > i7 >>> 0) {
       i15 = 2;
       i16 = 41;
       break L10;
      }
      HEAP16[i1 >> 1] = i21 << 2 & 60 | i20 >>> 4 & 3 | ((i21 >>> 4 & 3 | i18 << 2) << 6) + 16320 | 55296;
      i18 = i1 + 2 | 0;
      HEAP32[i6 >> 2] = i18;
      HEAP16[i18 >> 1] = i22 | i17 & 960 | 56320;
      HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + 4;
     }
    } while (0);
    i14 = (HEAP32[i6 >> 2] | 0) + 2 | 0;
    HEAP32[i6 >> 2] = i14;
    i13 = HEAP32[i3 >> 2] | 0;
    if (i13 >>> 0 < i2 >>> 0) {
     i1 = i14;
     i11 = i13;
    } else {
     i12 = i13;
     break L8;
    }
   }
   if ((i16 | 0) == 41) {
    STACKTOP = i9;
    return i15 | 0;
   }
  } else {
   i12 = i10;
  }
 } while (0);
 i15 = i12 >>> 0 < i2 >>> 0 | 0;
 STACKTOP = i9;
 return i15 | 0;
}
function __ZNKSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe(i1, i2, i3, i4, i5, i6, i7, i8) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 var i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 576 | 0;
 i9 = i2;
 i10 = i2 + 72 | 0;
 i11 = i2 + 64 | 0;
 i12 = i2 + 60 | 0;
 i13 = i2 + 56 | 0;
 i14 = i2 + 572 | 0;
 i15 = i2 + 12 | 0;
 i16 = i2 + 16 | 0;
 i17 = i2 + 472 | 0;
 HEAP32[i11 >> 2] = i10;
 i18 = i11 + 4 | 0;
 HEAP32[i18 >> 2] = 120;
 i19 = i10 + 400 | 0;
 __ZNKSt3__18ios_base6getlocEv(i13, i6);
 i10 = HEAP32[i13 >> 2] | 0;
 if (!((HEAP32[1456] | 0) == -1)) {
  HEAP32[i9 >> 2] = 5824;
  HEAP32[i9 + 4 >> 2] = 118;
  HEAP32[i9 + 8 >> 2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(5824, i9, 119);
 }
 i20 = (HEAP32[5828 >> 2] | 0) + -1 | 0;
 i21 = HEAP32[i10 + 8 >> 2] | 0;
 if (!((HEAP32[i10 + 12 >> 2] | 0) - i21 >> 2 >>> 0 > i20 >>> 0)) {
  i22 = ___cxa_allocate_exception(4) | 0;
  __ZNSt8bad_castC2Ev(i22);
  ___cxa_throw(i22 | 0, 13792, 107);
 }
 i10 = HEAP32[i21 + (i20 << 2) >> 2] | 0;
 if ((i10 | 0) == 0) {
  i22 = ___cxa_allocate_exception(4) | 0;
  __ZNSt8bad_castC2Ev(i22);
  ___cxa_throw(i22 | 0, 13792, 107);
 }
 HEAP8[i14] = 0;
 HEAP32[i15 >> 2] = HEAP32[i4 >> 2];
 i22 = HEAP32[i6 + 4 >> 2] | 0;
 HEAP32[i9 + 0 >> 2] = HEAP32[i15 + 0 >> 2];
 if (__ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIwEERNS_10unique_ptrIwPFvPvEEERPwSM_(i3, i9, i5, i13, i22, i7, i14, i10, i11, i12, i19) | 0) {
  FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[i10 >> 2] | 0) + 48 >> 2] & 7](i10, 5528, 5538 | 0, i16) | 0;
  i10 = HEAP32[i12 >> 2] | 0;
  i19 = HEAP32[i11 >> 2] | 0;
  i22 = i10 - i19 | 0;
  if ((i22 | 0) > 392) {
   i5 = _malloc((i22 >> 2) + 2 | 0) | 0;
   if ((i5 | 0) == 0) {
    __ZSt17__throw_bad_allocv();
   } else {
    i23 = i5;
    i24 = i5;
   }
  } else {
   i23 = 0;
   i24 = i17;
  }
  if ((HEAP8[i14] | 0) == 0) {
   i25 = i24;
  } else {
   HEAP8[i24] = 45;
   i25 = i24 + 1 | 0;
  }
  if (i19 >>> 0 < i10 >>> 0) {
   i10 = i16 + 40 | 0;
   i24 = i16;
   i14 = i25;
   i5 = i19;
   while (1) {
    i19 = HEAP32[i5 >> 2] | 0;
    i22 = i16;
    while (1) {
     i15 = i22 + 4 | 0;
     if ((HEAP32[i22 >> 2] | 0) == (i19 | 0)) {
      i26 = i22;
      break;
     }
     if ((i15 | 0) == (i10 | 0)) {
      i26 = i10;
      break;
     } else {
      i22 = i15;
     }
    }
    HEAP8[i14] = HEAP8[5528 + (i26 - i24 >> 2) | 0] | 0;
    i22 = i5 + 4 | 0;
    i19 = i14 + 1 | 0;
    if (i22 >>> 0 < (HEAP32[i12 >> 2] | 0) >>> 0) {
     i14 = i19;
     i5 = i22;
    } else {
     i27 = i19;
     break;
    }
   }
  } else {
   i27 = i25;
  }
  HEAP8[i27] = 0;
  HEAP32[i9 >> 2] = i8;
  if ((_sscanf(i17 | 0, 5464, i9 | 0) | 0) != 1) {
   i9 = ___cxa_allocate_exception(8) | 0;
   __ZNSt13runtime_errorC2EPKc(i9, 5472);
   ___cxa_throw(i9 | 0, 2840, 21);
  }
  if ((i23 | 0) != 0) {
   _free(i23);
  }
 }
 i23 = HEAP32[i3 >> 2] | 0;
 do {
  if ((i23 | 0) == 0) {
   i28 = 1;
  } else {
   i9 = HEAP32[i23 + 12 >> 2] | 0;
   if ((i9 | 0) == (HEAP32[i23 + 16 >> 2] | 0)) {
    i29 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i23 >> 2] | 0) + 36 >> 2] & 127](i23) | 0;
   } else {
    i29 = HEAP32[i9 >> 2] | 0;
   }
   if ((i29 | 0) == -1) {
    HEAP32[i3 >> 2] = 0;
    i28 = 1;
    break;
   } else {
    i28 = (HEAP32[i3 >> 2] | 0) == 0;
    break;
   }
  }
 } while (0);
 i29 = HEAP32[i4 >> 2] | 0;
 do {
  if ((i29 | 0) == 0) {
   i30 = 35;
  } else {
   i23 = HEAP32[i29 + 12 >> 2] | 0;
   if ((i23 | 0) == (HEAP32[i29 + 16 >> 2] | 0)) {
    i31 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i29 >> 2] | 0) + 36 >> 2] & 127](i29) | 0;
   } else {
    i31 = HEAP32[i23 >> 2] | 0;
   }
   if ((i31 | 0) == -1) {
    HEAP32[i4 >> 2] = 0;
    i30 = 35;
    break;
   } else {
    if (i28) {
     break;
    } else {
     i30 = 37;
     break;
    }
   }
  }
 } while (0);
 if ((i30 | 0) == 35) {
  if (i28) {
   i30 = 37;
  }
 }
 if ((i30 | 0) == 37) {
  HEAP32[i7 >> 2] = HEAP32[i7 >> 2] | 2;
 }
 HEAP32[i1 >> 2] = HEAP32[i3 >> 2];
 __ZNSt3__114__shared_count16__release_sharedEv(HEAP32[i13 >> 2] | 0) | 0;
 i13 = HEAP32[i11 >> 2] | 0;
 HEAP32[i11 >> 2] = 0;
 if ((i13 | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 FUNCTION_TABLE_vi[HEAP32[i18 >> 2] & 255](i13);
 STACKTOP = i2;
 return;
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE6do_outERS1_PKwS5_RS5_PcS7_RS7_(i1, i2, i3, i4, i5, i6, i7, i8) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 var i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0;
 i9 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i10 = i9;
 i11 = i9 + 8 | 0;
 i12 = (i3 | 0) == (i4 | 0);
 L1 : do {
  if (i12) {
   HEAP32[i8 >> 2] = i6;
   HEAP32[i5 >> 2] = i3;
   i13 = i3;
  } else {
   i14 = i3;
   while (1) {
    i15 = i14 + 4 | 0;
    if ((HEAP32[i14 >> 2] | 0) == 0) {
     i16 = i14;
     break;
    }
    if ((i15 | 0) == (i4 | 0)) {
     i16 = i4;
     break;
    } else {
     i14 = i15;
    }
   }
   HEAP32[i8 >> 2] = i6;
   HEAP32[i5 >> 2] = i3;
   if (i12 | (i6 | 0) == (i7 | 0)) {
    i13 = i3;
   } else {
    i14 = i7;
    i15 = i1 + 8 | 0;
    i17 = i3;
    i18 = i6;
    i19 = i16;
    while (1) {
     i20 = i2;
     i21 = HEAP32[i20 + 4 >> 2] | 0;
     i22 = i10;
     HEAP32[i22 >> 2] = HEAP32[i20 >> 2];
     HEAP32[i22 + 4 >> 2] = i21;
     i21 = _uselocale(HEAP32[i15 >> 2] | 0) | 0;
     i22 = _wcsnrtombs(i18, i5, i19 - i17 >> 2, i14 - i18 | 0, i2) | 0;
     if ((i21 | 0) != 0) {
      _uselocale(i21 | 0) | 0;
     }
     if ((i22 | 0) == 0) {
      i23 = 1;
      i24 = 33;
      break;
     } else if ((i22 | 0) == -1) {
      i24 = 10;
      break;
     }
     i21 = (HEAP32[i8 >> 2] | 0) + i22 | 0;
     HEAP32[i8 >> 2] = i21;
     if ((i21 | 0) == (i7 | 0)) {
      i24 = 31;
      break;
     }
     if ((i19 | 0) == (i4 | 0)) {
      i25 = HEAP32[i5 >> 2] | 0;
      i26 = i21;
      i27 = i4;
     } else {
      i21 = _uselocale(HEAP32[i15 >> 2] | 0) | 0;
      i22 = _wcrtomb(i11, 0, i2) | 0;
      if ((i21 | 0) != 0) {
       _uselocale(i21 | 0) | 0;
      }
      if ((i22 | 0) == -1) {
       i23 = 2;
       i24 = 33;
       break;
      }
      i21 = HEAP32[i8 >> 2] | 0;
      if (i22 >>> 0 > (i14 - i21 | 0) >>> 0) {
       i23 = 1;
       i24 = 33;
       break;
      }
      L23 : do {
       if ((i22 | 0) != 0) {
        i20 = i21;
        i28 = i22;
        i29 = i11;
        while (1) {
         i30 = HEAP8[i29] | 0;
         HEAP32[i8 >> 2] = i20 + 1;
         HEAP8[i20] = i30;
         i30 = i28 + -1 | 0;
         if ((i30 | 0) == 0) {
          break L23;
         }
         i20 = HEAP32[i8 >> 2] | 0;
         i28 = i30;
         i29 = i29 + 1 | 0;
        }
       }
      } while (0);
      i22 = (HEAP32[i5 >> 2] | 0) + 4 | 0;
      HEAP32[i5 >> 2] = i22;
      L28 : do {
       if ((i22 | 0) == (i4 | 0)) {
        i31 = i4;
       } else {
        i21 = i22;
        while (1) {
         i29 = i21 + 4 | 0;
         if ((HEAP32[i21 >> 2] | 0) == 0) {
          i31 = i21;
          break L28;
         }
         if ((i29 | 0) == (i4 | 0)) {
          i31 = i4;
          break;
         } else {
          i21 = i29;
         }
        }
       }
      } while (0);
      i25 = i22;
      i26 = HEAP32[i8 >> 2] | 0;
      i27 = i31;
     }
     if ((i25 | 0) == (i4 | 0) | (i26 | 0) == (i7 | 0)) {
      i13 = i25;
      break L1;
     } else {
      i17 = i25;
      i18 = i26;
      i19 = i27;
     }
    }
    if ((i24 | 0) == 10) {
     HEAP32[i8 >> 2] = i18;
     L40 : do {
      if ((i17 | 0) == (HEAP32[i5 >> 2] | 0)) {
       i32 = i17;
      } else {
       i19 = i17;
       i14 = i18;
       while (1) {
        i21 = HEAP32[i19 >> 2] | 0;
        i29 = _uselocale(HEAP32[i15 >> 2] | 0) | 0;
        i28 = _wcrtomb(i14, i21, i10) | 0;
        if ((i29 | 0) != 0) {
         _uselocale(i29 | 0) | 0;
        }
        if ((i28 | 0) == -1) {
         i32 = i19;
         break L40;
        }
        i29 = (HEAP32[i8 >> 2] | 0) + i28 | 0;
        HEAP32[i8 >> 2] = i29;
        i28 = i19 + 4 | 0;
        if ((i28 | 0) == (HEAP32[i5 >> 2] | 0)) {
         i32 = i28;
         break;
        } else {
         i19 = i28;
         i14 = i29;
        }
       }
      }
     } while (0);
     HEAP32[i5 >> 2] = i32;
     i23 = 2;
     STACKTOP = i9;
     return i23 | 0;
    } else if ((i24 | 0) == 31) {
     i13 = HEAP32[i5 >> 2] | 0;
     break;
    } else if ((i24 | 0) == 33) {
     STACKTOP = i9;
     return i23 | 0;
    }
   }
  }
 } while (0);
 i23 = (i13 | 0) != (i4 | 0) | 0;
 STACKTOP = i9;
 return i23 | 0;
}
function __ZNKSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe(i1, i2, i3, i4, i5, i6, i7, i8) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 var i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 256 | 0;
 i9 = i2;
 i10 = i2 + 32 | 0;
 i11 = i2 + 24 | 0;
 i12 = i2 + 16 | 0;
 i13 = i2 + 12 | 0;
 i14 = i2 + 244 | 0;
 i15 = i2 + 20 | 0;
 i16 = i2 + 132 | 0;
 i17 = i2 + 144 | 0;
 HEAP32[i11 >> 2] = i10;
 i18 = i11 + 4 | 0;
 HEAP32[i18 >> 2] = 120;
 i19 = i10 + 100 | 0;
 __ZNKSt3__18ios_base6getlocEv(i13, i6);
 i10 = HEAP32[i13 >> 2] | 0;
 if (!((HEAP32[1458] | 0) == -1)) {
  HEAP32[i9 >> 2] = 5832;
  HEAP32[i9 + 4 >> 2] = 118;
  HEAP32[i9 + 8 >> 2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(5832, i9, 119);
 }
 i20 = (HEAP32[5836 >> 2] | 0) + -1 | 0;
 i21 = HEAP32[i10 + 8 >> 2] | 0;
 if (!((HEAP32[i10 + 12 >> 2] | 0) - i21 >> 2 >>> 0 > i20 >>> 0)) {
  i22 = ___cxa_allocate_exception(4) | 0;
  __ZNSt8bad_castC2Ev(i22);
  ___cxa_throw(i22 | 0, 13792, 107);
 }
 i10 = HEAP32[i21 + (i20 << 2) >> 2] | 0;
 if ((i10 | 0) == 0) {
  i22 = ___cxa_allocate_exception(4) | 0;
  __ZNSt8bad_castC2Ev(i22);
  ___cxa_throw(i22 | 0, 13792, 107);
 }
 HEAP8[i14] = 0;
 HEAP32[i15 >> 2] = HEAP32[i4 >> 2];
 i22 = HEAP32[i6 + 4 >> 2] | 0;
 HEAP32[i9 + 0 >> 2] = HEAP32[i15 + 0 >> 2];
 if (__ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIcEERNS_10unique_ptrIcPFvPvEEERPcSM_(i3, i9, i5, i13, i22, i7, i14, i10, i11, i12, i19) | 0) {
  FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[i10 >> 2] | 0) + 32 >> 2] & 7](i10, 5448, 5458 | 0, i16) | 0;
  i10 = HEAP32[i12 >> 2] | 0;
  i19 = HEAP32[i11 >> 2] | 0;
  i22 = i10 - i19 | 0;
  if ((i22 | 0) > 98) {
   i5 = _malloc(i22 + 2 | 0) | 0;
   if ((i5 | 0) == 0) {
    __ZSt17__throw_bad_allocv();
   } else {
    i23 = i5;
    i24 = i5;
   }
  } else {
   i23 = 0;
   i24 = i17;
  }
  if ((HEAP8[i14] | 0) == 0) {
   i25 = i24;
  } else {
   HEAP8[i24] = 45;
   i25 = i24 + 1 | 0;
  }
  if (i19 >>> 0 < i10 >>> 0) {
   i10 = i16 + 10 | 0;
   i24 = i16;
   i14 = i25;
   i5 = i19;
   while (1) {
    i19 = HEAP8[i5] | 0;
    i22 = i16;
    while (1) {
     i15 = i22 + 1 | 0;
     if ((HEAP8[i22] | 0) == i19 << 24 >> 24) {
      i26 = i22;
      break;
     }
     if ((i15 | 0) == (i10 | 0)) {
      i26 = i10;
      break;
     } else {
      i22 = i15;
     }
    }
    HEAP8[i14] = HEAP8[5448 + (i26 - i24) | 0] | 0;
    i22 = i5 + 1 | 0;
    i19 = i14 + 1 | 0;
    if (i22 >>> 0 < (HEAP32[i12 >> 2] | 0) >>> 0) {
     i14 = i19;
     i5 = i22;
    } else {
     i27 = i19;
     break;
    }
   }
  } else {
   i27 = i25;
  }
  HEAP8[i27] = 0;
  HEAP32[i9 >> 2] = i8;
  if ((_sscanf(i17 | 0, 5464, i9 | 0) | 0) != 1) {
   i9 = ___cxa_allocate_exception(8) | 0;
   __ZNSt13runtime_errorC2EPKc(i9, 5472);
   ___cxa_throw(i9 | 0, 2840, 21);
  }
  if ((i23 | 0) != 0) {
   _free(i23);
  }
 }
 i23 = HEAP32[i3 >> 2] | 0;
 if ((i23 | 0) == 0) {
  i28 = 0;
 } else {
  if ((HEAP32[i23 + 12 >> 2] | 0) == (HEAP32[i23 + 16 >> 2] | 0)) {
   if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i23 >> 2] | 0) + 36 >> 2] & 127](i23) | 0) == -1) {
    HEAP32[i3 >> 2] = 0;
    i28 = 0;
   } else {
    i28 = i23;
   }
  } else {
   i28 = i23;
  }
 }
 i23 = (i28 | 0) == 0;
 i3 = HEAP32[i4 >> 2] | 0;
 do {
  if ((i3 | 0) == 0) {
   i29 = 31;
  } else {
   if ((HEAP32[i3 + 12 >> 2] | 0) != (HEAP32[i3 + 16 >> 2] | 0)) {
    if (i23) {
     break;
    } else {
     i29 = 33;
     break;
    }
   }
   if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 127](i3) | 0) == -1) {
    HEAP32[i4 >> 2] = 0;
    i29 = 31;
    break;
   } else {
    if (i23) {
     break;
    } else {
     i29 = 33;
     break;
    }
   }
  }
 } while (0);
 if ((i29 | 0) == 31) {
  if (i23) {
   i29 = 33;
  }
 }
 if ((i29 | 0) == 33) {
  HEAP32[i7 >> 2] = HEAP32[i7 >> 2] | 2;
 }
 HEAP32[i1 >> 2] = i28;
 __ZNSt3__114__shared_count16__release_sharedEv(HEAP32[i13 >> 2] | 0) | 0;
 i13 = HEAP32[i11 >> 2] | 0;
 HEAP32[i11 >> 2] = 0;
 if ((i13 | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 FUNCTION_TABLE_vi[HEAP32[i18 >> 2] & 255](i13);
 STACKTOP = i2;
 return;
}
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE8overflowEi(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 8 | 0;
 i5 = i3;
 i6 = i3 + 4 | 0;
 i7 = i1 + 64 | 0;
 if ((HEAP32[i7 >> 2] | 0) == 0) {
  i8 = -1;
  STACKTOP = i3;
  return i8 | 0;
 }
 i9 = i1 + 92 | 0;
 if ((HEAP32[i9 >> 2] & 16 | 0) == 0) {
  HEAP32[i1 + 8 >> 2] = 0;
  HEAP32[i1 + 12 >> 2] = 0;
  HEAP32[i1 + 16 >> 2] = 0;
  i10 = HEAP32[i1 + 52 >> 2] | 0;
  do {
   if (i10 >>> 0 > 8) {
    if ((HEAP8[i1 + 98 | 0] | 0) == 0) {
     i11 = HEAP32[i1 + 56 >> 2] | 0;
     i12 = i11 + ((HEAP32[i1 + 60 >> 2] | 0) + -1) | 0;
     HEAP32[i1 + 24 >> 2] = i11;
     HEAP32[i1 + 20 >> 2] = i11;
     HEAP32[i1 + 28 >> 2] = i12;
     i13 = i12;
     i14 = i11;
     break;
    } else {
     i11 = HEAP32[i1 + 32 >> 2] | 0;
     i12 = i11 + (i10 + -1) | 0;
     HEAP32[i1 + 24 >> 2] = i11;
     HEAP32[i1 + 20 >> 2] = i11;
     HEAP32[i1 + 28 >> 2] = i12;
     i13 = i12;
     i14 = i11;
     break;
    }
   } else {
    HEAP32[i1 + 24 >> 2] = 0;
    HEAP32[i1 + 20 >> 2] = 0;
    HEAP32[i1 + 28 >> 2] = 0;
    i13 = 0;
    i14 = 0;
   }
  } while (0);
  HEAP32[i9 >> 2] = 16;
  i15 = i1 + 28 | 0;
  i16 = i1 + 20 | 0;
  i17 = i14;
  i18 = i13;
 } else {
  i13 = i1 + 20 | 0;
  i14 = i1 + 28 | 0;
  i15 = i14;
  i16 = i13;
  i17 = HEAP32[i13 >> 2] | 0;
  i18 = HEAP32[i14 >> 2] | 0;
 }
 i14 = (i2 | 0) == -1;
 i13 = i1 + 24 | 0;
 i9 = HEAP32[i13 >> 2] | 0;
 if (i14) {
  i19 = i9;
  i20 = i17;
 } else {
  if ((i9 | 0) == 0) {
   HEAP32[i13 >> 2] = i4;
   HEAP32[i16 >> 2] = i4;
   HEAP32[i15 >> 2] = i4 + 1;
   i21 = i4;
  } else {
   i21 = i9;
  }
  HEAP8[i21] = i2;
  i21 = (HEAP32[i13 >> 2] | 0) + 1 | 0;
  HEAP32[i13 >> 2] = i21;
  i19 = i21;
  i20 = HEAP32[i16 >> 2] | 0;
 }
 i21 = i1 + 24 | 0;
 if ((i19 | 0) != (i20 | 0)) {
  L23 : do {
   if ((HEAP8[i1 + 98 | 0] | 0) == 0) {
    i13 = i1 + 32 | 0;
    i9 = HEAP32[i13 >> 2] | 0;
    HEAP32[i5 >> 2] = i9;
    i4 = i1 + 68 | 0;
    i10 = HEAP32[i4 >> 2] | 0;
    if ((i10 | 0) == 0) {
     i22 = ___cxa_allocate_exception(4) | 0;
     __ZNSt8bad_castC2Ev(i22);
     ___cxa_throw(i22 | 0, 13792, 107);
    }
    i11 = i1 + 72 | 0;
    i12 = i1 + 52 | 0;
    i23 = i9;
    i9 = i10;
    i10 = i20;
    i24 = i19;
    while (1) {
     i25 = FUNCTION_TABLE_iiiiiiiii[HEAP32[(HEAP32[i9 >> 2] | 0) + 12 >> 2] & 15](i9, i11, i10, i24, i6, i23, i23 + (HEAP32[i12 >> 2] | 0) | 0, i5) | 0;
     i26 = HEAP32[i16 >> 2] | 0;
     if ((HEAP32[i6 >> 2] | 0) == (i26 | 0)) {
      i8 = -1;
      i27 = 30;
      break;
     }
     if ((i25 | 0) == 3) {
      i27 = 22;
      break;
     }
     if (!(i25 >>> 0 < 2)) {
      i8 = -1;
      i27 = 30;
      break;
     }
     i28 = HEAP32[i13 >> 2] | 0;
     i29 = (HEAP32[i5 >> 2] | 0) - i28 | 0;
     if ((_fwrite(i28 | 0, 1, i29 | 0, HEAP32[i7 >> 2] | 0) | 0) != (i29 | 0)) {
      i8 = -1;
      i27 = 30;
      break;
     }
     if ((i25 | 0) != 1) {
      break L23;
     }
     i25 = HEAP32[i6 >> 2] | 0;
     i29 = HEAP32[i21 >> 2] | 0;
     HEAP32[i16 >> 2] = i25;
     HEAP32[i15 >> 2] = i29;
     i28 = i25 + (i29 - i25) | 0;
     HEAP32[i21 >> 2] = i28;
     i29 = HEAP32[i4 >> 2] | 0;
     if ((i29 | 0) == 0) {
      i27 = 19;
      break;
     }
     i23 = HEAP32[i13 >> 2] | 0;
     i9 = i29;
     i10 = i25;
     i24 = i28;
    }
    if ((i27 | 0) == 19) {
     i22 = ___cxa_allocate_exception(4) | 0;
     __ZNSt8bad_castC2Ev(i22);
     ___cxa_throw(i22 | 0, 13792, 107);
    } else if ((i27 | 0) == 22) {
     i24 = (HEAP32[i21 >> 2] | 0) - i26 | 0;
     if ((_fwrite(i26 | 0, 1, i24 | 0, HEAP32[i7 >> 2] | 0) | 0) == (i24 | 0)) {
      break;
     } else {
      i8 = -1;
     }
     STACKTOP = i3;
     return i8 | 0;
    } else if ((i27 | 0) == 30) {
     STACKTOP = i3;
     return i8 | 0;
    }
   } else {
    i24 = i19 - i20 | 0;
    if ((_fwrite(i20 | 0, 1, i24 | 0, HEAP32[i7 >> 2] | 0) | 0) != (i24 | 0)) {
     i8 = -1;
     STACKTOP = i3;
     return i8 | 0;
    }
   }
  } while (0);
  HEAP32[i21 >> 2] = i17;
  HEAP32[i16 >> 2] = i17;
  HEAP32[i15 >> 2] = i18;
 }
 i8 = i14 ? 0 : i2;
 STACKTOP = i3;
 return i8 | 0;
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE5do_inERS1_PKcS5_RS5_PwS7_RS7_(i1, i2, i3, i4, i5, i6, i7, i8) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 var i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0;
 i9 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i10 = i9;
 i11 = (i3 | 0) == (i4 | 0);
 L1 : do {
  if (i11) {
   HEAP32[i8 >> 2] = i6;
   HEAP32[i5 >> 2] = i3;
   i12 = i3;
  } else {
   i13 = i3;
   while (1) {
    i14 = i13 + 1 | 0;
    if ((HEAP8[i13] | 0) == 0) {
     i15 = i13;
     break;
    }
    if ((i14 | 0) == (i4 | 0)) {
     i15 = i4;
     break;
    } else {
     i13 = i14;
    }
   }
   HEAP32[i8 >> 2] = i6;
   HEAP32[i5 >> 2] = i3;
   if (i11 | (i6 | 0) == (i7 | 0)) {
    i12 = i3;
   } else {
    i13 = i7;
    i14 = i1 + 8 | 0;
    i16 = i3;
    i17 = i6;
    i18 = i15;
    while (1) {
     i19 = i2;
     i20 = HEAP32[i19 + 4 >> 2] | 0;
     i21 = i10;
     HEAP32[i21 >> 2] = HEAP32[i19 >> 2];
     HEAP32[i21 + 4 >> 2] = i20;
     i22 = i18;
     i20 = _uselocale(HEAP32[i14 >> 2] | 0) | 0;
     i21 = _mbsnrtowcs(i17, i5, i22 - i16 | 0, i13 - i17 >> 2, i2) | 0;
     if ((i20 | 0) != 0) {
      _uselocale(i20 | 0) | 0;
     }
     if ((i21 | 0) == -1) {
      i23 = 10;
      break;
     } else if ((i21 | 0) == 0) {
      i24 = 2;
      i23 = 32;
      break;
     }
     i20 = (HEAP32[i8 >> 2] | 0) + (i21 << 2) | 0;
     HEAP32[i8 >> 2] = i20;
     if ((i20 | 0) == (i7 | 0)) {
      i23 = 30;
      break;
     }
     i21 = HEAP32[i5 >> 2] | 0;
     if ((i18 | 0) == (i4 | 0)) {
      i25 = i21;
      i26 = i20;
      i27 = i4;
     } else {
      i19 = _uselocale(HEAP32[i14 >> 2] | 0) | 0;
      i28 = _mbrtowc(i20, i21, 1, i2) | 0;
      if ((i19 | 0) != 0) {
       _uselocale(i19 | 0) | 0;
      }
      if ((i28 | 0) != 0) {
       i24 = 2;
       i23 = 32;
       break;
      }
      HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + 4;
      i28 = (HEAP32[i5 >> 2] | 0) + 1 | 0;
      HEAP32[i5 >> 2] = i28;
      L20 : do {
       if ((i28 | 0) == (i4 | 0)) {
        i29 = i4;
       } else {
        i19 = i28;
        while (1) {
         i21 = i19 + 1 | 0;
         if ((HEAP8[i19] | 0) == 0) {
          i29 = i19;
          break L20;
         }
         if ((i21 | 0) == (i4 | 0)) {
          i29 = i4;
          break;
         } else {
          i19 = i21;
         }
        }
       }
      } while (0);
      i25 = i28;
      i26 = HEAP32[i8 >> 2] | 0;
      i27 = i29;
     }
     if ((i25 | 0) == (i4 | 0) | (i26 | 0) == (i7 | 0)) {
      i12 = i25;
      break L1;
     } else {
      i16 = i25;
      i17 = i26;
      i18 = i27;
     }
    }
    if ((i23 | 0) == 10) {
     HEAP32[i8 >> 2] = i17;
     L30 : do {
      if ((i16 | 0) == (HEAP32[i5 >> 2] | 0)) {
       i30 = i16;
      } else {
       i18 = i16;
       i13 = i17;
       while (1) {
        i19 = _uselocale(HEAP32[i14 >> 2] | 0) | 0;
        i21 = _mbrtowc(i13, i18, i22 - i18 | 0, i10) | 0;
        if ((i19 | 0) != 0) {
         _uselocale(i19 | 0) | 0;
        }
        if ((i21 | 0) == 0) {
         i31 = i18 + 1 | 0;
        } else if ((i21 | 0) == -1) {
         i23 = 15;
         break;
        } else if ((i21 | 0) == -2) {
         i23 = 16;
         break;
        } else {
         i31 = i18 + i21 | 0;
        }
        i21 = (HEAP32[i8 >> 2] | 0) + 4 | 0;
        HEAP32[i8 >> 2] = i21;
        if ((i31 | 0) == (HEAP32[i5 >> 2] | 0)) {
         i30 = i31;
         break L30;
        } else {
         i18 = i31;
         i13 = i21;
        }
       }
       if ((i23 | 0) == 15) {
        HEAP32[i5 >> 2] = i18;
        i24 = 2;
        STACKTOP = i9;
        return i24 | 0;
       } else if ((i23 | 0) == 16) {
        HEAP32[i5 >> 2] = i18;
        i24 = 1;
        STACKTOP = i9;
        return i24 | 0;
       }
      }
     } while (0);
     HEAP32[i5 >> 2] = i30;
     i24 = (i30 | 0) != (i4 | 0) | 0;
     STACKTOP = i9;
     return i24 | 0;
    } else if ((i23 | 0) == 30) {
     i12 = HEAP32[i5 >> 2] | 0;
     break;
    } else if ((i23 | 0) == 32) {
     STACKTOP = i9;
     return i24 | 0;
    }
   }
  }
 } while (0);
 i24 = (i12 | 0) != (i4 | 0) | 0;
 STACKTOP = i9;
 return i24 | 0;
}
function __ZNSt3__18ios_base4InitC2Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i1;
 i3 = HEAP32[_stdin >> 2] | 0;
 __ZNSt3__110__stdinbufIcEC2EP8_IO_FILEP11__mbstate_t(1808, i3, 1864);
 HEAP32[274] = 3236;
 HEAP32[1104 >> 2] = 3256;
 HEAP32[1100 >> 2] = 0;
 __ZNSt3__18ios_base4initEPv(1104 | 0, 1808);
 HEAP32[1176 >> 2] = 0;
 HEAP32[1180 >> 2] = -1;
 i4 = HEAP32[_stdout >> 2] | 0;
 HEAP32[478] = 3104;
 __ZNSt3__16localeC2Ev(1916 | 0);
 HEAP32[1920 >> 2] = 0;
 HEAP32[1924 >> 2] = 0;
 HEAP32[1928 >> 2] = 0;
 HEAP32[1932 >> 2] = 0;
 HEAP32[1936 >> 2] = 0;
 HEAP32[1940 >> 2] = 0;
 HEAP32[478] = 2424;
 HEAP32[1944 >> 2] = i4;
 __ZNSt3__16localeC2ERKS0_(i2, 1916 | 0);
 i5 = __ZNKSt3__16locale9use_facetERNS0_2idE(i2, 5896) | 0;
 __ZNSt3__16localeD2Ev(i2);
 HEAP32[1948 >> 2] = i5;
 HEAP32[1952 >> 2] = 1872;
 HEAP8[1956 | 0] = (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i5 >> 2] | 0) + 28 >> 2] & 127](i5) | 0) & 1;
 HEAP32[296] = 3316;
 HEAP32[1188 >> 2] = 3336;
 __ZNSt3__18ios_base4initEPv(1188 | 0, 1912);
 HEAP32[1260 >> 2] = 0;
 HEAP32[1264 >> 2] = -1;
 i5 = HEAP32[_stderr >> 2] | 0;
 HEAP32[490] = 3104;
 __ZNSt3__16localeC2Ev(1964 | 0);
 HEAP32[1968 >> 2] = 0;
 HEAP32[1972 >> 2] = 0;
 HEAP32[1976 >> 2] = 0;
 HEAP32[1980 >> 2] = 0;
 HEAP32[1984 >> 2] = 0;
 HEAP32[1988 >> 2] = 0;
 HEAP32[490] = 2424;
 HEAP32[1992 >> 2] = i5;
 __ZNSt3__16localeC2ERKS0_(i2, 1964 | 0);
 i6 = __ZNKSt3__16locale9use_facetERNS0_2idE(i2, 5896) | 0;
 __ZNSt3__16localeD2Ev(i2);
 HEAP32[1996 >> 2] = i6;
 HEAP32[2e3 >> 2] = 1880;
 HEAP8[2004 | 0] = (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i6 >> 2] | 0) + 28 >> 2] & 127](i6) | 0) & 1;
 HEAP32[318] = 3316;
 HEAP32[1276 >> 2] = 3336;
 __ZNSt3__18ios_base4initEPv(1276 | 0, 1960);
 HEAP32[1348 >> 2] = 0;
 HEAP32[1352 >> 2] = -1;
 i6 = HEAP32[(HEAP32[(HEAP32[318] | 0) + -12 >> 2] | 0) + 1296 >> 2] | 0;
 HEAP32[340] = 3316;
 HEAP32[1364 >> 2] = 3336;
 __ZNSt3__18ios_base4initEPv(1364 | 0, i6);
 HEAP32[1436 >> 2] = 0;
 HEAP32[1440 >> 2] = -1;
 HEAP32[(HEAP32[(HEAP32[274] | 0) + -12 >> 2] | 0) + 1168 >> 2] = 1184;
 i6 = (HEAP32[(HEAP32[318] | 0) + -12 >> 2] | 0) + 1276 | 0;
 HEAP32[i6 >> 2] = HEAP32[i6 >> 2] | 8192;
 HEAP32[(HEAP32[(HEAP32[318] | 0) + -12 >> 2] | 0) + 1344 >> 2] = 1184;
 __ZNSt3__110__stdinbufIwEC2EP8_IO_FILEP11__mbstate_t(2008, i3, 1888 | 0);
 HEAP32[362] = 3276;
 HEAP32[1456 >> 2] = 3296;
 HEAP32[1452 >> 2] = 0;
 __ZNSt3__18ios_base4initEPv(1456 | 0, 2008);
 HEAP32[1528 >> 2] = 0;
 HEAP32[1532 >> 2] = -1;
 HEAP32[516] = 3168;
 __ZNSt3__16localeC2Ev(2068 | 0);
 HEAP32[2072 >> 2] = 0;
 HEAP32[2076 >> 2] = 0;
 HEAP32[2080 >> 2] = 0;
 HEAP32[2084 >> 2] = 0;
 HEAP32[2088 >> 2] = 0;
 HEAP32[2092 >> 2] = 0;
 HEAP32[516] = 2168;
 HEAP32[2096 >> 2] = i4;
 __ZNSt3__16localeC2ERKS0_(i2, 2068 | 0);
 i4 = __ZNKSt3__16locale9use_facetERNS0_2idE(i2, 5904) | 0;
 __ZNSt3__16localeD2Ev(i2);
 HEAP32[2100 >> 2] = i4;
 HEAP32[2104 >> 2] = 1896;
 HEAP8[2108 | 0] = (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 28 >> 2] & 127](i4) | 0) & 1;
 HEAP32[384] = 3356;
 HEAP32[1540 >> 2] = 3376;
 __ZNSt3__18ios_base4initEPv(1540 | 0, 2064);
 HEAP32[1612 >> 2] = 0;
 HEAP32[1616 >> 2] = -1;
 HEAP32[528] = 3168;
 __ZNSt3__16localeC2Ev(2116 | 0);
 HEAP32[2120 >> 2] = 0;
 HEAP32[2124 >> 2] = 0;
 HEAP32[2128 >> 2] = 0;
 HEAP32[2132 >> 2] = 0;
 HEAP32[2136 >> 2] = 0;
 HEAP32[2140 >> 2] = 0;
 HEAP32[528] = 2168;
 HEAP32[2144 >> 2] = i5;
 __ZNSt3__16localeC2ERKS0_(i2, 2116 | 0);
 i5 = __ZNKSt3__16locale9use_facetERNS0_2idE(i2, 5904) | 0;
 __ZNSt3__16localeD2Ev(i2);
 HEAP32[2148 >> 2] = i5;
 HEAP32[2152 >> 2] = 1904;
 HEAP8[2156 | 0] = (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i5 >> 2] | 0) + 28 >> 2] & 127](i5) | 0) & 1;
 HEAP32[406] = 3356;
 HEAP32[1628 >> 2] = 3376;
 __ZNSt3__18ios_base4initEPv(1628 | 0, 2112);
 HEAP32[1700 >> 2] = 0;
 HEAP32[1704 >> 2] = -1;
 i5 = HEAP32[(HEAP32[(HEAP32[406] | 0) + -12 >> 2] | 0) + 1648 >> 2] | 0;
 HEAP32[428] = 3356;
 HEAP32[1716 >> 2] = 3376;
 __ZNSt3__18ios_base4initEPv(1716 | 0, i5);
 HEAP32[1788 >> 2] = 0;
 HEAP32[1792 >> 2] = -1;
 HEAP32[(HEAP32[(HEAP32[362] | 0) + -12 >> 2] | 0) + 1520 >> 2] = 1536;
 i5 = (HEAP32[(HEAP32[406] | 0) + -12 >> 2] | 0) + 1628 | 0;
 HEAP32[i5 >> 2] = HEAP32[i5 >> 2] | 8192;
 HEAP32[(HEAP32[(HEAP32[406] | 0) + -12 >> 2] | 0) + 1696 >> 2] = 1536;
 STACKTOP = i1;
 return;
}
function __ZNSt3__1L20utf8_to_utf16_lengthEPKhS1_jmNS_12codecvt_modeE(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0;
 i6 = STACKTOP;
 if ((i5 & 4 | 0) == 0) {
  i7 = i1;
 } else {
  if ((i2 - i1 | 0) > 2) {
   if ((HEAP8[i1] | 0) == -17) {
    if ((HEAP8[i1 + 1 | 0] | 0) == -69) {
     i7 = (HEAP8[i1 + 2 | 0] | 0) == -65 ? i1 + 3 | 0 : i1;
    } else {
     i7 = i1;
    }
   } else {
    i7 = i1;
   }
  } else {
   i7 = i1;
  }
 }
 L7 : do {
  if (i7 >>> 0 < i2 >>> 0 & (i3 | 0) != 0) {
   i5 = i2;
   i8 = i7;
   i9 = 0;
   L9 : while (1) {
    i10 = HEAP8[i8] | 0;
    i11 = i10 & 255;
    if (i11 >>> 0 > i4 >>> 0) {
     i12 = i8;
     break L7;
    }
    do {
     if (i10 << 24 >> 24 > -1) {
      i13 = i8 + 1 | 0;
      i14 = i9;
     } else {
      if ((i10 & 255) < 194) {
       i12 = i8;
       break L7;
      }
      if ((i10 & 255) < 224) {
       if ((i5 - i8 | 0) < 2) {
        i12 = i8;
        break L7;
       }
       i15 = HEAPU8[i8 + 1 | 0] | 0;
       if ((i15 & 192 | 0) != 128) {
        i12 = i8;
        break L7;
       }
       if ((i15 & 63 | i11 << 6 & 1984) >>> 0 > i4 >>> 0) {
        i12 = i8;
        break L7;
       }
       i13 = i8 + 2 | 0;
       i14 = i9;
       break;
      }
      if ((i10 & 255) < 240) {
       i16 = i8;
       if ((i5 - i16 | 0) < 3) {
        i12 = i8;
        break L7;
       }
       i15 = HEAP8[i8 + 1 | 0] | 0;
       i17 = HEAP8[i8 + 2 | 0] | 0;
       if ((i11 | 0) == 224) {
        if (!((i15 & -32) << 24 >> 24 == -96)) {
         i18 = 21;
         break L9;
        }
       } else if ((i11 | 0) == 237) {
        if (!((i15 & -32) << 24 >> 24 == -128)) {
         i18 = 23;
         break L9;
        }
       } else {
        if (!((i15 & -64) << 24 >> 24 == -128)) {
         i18 = 25;
         break L9;
        }
       }
       i19 = i17 & 255;
       if ((i19 & 192 | 0) != 128) {
        i12 = i8;
        break L7;
       }
       if (((i15 & 255) << 6 & 4032 | i11 << 12 & 61440 | i19 & 63) >>> 0 > i4 >>> 0) {
        i12 = i8;
        break L7;
       }
       i13 = i8 + 3 | 0;
       i14 = i9;
       break;
      }
      if (!((i10 & 255) < 245)) {
       i12 = i8;
       break L7;
      }
      i20 = i8;
      if ((i5 - i20 | 0) < 4) {
       i12 = i8;
       break L7;
      }
      if ((i3 - i9 | 0) >>> 0 < 2) {
       i12 = i8;
       break L7;
      }
      i19 = HEAP8[i8 + 1 | 0] | 0;
      i15 = HEAP8[i8 + 2 | 0] | 0;
      i17 = HEAP8[i8 + 3 | 0] | 0;
      if ((i11 | 0) == 240) {
       if (!((i19 + 112 << 24 >> 24 & 255) < 48)) {
        i18 = 34;
        break L9;
       }
      } else if ((i11 | 0) == 244) {
       if (!((i19 & -16) << 24 >> 24 == -128)) {
        i18 = 36;
        break L9;
       }
      } else {
       if (!((i19 & -64) << 24 >> 24 == -128)) {
        i18 = 38;
        break L9;
       }
      }
      i21 = i15 & 255;
      if ((i21 & 192 | 0) != 128) {
       i12 = i8;
       break L7;
      }
      i15 = i17 & 255;
      if ((i15 & 192 | 0) != 128) {
       i12 = i8;
       break L7;
      }
      if (((i19 & 255) << 12 & 258048 | i11 << 18 & 1835008 | i21 << 6 & 4032 | i15 & 63) >>> 0 > i4 >>> 0) {
       i12 = i8;
       break L7;
      }
      i13 = i8 + 4 | 0;
      i14 = i9 + 1 | 0;
     }
    } while (0);
    i11 = i14 + 1 | 0;
    if (i13 >>> 0 < i2 >>> 0 & i11 >>> 0 < i3 >>> 0) {
     i8 = i13;
     i9 = i11;
    } else {
     i12 = i13;
     break L7;
    }
   }
   if ((i18 | 0) == 21) {
    i22 = i16 - i1 | 0;
    STACKTOP = i6;
    return i22 | 0;
   } else if ((i18 | 0) == 23) {
    i22 = i16 - i1 | 0;
    STACKTOP = i6;
    return i22 | 0;
   } else if ((i18 | 0) == 25) {
    i22 = i16 - i1 | 0;
    STACKTOP = i6;
    return i22 | 0;
   } else if ((i18 | 0) == 34) {
    i22 = i20 - i1 | 0;
    STACKTOP = i6;
    return i22 | 0;
   } else if ((i18 | 0) == 36) {
    i22 = i20 - i1 | 0;
    STACKTOP = i6;
    return i22 | 0;
   } else if ((i18 | 0) == 38) {
    i22 = i20 - i1 | 0;
    STACKTOP = i6;
    return i22 | 0;
   }
  } else {
   i12 = i7;
  }
 } while (0);
 i22 = i12 - i1 | 0;
 STACKTOP = i6;
 return i22 | 0;
}
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE9underflowEv(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 4 | 0;
 i4 = i2;
 i5 = i1 + 64 | 0;
 if ((HEAP32[i5 >> 2] | 0) == 0) {
  i6 = -1;
  STACKTOP = i2;
  return i6 | 0;
 }
 i7 = i1 + 92 | 0;
 if ((HEAP32[i7 >> 2] & 8 | 0) == 0) {
  HEAP32[i1 + 24 >> 2] = 0;
  HEAP32[i1 + 20 >> 2] = 0;
  HEAP32[i1 + 28 >> 2] = 0;
  if ((HEAP8[i1 + 98 | 0] | 0) == 0) {
   i8 = HEAP32[i1 + 56 >> 2] | 0;
   i9 = i8 + (HEAP32[i1 + 60 >> 2] | 0) | 0;
   HEAP32[i1 + 8 >> 2] = i8;
   HEAP32[i1 + 12 >> 2] = i9;
   HEAP32[i1 + 16 >> 2] = i9;
   i10 = i9;
  } else {
   i9 = HEAP32[i1 + 32 >> 2] | 0;
   i8 = i9 + (HEAP32[i1 + 52 >> 2] | 0) | 0;
   HEAP32[i1 + 8 >> 2] = i9;
   HEAP32[i1 + 12 >> 2] = i8;
   HEAP32[i1 + 16 >> 2] = i8;
   i10 = i8;
  }
  HEAP32[i7 >> 2] = 8;
  i11 = 1;
  i12 = i1 + 12 | 0;
  i13 = i10;
 } else {
  i10 = i1 + 12 | 0;
  i11 = 0;
  i12 = i10;
  i13 = HEAP32[i10 >> 2] | 0;
 }
 if ((i13 | 0) == 0) {
  i10 = i3 + 1 | 0;
  HEAP32[i1 + 8 >> 2] = i3;
  HEAP32[i12 >> 2] = i10;
  HEAP32[i1 + 16 >> 2] = i10;
  i14 = i10;
 } else {
  i14 = i13;
 }
 i13 = HEAP32[i1 + 16 >> 2] | 0;
 if (i11) {
  i15 = 0;
 } else {
  i11 = (i13 - (HEAP32[i1 + 8 >> 2] | 0) | 0) / 2 | 0;
  i15 = i11 >>> 0 > 4 ? 4 : i11;
 }
 i11 = i1 + 16 | 0;
 do {
  if ((i14 | 0) == (i13 | 0)) {
   i10 = i1 + 8 | 0;
   _memmove(HEAP32[i10 >> 2] | 0, i14 + (0 - i15) | 0, i15 | 0) | 0;
   if ((HEAP8[i1 + 98 | 0] | 0) != 0) {
    i7 = HEAP32[i10 >> 2] | 0;
    i8 = _fread(i7 + i15 | 0, 1, (HEAP32[i11 >> 2] | 0) - i15 - i7 | 0, HEAP32[i5 >> 2] | 0) | 0;
    if ((i8 | 0) == 0) {
     i16 = i10;
     i17 = -1;
     break;
    }
    i7 = HEAP32[i10 >> 2] | 0;
    i9 = i7 + i15 | 0;
    HEAP32[i12 >> 2] = i9;
    HEAP32[i11 >> 2] = i7 + (i8 + i15);
    i16 = i10;
    i17 = HEAPU8[i9] | 0;
    break;
   }
   i9 = i1 + 32 | 0;
   i8 = i1 + 36 | 0;
   i7 = HEAP32[i8 >> 2] | 0;
   i18 = i1 + 40 | 0;
   _memmove(HEAP32[i9 >> 2] | 0, i7 | 0, (HEAP32[i18 >> 2] | 0) - i7 | 0) | 0;
   i7 = HEAP32[i9 >> 2] | 0;
   i19 = i7 + ((HEAP32[i18 >> 2] | 0) - (HEAP32[i8 >> 2] | 0)) | 0;
   HEAP32[i8 >> 2] = i19;
   if ((i7 | 0) == (i1 + 44 | 0)) {
    i20 = 8;
   } else {
    i20 = HEAP32[i1 + 52 >> 2] | 0;
   }
   i21 = i7 + i20 | 0;
   HEAP32[i18 >> 2] = i21;
   i7 = i1 + 60 | 0;
   i22 = (HEAP32[i7 >> 2] | 0) - i15 | 0;
   i23 = i21 - i19 | 0;
   i21 = i1 + 72 | 0;
   i24 = i21;
   i25 = HEAP32[i24 + 4 >> 2] | 0;
   i26 = i1 + 80 | 0;
   HEAP32[i26 >> 2] = HEAP32[i24 >> 2];
   HEAP32[i26 + 4 >> 2] = i25;
   i25 = _fread(i19 | 0, 1, (i23 >>> 0 < i22 >>> 0 ? i23 : i22) | 0, HEAP32[i5 >> 2] | 0) | 0;
   if ((i25 | 0) == 0) {
    i16 = i10;
    i17 = -1;
   } else {
    i22 = HEAP32[i1 + 68 >> 2] | 0;
    if ((i22 | 0) == 0) {
     i23 = ___cxa_allocate_exception(4) | 0;
     __ZNSt8bad_castC2Ev(i23);
     ___cxa_throw(i23 | 0, 13792, 107);
    }
    i23 = (HEAP32[i8 >> 2] | 0) + i25 | 0;
    HEAP32[i18 >> 2] = i23;
    i25 = HEAP32[i10 >> 2] | 0;
    if ((FUNCTION_TABLE_iiiiiiiii[HEAP32[(HEAP32[i22 >> 2] | 0) + 16 >> 2] & 15](i22, i21, HEAP32[i9 >> 2] | 0, i23, i8, i25 + i15 | 0, i25 + (HEAP32[i7 >> 2] | 0) | 0, i4) | 0) == 3) {
     i7 = HEAP32[i9 >> 2] | 0;
     i9 = HEAP32[i18 >> 2] | 0;
     HEAP32[i10 >> 2] = i7;
     HEAP32[i12 >> 2] = i7;
     HEAP32[i11 >> 2] = i9;
     i16 = i10;
     i17 = HEAPU8[i7] | 0;
     break;
    }
    i7 = HEAP32[i4 >> 2] | 0;
    i9 = HEAP32[i10 >> 2] | 0;
    i18 = i9 + i15 | 0;
    if ((i7 | 0) == (i18 | 0)) {
     i16 = i10;
     i17 = -1;
    } else {
     HEAP32[i10 >> 2] = i9;
     HEAP32[i12 >> 2] = i18;
     HEAP32[i11 >> 2] = i7;
     i16 = i10;
     i17 = HEAPU8[i18] | 0;
    }
   }
  } else {
   i16 = i1 + 8 | 0;
   i17 = HEAPU8[i14] | 0;
  }
 } while (0);
 if ((HEAP32[i16 >> 2] | 0) != (i3 | 0)) {
  i6 = i17;
  STACKTOP = i2;
  return i6 | 0;
 }
 HEAP32[i16 >> 2] = 0;
 HEAP32[i12 >> 2] = 0;
 HEAP32[i11 >> 2] = 0;
 i6 = i17;
 STACKTOP = i2;
 return i6 | 0;
}
function __ZNKSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIwS3_NS_9allocatorIwEEEE(i1, i2, i3, i4, i5, i6, i7, i8) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 var i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 448 | 0;
 i9 = i2;
 i10 = i2 + 40 | 0;
 i11 = i2 + 16 | 0;
 i12 = i2 + 24 | 0;
 i13 = i2 + 28 | 0;
 i14 = i2 + 440 | 0;
 i15 = i2 + 32 | 0;
 HEAP32[i11 >> 2] = i10;
 i16 = i11 + 4 | 0;
 HEAP32[i16 >> 2] = 120;
 i17 = i10 + 400 | 0;
 __ZNKSt3__18ios_base6getlocEv(i13, i6);
 i10 = HEAP32[i13 >> 2] | 0;
 if (!((HEAP32[1456] | 0) == -1)) {
  HEAP32[i9 >> 2] = 5824;
  HEAP32[i9 + 4 >> 2] = 118;
  HEAP32[i9 + 8 >> 2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(5824, i9, 119);
 }
 i18 = (HEAP32[5828 >> 2] | 0) + -1 | 0;
 i19 = HEAP32[i10 + 8 >> 2] | 0;
 if (!((HEAP32[i10 + 12 >> 2] | 0) - i19 >> 2 >>> 0 > i18 >>> 0)) {
  i20 = ___cxa_allocate_exception(4) | 0;
  __ZNSt8bad_castC2Ev(i20);
  ___cxa_throw(i20 | 0, 13792, 107);
 }
 i10 = HEAP32[i19 + (i18 << 2) >> 2] | 0;
 if ((i10 | 0) == 0) {
  i20 = ___cxa_allocate_exception(4) | 0;
  __ZNSt8bad_castC2Ev(i20);
  ___cxa_throw(i20 | 0, 13792, 107);
 }
 HEAP8[i14] = 0;
 i20 = HEAP32[i4 >> 2] | 0;
 HEAP32[i15 >> 2] = i20;
 i18 = HEAP32[i6 + 4 >> 2] | 0;
 HEAP32[i9 + 0 >> 2] = HEAP32[i15 + 0 >> 2];
 if (__ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIwEERNS_10unique_ptrIwPFvPvEEERPwSM_(i3, i9, i5, i13, i18, i7, i14, i10, i11, i12, i17) | 0) {
  if ((HEAP8[i8] & 1) == 0) {
   HEAP32[i8 + 4 >> 2] = 0;
   HEAP8[i8] = 0;
  } else {
   HEAP32[HEAP32[i8 + 8 >> 2] >> 2] = 0;
   HEAP32[i8 + 4 >> 2] = 0;
  }
  if ((HEAP8[i14] | 0) != 0) {
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw(i8, FUNCTION_TABLE_iii[HEAP32[(HEAP32[i10 >> 2] | 0) + 44 >> 2] & 31](i10, 45) | 0);
  }
  i14 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i10 >> 2] | 0) + 44 >> 2] & 31](i10, 48) | 0;
  i10 = HEAP32[i11 >> 2] | 0;
  i17 = HEAP32[i12 >> 2] | 0;
  i12 = i17 + -4 | 0;
  L19 : do {
   if (i10 >>> 0 < i12 >>> 0) {
    i18 = i10;
    while (1) {
     i5 = i18 + 4 | 0;
     if ((HEAP32[i18 >> 2] | 0) != (i14 | 0)) {
      i21 = i18;
      break L19;
     }
     if (i5 >>> 0 < i12 >>> 0) {
      i18 = i5;
     } else {
      i21 = i5;
      break;
     }
    }
   } else {
    i21 = i10;
   }
  } while (0);
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6appendIPwEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueERS5_E4typeES9_S9_(i8, i21, i17) | 0;
 }
 i17 = HEAP32[i3 >> 2] | 0;
 do {
  if ((i17 | 0) == 0) {
   i22 = 1;
  } else {
   i21 = HEAP32[i17 + 12 >> 2] | 0;
   if ((i21 | 0) == (HEAP32[i17 + 16 >> 2] | 0)) {
    i23 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i17 >> 2] | 0) + 36 >> 2] & 127](i17) | 0;
   } else {
    i23 = HEAP32[i21 >> 2] | 0;
   }
   if ((i23 | 0) == -1) {
    HEAP32[i3 >> 2] = 0;
    i22 = 1;
    break;
   } else {
    i22 = (HEAP32[i3 >> 2] | 0) == 0;
    break;
   }
  }
 } while (0);
 do {
  if ((i20 | 0) == 0) {
   i24 = 29;
  } else {
   i23 = HEAP32[i20 + 12 >> 2] | 0;
   if ((i23 | 0) == (HEAP32[i20 + 16 >> 2] | 0)) {
    i25 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i20 >> 2] | 0) + 36 >> 2] & 127](i20) | 0;
   } else {
    i25 = HEAP32[i23 >> 2] | 0;
   }
   if ((i25 | 0) == -1) {
    HEAP32[i4 >> 2] = 0;
    i24 = 29;
    break;
   } else {
    if (i22) {
     break;
    } else {
     i24 = 31;
     break;
    }
   }
  }
 } while (0);
 if ((i24 | 0) == 29) {
  if (i22) {
   i24 = 31;
  }
 }
 if ((i24 | 0) == 31) {
  HEAP32[i7 >> 2] = HEAP32[i7 >> 2] | 2;
 }
 HEAP32[i1 >> 2] = HEAP32[i3 >> 2];
 __ZNSt3__114__shared_count16__release_sharedEv(HEAP32[i13 >> 2] | 0) | 0;
 i13 = HEAP32[i11 >> 2] | 0;
 HEAP32[i11 >> 2] = 0;
 if ((i13 | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 FUNCTION_TABLE_vi[HEAP32[i16 >> 2] & 255](i13);
 STACKTOP = i2;
 return;
}
function __ZNSt3__1L19utf8_to_ucs4_lengthEPKhS1_jmNS_12codecvt_modeE(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0;
 i6 = STACKTOP;
 if ((i5 & 4 | 0) == 0) {
  i7 = i1;
 } else {
  if ((i2 - i1 | 0) > 2) {
   if ((HEAP8[i1] | 0) == -17) {
    if ((HEAP8[i1 + 1 | 0] | 0) == -69) {
     i7 = (HEAP8[i1 + 2 | 0] | 0) == -65 ? i1 + 3 | 0 : i1;
    } else {
     i7 = i1;
    }
   } else {
    i7 = i1;
   }
  } else {
   i7 = i1;
  }
 }
 L7 : do {
  if (i7 >>> 0 < i2 >>> 0 & (i3 | 0) != 0) {
   i5 = i2;
   i8 = i7;
   i9 = 1;
   L9 : while (1) {
    i10 = HEAP8[i8] | 0;
    i11 = i10 & 255;
    do {
     if (i10 << 24 >> 24 > -1) {
      if (i11 >>> 0 > i4 >>> 0) {
       i12 = i8;
       break L7;
      }
      i13 = i8 + 1 | 0;
     } else {
      if ((i10 & 255) < 194) {
       i12 = i8;
       break L7;
      }
      if ((i10 & 255) < 224) {
       if ((i5 - i8 | 0) < 2) {
        i12 = i8;
        break L7;
       }
       i14 = HEAPU8[i8 + 1 | 0] | 0;
       if ((i14 & 192 | 0) != 128) {
        i12 = i8;
        break L7;
       }
       if ((i14 & 63 | i11 << 6 & 1984) >>> 0 > i4 >>> 0) {
        i12 = i8;
        break L7;
       }
       i13 = i8 + 2 | 0;
       break;
      }
      if ((i10 & 255) < 240) {
       i15 = i8;
       if ((i5 - i15 | 0) < 3) {
        i12 = i8;
        break L7;
       }
       i14 = HEAP8[i8 + 1 | 0] | 0;
       i16 = HEAP8[i8 + 2 | 0] | 0;
       if ((i11 | 0) == 224) {
        if (!((i14 & -32) << 24 >> 24 == -96)) {
         i17 = 21;
         break L9;
        }
       } else if ((i11 | 0) == 237) {
        if (!((i14 & -32) << 24 >> 24 == -128)) {
         i17 = 23;
         break L9;
        }
       } else {
        if (!((i14 & -64) << 24 >> 24 == -128)) {
         i17 = 25;
         break L9;
        }
       }
       i18 = i16 & 255;
       if ((i18 & 192 | 0) != 128) {
        i12 = i8;
        break L7;
       }
       if (((i14 & 255) << 6 & 4032 | i11 << 12 & 61440 | i18 & 63) >>> 0 > i4 >>> 0) {
        i12 = i8;
        break L7;
       }
       i13 = i8 + 3 | 0;
       break;
      }
      if (!((i10 & 255) < 245)) {
       i12 = i8;
       break L7;
      }
      i19 = i8;
      if ((i5 - i19 | 0) < 4) {
       i12 = i8;
       break L7;
      }
      i18 = HEAP8[i8 + 1 | 0] | 0;
      i14 = HEAP8[i8 + 2 | 0] | 0;
      i16 = HEAP8[i8 + 3 | 0] | 0;
      if ((i11 | 0) == 244) {
       if (!((i18 & -16) << 24 >> 24 == -128)) {
        i17 = 35;
        break L9;
       }
      } else if ((i11 | 0) == 240) {
       if (!((i18 + 112 << 24 >> 24 & 255) < 48)) {
        i17 = 33;
        break L9;
       }
      } else {
       if (!((i18 & -64) << 24 >> 24 == -128)) {
        i17 = 37;
        break L9;
       }
      }
      i20 = i14 & 255;
      if ((i20 & 192 | 0) != 128) {
       i12 = i8;
       break L7;
      }
      i14 = i16 & 255;
      if ((i14 & 192 | 0) != 128) {
       i12 = i8;
       break L7;
      }
      if (((i18 & 255) << 12 & 258048 | i11 << 18 & 1835008 | i20 << 6 & 4032 | i14 & 63) >>> 0 > i4 >>> 0) {
       i12 = i8;
       break L7;
      }
      i13 = i8 + 4 | 0;
     }
    } while (0);
    if (!(i13 >>> 0 < i2 >>> 0 & i9 >>> 0 < i3 >>> 0)) {
     i12 = i13;
     break L7;
    }
    i8 = i13;
    i9 = i9 + 1 | 0;
   }
   if ((i17 | 0) == 21) {
    i21 = i15 - i1 | 0;
    STACKTOP = i6;
    return i21 | 0;
   } else if ((i17 | 0) == 23) {
    i21 = i15 - i1 | 0;
    STACKTOP = i6;
    return i21 | 0;
   } else if ((i17 | 0) == 25) {
    i21 = i15 - i1 | 0;
    STACKTOP = i6;
    return i21 | 0;
   } else if ((i17 | 0) == 33) {
    i21 = i19 - i1 | 0;
    STACKTOP = i6;
    return i21 | 0;
   } else if ((i17 | 0) == 35) {
    i21 = i19 - i1 | 0;
    STACKTOP = i6;
    return i21 | 0;
   } else if ((i17 | 0) == 37) {
    i21 = i19 - i1 | 0;
    STACKTOP = i6;
    return i21 | 0;
   }
  } else {
   i12 = i7;
  }
 } while (0);
 i21 = i12 - i1 | 0;
 STACKTOP = i6;
 return i21 | 0;
}
function __ZNSt3__1L12utf8_to_ucs4EPKhS1_RS1_PjS3_RS3_mNS_12codecvt_modeE(i1, i2, i3, i4, i5, i6, i7, i8) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 var i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0;
 i9 = STACKTOP;
 HEAP32[i3 >> 2] = i1;
 HEAP32[i6 >> 2] = i4;
 i4 = HEAP32[i3 >> 2] | 0;
 if ((i8 & 4 | 0) == 0) {
  i10 = i4;
 } else {
  if ((i2 - i4 | 0) > 2) {
   if ((HEAP8[i4] | 0) == -17) {
    if ((HEAP8[i4 + 1 | 0] | 0) == -69) {
     if ((HEAP8[i4 + 2 | 0] | 0) == -65) {
      i8 = i4 + 3 | 0;
      HEAP32[i3 >> 2] = i8;
      i10 = i8;
     } else {
      i10 = i4;
     }
    } else {
     i10 = i4;
    }
   } else {
    i10 = i4;
   }
  } else {
   i10 = i4;
  }
 }
 L8 : do {
  if (i10 >>> 0 < i2 >>> 0) {
   i4 = i2;
   i8 = HEAP32[i6 >> 2] | 0;
   i1 = i10;
   while (1) {
    if (!(i8 >>> 0 < i5 >>> 0)) {
     i11 = i1;
     i12 = 39;
     break L8;
    }
    i13 = HEAP8[i1] | 0;
    i14 = i13 & 255;
    do {
     if (i13 << 24 >> 24 > -1) {
      if (i14 >>> 0 > i7 >>> 0) {
       i15 = 2;
       break L8;
      }
      HEAP32[i8 >> 2] = i14;
      HEAP32[i3 >> 2] = i1 + 1;
     } else {
      if ((i13 & 255) < 194) {
       i15 = 2;
       break L8;
      }
      if ((i13 & 255) < 224) {
       if ((i4 - i1 | 0) < 2) {
        i15 = 1;
        break L8;
       }
       i16 = HEAPU8[i1 + 1 | 0] | 0;
       if ((i16 & 192 | 0) != 128) {
        i15 = 2;
        break L8;
       }
       i17 = i16 & 63 | i14 << 6 & 1984;
       if (i17 >>> 0 > i7 >>> 0) {
        i15 = 2;
        break L8;
       }
       HEAP32[i8 >> 2] = i17;
       HEAP32[i3 >> 2] = i1 + 2;
       break;
      }
      if ((i13 & 255) < 240) {
       if ((i4 - i1 | 0) < 3) {
        i15 = 1;
        break L8;
       }
       i17 = HEAP8[i1 + 1 | 0] | 0;
       i16 = HEAP8[i1 + 2 | 0] | 0;
       if ((i14 | 0) == 224) {
        if (!((i17 & -32) << 24 >> 24 == -96)) {
         i15 = 2;
         break L8;
        }
       } else if ((i14 | 0) == 237) {
        if (!((i17 & -32) << 24 >> 24 == -128)) {
         i15 = 2;
         break L8;
        }
       } else {
        if (!((i17 & -64) << 24 >> 24 == -128)) {
         i15 = 2;
         break L8;
        }
       }
       i18 = i16 & 255;
       if ((i18 & 192 | 0) != 128) {
        i15 = 2;
        break L8;
       }
       i16 = (i17 & 255) << 6 & 4032 | i14 << 12 & 61440 | i18 & 63;
       if (i16 >>> 0 > i7 >>> 0) {
        i15 = 2;
        break L8;
       }
       HEAP32[i8 >> 2] = i16;
       HEAP32[i3 >> 2] = i1 + 3;
       break;
      }
      if (!((i13 & 255) < 245)) {
       i15 = 2;
       break L8;
      }
      if ((i4 - i1 | 0) < 4) {
       i15 = 1;
       break L8;
      }
      i16 = HEAP8[i1 + 1 | 0] | 0;
      i18 = HEAP8[i1 + 2 | 0] | 0;
      i17 = HEAP8[i1 + 3 | 0] | 0;
      if ((i14 | 0) == 244) {
       if (!((i16 & -16) << 24 >> 24 == -128)) {
        i15 = 2;
        break L8;
       }
      } else if ((i14 | 0) == 240) {
       if (!((i16 + 112 << 24 >> 24 & 255) < 48)) {
        i15 = 2;
        break L8;
       }
      } else {
       if (!((i16 & -64) << 24 >> 24 == -128)) {
        i15 = 2;
        break L8;
       }
      }
      i19 = i18 & 255;
      if ((i19 & 192 | 0) != 128) {
       i15 = 2;
       break L8;
      }
      i18 = i17 & 255;
      if ((i18 & 192 | 0) != 128) {
       i15 = 2;
       break L8;
      }
      i17 = (i16 & 255) << 12 & 258048 | i14 << 18 & 1835008 | i19 << 6 & 4032 | i18 & 63;
      if (i17 >>> 0 > i7 >>> 0) {
       i15 = 2;
       break L8;
      }
      HEAP32[i8 >> 2] = i17;
      HEAP32[i3 >> 2] = i1 + 4;
     }
    } while (0);
    i14 = (HEAP32[i6 >> 2] | 0) + 4 | 0;
    HEAP32[i6 >> 2] = i14;
    i13 = HEAP32[i3 >> 2] | 0;
    if (i13 >>> 0 < i2 >>> 0) {
     i8 = i14;
     i1 = i13;
    } else {
     i11 = i13;
     i12 = 39;
     break;
    }
   }
  } else {
   i11 = i10;
   i12 = 39;
  }
 } while (0);
 if ((i12 | 0) == 39) {
  i15 = i11 >>> 0 < i2 >>> 0 | 0;
 }
 STACKTOP = i9;
 return i15 | 0;
}
function __ZNKSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIcS3_NS_9allocatorIcEEEE(i1, i2, i3, i4, i5, i6, i7, i8) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 var i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 i9 = i2;
 i10 = i2 + 40 | 0;
 i11 = i2 + 16 | 0;
 i12 = i2 + 24 | 0;
 i13 = i2 + 28 | 0;
 i14 = i2 + 36 | 0;
 i15 = i2 + 32 | 0;
 HEAP32[i11 >> 2] = i10;
 i16 = i11 + 4 | 0;
 HEAP32[i16 >> 2] = 120;
 i17 = i10 + 100 | 0;
 __ZNKSt3__18ios_base6getlocEv(i13, i6);
 i10 = HEAP32[i13 >> 2] | 0;
 if (!((HEAP32[1458] | 0) == -1)) {
  HEAP32[i9 >> 2] = 5832;
  HEAP32[i9 + 4 >> 2] = 118;
  HEAP32[i9 + 8 >> 2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(5832, i9, 119);
 }
 i18 = (HEAP32[5836 >> 2] | 0) + -1 | 0;
 i19 = HEAP32[i10 + 8 >> 2] | 0;
 if (!((HEAP32[i10 + 12 >> 2] | 0) - i19 >> 2 >>> 0 > i18 >>> 0)) {
  i20 = ___cxa_allocate_exception(4) | 0;
  __ZNSt8bad_castC2Ev(i20);
  ___cxa_throw(i20 | 0, 13792, 107);
 }
 i10 = HEAP32[i19 + (i18 << 2) >> 2] | 0;
 if ((i10 | 0) == 0) {
  i20 = ___cxa_allocate_exception(4) | 0;
  __ZNSt8bad_castC2Ev(i20);
  ___cxa_throw(i20 | 0, 13792, 107);
 }
 HEAP8[i14] = 0;
 i20 = HEAP32[i4 >> 2] | 0;
 HEAP32[i15 >> 2] = i20;
 i18 = HEAP32[i6 + 4 >> 2] | 0;
 HEAP32[i9 + 0 >> 2] = HEAP32[i15 + 0 >> 2];
 if (__ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIcEERNS_10unique_ptrIcPFvPvEEERPcSM_(i3, i9, i5, i13, i18, i7, i14, i10, i11, i12, i17) | 0) {
  if ((HEAP8[i8] & 1) == 0) {
   HEAP8[i8 + 1 | 0] = 0;
   HEAP8[i8] = 0;
  } else {
   HEAP8[HEAP32[i8 + 8 >> 2] | 0] = 0;
   HEAP32[i8 + 4 >> 2] = 0;
  }
  if ((HEAP8[i14] | 0) != 0) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc(i8, FUNCTION_TABLE_iii[HEAP32[(HEAP32[i10 >> 2] | 0) + 28 >> 2] & 31](i10, 45) | 0);
  }
  i14 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i10 >> 2] | 0) + 28 >> 2] & 31](i10, 48) | 0;
  i10 = HEAP32[i11 >> 2] | 0;
  i17 = HEAP32[i12 >> 2] | 0;
  i12 = i17 + -1 | 0;
  L19 : do {
   if (i10 >>> 0 < i12 >>> 0) {
    i18 = i10;
    while (1) {
     i5 = i18 + 1 | 0;
     if (!((HEAP8[i18] | 0) == i14 << 24 >> 24)) {
      i21 = i18;
      break L19;
     }
     if (i5 >>> 0 < i12 >>> 0) {
      i18 = i5;
     } else {
      i21 = i5;
      break;
     }
    }
   } else {
    i21 = i10;
   }
  } while (0);
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendIPcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueERS5_E4typeES9_S9_(i8, i21, i17) | 0;
 }
 i17 = HEAP32[i3 >> 2] | 0;
 if ((i17 | 0) == 0) {
  i22 = 0;
 } else {
  if ((HEAP32[i17 + 12 >> 2] | 0) == (HEAP32[i17 + 16 >> 2] | 0)) {
   if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i17 >> 2] | 0) + 36 >> 2] & 127](i17) | 0) == -1) {
    HEAP32[i3 >> 2] = 0;
    i22 = 0;
   } else {
    i22 = i17;
   }
  } else {
   i22 = i17;
  }
 }
 i17 = (i22 | 0) == 0;
 do {
  if ((i20 | 0) == 0) {
   i23 = 25;
  } else {
   if ((HEAP32[i20 + 12 >> 2] | 0) != (HEAP32[i20 + 16 >> 2] | 0)) {
    if (i17) {
     break;
    } else {
     i23 = 27;
     break;
    }
   }
   if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i20 >> 2] | 0) + 36 >> 2] & 127](i20) | 0) == -1) {
    HEAP32[i4 >> 2] = 0;
    i23 = 25;
    break;
   } else {
    if (i17 ^ (i20 | 0) == 0) {
     break;
    } else {
     i23 = 27;
     break;
    }
   }
  }
 } while (0);
 if ((i23 | 0) == 25) {
  if (i17) {
   i23 = 27;
  }
 }
 if ((i23 | 0) == 27) {
  HEAP32[i7 >> 2] = HEAP32[i7 >> 2] | 2;
 }
 HEAP32[i1 >> 2] = i22;
 __ZNSt3__114__shared_count16__release_sharedEv(HEAP32[i13 >> 2] | 0) | 0;
 i13 = HEAP32[i11 >> 2] | 0;
 HEAP32[i11 >> 2] = 0;
 if ((i13 | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 FUNCTION_TABLE_vi[HEAP32[i16 >> 2] & 255](i13);
 STACKTOP = i2;
 return;
}
function __ZNSt3__1L13utf16_to_utf8EPKtS1_RS1_PhS3_RS3_mNS_12codecvt_modeE(i1, i2, i3, i4, i5, i6, i7, i8) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 var i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0;
 i9 = STACKTOP;
 HEAP32[i3 >> 2] = i1;
 HEAP32[i6 >> 2] = i4;
 do {
  if ((i8 & 2 | 0) != 0) {
   if ((i5 - i4 | 0) < 3) {
    i10 = 1;
    STACKTOP = i9;
    return i10 | 0;
   } else {
    HEAP32[i6 >> 2] = i4 + 1;
    HEAP8[i4] = -17;
    i1 = HEAP32[i6 >> 2] | 0;
    HEAP32[i6 >> 2] = i1 + 1;
    HEAP8[i1] = -69;
    i1 = HEAP32[i6 >> 2] | 0;
    HEAP32[i6 >> 2] = i1 + 1;
    HEAP8[i1] = -65;
    break;
   }
  }
 } while (0);
 i4 = i2;
 i8 = HEAP32[i3 >> 2] | 0;
 if (!(i8 >>> 0 < i2 >>> 0)) {
  i10 = 0;
  STACKTOP = i9;
  return i10 | 0;
 }
 i1 = i5;
 i5 = i8;
 L10 : while (1) {
  i8 = HEAP16[i5 >> 1] | 0;
  i11 = i8 & 65535;
  if (i11 >>> 0 > i7 >>> 0) {
   i10 = 2;
   i12 = 26;
   break;
  }
  do {
   if ((i8 & 65535) < 128) {
    i13 = HEAP32[i6 >> 2] | 0;
    if ((i1 - i13 | 0) < 1) {
     i10 = 1;
     i12 = 26;
     break L10;
    }
    HEAP32[i6 >> 2] = i13 + 1;
    HEAP8[i13] = i8;
   } else {
    if ((i8 & 65535) < 2048) {
     i13 = HEAP32[i6 >> 2] | 0;
     if ((i1 - i13 | 0) < 2) {
      i10 = 1;
      i12 = 26;
      break L10;
     }
     HEAP32[i6 >> 2] = i13 + 1;
     HEAP8[i13] = i11 >>> 6 | 192;
     i13 = HEAP32[i6 >> 2] | 0;
     HEAP32[i6 >> 2] = i13 + 1;
     HEAP8[i13] = i11 & 63 | 128;
     break;
    }
    if ((i8 & 65535) < 55296) {
     i13 = HEAP32[i6 >> 2] | 0;
     if ((i1 - i13 | 0) < 3) {
      i10 = 1;
      i12 = 26;
      break L10;
     }
     HEAP32[i6 >> 2] = i13 + 1;
     HEAP8[i13] = i11 >>> 12 | 224;
     i13 = HEAP32[i6 >> 2] | 0;
     HEAP32[i6 >> 2] = i13 + 1;
     HEAP8[i13] = i11 >>> 6 & 63 | 128;
     i13 = HEAP32[i6 >> 2] | 0;
     HEAP32[i6 >> 2] = i13 + 1;
     HEAP8[i13] = i11 & 63 | 128;
     break;
    }
    if (!((i8 & 65535) < 56320)) {
     if ((i8 & 65535) < 57344) {
      i10 = 2;
      i12 = 26;
      break L10;
     }
     i13 = HEAP32[i6 >> 2] | 0;
     if ((i1 - i13 | 0) < 3) {
      i10 = 1;
      i12 = 26;
      break L10;
     }
     HEAP32[i6 >> 2] = i13 + 1;
     HEAP8[i13] = i11 >>> 12 | 224;
     i13 = HEAP32[i6 >> 2] | 0;
     HEAP32[i6 >> 2] = i13 + 1;
     HEAP8[i13] = i11 >>> 6 & 63 | 128;
     i13 = HEAP32[i6 >> 2] | 0;
     HEAP32[i6 >> 2] = i13 + 1;
     HEAP8[i13] = i11 & 63 | 128;
     break;
    }
    if ((i4 - i5 | 0) < 4) {
     i10 = 1;
     i12 = 26;
     break L10;
    }
    i13 = i5 + 2 | 0;
    i14 = HEAPU16[i13 >> 1] | 0;
    if ((i14 & 64512 | 0) != 56320) {
     i10 = 2;
     i12 = 26;
     break L10;
    }
    if ((i1 - (HEAP32[i6 >> 2] | 0) | 0) < 4) {
     i10 = 1;
     i12 = 26;
     break L10;
    }
    i15 = i11 & 960;
    if (((i15 << 10) + 65536 | i11 << 10 & 64512 | i14 & 1023) >>> 0 > i7 >>> 0) {
     i10 = 2;
     i12 = 26;
     break L10;
    }
    HEAP32[i3 >> 2] = i13;
    i13 = (i15 >>> 6) + 1 | 0;
    i15 = HEAP32[i6 >> 2] | 0;
    HEAP32[i6 >> 2] = i15 + 1;
    HEAP8[i15] = i13 >>> 2 | 240;
    i15 = HEAP32[i6 >> 2] | 0;
    HEAP32[i6 >> 2] = i15 + 1;
    HEAP8[i15] = i11 >>> 2 & 15 | i13 << 4 & 48 | 128;
    i13 = HEAP32[i6 >> 2] | 0;
    HEAP32[i6 >> 2] = i13 + 1;
    HEAP8[i13] = i11 << 4 & 48 | i14 >>> 6 & 15 | 128;
    i13 = HEAP32[i6 >> 2] | 0;
    HEAP32[i6 >> 2] = i13 + 1;
    HEAP8[i13] = i14 & 63 | 128;
   }
  } while (0);
  i11 = (HEAP32[i3 >> 2] | 0) + 2 | 0;
  HEAP32[i3 >> 2] = i11;
  if (i11 >>> 0 < i2 >>> 0) {
   i5 = i11;
  } else {
   i10 = 0;
   i12 = 26;
   break;
  }
 }
 if ((i12 | 0) == 26) {
  STACKTOP = i9;
  return i10 | 0;
 }
 return 0;
}
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE4syncEv(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 8 | 0;
 i4 = i2;
 i5 = i1 + 64 | 0;
 if ((HEAP32[i5 >> 2] | 0) == 0) {
  i6 = 0;
  STACKTOP = i2;
  return i6 | 0;
 }
 i7 = i1 + 68 | 0;
 i8 = HEAP32[i7 >> 2] | 0;
 if ((i8 | 0) == 0) {
  i9 = ___cxa_allocate_exception(4) | 0;
  __ZNSt8bad_castC2Ev(i9);
  ___cxa_throw(i9 | 0, 13792, 107);
 }
 i9 = i1 + 92 | 0;
 i10 = HEAP32[i9 >> 2] | 0;
 do {
  if ((i10 & 16 | 0) == 0) {
   if ((i10 & 8 | 0) != 0) {
    i11 = i1 + 80 | 0;
    i12 = HEAP32[i11 + 4 >> 2] | 0;
    i13 = i4;
    HEAP32[i13 >> 2] = HEAP32[i11 >> 2];
    HEAP32[i13 + 4 >> 2] = i12;
    do {
     if ((HEAP8[i1 + 98 | 0] | 0) == 0) {
      i12 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i8 >> 2] | 0) + 24 >> 2] & 127](i8) | 0;
      i13 = i1 + 36 | 0;
      i11 = HEAP32[i13 >> 2] | 0;
      i14 = (HEAP32[i1 + 40 >> 2] | 0) - i11 | 0;
      if ((i12 | 0) > 0) {
       i15 = (Math_imul((HEAP32[i1 + 16 >> 2] | 0) - (HEAP32[i1 + 12 >> 2] | 0) | 0, i12) | 0) + i14 | 0;
       i16 = 0;
       break;
      }
      i12 = HEAP32[i1 + 12 >> 2] | 0;
      if ((i12 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) {
       i15 = i14;
       i16 = 0;
      } else {
       i17 = HEAP32[i7 >> 2] | 0;
       i18 = i1 + 32 | 0;
       i19 = FUNCTION_TABLE_iiiiii[HEAP32[(HEAP32[i17 >> 2] | 0) + 32 >> 2] & 15](i17, i4, HEAP32[i18 >> 2] | 0, i11, i12 - (HEAP32[i1 + 8 >> 2] | 0) | 0) | 0;
       i15 = i14 - i19 + (HEAP32[i13 >> 2] | 0) - (HEAP32[i18 >> 2] | 0) | 0;
       i16 = 1;
      }
     } else {
      i15 = (HEAP32[i1 + 16 >> 2] | 0) - (HEAP32[i1 + 12 >> 2] | 0) | 0;
      i16 = 0;
     }
    } while (0);
    if ((_fseek(HEAP32[i5 >> 2] | 0, 0 - i15 | 0, 1) | 0) != 0) {
     i6 = -1;
     STACKTOP = i2;
     return i6 | 0;
    }
    if (i16) {
     i18 = i4;
     i13 = HEAP32[i18 + 4 >> 2] | 0;
     i19 = i1 + 72 | 0;
     HEAP32[i19 >> 2] = HEAP32[i18 >> 2];
     HEAP32[i19 + 4 >> 2] = i13;
    }
    i13 = HEAP32[i1 + 32 >> 2] | 0;
    HEAP32[i1 + 40 >> 2] = i13;
    HEAP32[i1 + 36 >> 2] = i13;
    HEAP32[i1 + 8 >> 2] = 0;
    HEAP32[i1 + 12 >> 2] = 0;
    HEAP32[i1 + 16 >> 2] = 0;
    HEAP32[i9 >> 2] = 0;
   }
  } else {
   if ((HEAP32[i1 + 24 >> 2] | 0) != (HEAP32[i1 + 20 >> 2] | 0)) {
    if ((FUNCTION_TABLE_iii[HEAP32[(HEAP32[i1 >> 2] | 0) + 52 >> 2] & 31](i1, -1) | 0) == -1) {
     i6 = -1;
     STACKTOP = i2;
     return i6 | 0;
    }
   }
   i13 = i1 + 72 | 0;
   i19 = i1 + 32 | 0;
   i18 = i1 + 52 | 0;
   while (1) {
    i14 = HEAP32[i7 >> 2] | 0;
    i12 = HEAP32[i19 >> 2] | 0;
    i11 = FUNCTION_TABLE_iiiiii[HEAP32[(HEAP32[i14 >> 2] | 0) + 20 >> 2] & 15](i14, i13, i12, i12 + (HEAP32[i18 >> 2] | 0) | 0, i3) | 0;
    i12 = HEAP32[i19 >> 2] | 0;
    i14 = (HEAP32[i3 >> 2] | 0) - i12 | 0;
    if ((_fwrite(i12 | 0, 1, i14 | 0, HEAP32[i5 >> 2] | 0) | 0) != (i14 | 0)) {
     i6 = -1;
     i20 = 23;
     break;
    }
    if ((i11 | 0) == 2) {
     i6 = -1;
     i20 = 23;
     break;
    } else if ((i11 | 0) != 1) {
     i20 = 10;
     break;
    }
   }
   if ((i20 | 0) == 10) {
    if ((_fflush(HEAP32[i5 >> 2] | 0) | 0) == 0) {
     break;
    } else {
     i6 = -1;
    }
    STACKTOP = i2;
    return i6 | 0;
   } else if ((i20 | 0) == 23) {
    STACKTOP = i2;
    return i6 | 0;
   }
  }
 } while (0);
 i6 = 0;
 STACKTOP = i2;
 return i6 | 0;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRb(i1, i2, i3, i4, i5, i6, i7) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 var i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 i9 = i8;
 i10 = i8 + 64 | 0;
 i11 = i8 + 60 | 0;
 i12 = i8 + 56 | 0;
 i13 = i8 + 52 | 0;
 i14 = i8 + 68 | 0;
 i15 = i8 + 16 | 0;
 i16 = i8 + 12 | 0;
 i17 = i8 + 24 | 0;
 i18 = i8 + 48 | 0;
 if ((HEAP32[i5 + 4 >> 2] & 1 | 0) == 0) {
  HEAP32[i11 >> 2] = -1;
  i19 = HEAP32[(HEAP32[i2 >> 2] | 0) + 16 >> 2] | 0;
  HEAP32[i13 >> 2] = HEAP32[i3 >> 2];
  HEAP32[i14 >> 2] = HEAP32[i4 >> 2];
  HEAP32[i10 + 0 >> 2] = HEAP32[i13 + 0 >> 2];
  HEAP32[i9 + 0 >> 2] = HEAP32[i14 + 0 >> 2];
  FUNCTION_TABLE_viiiiiii[i19 & 63](i12, i2, i10, i9, i5, i6, i11);
  i10 = HEAP32[i12 >> 2] | 0;
  HEAP32[i3 >> 2] = i10;
  i12 = HEAP32[i11 >> 2] | 0;
  if ((i12 | 0) == 0) {
   HEAP8[i7] = 0;
  } else if ((i12 | 0) == 1) {
   HEAP8[i7] = 1;
  } else {
   HEAP8[i7] = 1;
   HEAP32[i6 >> 2] = 4;
  }
  HEAP32[i1 >> 2] = i10;
  STACKTOP = i8;
  return;
 }
 __ZNKSt3__18ios_base6getlocEv(i15, i5);
 i10 = HEAP32[i15 >> 2] | 0;
 if (!((HEAP32[1456] | 0) == -1)) {
  HEAP32[i9 >> 2] = 5824;
  HEAP32[i9 + 4 >> 2] = 118;
  HEAP32[i9 + 8 >> 2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(5824, i9, 119);
 }
 i12 = (HEAP32[5828 >> 2] | 0) + -1 | 0;
 i11 = HEAP32[i10 + 8 >> 2] | 0;
 if (!((HEAP32[i10 + 12 >> 2] | 0) - i11 >> 2 >>> 0 > i12 >>> 0)) {
  i20 = ___cxa_allocate_exception(4) | 0;
  __ZNSt8bad_castC2Ev(i20);
  ___cxa_throw(i20 | 0, 13792, 107);
 }
 i10 = HEAP32[i11 + (i12 << 2) >> 2] | 0;
 if ((i10 | 0) == 0) {
  i20 = ___cxa_allocate_exception(4) | 0;
  __ZNSt8bad_castC2Ev(i20);
  ___cxa_throw(i20 | 0, 13792, 107);
 }
 __ZNSt3__114__shared_count16__release_sharedEv(HEAP32[i15 >> 2] | 0) | 0;
 __ZNKSt3__18ios_base6getlocEv(i16, i5);
 i5 = HEAP32[i16 >> 2] | 0;
 if (!((HEAP32[1496] | 0) == -1)) {
  HEAP32[i9 >> 2] = 5984;
  HEAP32[i9 + 4 >> 2] = 118;
  HEAP32[i9 + 8 >> 2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(5984, i9, 119);
 }
 i15 = (HEAP32[5988 >> 2] | 0) + -1 | 0;
 i20 = HEAP32[i5 + 8 >> 2] | 0;
 if (!((HEAP32[i5 + 12 >> 2] | 0) - i20 >> 2 >>> 0 > i15 >>> 0)) {
  i21 = ___cxa_allocate_exception(4) | 0;
  __ZNSt8bad_castC2Ev(i21);
  ___cxa_throw(i21 | 0, 13792, 107);
 }
 i5 = HEAP32[i20 + (i15 << 2) >> 2] | 0;
 if ((i5 | 0) == 0) {
  i21 = ___cxa_allocate_exception(4) | 0;
  __ZNSt8bad_castC2Ev(i21);
  ___cxa_throw(i21 | 0, 13792, 107);
 }
 __ZNSt3__114__shared_count16__release_sharedEv(HEAP32[i16 >> 2] | 0) | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[i5 >> 2] | 0) + 24 >> 2] & 63](i17, i5);
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[i5 >> 2] | 0) + 28 >> 2] & 63](i17 + 12 | 0, i5);
 HEAP32[i18 >> 2] = HEAP32[i4 >> 2];
 i4 = i17 + 24 | 0;
 HEAP32[i9 + 0 >> 2] = HEAP32[i18 + 0 >> 2];
 HEAP8[i7] = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb(i3, i9, i17, i4, i10, i6, 1) | 0) == (i17 | 0) | 0;
 HEAP32[i1 >> 2] = HEAP32[i3 >> 2];
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(i17 + 12 | 0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(i17);
 STACKTOP = i8;
 return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRb(i1, i2, i3, i4, i5, i6, i7) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 var i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 i9 = i8;
 i10 = i8 + 64 | 0;
 i11 = i8 + 60 | 0;
 i12 = i8 + 56 | 0;
 i13 = i8 + 52 | 0;
 i14 = i8 + 68 | 0;
 i15 = i8 + 16 | 0;
 i16 = i8 + 12 | 0;
 i17 = i8 + 24 | 0;
 i18 = i8 + 48 | 0;
 if ((HEAP32[i5 + 4 >> 2] & 1 | 0) == 0) {
  HEAP32[i11 >> 2] = -1;
  i19 = HEAP32[(HEAP32[i2 >> 2] | 0) + 16 >> 2] | 0;
  HEAP32[i13 >> 2] = HEAP32[i3 >> 2];
  HEAP32[i14 >> 2] = HEAP32[i4 >> 2];
  HEAP32[i10 + 0 >> 2] = HEAP32[i13 + 0 >> 2];
  HEAP32[i9 + 0 >> 2] = HEAP32[i14 + 0 >> 2];
  FUNCTION_TABLE_viiiiiii[i19 & 63](i12, i2, i10, i9, i5, i6, i11);
  i10 = HEAP32[i12 >> 2] | 0;
  HEAP32[i3 >> 2] = i10;
  i12 = HEAP32[i11 >> 2] | 0;
  if ((i12 | 0) == 1) {
   HEAP8[i7] = 1;
  } else if ((i12 | 0) == 0) {
   HEAP8[i7] = 0;
  } else {
   HEAP8[i7] = 1;
   HEAP32[i6 >> 2] = 4;
  }
  HEAP32[i1 >> 2] = i10;
  STACKTOP = i8;
  return;
 }
 __ZNKSt3__18ios_base6getlocEv(i15, i5);
 i10 = HEAP32[i15 >> 2] | 0;
 if (!((HEAP32[1458] | 0) == -1)) {
  HEAP32[i9 >> 2] = 5832;
  HEAP32[i9 + 4 >> 2] = 118;
  HEAP32[i9 + 8 >> 2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(5832, i9, 119);
 }
 i12 = (HEAP32[5836 >> 2] | 0) + -1 | 0;
 i11 = HEAP32[i10 + 8 >> 2] | 0;
 if (!((HEAP32[i10 + 12 >> 2] | 0) - i11 >> 2 >>> 0 > i12 >>> 0)) {
  i20 = ___cxa_allocate_exception(4) | 0;
  __ZNSt8bad_castC2Ev(i20);
  ___cxa_throw(i20 | 0, 13792, 107);
 }
 i10 = HEAP32[i11 + (i12 << 2) >> 2] | 0;
 if ((i10 | 0) == 0) {
  i20 = ___cxa_allocate_exception(4) | 0;
  __ZNSt8bad_castC2Ev(i20);
  ___cxa_throw(i20 | 0, 13792, 107);
 }
 __ZNSt3__114__shared_count16__release_sharedEv(HEAP32[i15 >> 2] | 0) | 0;
 __ZNKSt3__18ios_base6getlocEv(i16, i5);
 i5 = HEAP32[i16 >> 2] | 0;
 if (!((HEAP32[1494] | 0) == -1)) {
  HEAP32[i9 >> 2] = 5976;
  HEAP32[i9 + 4 >> 2] = 118;
  HEAP32[i9 + 8 >> 2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(5976, i9, 119);
 }
 i15 = (HEAP32[5980 >> 2] | 0) + -1 | 0;
 i20 = HEAP32[i5 + 8 >> 2] | 0;
 if (!((HEAP32[i5 + 12 >> 2] | 0) - i20 >> 2 >>> 0 > i15 >>> 0)) {
  i21 = ___cxa_allocate_exception(4) | 0;
  __ZNSt8bad_castC2Ev(i21);
  ___cxa_throw(i21 | 0, 13792, 107);
 }
 i5 = HEAP32[i20 + (i15 << 2) >> 2] | 0;
 if ((i5 | 0) == 0) {
  i21 = ___cxa_allocate_exception(4) | 0;
  __ZNSt8bad_castC2Ev(i21);
  ___cxa_throw(i21 | 0, 13792, 107);
 }
 __ZNSt3__114__shared_count16__release_sharedEv(HEAP32[i16 >> 2] | 0) | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[i5 >> 2] | 0) + 24 >> 2] & 63](i17, i5);
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[i5 >> 2] | 0) + 28 >> 2] & 63](i17 + 12 | 0, i5);
 HEAP32[i18 >> 2] = HEAP32[i4 >> 2];
 i4 = i17 + 24 | 0;
 HEAP32[i9 + 0 >> 2] = HEAP32[i18 + 0 >> 2];
 HEAP8[i7] = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb(i3, i9, i17, i4, i10, i6, 1) | 0) == (i17 | 0) | 0;
 HEAP32[i1 >> 2] = HEAP32[i3 >> 2];
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i17 + 12 | 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i17);
 STACKTOP = i8;
 return;
}
function __ZNKSt3__18messagesIwE6do_getEiiiRKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEE(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 176 | 0;
 i7 = i2;
 i8 = i2 + 48 | 0;
 i9 = i2 + 8 | 0;
 i10 = i2 + 12 | 0;
 i11 = i2 + 16 | 0;
 i12 = i2 + 32 | 0;
 i13 = i2 + 40 | 0;
 HEAP32[i11 + 0 >> 2] = 0;
 HEAP32[i11 + 4 >> 2] = 0;
 HEAP32[i11 + 8 >> 2] = 0;
 HEAP32[i12 + 4 >> 2] = 0;
 HEAP32[i12 >> 2] = 7488;
 i14 = HEAP8[i6] | 0;
 if ((i14 & 1) == 0) {
  i15 = i6 + 4 | 0;
  i16 = (i14 & 255) >>> 1;
  i17 = i6 + 4 | 0;
 } else {
  i14 = HEAP32[i6 + 8 >> 2] | 0;
  i15 = i14;
  i16 = HEAP32[i6 + 4 >> 2] | 0;
  i17 = i14;
 }
 i14 = i15 + (i16 << 2) | 0;
 i16 = i7;
 HEAP32[i16 >> 2] = 0;
 HEAP32[i16 + 4 >> 2] = 0;
 L5 : do {
  if (i17 >>> 0 < i14 >>> 0) {
   i16 = i8 + 32 | 0;
   i15 = i17;
   i6 = 7488 | 0;
   while (1) {
    HEAP32[i10 >> 2] = i15;
    i18 = (FUNCTION_TABLE_iiiiiiiii[HEAP32[i6 + 12 >> 2] & 15](i12, i7, i15, i14, i10, i8, i16, i9) | 0) == 2;
    i19 = HEAP32[i10 >> 2] | 0;
    if (i18 | (i19 | 0) == (i15 | 0)) {
     break;
    }
    if (i8 >>> 0 < (HEAP32[i9 >> 2] | 0) >>> 0) {
     i18 = i8;
     do {
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc(i11, HEAP8[i18] | 0);
      i18 = i18 + 1 | 0;
     } while (i18 >>> 0 < (HEAP32[i9 >> 2] | 0) >>> 0);
     i20 = HEAP32[i10 >> 2] | 0;
    } else {
     i20 = i19;
    }
    if (!(i20 >>> 0 < i14 >>> 0)) {
     break L5;
    }
    i15 = i20;
    i6 = HEAP32[i12 >> 2] | 0;
   }
   __ZNSt3__121__throw_runtime_errorEPKc(6712);
  }
 } while (0);
 if ((HEAP8[i11] & 1) == 0) {
  i21 = i11 + 1 | 0;
 } else {
  i21 = HEAP32[i11 + 8 >> 2] | 0;
 }
 i12 = _catgets(((i3 | 0) == -1 ? -1 : i3 << 1) | 0, i4 | 0, i5 | 0, i21 | 0) | 0;
 HEAP32[i1 + 0 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 0;
 HEAP32[i13 + 4 >> 2] = 0;
 HEAP32[i13 >> 2] = 7592;
 i21 = _strlen(i12 | 0) | 0;
 i5 = i12 + i21 | 0;
 i4 = i7;
 HEAP32[i4 >> 2] = 0;
 HEAP32[i4 + 4 >> 2] = 0;
 if ((i21 | 0) <= 0) {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i11);
  STACKTOP = i2;
  return;
 }
 i21 = i5;
 i4 = i8 + 128 | 0;
 i3 = i12;
 i12 = 7592 | 0;
 while (1) {
  HEAP32[i10 >> 2] = i3;
  i20 = (FUNCTION_TABLE_iiiiiiiii[HEAP32[i12 + 16 >> 2] & 15](i13, i7, i3, (i21 - i3 | 0) > 32 ? i3 + 32 | 0 : i5, i10, i8, i4, i9) | 0) == 2;
  i14 = HEAP32[i10 >> 2] | 0;
  if (i20 | (i14 | 0) == (i3 | 0)) {
   i22 = 20;
   break;
  }
  if (i8 >>> 0 < (HEAP32[i9 >> 2] | 0) >>> 0) {
   i20 = i8;
   do {
    __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw(i1, HEAP32[i20 >> 2] | 0);
    i20 = i20 + 4 | 0;
   } while (i20 >>> 0 < (HEAP32[i9 >> 2] | 0) >>> 0);
   i23 = HEAP32[i10 >> 2] | 0;
  } else {
   i23 = i14;
  }
  if (!(i23 >>> 0 < i5 >>> 0)) {
   i22 = 25;
   break;
  }
  i3 = i23;
  i12 = HEAP32[i13 >> 2] | 0;
 }
 if ((i22 | 0) == 20) {
  __ZNSt3__121__throw_runtime_errorEPKc(6712);
 } else if ((i22 | 0) == 25) {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i11);
  STACKTOP = i2;
  return;
 }
}
function __ZNSt3__19__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_(i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 i9 = i9 | 0;
 i10 = i10 | 0;
 i11 = i11 | 0;
 i12 = i12 | 0;
 var i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0;
 i13 = STACKTOP;
 if (i1 << 24 >> 24 == i6 << 24 >> 24) {
  if ((HEAP8[i2] | 0) == 0) {
   i14 = -1;
   STACKTOP = i13;
   return i14 | 0;
  }
  HEAP8[i2] = 0;
  i6 = HEAP32[i5 >> 2] | 0;
  HEAP32[i5 >> 2] = i6 + 1;
  HEAP8[i6] = 46;
  i6 = HEAP8[i8] | 0;
  if ((i6 & 1) == 0) {
   i15 = (i6 & 255) >>> 1;
  } else {
   i15 = HEAP32[i8 + 4 >> 2] | 0;
  }
  if ((i15 | 0) == 0) {
   i14 = 0;
   STACKTOP = i13;
   return i14 | 0;
  }
  i15 = HEAP32[i10 >> 2] | 0;
  if ((i15 - i9 | 0) >= 160) {
   i14 = 0;
   STACKTOP = i13;
   return i14 | 0;
  }
  i6 = HEAP32[i11 >> 2] | 0;
  HEAP32[i10 >> 2] = i15 + 4;
  HEAP32[i15 >> 2] = i6;
  i14 = 0;
  STACKTOP = i13;
  return i14 | 0;
 }
 if (i1 << 24 >> 24 == i7 << 24 >> 24) {
  i7 = HEAP8[i8] | 0;
  if ((i7 & 1) == 0) {
   i16 = (i7 & 255) >>> 1;
  } else {
   i16 = HEAP32[i8 + 4 >> 2] | 0;
  }
  if ((i16 | 0) != 0) {
   if ((HEAP8[i2] | 0) == 0) {
    i14 = -1;
    STACKTOP = i13;
    return i14 | 0;
   }
   i16 = HEAP32[i10 >> 2] | 0;
   if ((i16 - i9 | 0) >= 160) {
    i14 = 0;
    STACKTOP = i13;
    return i14 | 0;
   }
   i7 = HEAP32[i11 >> 2] | 0;
   HEAP32[i10 >> 2] = i16 + 4;
   HEAP32[i16 >> 2] = i7;
   HEAP32[i11 >> 2] = 0;
   i14 = 0;
   STACKTOP = i13;
   return i14 | 0;
  }
 }
 i7 = i12 + 32 | 0;
 i16 = i12;
 while (1) {
  i6 = i16 + 1 | 0;
  if ((HEAP8[i16] | 0) == i1 << 24 >> 24) {
   i17 = i16;
   break;
  }
  if ((i6 | 0) == (i7 | 0)) {
   i17 = i7;
   break;
  } else {
   i16 = i6;
  }
 }
 i16 = i17 - i12 | 0;
 if ((i16 | 0) > 31) {
  i14 = -1;
  STACKTOP = i13;
  return i14 | 0;
 }
 i12 = HEAP8[4376 + i16 | 0] | 0;
 if ((i16 | 0) == 23 | (i16 | 0) == 22) {
  HEAP8[i3] = 80;
  i17 = HEAP32[i5 >> 2] | 0;
  HEAP32[i5 >> 2] = i17 + 1;
  HEAP8[i17] = i12;
  i14 = 0;
  STACKTOP = i13;
  return i14 | 0;
 } else if ((i16 | 0) == 24 | (i16 | 0) == 25) {
  i17 = HEAP32[i5 >> 2] | 0;
  if ((i17 | 0) != (i4 | 0)) {
   if ((HEAP8[i17 + -1 | 0] & 95 | 0) != (HEAP8[i3] & 127 | 0)) {
    i14 = -1;
    STACKTOP = i13;
    return i14 | 0;
   }
  }
  HEAP32[i5 >> 2] = i17 + 1;
  HEAP8[i17] = i12;
  i14 = 0;
  STACKTOP = i13;
  return i14 | 0;
 } else {
  i17 = i12 & 95;
  if ((i17 | 0) == (HEAP8[i3] | 0)) {
   HEAP8[i3] = i17 | 128;
   if ((HEAP8[i2] | 0) != 0) {
    HEAP8[i2] = 0;
    i2 = HEAP8[i8] | 0;
    if ((i2 & 1) == 0) {
     i18 = (i2 & 255) >>> 1;
    } else {
     i18 = HEAP32[i8 + 4 >> 2] | 0;
    }
    if ((i18 | 0) != 0) {
     i18 = HEAP32[i10 >> 2] | 0;
     if ((i18 - i9 | 0) < 160) {
      i9 = HEAP32[i11 >> 2] | 0;
      HEAP32[i10 >> 2] = i18 + 4;
      HEAP32[i18 >> 2] = i9;
     }
    }
   }
  }
  i9 = HEAP32[i5 >> 2] | 0;
  HEAP32[i5 >> 2] = i9 + 1;
  HEAP8[i9] = i12;
  if ((i16 | 0) > 21) {
   i14 = 0;
   STACKTOP = i13;
   return i14 | 0;
  }
  HEAP32[i11 >> 2] = (HEAP32[i11 >> 2] | 0) + 1;
  i14 = 0;
  STACKTOP = i13;
  return i14 | 0;
 }
 return 0;
}
function __ZNSt3__19__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw(i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 i9 = i9 | 0;
 i10 = i10 | 0;
 i11 = i11 | 0;
 i12 = i12 | 0;
 var i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0;
 i13 = STACKTOP;
 if ((i1 | 0) == (i6 | 0)) {
  if ((HEAP8[i2] | 0) == 0) {
   i14 = -1;
   STACKTOP = i13;
   return i14 | 0;
  }
  HEAP8[i2] = 0;
  i6 = HEAP32[i5 >> 2] | 0;
  HEAP32[i5 >> 2] = i6 + 1;
  HEAP8[i6] = 46;
  i6 = HEAP8[i8] | 0;
  if ((i6 & 1) == 0) {
   i15 = (i6 & 255) >>> 1;
  } else {
   i15 = HEAP32[i8 + 4 >> 2] | 0;
  }
  if ((i15 | 0) == 0) {
   i14 = 0;
   STACKTOP = i13;
   return i14 | 0;
  }
  i15 = HEAP32[i10 >> 2] | 0;
  if ((i15 - i9 | 0) >= 160) {
   i14 = 0;
   STACKTOP = i13;
   return i14 | 0;
  }
  i6 = HEAP32[i11 >> 2] | 0;
  HEAP32[i10 >> 2] = i15 + 4;
  HEAP32[i15 >> 2] = i6;
  i14 = 0;
  STACKTOP = i13;
  return i14 | 0;
 }
 if ((i1 | 0) == (i7 | 0)) {
  i7 = HEAP8[i8] | 0;
  if ((i7 & 1) == 0) {
   i16 = (i7 & 255) >>> 1;
  } else {
   i16 = HEAP32[i8 + 4 >> 2] | 0;
  }
  if ((i16 | 0) != 0) {
   if ((HEAP8[i2] | 0) == 0) {
    i14 = -1;
    STACKTOP = i13;
    return i14 | 0;
   }
   i16 = HEAP32[i10 >> 2] | 0;
   if ((i16 - i9 | 0) >= 160) {
    i14 = 0;
    STACKTOP = i13;
    return i14 | 0;
   }
   i7 = HEAP32[i11 >> 2] | 0;
   HEAP32[i10 >> 2] = i16 + 4;
   HEAP32[i16 >> 2] = i7;
   HEAP32[i11 >> 2] = 0;
   i14 = 0;
   STACKTOP = i13;
   return i14 | 0;
  }
 }
 i7 = i12 + 128 | 0;
 i16 = i12;
 while (1) {
  i6 = i16 + 4 | 0;
  if ((HEAP32[i16 >> 2] | 0) == (i1 | 0)) {
   i17 = i16;
   break;
  }
  if ((i6 | 0) == (i7 | 0)) {
   i17 = i7;
   break;
  } else {
   i16 = i6;
  }
 }
 i16 = i17 - i12 | 0;
 i12 = i16 >> 2;
 if ((i16 | 0) > 124) {
  i14 = -1;
  STACKTOP = i13;
  return i14 | 0;
 }
 i17 = HEAP8[4376 + i12 | 0] | 0;
 if ((i12 | 0) == 24 | (i12 | 0) == 25) {
  i7 = HEAP32[i5 >> 2] | 0;
  if ((i7 | 0) != (i4 | 0)) {
   if ((HEAP8[i7 + -1 | 0] & 95 | 0) != (HEAP8[i3] & 127 | 0)) {
    i14 = -1;
    STACKTOP = i13;
    return i14 | 0;
   }
  }
  HEAP32[i5 >> 2] = i7 + 1;
  HEAP8[i7] = i17;
  i14 = 0;
  STACKTOP = i13;
  return i14 | 0;
 } else if ((i12 | 0) == 23 | (i12 | 0) == 22) {
  HEAP8[i3] = 80;
 } else {
  i12 = i17 & 95;
  if ((i12 | 0) == (HEAP8[i3] | 0)) {
   HEAP8[i3] = i12 | 128;
   if ((HEAP8[i2] | 0) != 0) {
    HEAP8[i2] = 0;
    i2 = HEAP8[i8] | 0;
    if ((i2 & 1) == 0) {
     i18 = (i2 & 255) >>> 1;
    } else {
     i18 = HEAP32[i8 + 4 >> 2] | 0;
    }
    if ((i18 | 0) != 0) {
     i18 = HEAP32[i10 >> 2] | 0;
     if ((i18 - i9 | 0) < 160) {
      i9 = HEAP32[i11 >> 2] | 0;
      HEAP32[i10 >> 2] = i18 + 4;
      HEAP32[i18 >> 2] = i9;
     }
    }
   }
  }
 }
 i9 = HEAP32[i5 >> 2] | 0;
 HEAP32[i5 >> 2] = i9 + 1;
 HEAP8[i9] = i17;
 if ((i16 | 0) > 84) {
  i14 = 0;
  STACKTOP = i13;
  return i14 | 0;
 }
 HEAP32[i11 >> 2] = (HEAP32[i11 >> 2] | 0) + 1;
 i14 = 0;
 STACKTOP = i13;
 return i14 | 0;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIwEE(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0;
 i1 = STACKTOP;
 L1 : while (1) {
  i6 = HEAP32[i2 >> 2] | 0;
  do {
   if ((i6 | 0) == 0) {
    i7 = 1;
   } else {
    i8 = HEAP32[i6 + 12 >> 2] | 0;
    if ((i8 | 0) == (HEAP32[i6 + 16 >> 2] | 0)) {
     i9 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i6 >> 2] | 0) + 36 >> 2] & 127](i6) | 0;
    } else {
     i9 = HEAP32[i8 >> 2] | 0;
    }
    if ((i9 | 0) == -1) {
     HEAP32[i2 >> 2] = 0;
     i7 = 1;
     break;
    } else {
     i7 = (HEAP32[i2 >> 2] | 0) == 0;
     break;
    }
   }
  } while (0);
  i6 = HEAP32[i3 >> 2] | 0;
  do {
   if ((i6 | 0) == 0) {
    i10 = 15;
   } else {
    i8 = HEAP32[i6 + 12 >> 2] | 0;
    if ((i8 | 0) == (HEAP32[i6 + 16 >> 2] | 0)) {
     i11 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i6 >> 2] | 0) + 36 >> 2] & 127](i6) | 0;
    } else {
     i11 = HEAP32[i8 >> 2] | 0;
    }
    if ((i11 | 0) == -1) {
     HEAP32[i3 >> 2] = 0;
     i10 = 15;
     break;
    } else {
     if (i7) {
      i12 = i6;
      break;
     } else {
      i13 = i6;
      break L1;
     }
    }
   }
  } while (0);
  if ((i10 | 0) == 15) {
   i10 = 0;
   if (i7) {
    i13 = 0;
    break;
   } else {
    i12 = 0;
   }
  }
  i6 = HEAP32[i2 >> 2] | 0;
  i8 = HEAP32[i6 + 12 >> 2] | 0;
  if ((i8 | 0) == (HEAP32[i6 + 16 >> 2] | 0)) {
   i14 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i6 >> 2] | 0) + 36 >> 2] & 127](i6) | 0;
  } else {
   i14 = HEAP32[i8 >> 2] | 0;
  }
  if (!(FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i5 >> 2] | 0) + 12 >> 2] & 31](i5, 8192, i14) | 0)) {
   i13 = i12;
   break;
  }
  i8 = HEAP32[i2 >> 2] | 0;
  i6 = i8 + 12 | 0;
  i15 = HEAP32[i6 >> 2] | 0;
  if ((i15 | 0) == (HEAP32[i8 + 16 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[i8 >> 2] | 0) + 40 >> 2] & 127](i8) | 0;
   continue;
  } else {
   HEAP32[i6 >> 2] = i15 + 4;
   continue;
  }
 }
 i12 = HEAP32[i2 >> 2] | 0;
 do {
  if ((i12 | 0) == 0) {
   i16 = 1;
  } else {
   i14 = HEAP32[i12 + 12 >> 2] | 0;
   if ((i14 | 0) == (HEAP32[i12 + 16 >> 2] | 0)) {
    i17 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i12 >> 2] | 0) + 36 >> 2] & 127](i12) | 0;
   } else {
    i17 = HEAP32[i14 >> 2] | 0;
   }
   if ((i17 | 0) == -1) {
    HEAP32[i2 >> 2] = 0;
    i16 = 1;
    break;
   } else {
    i16 = (HEAP32[i2 >> 2] | 0) == 0;
    break;
   }
  }
 } while (0);
 do {
  if ((i13 | 0) == 0) {
   i10 = 37;
  } else {
   i2 = HEAP32[i13 + 12 >> 2] | 0;
   if ((i2 | 0) == (HEAP32[i13 + 16 >> 2] | 0)) {
    i18 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i13 >> 2] | 0) + 36 >> 2] & 127](i13) | 0;
   } else {
    i18 = HEAP32[i2 >> 2] | 0;
   }
   if ((i18 | 0) == -1) {
    HEAP32[i3 >> 2] = 0;
    i10 = 37;
    break;
   }
   if (i16) {
    STACKTOP = i1;
    return;
   }
  }
 } while (0);
 if ((i10 | 0) == 37) {
  if (!i16) {
   STACKTOP = i1;
   return;
  }
 }
 HEAP32[i4 >> 2] = HEAP32[i4 >> 2] | 2;
 STACKTOP = i1;
 return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIwEE(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0;
 i1 = STACKTOP;
 i6 = HEAP32[i2 >> 2] | 0;
 do {
  if ((i6 | 0) == 0) {
   i7 = 1;
  } else {
   i8 = HEAP32[i6 + 12 >> 2] | 0;
   if ((i8 | 0) == (HEAP32[i6 + 16 >> 2] | 0)) {
    i9 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i6 >> 2] | 0) + 36 >> 2] & 127](i6) | 0;
   } else {
    i9 = HEAP32[i8 >> 2] | 0;
   }
   if ((i9 | 0) == -1) {
    HEAP32[i2 >> 2] = 0;
    i7 = 1;
    break;
   } else {
    i7 = (HEAP32[i2 >> 2] | 0) == 0;
    break;
   }
  }
 } while (0);
 i9 = HEAP32[i3 >> 2] | 0;
 do {
  if ((i9 | 0) == 0) {
   i10 = 14;
  } else {
   i6 = HEAP32[i9 + 12 >> 2] | 0;
   if ((i6 | 0) == (HEAP32[i9 + 16 >> 2] | 0)) {
    i11 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i9 >> 2] | 0) + 36 >> 2] & 127](i9) | 0;
   } else {
    i11 = HEAP32[i6 >> 2] | 0;
   }
   if ((i11 | 0) == -1) {
    HEAP32[i3 >> 2] = 0;
    i10 = 14;
    break;
   } else {
    if (i7) {
     i12 = i9;
     break;
    } else {
     i10 = 16;
     break;
    }
   }
  }
 } while (0);
 if ((i10 | 0) == 14) {
  if (i7) {
   i10 = 16;
  } else {
   i12 = 0;
  }
 }
 if ((i10 | 0) == 16) {
  HEAP32[i4 >> 2] = HEAP32[i4 >> 2] | 6;
  STACKTOP = i1;
  return;
 }
 i7 = HEAP32[i2 >> 2] | 0;
 i9 = HEAP32[i7 + 12 >> 2] | 0;
 if ((i9 | 0) == (HEAP32[i7 + 16 >> 2] | 0)) {
  i13 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i7 >> 2] | 0) + 36 >> 2] & 127](i7) | 0;
 } else {
  i13 = HEAP32[i9 >> 2] | 0;
 }
 if (!((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i5 >> 2] | 0) + 52 >> 2] & 31](i5, i13, 0) | 0) << 24 >> 24 == 37)) {
  HEAP32[i4 >> 2] = HEAP32[i4 >> 2] | 4;
  STACKTOP = i1;
  return;
 }
 i13 = HEAP32[i2 >> 2] | 0;
 i5 = i13 + 12 | 0;
 i9 = HEAP32[i5 >> 2] | 0;
 if ((i9 | 0) == (HEAP32[i13 + 16 >> 2] | 0)) {
  FUNCTION_TABLE_ii[HEAP32[(HEAP32[i13 >> 2] | 0) + 40 >> 2] & 127](i13) | 0;
 } else {
  HEAP32[i5 >> 2] = i9 + 4;
 }
 i9 = HEAP32[i2 >> 2] | 0;
 do {
  if ((i9 | 0) == 0) {
   i14 = 1;
  } else {
   i5 = HEAP32[i9 + 12 >> 2] | 0;
   if ((i5 | 0) == (HEAP32[i9 + 16 >> 2] | 0)) {
    i15 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i9 >> 2] | 0) + 36 >> 2] & 127](i9) | 0;
   } else {
    i15 = HEAP32[i5 >> 2] | 0;
   }
   if ((i15 | 0) == -1) {
    HEAP32[i2 >> 2] = 0;
    i14 = 1;
    break;
   } else {
    i14 = (HEAP32[i2 >> 2] | 0) == 0;
    break;
   }
  }
 } while (0);
 do {
  if ((i12 | 0) == 0) {
   i10 = 38;
  } else {
   i2 = HEAP32[i12 + 12 >> 2] | 0;
   if ((i2 | 0) == (HEAP32[i12 + 16 >> 2] | 0)) {
    i16 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i12 >> 2] | 0) + 36 >> 2] & 127](i12) | 0;
   } else {
    i16 = HEAP32[i2 >> 2] | 0;
   }
   if ((i16 | 0) == -1) {
    HEAP32[i3 >> 2] = 0;
    i10 = 38;
    break;
   }
   if (i14) {
    STACKTOP = i1;
    return;
   }
  }
 } while (0);
 if ((i10 | 0) == 38) {
  if (!i14) {
   STACKTOP = i1;
   return;
  }
 }
 HEAP32[i4 >> 2] = HEAP32[i4 >> 2] | 2;
 STACKTOP = i1;
 return;
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPKv(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 208 | 0;
 i7 = i2;
 i8 = i2 + 188 | 0;
 i9 = i2 + 168 | 0;
 i10 = i2 + 16 | 0;
 i11 = i2 + 12 | 0;
 i12 = i2 + 164 | 0;
 HEAP8[i8 + 0 | 0] = HEAP8[4632 | 0] | 0;
 HEAP8[i8 + 1 | 0] = HEAP8[4633 | 0] | 0;
 HEAP8[i8 + 2 | 0] = HEAP8[4634 | 0] | 0;
 HEAP8[i8 + 3 | 0] = HEAP8[4635 | 0] | 0;
 HEAP8[i8 + 4 | 0] = HEAP8[4636 | 0] | 0;
 HEAP8[i8 + 5 | 0] = HEAP8[4637 | 0] | 0;
 if ((HEAP8[5728] | 0) == 0) {
  if ((___cxa_guard_acquire(5728) | 0) != 0) {
   HEAP32[1430] = _newlocale(2147483647, 5736, 0) | 0;
   ___cxa_guard_release(5728);
  }
 }
 i13 = HEAP32[1430] | 0;
 HEAP32[i7 >> 2] = i6;
 i6 = __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz(i9, 20, i13, i8, i7) | 0;
 i8 = i9 + i6 | 0;
 i13 = HEAP32[i4 + 4 >> 2] & 176;
 do {
  if ((i13 | 0) == 32) {
   i14 = i8;
  } else if ((i13 | 0) == 16) {
   i15 = HEAP8[i9] | 0;
   if (i15 << 24 >> 24 == 43 | i15 << 24 >> 24 == 45) {
    i14 = i9 + 1 | 0;
    break;
   }
   if ((i6 | 0) > 1 & i15 << 24 >> 24 == 48) {
    i15 = HEAP8[i9 + 1 | 0] | 0;
    if (i15 << 24 >> 24 == 88 | i15 << 24 >> 24 == 120) {
     i14 = i9 + 2 | 0;
    } else {
     i16 = 10;
    }
   } else {
    i16 = 10;
   }
  } else {
   i16 = 10;
  }
 } while (0);
 if ((i16 | 0) == 10) {
  i14 = i9;
 }
 __ZNKSt3__18ios_base6getlocEv(i11, i4);
 i16 = HEAP32[i11 >> 2] | 0;
 if (!((HEAP32[1456] | 0) == -1)) {
  HEAP32[i7 >> 2] = 5824;
  HEAP32[i7 + 4 >> 2] = 118;
  HEAP32[i7 + 8 >> 2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(5824, i7, 119);
 }
 i13 = (HEAP32[5828 >> 2] | 0) + -1 | 0;
 i15 = HEAP32[i16 + 8 >> 2] | 0;
 if (!((HEAP32[i16 + 12 >> 2] | 0) - i15 >> 2 >>> 0 > i13 >>> 0)) {
  i17 = ___cxa_allocate_exception(4) | 0;
  __ZNSt8bad_castC2Ev(i17);
  ___cxa_throw(i17 | 0, 13792, 107);
 }
 i16 = HEAP32[i15 + (i13 << 2) >> 2] | 0;
 if ((i16 | 0) == 0) {
  i17 = ___cxa_allocate_exception(4) | 0;
  __ZNSt8bad_castC2Ev(i17);
  ___cxa_throw(i17 | 0, 13792, 107);
 }
 __ZNSt3__114__shared_count16__release_sharedEv(HEAP32[i11 >> 2] | 0) | 0;
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[i16 >> 2] | 0) + 48 >> 2] & 7](i16, i9, i8, i10) | 0;
 i16 = i10 + (i6 << 2) | 0;
 if ((i14 | 0) == (i8 | 0)) {
  i18 = i16;
  i19 = HEAP32[i3 >> 2] | 0;
  HEAP32[i12 >> 2] = i19;
  HEAP32[i7 + 0 >> 2] = HEAP32[i12 + 0 >> 2];
  __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(i1, i7, i10, i18, i16, i4, i5);
  STACKTOP = i2;
  return;
 }
 i18 = i10 + (i14 - i9 << 2) | 0;
 i19 = HEAP32[i3 >> 2] | 0;
 HEAP32[i12 >> 2] = i19;
 HEAP32[i7 + 0 >> 2] = HEAP32[i12 + 0 >> 2];
 __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(i1, i7, i10, i18, i16, i4, i5);
 STACKTOP = i2;
 return;
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPKv(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 i7 = i2;
 i8 = i2 + 80 | 0;
 i9 = i2 + 60 | 0;
 i10 = i2 + 20 | 0;
 i11 = i2 + 12 | 0;
 i12 = i2 + 16 | 0;
 HEAP8[i8 + 0 | 0] = HEAP8[4632 | 0] | 0;
 HEAP8[i8 + 1 | 0] = HEAP8[4633 | 0] | 0;
 HEAP8[i8 + 2 | 0] = HEAP8[4634 | 0] | 0;
 HEAP8[i8 + 3 | 0] = HEAP8[4635 | 0] | 0;
 HEAP8[i8 + 4 | 0] = HEAP8[4636 | 0] | 0;
 HEAP8[i8 + 5 | 0] = HEAP8[4637 | 0] | 0;
 if ((HEAP8[5728] | 0) == 0) {
  if ((___cxa_guard_acquire(5728) | 0) != 0) {
   HEAP32[1430] = _newlocale(2147483647, 5736, 0) | 0;
   ___cxa_guard_release(5728);
  }
 }
 i13 = HEAP32[1430] | 0;
 HEAP32[i7 >> 2] = i6;
 i6 = __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz(i9, 20, i13, i8, i7) | 0;
 i8 = i9 + i6 | 0;
 i13 = HEAP32[i4 + 4 >> 2] & 176;
 do {
  if ((i13 | 0) == 16) {
   i14 = HEAP8[i9] | 0;
   if (i14 << 24 >> 24 == 43 | i14 << 24 >> 24 == 45) {
    i15 = i9 + 1 | 0;
    break;
   }
   if ((i6 | 0) > 1 & i14 << 24 >> 24 == 48) {
    i14 = HEAP8[i9 + 1 | 0] | 0;
    if (i14 << 24 >> 24 == 88 | i14 << 24 >> 24 == 120) {
     i15 = i9 + 2 | 0;
    } else {
     i16 = 10;
    }
   } else {
    i16 = 10;
   }
  } else if ((i13 | 0) == 32) {
   i15 = i8;
  } else {
   i16 = 10;
  }
 } while (0);
 if ((i16 | 0) == 10) {
  i15 = i9;
 }
 __ZNKSt3__18ios_base6getlocEv(i11, i4);
 i16 = HEAP32[i11 >> 2] | 0;
 if (!((HEAP32[1458] | 0) == -1)) {
  HEAP32[i7 >> 2] = 5832;
  HEAP32[i7 + 4 >> 2] = 118;
  HEAP32[i7 + 8 >> 2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(5832, i7, 119);
 }
 i13 = (HEAP32[5836 >> 2] | 0) + -1 | 0;
 i14 = HEAP32[i16 + 8 >> 2] | 0;
 if (!((HEAP32[i16 + 12 >> 2] | 0) - i14 >> 2 >>> 0 > i13 >>> 0)) {
  i17 = ___cxa_allocate_exception(4) | 0;
  __ZNSt8bad_castC2Ev(i17);
  ___cxa_throw(i17 | 0, 13792, 107);
 }
 i16 = HEAP32[i14 + (i13 << 2) >> 2] | 0;
 if ((i16 | 0) == 0) {
  i17 = ___cxa_allocate_exception(4) | 0;
  __ZNSt8bad_castC2Ev(i17);
  ___cxa_throw(i17 | 0, 13792, 107);
 }
 __ZNSt3__114__shared_count16__release_sharedEv(HEAP32[i11 >> 2] | 0) | 0;
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[i16 >> 2] | 0) + 32 >> 2] & 7](i16, i9, i8, i10) | 0;
 i16 = i10 + i6 | 0;
 if ((i15 | 0) == (i8 | 0)) {
  i18 = i16;
  i19 = HEAP32[i3 >> 2] | 0;
  HEAP32[i12 >> 2] = i19;
  HEAP32[i7 + 0 >> 2] = HEAP32[i12 + 0 >> 2];
  __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(i1, i7, i10, i18, i16, i4, i5);
  STACKTOP = i2;
  return;
 }
 i18 = i10 + (i15 - i9) | 0;
 i19 = HEAP32[i3 >> 2] | 0;
 HEAP32[i12 >> 2] = i19;
 HEAP32[i7 + 0 >> 2] = HEAP32[i12 + 0 >> 2];
 __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(i1, i7, i10, i18, i16, i4, i5);
 STACKTOP = i2;
 return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIcEE(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0;
 i1 = STACKTOP;
 i6 = i5 + 8 | 0;
 L1 : while (1) {
  i5 = HEAP32[i2 >> 2] | 0;
  do {
   if ((i5 | 0) == 0) {
    i7 = 0;
   } else {
    if ((HEAP32[i5 + 12 >> 2] | 0) == (HEAP32[i5 + 16 >> 2] | 0)) {
     if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i5 >> 2] | 0) + 36 >> 2] & 127](i5) | 0) == -1) {
      HEAP32[i2 >> 2] = 0;
      i7 = 0;
      break;
     } else {
      i7 = HEAP32[i2 >> 2] | 0;
      break;
     }
    } else {
     i7 = i5;
    }
   }
  } while (0);
  i5 = (i7 | 0) == 0;
  i8 = HEAP32[i3 >> 2] | 0;
  do {
   if ((i8 | 0) == 0) {
    i9 = 12;
   } else {
    if ((HEAP32[i8 + 12 >> 2] | 0) != (HEAP32[i8 + 16 >> 2] | 0)) {
     if (i5) {
      i10 = i8;
      break;
     } else {
      i11 = i8;
      break L1;
     }
    }
    if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i8 >> 2] | 0) + 36 >> 2] & 127](i8) | 0) == -1) {
     HEAP32[i3 >> 2] = 0;
     i9 = 12;
     break;
    } else {
     if (i5) {
      i10 = i8;
      break;
     } else {
      i11 = i8;
      break L1;
     }
    }
   }
  } while (0);
  if ((i9 | 0) == 12) {
   i9 = 0;
   if (i5) {
    i11 = 0;
    break;
   } else {
    i10 = 0;
   }
  }
  i8 = HEAP32[i2 >> 2] | 0;
  i12 = HEAP32[i8 + 12 >> 2] | 0;
  if ((i12 | 0) == (HEAP32[i8 + 16 >> 2] | 0)) {
   i13 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i8 >> 2] | 0) + 36 >> 2] & 127](i8) | 0;
  } else {
   i13 = HEAPU8[i12] | 0;
  }
  if (!((i13 & 255) << 24 >> 24 > -1)) {
   i11 = i10;
   break;
  }
  if ((HEAP16[(HEAP32[i6 >> 2] | 0) + (i13 << 24 >> 24 << 1) >> 1] & 8192) == 0) {
   i11 = i10;
   break;
  }
  i12 = HEAP32[i2 >> 2] | 0;
  i8 = i12 + 12 | 0;
  i14 = HEAP32[i8 >> 2] | 0;
  if ((i14 | 0) == (HEAP32[i12 + 16 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[i12 >> 2] | 0) + 40 >> 2] & 127](i12) | 0;
   continue;
  } else {
   HEAP32[i8 >> 2] = i14 + 1;
   continue;
  }
 }
 i10 = HEAP32[i2 >> 2] | 0;
 do {
  if ((i10 | 0) == 0) {
   i15 = 0;
  } else {
   if ((HEAP32[i10 + 12 >> 2] | 0) == (HEAP32[i10 + 16 >> 2] | 0)) {
    if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i10 >> 2] | 0) + 36 >> 2] & 127](i10) | 0) == -1) {
     HEAP32[i2 >> 2] = 0;
     i15 = 0;
     break;
    } else {
     i15 = HEAP32[i2 >> 2] | 0;
     break;
    }
   } else {
    i15 = i10;
   }
  }
 } while (0);
 i10 = (i15 | 0) == 0;
 do {
  if ((i11 | 0) == 0) {
   i9 = 32;
  } else {
   if ((HEAP32[i11 + 12 >> 2] | 0) == (HEAP32[i11 + 16 >> 2] | 0)) {
    if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i11 >> 2] | 0) + 36 >> 2] & 127](i11) | 0) == -1) {
     HEAP32[i3 >> 2] = 0;
     i9 = 32;
     break;
    }
   }
   if (i10) {
    STACKTOP = i1;
    return;
   }
  }
 } while (0);
 if ((i9 | 0) == 32) {
  if (!i10) {
   STACKTOP = i1;
   return;
  }
 }
 HEAP32[i4 >> 2] = HEAP32[i4 >> 2] | 2;
 STACKTOP = i1;
 return;
}
function __ZNKSt3__120__time_get_c_storageIcE8__monthsEv(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i1 = STACKTOP;
 if ((HEAP8[6176] | 0) != 0) {
  i2 = HEAP32[1542] | 0;
  STACKTOP = i1;
  return i2 | 0;
 }
 if ((___cxa_guard_acquire(6176) | 0) == 0) {
  i2 = HEAP32[1542] | 0;
  STACKTOP = i1;
  return i2 | 0;
 }
 if ((HEAP8[12416] | 0) == 0) {
  if ((___cxa_guard_acquire(12416) | 0) != 0) {
   _memset(12128, 0, 288) | 0;
   _atexit(124, 0, ___dso_handle | 0) | 0;
   ___cxa_guard_release(12416);
  }
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(12128, 12424) | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(12140 | 0, 12432) | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(12152 | 0, 12448) | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(12164 | 0, 12456) | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(12176 | 0, 12464) | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(12188 | 0, 12472) | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(12200 | 0, 12480) | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(12212 | 0, 12488) | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(12224 | 0, 12496) | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(12236 | 0, 12512) | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(12248 | 0, 12520) | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(12260 | 0, 12536) | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(12272 | 0, 12552) | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(12284 | 0, 12560) | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(12296 | 0, 12568) | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(12308 | 0, 12576) | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(12320 | 0, 12464) | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(12332 | 0, 12584) | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(12344 | 0, 12592) | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(12356 | 0, 12600) | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(12368 | 0, 12608) | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(12380 | 0, 12616) | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(12392 | 0, 12624) | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(12404 | 0, 12632) | 0;
 HEAP32[1542] = 12128;
 ___cxa_guard_release(6176);
 i2 = HEAP32[1542] | 0;
 STACKTOP = i1;
 return i2 | 0;
}
function __ZNKSt3__120__time_get_c_storageIwE8__monthsEv(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i1 = STACKTOP;
 if ((HEAP8[6192] | 0) != 0) {
  i2 = HEAP32[1546] | 0;
  STACKTOP = i1;
  return i2 | 0;
 }
 if ((___cxa_guard_acquire(6192) | 0) == 0) {
  i2 = HEAP32[1546] | 0;
  STACKTOP = i1;
  return i2 | 0;
 }
 if ((HEAP8[11576] | 0) == 0) {
  if ((___cxa_guard_acquire(11576) | 0) != 0) {
   _memset(11288, 0, 288) | 0;
   _atexit(125, 0, ___dso_handle | 0) | 0;
   ___cxa_guard_release(11576);
  }
 }
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(11288, 11584) | 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(11300 | 0, 11616) | 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(11312 | 0, 11656) | 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(11324 | 0, 11680) | 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(11336 | 0, 12e3) | 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(11348 | 0, 11704) | 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(11360 | 0, 11728) | 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(11372 | 0, 11752) | 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(11384 | 0, 11784) | 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(11396 | 0, 11824) | 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(11408 | 0, 11856) | 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(11420 | 0, 11896) | 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(11432 | 0, 11936) | 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(11444 | 0, 11952) | 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(11456 | 0, 11968) | 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(11468 | 0, 11984) | 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(11480 | 0, 12e3) | 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(11492 | 0, 12016) | 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(11504 | 0, 12032) | 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(11516 | 0, 12048) | 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(11528 | 0, 12064) | 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(11540 | 0, 12080) | 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(11552 | 0, 12096) | 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(11564 | 0, 12112) | 0;
 HEAP32[1546] = 11288;
 ___cxa_guard_release(6192);
 i2 = HEAP32[1546] | 0;
 STACKTOP = i1;
 return i2 | 0;
}
function _wcsrtombs(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i4;
 if ((i1 | 0) == 0) {
  i6 = HEAP32[i2 >> 2] | 0;
  i7 = HEAP32[i6 >> 2] | 0;
  if ((i7 | 0) == 0) {
   i8 = 0;
   STACKTOP = i4;
   return i8 | 0;
  } else {
   i9 = 0;
   i10 = i7;
   i11 = i6;
  }
  while (1) {
   if (i10 >>> 0 > 127) {
    i6 = _wcrtomb(i5, i10, 0) | 0;
    if ((i6 | 0) == -1) {
     i8 = -1;
     i12 = 26;
     break;
    } else {
     i13 = i6;
    }
   } else {
    i13 = 1;
   }
   i6 = i13 + i9 | 0;
   i7 = i11 + 4 | 0;
   i14 = HEAP32[i7 >> 2] | 0;
   if ((i14 | 0) == 0) {
    i8 = i6;
    i12 = 26;
    break;
   } else {
    i9 = i6;
    i10 = i14;
    i11 = i7;
   }
  }
  if ((i12 | 0) == 26) {
   STACKTOP = i4;
   return i8 | 0;
  }
 }
 L14 : do {
  if (i3 >>> 0 > 3) {
   i11 = i1;
   i10 = i3;
   i9 = HEAP32[i2 >> 2] | 0;
   while (1) {
    i13 = HEAP32[i9 >> 2] | 0;
    if ((i13 | 0) == 0) {
     i15 = i11;
     i16 = i10;
     break L14;
    }
    if (i13 >>> 0 > 127) {
     i7 = _wcrtomb(i11, i13, 0) | 0;
     if ((i7 | 0) == -1) {
      i8 = -1;
      break;
     }
     i17 = i11 + i7 | 0;
     i18 = i10 - i7 | 0;
     i19 = i9;
    } else {
     HEAP8[i11] = i13;
     i17 = i11 + 1 | 0;
     i18 = i10 + -1 | 0;
     i19 = HEAP32[i2 >> 2] | 0;
    }
    i13 = i19 + 4 | 0;
    HEAP32[i2 >> 2] = i13;
    if (i18 >>> 0 > 3) {
     i11 = i17;
     i10 = i18;
     i9 = i13;
    } else {
     i15 = i17;
     i16 = i18;
     break L14;
    }
   }
   STACKTOP = i4;
   return i8 | 0;
  } else {
   i15 = i1;
   i16 = i3;
  }
 } while (0);
 L26 : do {
  if ((i16 | 0) == 0) {
   i20 = 0;
  } else {
   i1 = i15;
   i18 = i16;
   i17 = HEAP32[i2 >> 2] | 0;
   while (1) {
    i19 = HEAP32[i17 >> 2] | 0;
    if ((i19 | 0) == 0) {
     i12 = 24;
     break;
    }
    if (i19 >>> 0 > 127) {
     i9 = _wcrtomb(i5, i19, 0) | 0;
     if ((i9 | 0) == -1) {
      i8 = -1;
      i12 = 26;
      break;
     }
     if (i9 >>> 0 > i18 >>> 0) {
      i12 = 20;
      break;
     }
     _wcrtomb(i1, HEAP32[i17 >> 2] | 0, 0) | 0;
     i21 = i1 + i9 | 0;
     i22 = i18 - i9 | 0;
     i23 = i17;
    } else {
     HEAP8[i1] = i19;
     i21 = i1 + 1 | 0;
     i22 = i18 + -1 | 0;
     i23 = HEAP32[i2 >> 2] | 0;
    }
    i19 = i23 + 4 | 0;
    HEAP32[i2 >> 2] = i19;
    if ((i22 | 0) == 0) {
     i20 = 0;
     break L26;
    } else {
     i1 = i21;
     i18 = i22;
     i17 = i19;
    }
   }
   if ((i12 | 0) == 20) {
    i8 = i3 - i18 | 0;
    STACKTOP = i4;
    return i8 | 0;
   } else if ((i12 | 0) == 24) {
    HEAP8[i1] = 0;
    i20 = i18;
    break;
   } else if ((i12 | 0) == 26) {
    STACKTOP = i4;
    return i8 | 0;
   }
  }
 } while (0);
 HEAP32[i2 >> 2] = 0;
 i8 = i3 - i20 | 0;
 STACKTOP = i4;
 return i8 | 0;
}
function _scanexp(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0;
 i3 = STACKTOP;
 i4 = i1 + 4 | 0;
 i5 = HEAP32[i4 >> 2] | 0;
 i6 = i1 + 100 | 0;
 if (i5 >>> 0 < (HEAP32[i6 >> 2] | 0) >>> 0) {
  HEAP32[i4 >> 2] = i5 + 1;
  i7 = HEAPU8[i5] | 0;
 } else {
  i7 = ___shgetc(i1) | 0;
 }
 if ((i7 | 0) == 43 | (i7 | 0) == 45) {
  i5 = (i7 | 0) == 45 | 0;
  i8 = HEAP32[i4 >> 2] | 0;
  if (i8 >>> 0 < (HEAP32[i6 >> 2] | 0) >>> 0) {
   HEAP32[i4 >> 2] = i8 + 1;
   i9 = HEAPU8[i8] | 0;
  } else {
   i9 = ___shgetc(i1) | 0;
  }
  if ((i9 + -48 | 0) >>> 0 < 10 | (i2 | 0) == 0) {
   i10 = i9;
   i11 = i5;
  } else {
   if ((HEAP32[i6 >> 2] | 0) == 0) {
    i10 = i9;
    i11 = i5;
   } else {
    HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + -1;
    i10 = i9;
    i11 = i5;
   }
  }
 } else {
  i10 = i7;
  i11 = 0;
 }
 if ((i10 + -48 | 0) >>> 0 > 9) {
  if ((HEAP32[i6 >> 2] | 0) == 0) {
   i12 = -2147483648;
   i13 = 0;
   tempRet0 = i12;
   STACKTOP = i3;
   return i13 | 0;
  }
  HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + -1;
  i12 = -2147483648;
  i13 = 0;
  tempRet0 = i12;
  STACKTOP = i3;
  return i13 | 0;
 } else {
  i14 = i10;
  i15 = 0;
 }
 while (1) {
  i16 = i14 + -48 + i15 | 0;
  i10 = HEAP32[i4 >> 2] | 0;
  if (i10 >>> 0 < (HEAP32[i6 >> 2] | 0) >>> 0) {
   HEAP32[i4 >> 2] = i10 + 1;
   i17 = HEAPU8[i10] | 0;
  } else {
   i17 = ___shgetc(i1) | 0;
  }
  if (!((i17 + -48 | 0) >>> 0 < 10 & (i16 | 0) < 214748364)) {
   break;
  }
  i14 = i17;
  i15 = i16 * 10 | 0;
 }
 i15 = ((i16 | 0) < 0) << 31 >> 31;
 if ((i17 + -48 | 0) >>> 0 < 10) {
  i14 = i16;
  i10 = i15;
  i7 = i17;
  while (1) {
   i5 = ___muldi3(i14 | 0, i10 | 0, 10, 0) | 0;
   i9 = tempRet0;
   i2 = _i64Add(i7 | 0, ((i7 | 0) < 0) << 31 >> 31 | 0, -48, -1) | 0;
   i8 = _i64Add(i2 | 0, tempRet0 | 0, i5 | 0, i9 | 0) | 0;
   i9 = tempRet0;
   i5 = HEAP32[i4 >> 2] | 0;
   if (i5 >>> 0 < (HEAP32[i6 >> 2] | 0) >>> 0) {
    HEAP32[i4 >> 2] = i5 + 1;
    i18 = HEAPU8[i5] | 0;
   } else {
    i18 = ___shgetc(i1) | 0;
   }
   if ((i18 + -48 | 0) >>> 0 < 10 & ((i9 | 0) < 21474836 | (i9 | 0) == 21474836 & i8 >>> 0 < 2061584302)) {
    i14 = i8;
    i10 = i9;
    i7 = i18;
   } else {
    i19 = i8;
    i20 = i9;
    i21 = i18;
    break;
   }
  }
 } else {
  i19 = i16;
  i20 = i15;
  i21 = i17;
 }
 if ((i21 + -48 | 0) >>> 0 < 10) {
  do {
   i21 = HEAP32[i4 >> 2] | 0;
   if (i21 >>> 0 < (HEAP32[i6 >> 2] | 0) >>> 0) {
    HEAP32[i4 >> 2] = i21 + 1;
    i22 = HEAPU8[i21] | 0;
   } else {
    i22 = ___shgetc(i1) | 0;
   }
  } while ((i22 + -48 | 0) >>> 0 < 10);
 }
 if ((HEAP32[i6 >> 2] | 0) != 0) {
  HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + -1;
 }
 i4 = (i11 | 0) != 0;
 i11 = _i64Subtract(0, 0, i19 | 0, i20 | 0) | 0;
 i12 = i4 ? tempRet0 : i20;
 i13 = i4 ? i11 : i19;
 tempRet0 = i12;
 STACKTOP = i3;
 return i13 | 0;
}
function __ZNSt3__110__stdinbufIcE9__getcharEb(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i4 = i3 + 16 | 0;
 i5 = i3 + 8 | 0;
 i6 = i3;
 i7 = i3 + 4 | 0;
 i8 = i1 + 52 | 0;
 if ((HEAP8[i8] | 0) != 0) {
  i9 = i1 + 48 | 0;
  i10 = HEAP32[i9 >> 2] | 0;
  if (!i2) {
   i11 = i10;
   STACKTOP = i3;
   return i11 | 0;
  }
  HEAP32[i9 >> 2] = -1;
  HEAP8[i8] = 0;
  i11 = i10;
  STACKTOP = i3;
  return i11 | 0;
 }
 i10 = HEAP32[i1 + 44 >> 2] | 0;
 i8 = (i10 | 0) > 1 ? i10 : 1;
 L8 : do {
  if ((i8 | 0) > 0) {
   i10 = i1 + 32 | 0;
   i9 = 0;
   while (1) {
    i12 = _fgetc(HEAP32[i10 >> 2] | 0) | 0;
    if ((i12 | 0) == -1) {
     i11 = -1;
     break;
    }
    HEAP8[i4 + i9 | 0] = i12;
    i9 = i9 + 1 | 0;
    if ((i9 | 0) >= (i8 | 0)) {
     break L8;
    }
   }
   STACKTOP = i3;
   return i11 | 0;
  }
 } while (0);
 L15 : do {
  if ((HEAP8[i1 + 53 | 0] | 0) == 0) {
   i9 = i1 + 40 | 0;
   i10 = i1 + 36 | 0;
   i12 = i5 + 1 | 0;
   i13 = i1 + 32 | 0;
   i14 = i8;
   while (1) {
    i15 = HEAP32[i9 >> 2] | 0;
    i16 = i15;
    i17 = HEAP32[i16 >> 2] | 0;
    i18 = HEAP32[i16 + 4 >> 2] | 0;
    i16 = HEAP32[i10 >> 2] | 0;
    i19 = i4 + i14 | 0;
    i20 = FUNCTION_TABLE_iiiiiiiii[HEAP32[(HEAP32[i16 >> 2] | 0) + 16 >> 2] & 15](i16, i15, i4, i19, i6, i5, i12, i7) | 0;
    if ((i20 | 0) == 2) {
     i11 = -1;
     i21 = 23;
     break;
    } else if ((i20 | 0) == 3) {
     i21 = 14;
     break;
    } else if ((i20 | 0) != 1) {
     i22 = i14;
     break L15;
    }
    i20 = HEAP32[i9 >> 2] | 0;
    HEAP32[i20 >> 2] = i17;
    HEAP32[i20 + 4 >> 2] = i18;
    if ((i14 | 0) == 8) {
     i11 = -1;
     i21 = 23;
     break;
    }
    i18 = _fgetc(HEAP32[i13 >> 2] | 0) | 0;
    if ((i18 | 0) == -1) {
     i11 = -1;
     i21 = 23;
     break;
    }
    HEAP8[i19] = i18;
    i14 = i14 + 1 | 0;
   }
   if ((i21 | 0) == 14) {
    HEAP8[i5] = HEAP8[i4] | 0;
    i22 = i14;
    break;
   } else if ((i21 | 0) == 23) {
    STACKTOP = i3;
    return i11 | 0;
   }
  } else {
   HEAP8[i5] = HEAP8[i4] | 0;
   i22 = i8;
  }
 } while (0);
 do {
  if (i2) {
   i8 = HEAP8[i5] | 0;
   HEAP32[i1 + 48 >> 2] = i8 & 255;
   i23 = i8;
  } else {
   i8 = i1 + 32 | 0;
   i7 = i22;
   while (1) {
    if ((i7 | 0) <= 0) {
     i21 = 21;
     break;
    }
    i6 = i7 + -1 | 0;
    if ((_ungetc(HEAPU8[i4 + i6 | 0] | 0, HEAP32[i8 >> 2] | 0) | 0) == -1) {
     i11 = -1;
     i21 = 23;
     break;
    } else {
     i7 = i6;
    }
   }
   if ((i21 | 0) == 21) {
    i23 = HEAP8[i5] | 0;
    break;
   } else if ((i21 | 0) == 23) {
    STACKTOP = i3;
    return i11 | 0;
   }
  }
 } while (0);
 i11 = i23 & 255;
 STACKTOP = i3;
 return i11 | 0;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0;
 i7 = STACKTOP;
 if ((i1 | 0) != (HEAP32[i2 + 8 >> 2] | 0)) {
  i8 = i2 + 52 | 0;
  i9 = HEAP8[i8] | 0;
  i10 = i2 + 53 | 0;
  i11 = HEAP8[i10] | 0;
  i12 = HEAP32[i1 + 12 >> 2] | 0;
  i13 = i1 + (i12 << 3) + 16 | 0;
  HEAP8[i8] = 0;
  HEAP8[i10] = 0;
  i14 = HEAP32[i1 + 20 >> 2] | 0;
  i15 = i14 >> 8;
  if ((i14 & 1 | 0) == 0) {
   i16 = i15;
  } else {
   i16 = HEAP32[(HEAP32[i4 >> 2] | 0) + i15 >> 2] | 0;
  }
  i15 = HEAP32[i1 + 16 >> 2] | 0;
  FUNCTION_TABLE_viiiiii[HEAP32[(HEAP32[i15 >> 2] | 0) + 20 >> 2] & 31](i15, i2, i3, i4 + i16 | 0, (i14 & 2 | 0) != 0 ? i5 : 2, i6);
  L6 : do {
   if ((i12 | 0) > 1) {
    i14 = i2 + 24 | 0;
    i16 = i1 + 8 | 0;
    i15 = i2 + 54 | 0;
    i17 = i1 + 24 | 0;
    do {
     if ((HEAP8[i15] | 0) != 0) {
      break L6;
     }
     if ((HEAP8[i8] | 0) == 0) {
      if ((HEAP8[i10] | 0) != 0) {
       if ((HEAP32[i16 >> 2] & 1 | 0) == 0) {
        break L6;
       }
      }
     } else {
      if ((HEAP32[i14 >> 2] | 0) == 1) {
       break L6;
      }
      if ((HEAP32[i16 >> 2] & 2 | 0) == 0) {
       break L6;
      }
     }
     HEAP8[i8] = 0;
     HEAP8[i10] = 0;
     i18 = HEAP32[i17 + 4 >> 2] | 0;
     i19 = i18 >> 8;
     if ((i18 & 1 | 0) == 0) {
      i20 = i19;
     } else {
      i20 = HEAP32[(HEAP32[i4 >> 2] | 0) + i19 >> 2] | 0;
     }
     i19 = HEAP32[i17 >> 2] | 0;
     FUNCTION_TABLE_viiiiii[HEAP32[(HEAP32[i19 >> 2] | 0) + 20 >> 2] & 31](i19, i2, i3, i4 + i20 | 0, (i18 & 2 | 0) != 0 ? i5 : 2, i6);
     i17 = i17 + 8 | 0;
    } while (i17 >>> 0 < i13 >>> 0);
   }
  } while (0);
  HEAP8[i8] = i9;
  HEAP8[i10] = i11;
  STACKTOP = i7;
  return;
 }
 HEAP8[i2 + 53 | 0] = 1;
 if ((HEAP32[i2 + 4 >> 2] | 0) != (i4 | 0)) {
  STACKTOP = i7;
  return;
 }
 HEAP8[i2 + 52 | 0] = 1;
 i4 = i2 + 16 | 0;
 i11 = HEAP32[i4 >> 2] | 0;
 if ((i11 | 0) == 0) {
  HEAP32[i4 >> 2] = i3;
  HEAP32[i2 + 24 >> 2] = i5;
  HEAP32[i2 + 36 >> 2] = 1;
  if (!((HEAP32[i2 + 48 >> 2] | 0) == 1 & (i5 | 0) == 1)) {
   STACKTOP = i7;
   return;
  }
  HEAP8[i2 + 54 | 0] = 1;
  STACKTOP = i7;
  return;
 }
 if ((i11 | 0) != (i3 | 0)) {
  i3 = i2 + 36 | 0;
  HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + 1;
  HEAP8[i2 + 54 | 0] = 1;
  STACKTOP = i7;
  return;
 }
 i3 = i2 + 24 | 0;
 i11 = HEAP32[i3 >> 2] | 0;
 if ((i11 | 0) == 2) {
  HEAP32[i3 >> 2] = i5;
  i21 = i5;
 } else {
  i21 = i11;
 }
 if (!((HEAP32[i2 + 48 >> 2] | 0) == 1 & (i21 | 0) == 1)) {
  STACKTOP = i7;
  return;
 }
 HEAP8[i2 + 54 | 0] = 1;
 STACKTOP = i7;
 return;
}
function __Z10FindCutOffv() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, d8 = 0.0, d9 = 0.0, i10 = 0, d11 = 0.0, i12 = 0, i13 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i2 = i1;
 HEAP32[10] = 512;
 i3 = __Znaj(4096) | 0;
 i4 = 0;
 while (1) {
  HEAP32[i3 + (i4 << 2) >> 2] = __Znaj(4096) | 0;
  i5 = i4 + 1 | 0;
  if ((i5 | 0) == 1024) {
   i6 = 0;
   break;
  } else {
   i4 = i5;
  }
 }
 do {
  i4 = HEAP32[i3 + (i6 << 2) >> 2] | 0;
  i5 = 0;
  do {
   HEAP32[i4 + (i5 << 2) >> 2] = (_rand() | 0) & 15;
   i5 = i5 + 1 | 0;
  } while ((i5 | 0) != 1024);
  i6 = i6 + 1 | 0;
 } while ((i6 | 0) != 1024);
 i6 = __Znaj(4096) | 0;
 i5 = 0;
 while (1) {
  HEAP32[i6 + (i5 << 2) >> 2] = __Znaj(4096) | 0;
  i4 = i5 + 1 | 0;
  if ((i4 | 0) == 1024) {
   i7 = 0;
   break;
  } else {
   i5 = i4;
  }
 }
 do {
  i5 = HEAP32[i6 + (i7 << 2) >> 2] | 0;
  i4 = 0;
  do {
   HEAP32[i5 + (i4 << 2) >> 2] = (_rand() | 0) & 15;
   i4 = i4 + 1 | 0;
  } while ((i4 | 0) != 1024);
  i7 = i7 + 1 | 0;
 } while ((i7 | 0) != 1024);
 if ((HEAP32[10] | 0) > 0) {
  i7 = 0;
  d8 = 1.0e8;
  while (1) {
   i4 = __Znaj(4096) | 0;
   i5 = 0;
   do {
    HEAP32[i4 + (i5 << 2) >> 2] = __Znaj(4096) | 0;
    i5 = i5 + 1 | 0;
   } while ((i5 | 0) != 1024);
   i5 = _clock() | 0;
   __Z8StrasseniPPiS0_S0_(1024, i3, i6, i4) | 0;
   d9 = +((_clock() | 0) - i5 | 0);
   i5 = 0;
   do {
    i10 = HEAP32[i4 + (i5 << 2) >> 2] | 0;
    if ((i10 | 0) != 0) {
     __ZdaPv(i10);
    }
    i5 = i5 + 1 | 0;
   } while ((i5 | 0) != 1024);
   d11 = d9 / 1.0e6;
   __ZdaPv(i4);
   if (!(d11 >= d8)) {
    i12 = i7;
   } else {
    i12 = i7 ^ 1;
   }
   HEAP32[i2 >> 2] = HEAP32[10];
   i5 = i2 + 4 | 0;
   HEAPF64[tempDoublePtr >> 3] = d11;
   HEAP32[i5 >> 2] = HEAP32[tempDoublePtr >> 2];
   HEAP32[i5 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
   i5 = i2 + 12 | 0;
   HEAPF64[tempDoublePtr >> 3] = d8;
   HEAP32[i5 >> 2] = HEAP32[tempDoublePtr >> 2];
   HEAP32[i5 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
   _printf(560, i2 | 0) | 0;
   i5 = HEAP32[10] | 0;
   i10 = i12 ? i5 << 1 : i5 >> 1;
   HEAP32[10] = i10;
   if ((i10 | 0) > 0) {
    i7 = i12;
    d8 = d11;
   } else {
    break;
   }
  }
 }
 if ((i3 | 0) != 0) {
  i12 = 0;
  do {
   i7 = HEAP32[i3 + (i12 << 2) >> 2] | 0;
   if ((i7 | 0) != 0) {
    __ZdaPv(i7);
   }
   i12 = i12 + 1 | 0;
  } while ((i12 | 0) != 1024);
  __ZdaPv(i3);
 }
 if ((i6 | 0) == 0) {
  __ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(1184, 56) | 0;
  STACKTOP = i1;
  return;
 } else {
  i13 = 0;
 }
 do {
  i3 = HEAP32[i6 + (i13 << 2) >> 2] | 0;
  if ((i3 | 0) != 0) {
   __ZdaPv(i3);
  }
  i13 = i13 + 1 | 0;
 } while ((i13 | 0) != 1024);
 __ZdaPv(i6);
 __ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(1184, 56) | 0;
 STACKTOP = i1;
 return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIcEE(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i1 = STACKTOP;
 i6 = HEAP32[i2 >> 2] | 0;
 do {
  if ((i6 | 0) == 0) {
   i7 = 0;
  } else {
   if ((HEAP32[i6 + 12 >> 2] | 0) == (HEAP32[i6 + 16 >> 2] | 0)) {
    if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i6 >> 2] | 0) + 36 >> 2] & 127](i6) | 0) == -1) {
     HEAP32[i2 >> 2] = 0;
     i7 = 0;
     break;
    } else {
     i7 = HEAP32[i2 >> 2] | 0;
     break;
    }
   } else {
    i7 = i6;
   }
  }
 } while (0);
 i6 = (i7 | 0) == 0;
 i7 = HEAP32[i3 >> 2] | 0;
 do {
  if ((i7 | 0) == 0) {
   i8 = 11;
  } else {
   if ((HEAP32[i7 + 12 >> 2] | 0) == (HEAP32[i7 + 16 >> 2] | 0)) {
    if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i7 >> 2] | 0) + 36 >> 2] & 127](i7) | 0) == -1) {
     HEAP32[i3 >> 2] = 0;
     i8 = 11;
     break;
    }
   }
   if (i6) {
    i9 = i7;
   } else {
    i8 = 12;
   }
  }
 } while (0);
 if ((i8 | 0) == 11) {
  if (i6) {
   i8 = 12;
  } else {
   i9 = 0;
  }
 }
 if ((i8 | 0) == 12) {
  HEAP32[i4 >> 2] = HEAP32[i4 >> 2] | 6;
  STACKTOP = i1;
  return;
 }
 i6 = HEAP32[i2 >> 2] | 0;
 i7 = HEAP32[i6 + 12 >> 2] | 0;
 if ((i7 | 0) == (HEAP32[i6 + 16 >> 2] | 0)) {
  i10 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i6 >> 2] | 0) + 36 >> 2] & 127](i6) | 0;
 } else {
  i10 = HEAPU8[i7] | 0;
 }
 if (!((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i5 >> 2] | 0) + 36 >> 2] & 31](i5, i10 & 255, 0) | 0) << 24 >> 24 == 37)) {
  HEAP32[i4 >> 2] = HEAP32[i4 >> 2] | 4;
  STACKTOP = i1;
  return;
 }
 i10 = HEAP32[i2 >> 2] | 0;
 i5 = i10 + 12 | 0;
 i7 = HEAP32[i5 >> 2] | 0;
 if ((i7 | 0) == (HEAP32[i10 + 16 >> 2] | 0)) {
  FUNCTION_TABLE_ii[HEAP32[(HEAP32[i10 >> 2] | 0) + 40 >> 2] & 127](i10) | 0;
 } else {
  HEAP32[i5 >> 2] = i7 + 1;
 }
 i7 = HEAP32[i2 >> 2] | 0;
 do {
  if ((i7 | 0) == 0) {
   i11 = 0;
  } else {
   if ((HEAP32[i7 + 12 >> 2] | 0) == (HEAP32[i7 + 16 >> 2] | 0)) {
    if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i7 >> 2] | 0) + 36 >> 2] & 127](i7) | 0) == -1) {
     HEAP32[i2 >> 2] = 0;
     i11 = 0;
     break;
    } else {
     i11 = HEAP32[i2 >> 2] | 0;
     break;
    }
   } else {
    i11 = i7;
   }
  }
 } while (0);
 i7 = (i11 | 0) == 0;
 do {
  if ((i9 | 0) == 0) {
   i8 = 31;
  } else {
   if ((HEAP32[i9 + 12 >> 2] | 0) == (HEAP32[i9 + 16 >> 2] | 0)) {
    if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i9 >> 2] | 0) + 36 >> 2] & 127](i9) | 0) == -1) {
     HEAP32[i3 >> 2] = 0;
     i8 = 31;
     break;
    }
   }
   if (i7) {
    STACKTOP = i1;
    return;
   }
  }
 } while (0);
 if ((i8 | 0) == 31) {
  if (!i7) {
   STACKTOP = i1;
   return;
  }
 }
 HEAP32[i4 >> 2] = HEAP32[i4 >> 2] | 2;
 STACKTOP = i1;
 return;
}
function __ZNSt3__110__stdinbufIwE9__getcharEb(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i4 = i3 + 16 | 0;
 i5 = i3;
 i6 = i3 + 4 | 0;
 i7 = i3 + 8 | 0;
 i8 = i1 + 52 | 0;
 if ((HEAP8[i8] | 0) != 0) {
  i9 = i1 + 48 | 0;
  i10 = HEAP32[i9 >> 2] | 0;
  if (!i2) {
   i11 = i10;
   STACKTOP = i3;
   return i11 | 0;
  }
  HEAP32[i9 >> 2] = -1;
  HEAP8[i8] = 0;
  i11 = i10;
  STACKTOP = i3;
  return i11 | 0;
 }
 i10 = HEAP32[i1 + 44 >> 2] | 0;
 i8 = (i10 | 0) > 1 ? i10 : 1;
 L8 : do {
  if ((i8 | 0) > 0) {
   i10 = i1 + 32 | 0;
   i9 = 0;
   while (1) {
    i12 = _fgetc(HEAP32[i10 >> 2] | 0) | 0;
    if ((i12 | 0) == -1) {
     i11 = -1;
     break;
    }
    HEAP8[i4 + i9 | 0] = i12;
    i9 = i9 + 1 | 0;
    if ((i9 | 0) >= (i8 | 0)) {
     break L8;
    }
   }
   STACKTOP = i3;
   return i11 | 0;
  }
 } while (0);
 L15 : do {
  if ((HEAP8[i1 + 53 | 0] | 0) == 0) {
   i9 = i1 + 40 | 0;
   i10 = i1 + 36 | 0;
   i12 = i5 + 4 | 0;
   i13 = i1 + 32 | 0;
   i14 = i8;
   while (1) {
    i15 = HEAP32[i9 >> 2] | 0;
    i16 = i15;
    i17 = HEAP32[i16 >> 2] | 0;
    i18 = HEAP32[i16 + 4 >> 2] | 0;
    i16 = HEAP32[i10 >> 2] | 0;
    i19 = i4 + i14 | 0;
    i20 = FUNCTION_TABLE_iiiiiiiii[HEAP32[(HEAP32[i16 >> 2] | 0) + 16 >> 2] & 15](i16, i15, i4, i19, i6, i5, i12, i7) | 0;
    if ((i20 | 0) == 2) {
     i11 = -1;
     i21 = 22;
     break;
    } else if ((i20 | 0) == 3) {
     i21 = 14;
     break;
    } else if ((i20 | 0) != 1) {
     i22 = i14;
     break L15;
    }
    i20 = HEAP32[i9 >> 2] | 0;
    HEAP32[i20 >> 2] = i17;
    HEAP32[i20 + 4 >> 2] = i18;
    if ((i14 | 0) == 8) {
     i11 = -1;
     i21 = 22;
     break;
    }
    i18 = _fgetc(HEAP32[i13 >> 2] | 0) | 0;
    if ((i18 | 0) == -1) {
     i11 = -1;
     i21 = 22;
     break;
    }
    HEAP8[i19] = i18;
    i14 = i14 + 1 | 0;
   }
   if ((i21 | 0) == 14) {
    HEAP32[i5 >> 2] = HEAP8[i4] | 0;
    i22 = i14;
    break;
   } else if ((i21 | 0) == 22) {
    STACKTOP = i3;
    return i11 | 0;
   }
  } else {
   HEAP32[i5 >> 2] = HEAP8[i4] | 0;
   i22 = i8;
  }
 } while (0);
 if (i2) {
  i2 = HEAP32[i5 >> 2] | 0;
  HEAP32[i1 + 48 >> 2] = i2;
  i11 = i2;
  STACKTOP = i3;
  return i11 | 0;
 }
 i2 = i1 + 32 | 0;
 i1 = i22;
 while (1) {
  if ((i1 | 0) <= 0) {
   break;
  }
  i22 = i1 + -1 | 0;
  if ((_ungetc(HEAP8[i4 + i22 | 0] | 0, HEAP32[i2 >> 2] | 0) | 0) == -1) {
   i11 = -1;
   i21 = 22;
   break;
  } else {
   i1 = i22;
  }
 }
 if ((i21 | 0) == 22) {
  STACKTOP = i3;
  return i11 | 0;
 }
 i11 = HEAP32[i5 >> 2] | 0;
 STACKTOP = i3;
 return i11 | 0;
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwm(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 i7 = i2;
 i8 = i2 + 116 | 0;
 i9 = i2 + 104 | 0;
 i10 = i2 + 8 | 0;
 i11 = i2 + 92 | 0;
 i12 = i2 + 96 | 0;
 i13 = i2 + 4 | 0;
 i14 = i2 + 100 | 0;
 HEAP8[i8 + 0 | 0] = HEAP8[4624 | 0] | 0;
 HEAP8[i8 + 1 | 0] = HEAP8[4625 | 0] | 0;
 HEAP8[i8 + 2 | 0] = HEAP8[4626 | 0] | 0;
 HEAP8[i8 + 3 | 0] = HEAP8[4627 | 0] | 0;
 HEAP8[i8 + 4 | 0] = HEAP8[4628 | 0] | 0;
 HEAP8[i8 + 5 | 0] = HEAP8[4629 | 0] | 0;
 i15 = i8 + 1 | 0;
 i16 = i4 + 4 | 0;
 i17 = HEAP32[i16 >> 2] | 0;
 if ((i17 & 2048 | 0) == 0) {
  i18 = i15;
 } else {
  HEAP8[i15] = 43;
  i18 = i8 + 2 | 0;
 }
 if ((i17 & 512 | 0) == 0) {
  i19 = i18;
 } else {
  HEAP8[i18] = 35;
  i19 = i18 + 1 | 0;
 }
 HEAP8[i19] = 108;
 i18 = i19 + 1 | 0;
 i19 = i17 & 74;
 do {
  if ((i19 | 0) == 64) {
   HEAP8[i18] = 111;
  } else if ((i19 | 0) == 8) {
   if ((i17 & 16384 | 0) == 0) {
    HEAP8[i18] = 120;
    break;
   } else {
    HEAP8[i18] = 88;
    break;
   }
  } else {
   HEAP8[i18] = 117;
  }
 } while (0);
 if ((HEAP8[5728] | 0) == 0) {
  if ((___cxa_guard_acquire(5728) | 0) != 0) {
   HEAP32[1430] = _newlocale(2147483647, 5736, 0) | 0;
   ___cxa_guard_release(5728);
  }
 }
 i18 = HEAP32[1430] | 0;
 HEAP32[i7 >> 2] = i6;
 i6 = __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz(i9, 12, i18, i8, i7) | 0;
 i8 = i9 + i6 | 0;
 i18 = HEAP32[i16 >> 2] & 176;
 do {
  if ((i18 | 0) == 32) {
   i20 = i8;
  } else if ((i18 | 0) == 16) {
   i16 = HEAP8[i9] | 0;
   if (i16 << 24 >> 24 == 43 | i16 << 24 >> 24 == 45) {
    i20 = i9 + 1 | 0;
    break;
   }
   if ((i6 | 0) > 1 & i16 << 24 >> 24 == 48) {
    i16 = HEAP8[i9 + 1 | 0] | 0;
    if (i16 << 24 >> 24 == 88 | i16 << 24 >> 24 == 120) {
     i20 = i9 + 2 | 0;
    } else {
     i21 = 20;
    }
   } else {
    i21 = 20;
   }
  } else {
   i21 = 20;
  }
 } while (0);
 if ((i21 | 0) == 20) {
  i20 = i9;
 }
 __ZNKSt3__18ios_base6getlocEv(i13, i4);
 __ZNSt3__19__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE(i9, i20, i8, i10, i11, i12, i13);
 __ZNSt3__114__shared_count16__release_sharedEv(HEAP32[i13 >> 2] | 0) | 0;
 HEAP32[i14 >> 2] = HEAP32[i3 >> 2];
 i3 = HEAP32[i11 >> 2] | 0;
 i11 = HEAP32[i12 >> 2] | 0;
 HEAP32[i7 + 0 >> 2] = HEAP32[i14 + 0 >> 2];
 __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(i1, i7, i10, i3, i11, i4, i5);
 STACKTOP = i2;
 return;
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwl(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 i7 = i2;
 i8 = i2 + 116 | 0;
 i9 = i2 + 104 | 0;
 i10 = i2 + 8 | 0;
 i11 = i2 + 92 | 0;
 i12 = i2 + 96 | 0;
 i13 = i2 + 4 | 0;
 i14 = i2 + 100 | 0;
 HEAP8[i8 + 0 | 0] = HEAP8[4624 | 0] | 0;
 HEAP8[i8 + 1 | 0] = HEAP8[4625 | 0] | 0;
 HEAP8[i8 + 2 | 0] = HEAP8[4626 | 0] | 0;
 HEAP8[i8 + 3 | 0] = HEAP8[4627 | 0] | 0;
 HEAP8[i8 + 4 | 0] = HEAP8[4628 | 0] | 0;
 HEAP8[i8 + 5 | 0] = HEAP8[4629 | 0] | 0;
 i15 = i8 + 1 | 0;
 i16 = i4 + 4 | 0;
 i17 = HEAP32[i16 >> 2] | 0;
 if ((i17 & 2048 | 0) == 0) {
  i18 = i15;
 } else {
  HEAP8[i15] = 43;
  i18 = i8 + 2 | 0;
 }
 if ((i17 & 512 | 0) == 0) {
  i19 = i18;
 } else {
  HEAP8[i18] = 35;
  i19 = i18 + 1 | 0;
 }
 HEAP8[i19] = 108;
 i18 = i19 + 1 | 0;
 i19 = i17 & 74;
 do {
  if ((i19 | 0) == 8) {
   if ((i17 & 16384 | 0) == 0) {
    HEAP8[i18] = 120;
    break;
   } else {
    HEAP8[i18] = 88;
    break;
   }
  } else if ((i19 | 0) == 64) {
   HEAP8[i18] = 111;
  } else {
   HEAP8[i18] = 100;
  }
 } while (0);
 if ((HEAP8[5728] | 0) == 0) {
  if ((___cxa_guard_acquire(5728) | 0) != 0) {
   HEAP32[1430] = _newlocale(2147483647, 5736, 0) | 0;
   ___cxa_guard_release(5728);
  }
 }
 i18 = HEAP32[1430] | 0;
 HEAP32[i7 >> 2] = i6;
 i6 = __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz(i9, 12, i18, i8, i7) | 0;
 i8 = i9 + i6 | 0;
 i18 = HEAP32[i16 >> 2] & 176;
 do {
  if ((i18 | 0) == 16) {
   i16 = HEAP8[i9] | 0;
   if (i16 << 24 >> 24 == 43 | i16 << 24 >> 24 == 45) {
    i20 = i9 + 1 | 0;
    break;
   }
   if ((i6 | 0) > 1 & i16 << 24 >> 24 == 48) {
    i16 = HEAP8[i9 + 1 | 0] | 0;
    if (i16 << 24 >> 24 == 88 | i16 << 24 >> 24 == 120) {
     i20 = i9 + 2 | 0;
    } else {
     i21 = 20;
    }
   } else {
    i21 = 20;
   }
  } else if ((i18 | 0) == 32) {
   i20 = i8;
  } else {
   i21 = 20;
  }
 } while (0);
 if ((i21 | 0) == 20) {
  i20 = i9;
 }
 __ZNKSt3__18ios_base6getlocEv(i13, i4);
 __ZNSt3__19__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE(i9, i20, i8, i10, i11, i12, i13);
 __ZNSt3__114__shared_count16__release_sharedEv(HEAP32[i13 >> 2] | 0) | 0;
 HEAP32[i14 >> 2] = HEAP32[i3 >> 2];
 i3 = HEAP32[i11 >> 2] | 0;
 i11 = HEAP32[i12 >> 2] | 0;
 HEAP32[i7 + 0 >> 2] = HEAP32[i14 + 0 >> 2];
 __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(i1, i7, i10, i3, i11, i4, i5);
 STACKTOP = i2;
 return;
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcm(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 i7 = i2;
 i8 = i2 + 56 | 0;
 i9 = i2 + 44 | 0;
 i10 = i2 + 20 | 0;
 i11 = i2 + 12 | 0;
 i12 = i2 + 8 | 0;
 i13 = i2 + 4 | 0;
 i14 = i2 + 16 | 0;
 HEAP8[i8 + 0 | 0] = HEAP8[4624 | 0] | 0;
 HEAP8[i8 + 1 | 0] = HEAP8[4625 | 0] | 0;
 HEAP8[i8 + 2 | 0] = HEAP8[4626 | 0] | 0;
 HEAP8[i8 + 3 | 0] = HEAP8[4627 | 0] | 0;
 HEAP8[i8 + 4 | 0] = HEAP8[4628 | 0] | 0;
 HEAP8[i8 + 5 | 0] = HEAP8[4629 | 0] | 0;
 i15 = i8 + 1 | 0;
 i16 = i4 + 4 | 0;
 i17 = HEAP32[i16 >> 2] | 0;
 if ((i17 & 2048 | 0) == 0) {
  i18 = i15;
 } else {
  HEAP8[i15] = 43;
  i18 = i8 + 2 | 0;
 }
 if ((i17 & 512 | 0) == 0) {
  i19 = i18;
 } else {
  HEAP8[i18] = 35;
  i19 = i18 + 1 | 0;
 }
 HEAP8[i19] = 108;
 i18 = i19 + 1 | 0;
 i19 = i17 & 74;
 do {
  if ((i19 | 0) == 64) {
   HEAP8[i18] = 111;
  } else if ((i19 | 0) == 8) {
   if ((i17 & 16384 | 0) == 0) {
    HEAP8[i18] = 120;
    break;
   } else {
    HEAP8[i18] = 88;
    break;
   }
  } else {
   HEAP8[i18] = 117;
  }
 } while (0);
 if ((HEAP8[5728] | 0) == 0) {
  if ((___cxa_guard_acquire(5728) | 0) != 0) {
   HEAP32[1430] = _newlocale(2147483647, 5736, 0) | 0;
   ___cxa_guard_release(5728);
  }
 }
 i18 = HEAP32[1430] | 0;
 HEAP32[i7 >> 2] = i6;
 i6 = __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz(i9, 12, i18, i8, i7) | 0;
 i8 = i9 + i6 | 0;
 i18 = HEAP32[i16 >> 2] & 176;
 do {
  if ((i18 | 0) == 16) {
   i16 = HEAP8[i9] | 0;
   if (i16 << 24 >> 24 == 43 | i16 << 24 >> 24 == 45) {
    i20 = i9 + 1 | 0;
    break;
   }
   if ((i6 | 0) > 1 & i16 << 24 >> 24 == 48) {
    i16 = HEAP8[i9 + 1 | 0] | 0;
    if (i16 << 24 >> 24 == 88 | i16 << 24 >> 24 == 120) {
     i20 = i9 + 2 | 0;
    } else {
     i21 = 20;
    }
   } else {
    i21 = 20;
   }
  } else if ((i18 | 0) == 32) {
   i20 = i8;
  } else {
   i21 = 20;
  }
 } while (0);
 if ((i21 | 0) == 20) {
  i20 = i9;
 }
 __ZNKSt3__18ios_base6getlocEv(i13, i4);
 __ZNSt3__19__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE(i9, i20, i8, i10, i11, i12, i13);
 __ZNSt3__114__shared_count16__release_sharedEv(HEAP32[i13 >> 2] | 0) | 0;
 HEAP32[i14 >> 2] = HEAP32[i3 >> 2];
 i3 = HEAP32[i11 >> 2] | 0;
 i11 = HEAP32[i12 >> 2] | 0;
 HEAP32[i7 + 0 >> 2] = HEAP32[i14 + 0 >> 2];
 __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(i1, i7, i10, i3, i11, i4, i5);
 STACKTOP = i2;
 return;
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcl(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 i7 = i2;
 i8 = i2 + 56 | 0;
 i9 = i2 + 44 | 0;
 i10 = i2 + 20 | 0;
 i11 = i2 + 12 | 0;
 i12 = i2 + 8 | 0;
 i13 = i2 + 4 | 0;
 i14 = i2 + 16 | 0;
 HEAP8[i8 + 0 | 0] = HEAP8[4624 | 0] | 0;
 HEAP8[i8 + 1 | 0] = HEAP8[4625 | 0] | 0;
 HEAP8[i8 + 2 | 0] = HEAP8[4626 | 0] | 0;
 HEAP8[i8 + 3 | 0] = HEAP8[4627 | 0] | 0;
 HEAP8[i8 + 4 | 0] = HEAP8[4628 | 0] | 0;
 HEAP8[i8 + 5 | 0] = HEAP8[4629 | 0] | 0;
 i15 = i8 + 1 | 0;
 i16 = i4 + 4 | 0;
 i17 = HEAP32[i16 >> 2] | 0;
 if ((i17 & 2048 | 0) == 0) {
  i18 = i15;
 } else {
  HEAP8[i15] = 43;
  i18 = i8 + 2 | 0;
 }
 if ((i17 & 512 | 0) == 0) {
  i19 = i18;
 } else {
  HEAP8[i18] = 35;
  i19 = i18 + 1 | 0;
 }
 HEAP8[i19] = 108;
 i18 = i19 + 1 | 0;
 i19 = i17 & 74;
 do {
  if ((i19 | 0) == 64) {
   HEAP8[i18] = 111;
  } else if ((i19 | 0) == 8) {
   if ((i17 & 16384 | 0) == 0) {
    HEAP8[i18] = 120;
    break;
   } else {
    HEAP8[i18] = 88;
    break;
   }
  } else {
   HEAP8[i18] = 100;
  }
 } while (0);
 if ((HEAP8[5728] | 0) == 0) {
  if ((___cxa_guard_acquire(5728) | 0) != 0) {
   HEAP32[1430] = _newlocale(2147483647, 5736, 0) | 0;
   ___cxa_guard_release(5728);
  }
 }
 i18 = HEAP32[1430] | 0;
 HEAP32[i7 >> 2] = i6;
 i6 = __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz(i9, 12, i18, i8, i7) | 0;
 i8 = i9 + i6 | 0;
 i18 = HEAP32[i16 >> 2] & 176;
 do {
  if ((i18 | 0) == 16) {
   i16 = HEAP8[i9] | 0;
   if (i16 << 24 >> 24 == 43 | i16 << 24 >> 24 == 45) {
    i20 = i9 + 1 | 0;
    break;
   }
   if ((i6 | 0) > 1 & i16 << 24 >> 24 == 48) {
    i16 = HEAP8[i9 + 1 | 0] | 0;
    if (i16 << 24 >> 24 == 88 | i16 << 24 >> 24 == 120) {
     i20 = i9 + 2 | 0;
    } else {
     i21 = 20;
    }
   } else {
    i21 = 20;
   }
  } else if ((i18 | 0) == 32) {
   i20 = i8;
  } else {
   i21 = 20;
  }
 } while (0);
 if ((i21 | 0) == 20) {
  i20 = i9;
 }
 __ZNKSt3__18ios_base6getlocEv(i13, i4);
 __ZNSt3__19__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE(i9, i20, i8, i10, i11, i12, i13);
 __ZNSt3__114__shared_count16__release_sharedEv(HEAP32[i13 >> 2] | 0) | 0;
 HEAP32[i14 >> 2] = HEAP32[i3 >> 2];
 i3 = HEAP32[i11 >> 2] | 0;
 i11 = HEAP32[i12 >> 2] | 0;
 HEAP32[i7 + 0 >> 2] = HEAP32[i14 + 0 >> 2];
 __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(i1, i7, i10, i3, i11, i4, i5);
 STACKTOP = i2;
 return;
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwb(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i8 = i7;
 i9 = i7 + 28 | 0;
 i10 = i7 + 12 | 0;
 i11 = i7 + 16 | 0;
 if ((HEAP32[i4 + 4 >> 2] & 1 | 0) == 0) {
  i12 = HEAP32[(HEAP32[i2 >> 2] | 0) + 24 >> 2] | 0;
  HEAP32[i9 >> 2] = HEAP32[i3 >> 2];
  i13 = i6 & 1;
  HEAP32[i8 + 0 >> 2] = HEAP32[i9 + 0 >> 2];
  FUNCTION_TABLE_viiiiii[i12 & 31](i1, i2, i8, i4, i5, i13);
  STACKTOP = i7;
  return;
 }
 __ZNKSt3__18ios_base6getlocEv(i10, i4);
 i4 = HEAP32[i10 >> 2] | 0;
 if (!((HEAP32[1496] | 0) == -1)) {
  HEAP32[i8 >> 2] = 5984;
  HEAP32[i8 + 4 >> 2] = 118;
  HEAP32[i8 + 8 >> 2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(5984, i8, 119);
 }
 i8 = (HEAP32[5988 >> 2] | 0) + -1 | 0;
 i13 = HEAP32[i4 + 8 >> 2] | 0;
 if (!((HEAP32[i4 + 12 >> 2] | 0) - i13 >> 2 >>> 0 > i8 >>> 0)) {
  i14 = ___cxa_allocate_exception(4) | 0;
  __ZNSt8bad_castC2Ev(i14);
  ___cxa_throw(i14 | 0, 13792, 107);
 }
 i4 = HEAP32[i13 + (i8 << 2) >> 2] | 0;
 if ((i4 | 0) == 0) {
  i14 = ___cxa_allocate_exception(4) | 0;
  __ZNSt8bad_castC2Ev(i14);
  ___cxa_throw(i14 | 0, 13792, 107);
 }
 __ZNSt3__114__shared_count16__release_sharedEv(HEAP32[i10 >> 2] | 0) | 0;
 i10 = HEAP32[i4 >> 2] | 0;
 if (i6) {
  FUNCTION_TABLE_vii[HEAP32[i10 + 24 >> 2] & 63](i11, i4);
 } else {
  FUNCTION_TABLE_vii[HEAP32[i10 + 28 >> 2] & 63](i11, i4);
 }
 i4 = HEAP8[i11] | 0;
 if ((i4 & 1) == 0) {
  i10 = i11 + 4 | 0;
  i15 = i10;
  i16 = i11 + 8 | 0;
  i17 = i10;
 } else {
  i10 = i11 + 8 | 0;
  i15 = HEAP32[i10 >> 2] | 0;
  i16 = i10;
  i17 = i11 + 4 | 0;
 }
 i10 = i4;
 i4 = i15;
 while (1) {
  if ((i10 & 1) == 0) {
   i18 = i17;
   i19 = (i10 & 255) >>> 1;
  } else {
   i18 = HEAP32[i16 >> 2] | 0;
   i19 = HEAP32[i17 >> 2] | 0;
  }
  if ((i4 | 0) == (i18 + (i19 << 2) | 0)) {
   break;
  }
  i15 = HEAP32[i4 >> 2] | 0;
  i6 = HEAP32[i3 >> 2] | 0;
  if ((i6 | 0) != 0) {
   i14 = i6 + 24 | 0;
   i8 = HEAP32[i14 >> 2] | 0;
   if ((i8 | 0) == (HEAP32[i6 + 28 >> 2] | 0)) {
    i20 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i6 >> 2] | 0) + 52 >> 2] & 31](i6, i15) | 0;
   } else {
    HEAP32[i14 >> 2] = i8 + 4;
    HEAP32[i8 >> 2] = i15;
    i20 = i15;
   }
   if ((i20 | 0) == -1) {
    HEAP32[i3 >> 2] = 0;
   }
  }
  i10 = HEAP8[i11] | 0;
  i4 = i4 + 4 | 0;
 }
 HEAP32[i1 >> 2] = HEAP32[i3 >> 2];
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(i11);
 STACKTOP = i7;
 return;
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcb(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i8 = i7;
 i9 = i7 + 28 | 0;
 i10 = i7 + 12 | 0;
 i11 = i7 + 16 | 0;
 if ((HEAP32[i4 + 4 >> 2] & 1 | 0) == 0) {
  i12 = HEAP32[(HEAP32[i2 >> 2] | 0) + 24 >> 2] | 0;
  HEAP32[i9 >> 2] = HEAP32[i3 >> 2];
  i13 = i6 & 1;
  HEAP32[i8 + 0 >> 2] = HEAP32[i9 + 0 >> 2];
  FUNCTION_TABLE_viiiiii[i12 & 31](i1, i2, i8, i4, i5, i13);
  STACKTOP = i7;
  return;
 }
 __ZNKSt3__18ios_base6getlocEv(i10, i4);
 i4 = HEAP32[i10 >> 2] | 0;
 if (!((HEAP32[1494] | 0) == -1)) {
  HEAP32[i8 >> 2] = 5976;
  HEAP32[i8 + 4 >> 2] = 118;
  HEAP32[i8 + 8 >> 2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(5976, i8, 119);
 }
 i8 = (HEAP32[5980 >> 2] | 0) + -1 | 0;
 i13 = HEAP32[i4 + 8 >> 2] | 0;
 if (!((HEAP32[i4 + 12 >> 2] | 0) - i13 >> 2 >>> 0 > i8 >>> 0)) {
  i14 = ___cxa_allocate_exception(4) | 0;
  __ZNSt8bad_castC2Ev(i14);
  ___cxa_throw(i14 | 0, 13792, 107);
 }
 i4 = HEAP32[i13 + (i8 << 2) >> 2] | 0;
 if ((i4 | 0) == 0) {
  i14 = ___cxa_allocate_exception(4) | 0;
  __ZNSt8bad_castC2Ev(i14);
  ___cxa_throw(i14 | 0, 13792, 107);
 }
 __ZNSt3__114__shared_count16__release_sharedEv(HEAP32[i10 >> 2] | 0) | 0;
 i10 = HEAP32[i4 >> 2] | 0;
 if (i6) {
  FUNCTION_TABLE_vii[HEAP32[i10 + 24 >> 2] & 63](i11, i4);
 } else {
  FUNCTION_TABLE_vii[HEAP32[i10 + 28 >> 2] & 63](i11, i4);
 }
 i4 = HEAP8[i11] | 0;
 if ((i4 & 1) == 0) {
  i10 = i11 + 1 | 0;
  i15 = i10;
  i16 = i10;
  i17 = i11 + 8 | 0;
 } else {
  i10 = i11 + 8 | 0;
  i15 = HEAP32[i10 >> 2] | 0;
  i16 = i11 + 1 | 0;
  i17 = i10;
 }
 i10 = i11 + 4 | 0;
 i6 = i4;
 i4 = i15;
 while (1) {
  if ((i6 & 1) == 0) {
   i18 = i16;
   i19 = (i6 & 255) >>> 1;
  } else {
   i18 = HEAP32[i17 >> 2] | 0;
   i19 = HEAP32[i10 >> 2] | 0;
  }
  if ((i4 | 0) == (i18 + i19 | 0)) {
   break;
  }
  i15 = HEAP8[i4] | 0;
  i14 = HEAP32[i3 >> 2] | 0;
  do {
   if ((i14 | 0) != 0) {
    i8 = i14 + 24 | 0;
    i13 = HEAP32[i8 >> 2] | 0;
    if ((i13 | 0) != (HEAP32[i14 + 28 >> 2] | 0)) {
     HEAP32[i8 >> 2] = i13 + 1;
     HEAP8[i13] = i15;
     break;
    }
    if ((FUNCTION_TABLE_iii[HEAP32[(HEAP32[i14 >> 2] | 0) + 52 >> 2] & 31](i14, i15 & 255) | 0) == -1) {
     HEAP32[i3 >> 2] = 0;
    }
   }
  } while (0);
  i6 = HEAP8[i11] | 0;
  i4 = i4 + 1 | 0;
 }
 HEAP32[i1 >> 2] = HEAP32[i3 >> 2];
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i11);
 STACKTOP = i7;
 return;
}
function __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEE6sentryC2ERS3_b(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i4;
 HEAP8[i1] = 0;
 i6 = HEAP32[(HEAP32[i2 >> 2] | 0) + -12 >> 2] | 0;
 i7 = HEAP32[i2 + (i6 + 16) >> 2] | 0;
 if ((i7 | 0) != 0) {
  __ZNSt3__18ios_base5clearEj(i2 + i6 | 0, i7 | 4);
  STACKTOP = i4;
  return;
 }
 i7 = HEAP32[i2 + (i6 + 72) >> 2] | 0;
 if ((i7 | 0) != 0) {
  __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv(i7) | 0;
 }
 do {
  if (!i3) {
   i7 = HEAP32[(HEAP32[i2 >> 2] | 0) + -12 >> 2] | 0;
   if ((HEAP32[i2 + (i7 + 4) >> 2] & 4096 | 0) != 0) {
    __ZNSt3__16localeC2ERKS0_(i5, i2 + (i7 + 28) | 0);
    i7 = __ZNKSt3__16locale9use_facetERNS0_2idE(i5, 5832) | 0;
    __ZNSt3__16localeD2Ev(i5);
    i6 = i7 + 8 | 0;
    i7 = HEAP32[i2 + ((HEAP32[(HEAP32[i2 >> 2] | 0) + -12 >> 2] | 0) + 24) >> 2] | 0;
    while (1) {
     if ((i7 | 0) == 0) {
      break;
     }
     if ((HEAP32[i7 + 12 >> 2] | 0) == (HEAP32[i7 + 16 >> 2] | 0)) {
      i8 = (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i7 >> 2] | 0) + 36 >> 2] & 127](i7) | 0) == -1;
      i9 = i8 ? 0 : i7;
      if ((i9 | 0) == 0) {
       break;
      } else {
       i10 = i9;
      }
     } else {
      i10 = i7;
     }
     i9 = i10 + 12 | 0;
     i8 = HEAP32[i9 >> 2] | 0;
     i11 = i10 + 16 | 0;
     if ((i8 | 0) == (HEAP32[i11 >> 2] | 0)) {
      i12 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i10 >> 2] | 0) + 36 >> 2] & 127](i10) | 0;
     } else {
      i12 = HEAPU8[i8] | 0;
     }
     if (!((i12 & 255) << 24 >> 24 > -1)) {
      i13 = 18;
      break;
     }
     if ((HEAP16[(HEAP32[i6 >> 2] | 0) + (i12 << 24 >> 24 << 1) >> 1] & 8192) == 0) {
      i13 = 18;
      break;
     }
     i8 = HEAP32[i9 >> 2] | 0;
     if ((i8 | 0) == (HEAP32[i11 >> 2] | 0)) {
      FUNCTION_TABLE_ii[HEAP32[(HEAP32[i10 >> 2] | 0) + 40 >> 2] & 127](i10) | 0;
      i7 = i10;
      continue;
     } else {
      HEAP32[i9 >> 2] = i8 + 1;
      i7 = i10;
      continue;
     }
    }
    if ((i13 | 0) == 18) {
     if ((i10 | 0) != 0) {
      if ((HEAP32[i10 + 12 >> 2] | 0) != (HEAP32[i10 + 16 >> 2] | 0)) {
       break;
      }
      if (!((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i10 >> 2] | 0) + 36 >> 2] & 127](i10) | 0) == -1 | (i10 | 0) == 0)) {
       break;
      }
     }
    }
    i7 = HEAP32[(HEAP32[i2 >> 2] | 0) + -12 >> 2] | 0;
    __ZNSt3__18ios_base5clearEj(i2 + i7 | 0, HEAP32[i2 + (i7 + 16) >> 2] | 6);
   }
  }
 } while (0);
 HEAP8[i1] = (HEAP32[i2 + ((HEAP32[(HEAP32[i2 >> 2] | 0) + -12 >> 2] | 0) + 16) >> 2] | 0) == 0 | 0;
 STACKTOP = i4;
 return;
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwy(i1, i2, i3, i4, i5, i6, i7) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 var i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 i8 = i2 + 8 | 0;
 i9 = i2;
 i10 = i2 + 204 | 0;
 i11 = i2 + 16 | 0;
 i12 = i2 + 188 | 0;
 i13 = i2 + 192 | 0;
 i14 = i2 + 196 | 0;
 i15 = i2 + 200 | 0;
 i16 = i9;
 HEAP32[i16 >> 2] = 37;
 HEAP32[i16 + 4 >> 2] = 0;
 i16 = i9 + 1 | 0;
 i17 = i4 + 4 | 0;
 i18 = HEAP32[i17 >> 2] | 0;
 if ((i18 & 2048 | 0) == 0) {
  i19 = i16;
 } else {
  HEAP8[i16] = 43;
  i19 = i9 + 2 | 0;
 }
 if ((i18 & 512 | 0) == 0) {
  i20 = i19;
 } else {
  HEAP8[i19] = 35;
  i20 = i19 + 1 | 0;
 }
 i19 = i20 + 2 | 0;
 HEAP8[i20] = 108;
 HEAP8[i20 + 1 | 0] = 108;
 i20 = i18 & 74;
 do {
  if ((i20 | 0) == 8) {
   if ((i18 & 16384 | 0) == 0) {
    HEAP8[i19] = 120;
    break;
   } else {
    HEAP8[i19] = 88;
    break;
   }
  } else if ((i20 | 0) == 64) {
   HEAP8[i19] = 111;
  } else {
   HEAP8[i19] = 117;
  }
 } while (0);
 if ((HEAP8[5728] | 0) == 0) {
  if ((___cxa_guard_acquire(5728) | 0) != 0) {
   HEAP32[1430] = _newlocale(2147483647, 5736, 0) | 0;
   ___cxa_guard_release(5728);
  }
 }
 i19 = HEAP32[1430] | 0;
 i20 = i8;
 HEAP32[i20 >> 2] = i6;
 HEAP32[i20 + 4 >> 2] = i7;
 i7 = __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz(i10, 23, i19, i9, i8) | 0;
 i9 = i10 + i7 | 0;
 i19 = HEAP32[i17 >> 2] & 176;
 do {
  if ((i19 | 0) == 16) {
   i17 = HEAP8[i10] | 0;
   if (i17 << 24 >> 24 == 43 | i17 << 24 >> 24 == 45) {
    i21 = i10 + 1 | 0;
    break;
   }
   if ((i7 | 0) > 1 & i17 << 24 >> 24 == 48) {
    i17 = HEAP8[i10 + 1 | 0] | 0;
    if (i17 << 24 >> 24 == 88 | i17 << 24 >> 24 == 120) {
     i21 = i10 + 2 | 0;
    } else {
     i22 = 20;
    }
   } else {
    i22 = 20;
   }
  } else if ((i19 | 0) == 32) {
   i21 = i9;
  } else {
   i22 = 20;
  }
 } while (0);
 if ((i22 | 0) == 20) {
  i21 = i10;
 }
 __ZNKSt3__18ios_base6getlocEv(i14, i4);
 __ZNSt3__19__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE(i10, i21, i9, i11, i12, i13, i14);
 __ZNSt3__114__shared_count16__release_sharedEv(HEAP32[i14 >> 2] | 0) | 0;
 HEAP32[i15 >> 2] = HEAP32[i3 >> 2];
 i3 = HEAP32[i12 >> 2] | 0;
 i12 = HEAP32[i13 >> 2] | 0;
 HEAP32[i8 + 0 >> 2] = HEAP32[i15 + 0 >> 2];
 __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(i1, i8, i11, i3, i12, i4, i5);
 STACKTOP = i2;
 return;
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwx(i1, i2, i3, i4, i5, i6, i7) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 var i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 224 | 0;
 i8 = i2 + 8 | 0;
 i9 = i2;
 i10 = i2 + 196 | 0;
 i11 = i2 + 16 | 0;
 i12 = i2 + 180 | 0;
 i13 = i2 + 184 | 0;
 i14 = i2 + 188 | 0;
 i15 = i2 + 192 | 0;
 i16 = i9;
 HEAP32[i16 >> 2] = 37;
 HEAP32[i16 + 4 >> 2] = 0;
 i16 = i9 + 1 | 0;
 i17 = i4 + 4 | 0;
 i18 = HEAP32[i17 >> 2] | 0;
 if ((i18 & 2048 | 0) == 0) {
  i19 = i16;
 } else {
  HEAP8[i16] = 43;
  i19 = i9 + 2 | 0;
 }
 if ((i18 & 512 | 0) == 0) {
  i20 = i19;
 } else {
  HEAP8[i19] = 35;
  i20 = i19 + 1 | 0;
 }
 i19 = i20 + 2 | 0;
 HEAP8[i20] = 108;
 HEAP8[i20 + 1 | 0] = 108;
 i20 = i18 & 74;
 do {
  if ((i20 | 0) == 64) {
   HEAP8[i19] = 111;
  } else if ((i20 | 0) == 8) {
   if ((i18 & 16384 | 0) == 0) {
    HEAP8[i19] = 120;
    break;
   } else {
    HEAP8[i19] = 88;
    break;
   }
  } else {
   HEAP8[i19] = 100;
  }
 } while (0);
 if ((HEAP8[5728] | 0) == 0) {
  if ((___cxa_guard_acquire(5728) | 0) != 0) {
   HEAP32[1430] = _newlocale(2147483647, 5736, 0) | 0;
   ___cxa_guard_release(5728);
  }
 }
 i19 = HEAP32[1430] | 0;
 i18 = i8;
 HEAP32[i18 >> 2] = i6;
 HEAP32[i18 + 4 >> 2] = i7;
 i7 = __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz(i10, 22, i19, i9, i8) | 0;
 i9 = i10 + i7 | 0;
 i19 = HEAP32[i17 >> 2] & 176;
 do {
  if ((i19 | 0) == 32) {
   i21 = i9;
  } else if ((i19 | 0) == 16) {
   i17 = HEAP8[i10] | 0;
   if (i17 << 24 >> 24 == 43 | i17 << 24 >> 24 == 45) {
    i21 = i10 + 1 | 0;
    break;
   }
   if ((i7 | 0) > 1 & i17 << 24 >> 24 == 48) {
    i17 = HEAP8[i10 + 1 | 0] | 0;
    if (i17 << 24 >> 24 == 88 | i17 << 24 >> 24 == 120) {
     i21 = i10 + 2 | 0;
    } else {
     i22 = 20;
    }
   } else {
    i22 = 20;
   }
  } else {
   i22 = 20;
  }
 } while (0);
 if ((i22 | 0) == 20) {
  i21 = i10;
 }
 __ZNKSt3__18ios_base6getlocEv(i14, i4);
 __ZNSt3__19__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE(i10, i21, i9, i11, i12, i13, i14);
 __ZNSt3__114__shared_count16__release_sharedEv(HEAP32[i14 >> 2] | 0) | 0;
 HEAP32[i15 >> 2] = HEAP32[i3 >> 2];
 i3 = HEAP32[i12 >> 2] | 0;
 i12 = HEAP32[i13 >> 2] | 0;
 HEAP32[i8 + 0 >> 2] = HEAP32[i15 + 0 >> 2];
 __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(i1, i8, i11, i3, i12, i4, i5);
 STACKTOP = i2;
 return;
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcy(i1, i2, i3, i4, i5, i6, i7) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 var i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 i8 = i2 + 8 | 0;
 i9 = i2;
 i10 = i2 + 75 | 0;
 i11 = i2 + 32 | 0;
 i12 = i2 + 20 | 0;
 i13 = i2 + 24 | 0;
 i14 = i2 + 16 | 0;
 i15 = i2 + 28 | 0;
 i16 = i9;
 HEAP32[i16 >> 2] = 37;
 HEAP32[i16 + 4 >> 2] = 0;
 i16 = i9 + 1 | 0;
 i17 = i4 + 4 | 0;
 i18 = HEAP32[i17 >> 2] | 0;
 if ((i18 & 2048 | 0) == 0) {
  i19 = i16;
 } else {
  HEAP8[i16] = 43;
  i19 = i9 + 2 | 0;
 }
 if ((i18 & 512 | 0) == 0) {
  i20 = i19;
 } else {
  HEAP8[i19] = 35;
  i20 = i19 + 1 | 0;
 }
 i19 = i20 + 2 | 0;
 HEAP8[i20] = 108;
 HEAP8[i20 + 1 | 0] = 108;
 i20 = i18 & 74;
 do {
  if ((i20 | 0) == 64) {
   HEAP8[i19] = 111;
  } else if ((i20 | 0) == 8) {
   if ((i18 & 16384 | 0) == 0) {
    HEAP8[i19] = 120;
    break;
   } else {
    HEAP8[i19] = 88;
    break;
   }
  } else {
   HEAP8[i19] = 117;
  }
 } while (0);
 if ((HEAP8[5728] | 0) == 0) {
  if ((___cxa_guard_acquire(5728) | 0) != 0) {
   HEAP32[1430] = _newlocale(2147483647, 5736, 0) | 0;
   ___cxa_guard_release(5728);
  }
 }
 i19 = HEAP32[1430] | 0;
 i18 = i8;
 HEAP32[i18 >> 2] = i6;
 HEAP32[i18 + 4 >> 2] = i7;
 i7 = __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz(i10, 23, i19, i9, i8) | 0;
 i9 = i10 + i7 | 0;
 i19 = HEAP32[i17 >> 2] & 176;
 do {
  if ((i19 | 0) == 16) {
   i17 = HEAP8[i10] | 0;
   if (i17 << 24 >> 24 == 43 | i17 << 24 >> 24 == 45) {
    i21 = i10 + 1 | 0;
    break;
   }
   if ((i7 | 0) > 1 & i17 << 24 >> 24 == 48) {
    i17 = HEAP8[i10 + 1 | 0] | 0;
    if (i17 << 24 >> 24 == 88 | i17 << 24 >> 24 == 120) {
     i21 = i10 + 2 | 0;
    } else {
     i22 = 20;
    }
   } else {
    i22 = 20;
   }
  } else if ((i19 | 0) == 32) {
   i21 = i9;
  } else {
   i22 = 20;
  }
 } while (0);
 if ((i22 | 0) == 20) {
  i21 = i10;
 }
 __ZNKSt3__18ios_base6getlocEv(i14, i4);
 __ZNSt3__19__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE(i10, i21, i9, i11, i12, i13, i14);
 __ZNSt3__114__shared_count16__release_sharedEv(HEAP32[i14 >> 2] | 0) | 0;
 HEAP32[i15 >> 2] = HEAP32[i3 >> 2];
 i3 = HEAP32[i12 >> 2] | 0;
 i12 = HEAP32[i13 >> 2] | 0;
 HEAP32[i8 + 0 >> 2] = HEAP32[i15 + 0 >> 2];
 __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(i1, i8, i11, i3, i12, i4, i5);
 STACKTOP = i2;
 return;
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcx(i1, i2, i3, i4, i5, i6, i7) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 var i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 i8 = i2 + 8 | 0;
 i9 = i2;
 i10 = i2 + 74 | 0;
 i11 = i2 + 32 | 0;
 i12 = i2 + 20 | 0;
 i13 = i2 + 24 | 0;
 i14 = i2 + 16 | 0;
 i15 = i2 + 28 | 0;
 i16 = i9;
 HEAP32[i16 >> 2] = 37;
 HEAP32[i16 + 4 >> 2] = 0;
 i16 = i9 + 1 | 0;
 i17 = i4 + 4 | 0;
 i18 = HEAP32[i17 >> 2] | 0;
 if ((i18 & 2048 | 0) == 0) {
  i19 = i16;
 } else {
  HEAP8[i16] = 43;
  i19 = i9 + 2 | 0;
 }
 if ((i18 & 512 | 0) == 0) {
  i20 = i19;
 } else {
  HEAP8[i19] = 35;
  i20 = i19 + 1 | 0;
 }
 i19 = i20 + 2 | 0;
 HEAP8[i20] = 108;
 HEAP8[i20 + 1 | 0] = 108;
 i20 = i18 & 74;
 do {
  if ((i20 | 0) == 8) {
   if ((i18 & 16384 | 0) == 0) {
    HEAP8[i19] = 120;
    break;
   } else {
    HEAP8[i19] = 88;
    break;
   }
  } else if ((i20 | 0) == 64) {
   HEAP8[i19] = 111;
  } else {
   HEAP8[i19] = 100;
  }
 } while (0);
 if ((HEAP8[5728] | 0) == 0) {
  if ((___cxa_guard_acquire(5728) | 0) != 0) {
   HEAP32[1430] = _newlocale(2147483647, 5736, 0) | 0;
   ___cxa_guard_release(5728);
  }
 }
 i19 = HEAP32[1430] | 0;
 i20 = i8;
 HEAP32[i20 >> 2] = i6;
 HEAP32[i20 + 4 >> 2] = i7;
 i7 = __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz(i10, 22, i19, i9, i8) | 0;
 i9 = i10 + i7 | 0;
 i19 = HEAP32[i17 >> 2] & 176;
 do {
  if ((i19 | 0) == 16) {
   i17 = HEAP8[i10] | 0;
   if (i17 << 24 >> 24 == 43 | i17 << 24 >> 24 == 45) {
    i21 = i10 + 1 | 0;
    break;
   }
   if ((i7 | 0) > 1 & i17 << 24 >> 24 == 48) {
    i17 = HEAP8[i10 + 1 | 0] | 0;
    if (i17 << 24 >> 24 == 88 | i17 << 24 >> 24 == 120) {
     i21 = i10 + 2 | 0;
    } else {
     i22 = 20;
    }
   } else {
    i22 = 20;
   }
  } else if ((i19 | 0) == 32) {
   i21 = i9;
  } else {
   i22 = 20;
  }
 } while (0);
 if ((i22 | 0) == 20) {
  i21 = i10;
 }
 __ZNKSt3__18ios_base6getlocEv(i14, i4);
 __ZNSt3__19__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE(i10, i21, i9, i11, i12, i13, i14);
 __ZNSt3__114__shared_count16__release_sharedEv(HEAP32[i14 >> 2] | 0) | 0;
 HEAP32[i15 >> 2] = HEAP32[i3 >> 2];
 i3 = HEAP32[i12 >> 2] | 0;
 i12 = HEAP32[i13 >> 2] | 0;
 HEAP32[i8 + 0 >> 2] = HEAP32[i15 + 0 >> 2];
 __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(i1, i8, i11, i3, i12, i4, i5);
 STACKTOP = i2;
 return;
}
function __ZNSt3__1L12ucs4_to_utf8EPKjS1_RS1_PhS3_RS3_mNS_12codecvt_modeE(i1, i2, i3, i4, i5, i6, i7, i8) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 var i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 i9 = STACKTOP;
 HEAP32[i3 >> 2] = i1;
 HEAP32[i6 >> 2] = i4;
 do {
  if ((i8 & 2 | 0) != 0) {
   if ((i5 - i4 | 0) < 3) {
    i10 = 1;
    STACKTOP = i9;
    return i10 | 0;
   } else {
    HEAP32[i6 >> 2] = i4 + 1;
    HEAP8[i4] = -17;
    i1 = HEAP32[i6 >> 2] | 0;
    HEAP32[i6 >> 2] = i1 + 1;
    HEAP8[i1] = -69;
    i1 = HEAP32[i6 >> 2] | 0;
    HEAP32[i6 >> 2] = i1 + 1;
    HEAP8[i1] = -65;
    break;
   }
  }
 } while (0);
 i4 = HEAP32[i3 >> 2] | 0;
 if (!(i4 >>> 0 < i2 >>> 0)) {
  i10 = 0;
  STACKTOP = i9;
  return i10 | 0;
 }
 i8 = i5;
 i5 = i4;
 L10 : while (1) {
  i4 = HEAP32[i5 >> 2] | 0;
  if ((i4 & -2048 | 0) == 55296 | i4 >>> 0 > i7 >>> 0) {
   i10 = 2;
   i11 = 19;
   break;
  }
  do {
   if (i4 >>> 0 < 128) {
    i1 = HEAP32[i6 >> 2] | 0;
    if ((i8 - i1 | 0) < 1) {
     i10 = 1;
     i11 = 19;
     break L10;
    }
    HEAP32[i6 >> 2] = i1 + 1;
    HEAP8[i1] = i4;
   } else {
    if (i4 >>> 0 < 2048) {
     i1 = HEAP32[i6 >> 2] | 0;
     if ((i8 - i1 | 0) < 2) {
      i10 = 1;
      i11 = 19;
      break L10;
     }
     HEAP32[i6 >> 2] = i1 + 1;
     HEAP8[i1] = i4 >>> 6 | 192;
     i1 = HEAP32[i6 >> 2] | 0;
     HEAP32[i6 >> 2] = i1 + 1;
     HEAP8[i1] = i4 & 63 | 128;
     break;
    }
    i1 = HEAP32[i6 >> 2] | 0;
    i12 = i8 - i1 | 0;
    if (i4 >>> 0 < 65536) {
     if ((i12 | 0) < 3) {
      i10 = 1;
      i11 = 19;
      break L10;
     }
     HEAP32[i6 >> 2] = i1 + 1;
     HEAP8[i1] = i4 >>> 12 | 224;
     i13 = HEAP32[i6 >> 2] | 0;
     HEAP32[i6 >> 2] = i13 + 1;
     HEAP8[i13] = i4 >>> 6 & 63 | 128;
     i13 = HEAP32[i6 >> 2] | 0;
     HEAP32[i6 >> 2] = i13 + 1;
     HEAP8[i13] = i4 & 63 | 128;
     break;
    } else {
     if ((i12 | 0) < 4) {
      i10 = 1;
      i11 = 19;
      break L10;
     }
     HEAP32[i6 >> 2] = i1 + 1;
     HEAP8[i1] = i4 >>> 18 | 240;
     i1 = HEAP32[i6 >> 2] | 0;
     HEAP32[i6 >> 2] = i1 + 1;
     HEAP8[i1] = i4 >>> 12 & 63 | 128;
     i1 = HEAP32[i6 >> 2] | 0;
     HEAP32[i6 >> 2] = i1 + 1;
     HEAP8[i1] = i4 >>> 6 & 63 | 128;
     i1 = HEAP32[i6 >> 2] | 0;
     HEAP32[i6 >> 2] = i1 + 1;
     HEAP8[i1] = i4 & 63 | 128;
     break;
    }
   }
  } while (0);
  i4 = (HEAP32[i3 >> 2] | 0) + 4 | 0;
  HEAP32[i3 >> 2] = i4;
  if (i4 >>> 0 < i2 >>> 0) {
   i5 = i4;
  } else {
   i10 = 0;
   i11 = 19;
   break;
  }
 }
 if ((i11 | 0) == 19) {
  STACKTOP = i9;
  return i10 | 0;
 }
 return 0;
}
function _mbsnrtowcs(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 1040 | 0;
 i7 = i6 + 8 | 0;
 i8 = i6;
 i9 = HEAP32[i2 >> 2] | 0;
 HEAP32[i8 >> 2] = i9;
 i10 = (i1 | 0) != 0;
 i11 = i10 ? i4 : 256;
 i4 = i10 ? i1 : i7;
 L1 : do {
  if ((i9 | 0) == 0 | (i11 | 0) == 0) {
   i12 = i3;
   i13 = i11;
   i14 = i9;
   i15 = 0;
   i16 = i4;
  } else {
   i1 = i3;
   i17 = i11;
   i18 = i9;
   i19 = 0;
   i20 = i4;
   while (1) {
    i21 = i1 >>> 2;
    i22 = i21 >>> 0 >= i17 >>> 0;
    if (!(i22 | i1 >>> 0 > 131)) {
     i12 = i1;
     i13 = i17;
     i14 = i18;
     i15 = i19;
     i16 = i20;
     break L1;
    }
    i23 = i22 ? i17 : i21;
    i24 = i1 - i23 | 0;
    i21 = _mbsrtowcs(i20, i8, i23, i5) | 0;
    if ((i21 | 0) == -1) {
     break;
    }
    if ((i20 | 0) == (i7 | 0)) {
     i25 = i17;
     i26 = i7;
    } else {
     i25 = i17 - i21 | 0;
     i26 = i20 + (i21 << 2) | 0;
    }
    i23 = i21 + i19 | 0;
    i21 = HEAP32[i8 >> 2] | 0;
    if ((i21 | 0) == 0 | (i25 | 0) == 0) {
     i12 = i24;
     i13 = i25;
     i14 = i21;
     i15 = i23;
     i16 = i26;
     break L1;
    } else {
     i1 = i24;
     i17 = i25;
     i18 = i21;
     i19 = i23;
     i20 = i26;
    }
   }
   i12 = i24;
   i13 = 0;
   i14 = HEAP32[i8 >> 2] | 0;
   i15 = -1;
   i16 = i20;
  }
 } while (0);
 L11 : do {
  if ((i14 | 0) == 0) {
   i27 = i15;
  } else {
   if ((i13 | 0) == 0 | (i12 | 0) == 0) {
    i27 = i15;
   } else {
    i24 = i12;
    i26 = i13;
    i25 = i14;
    i7 = i15;
    i4 = i16;
    while (1) {
     i28 = _mbrtowc(i4, i25, i24, i5) | 0;
     if ((i28 + 2 | 0) >>> 0 < 3) {
      break;
     }
     i9 = (HEAP32[i8 >> 2] | 0) + i28 | 0;
     HEAP32[i8 >> 2] = i9;
     i11 = i26 + -1 | 0;
     i3 = i7 + 1 | 0;
     if ((i11 | 0) == 0 | (i24 | 0) == (i28 | 0)) {
      i27 = i3;
      break L11;
     } else {
      i24 = i24 - i28 | 0;
      i26 = i11;
      i25 = i9;
      i7 = i3;
      i4 = i4 + 4 | 0;
     }
    }
    if ((i28 | 0) == -1) {
     i27 = -1;
     break;
    } else if ((i28 | 0) == 0) {
     HEAP32[i8 >> 2] = 0;
     i27 = i7;
     break;
    } else {
     HEAP32[i5 >> 2] = 0;
     i27 = i7;
     break;
    }
   }
  }
 } while (0);
 if (!i10) {
  STACKTOP = i6;
  return i27 | 0;
 }
 HEAP32[i2 >> 2] = HEAP32[i8 >> 2];
 STACKTOP = i6;
 return i27 | 0;
}
function _wcsnrtombs(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 272 | 0;
 i6 = i5 + 8 | 0;
 i7 = i5;
 i8 = HEAP32[i2 >> 2] | 0;
 HEAP32[i7 >> 2] = i8;
 i9 = (i1 | 0) != 0;
 i10 = i9 ? i4 : 256;
 i4 = i9 ? i1 : i6;
 L1 : do {
  if ((i8 | 0) == 0 | (i10 | 0) == 0) {
   i11 = i3;
   i12 = i10;
   i13 = i8;
   i14 = 0;
   i15 = i4;
  } else {
   i1 = i3;
   i16 = i10;
   i17 = i8;
   i18 = 0;
   i19 = i4;
   while (1) {
    i20 = i1 >>> 0 >= i16 >>> 0;
    if (!(i20 | i1 >>> 0 > 32)) {
     i11 = i1;
     i12 = i16;
     i13 = i17;
     i14 = i18;
     i15 = i19;
     break L1;
    }
    i21 = i20 ? i16 : i1;
    i22 = i1 - i21 | 0;
    i20 = _wcsrtombs(i19, i7, i21, 0) | 0;
    if ((i20 | 0) == -1) {
     break;
    }
    if ((i19 | 0) == (i6 | 0)) {
     i23 = i16;
     i24 = i6;
    } else {
     i23 = i16 - i20 | 0;
     i24 = i19 + i20 | 0;
    }
    i21 = i20 + i18 | 0;
    i20 = HEAP32[i7 >> 2] | 0;
    if ((i20 | 0) == 0 | (i23 | 0) == 0) {
     i11 = i22;
     i12 = i23;
     i13 = i20;
     i14 = i21;
     i15 = i24;
     break L1;
    } else {
     i1 = i22;
     i16 = i23;
     i17 = i20;
     i18 = i21;
     i19 = i24;
    }
   }
   i11 = i22;
   i12 = 0;
   i13 = HEAP32[i7 >> 2] | 0;
   i14 = -1;
   i15 = i19;
  }
 } while (0);
 L11 : do {
  if ((i13 | 0) == 0) {
   i25 = i14;
  } else {
   if ((i12 | 0) == 0 | (i11 | 0) == 0) {
    i25 = i14;
   } else {
    i22 = i11;
    i24 = i12;
    i23 = i13;
    i6 = i14;
    i4 = i15;
    while (1) {
     i26 = _wcrtomb(i4, HEAP32[i23 >> 2] | 0, 0) | 0;
     if ((i26 + 1 | 0) >>> 0 < 2) {
      break;
     }
     i8 = (HEAP32[i7 >> 2] | 0) + 4 | 0;
     HEAP32[i7 >> 2] = i8;
     i10 = i22 + -1 | 0;
     i3 = i6 + 1 | 0;
     if ((i24 | 0) == (i26 | 0) | (i10 | 0) == 0) {
      i25 = i3;
      break L11;
     } else {
      i22 = i10;
      i24 = i24 - i26 | 0;
      i23 = i8;
      i6 = i3;
      i4 = i4 + i26 | 0;
     }
    }
    if ((i26 | 0) == 0) {
     HEAP32[i7 >> 2] = 0;
     i25 = i6;
    } else {
     i25 = -1;
    }
   }
  }
 } while (0);
 if (!i9) {
  STACKTOP = i5;
  return i25 | 0;
 }
 HEAP32[i2 >> 2] = HEAP32[i7 >> 2];
 STACKTOP = i5;
 return i25 | 0;
}
function __ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_(i1, i2, i3, i4, i5, i6, i7, i8, i9, i10) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 i9 = i9 | 0;
 i10 = i10 | 0;
 var i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0;
 i11 = STACKTOP;
 i12 = HEAP32[i4 >> 2] | 0;
 i13 = (i12 | 0) == (i3 | 0);
 do {
  if (i13) {
   i14 = (HEAP8[i10 + 24 | 0] | 0) == i1 << 24 >> 24;
   if (!i14) {
    if (!((HEAP8[i10 + 25 | 0] | 0) == i1 << 24 >> 24)) {
     break;
    }
   }
   HEAP32[i4 >> 2] = i3 + 1;
   HEAP8[i3] = i14 ? 43 : 45;
   HEAP32[i5 >> 2] = 0;
   i15 = 0;
   STACKTOP = i11;
   return i15 | 0;
  }
 } while (0);
 i14 = HEAP8[i7] | 0;
 if ((i14 & 1) == 0) {
  i16 = (i14 & 255) >>> 1;
 } else {
  i16 = HEAP32[i7 + 4 >> 2] | 0;
 }
 if ((i16 | 0) != 0 & i1 << 24 >> 24 == i6 << 24 >> 24) {
  i6 = HEAP32[i9 >> 2] | 0;
  if ((i6 - i8 | 0) >= 160) {
   i15 = 0;
   STACKTOP = i11;
   return i15 | 0;
  }
  i8 = HEAP32[i5 >> 2] | 0;
  HEAP32[i9 >> 2] = i6 + 4;
  HEAP32[i6 >> 2] = i8;
  HEAP32[i5 >> 2] = 0;
  i15 = 0;
  STACKTOP = i11;
  return i15 | 0;
 }
 i8 = i10 + 26 | 0;
 i6 = i10;
 while (1) {
  i9 = i6 + 1 | 0;
  if ((HEAP8[i6] | 0) == i1 << 24 >> 24) {
   i17 = i6;
   break;
  }
  if ((i9 | 0) == (i8 | 0)) {
   i17 = i8;
   break;
  } else {
   i6 = i9;
  }
 }
 i6 = i17 - i10 | 0;
 if ((i6 | 0) > 23) {
  i15 = -1;
  STACKTOP = i11;
  return i15 | 0;
 }
 if ((i2 | 0) == 16) {
  if ((i6 | 0) >= 22) {
   if (i13) {
    i15 = -1;
    STACKTOP = i11;
    return i15 | 0;
   }
   if ((i12 - i3 | 0) >= 3) {
    i15 = -1;
    STACKTOP = i11;
    return i15 | 0;
   }
   if ((HEAP8[i12 + -1 | 0] | 0) != 48) {
    i15 = -1;
    STACKTOP = i11;
    return i15 | 0;
   }
   HEAP32[i5 >> 2] = 0;
   i3 = HEAP8[4376 + i6 | 0] | 0;
   HEAP32[i4 >> 2] = i12 + 1;
   HEAP8[i12] = i3;
   i15 = 0;
   STACKTOP = i11;
   return i15 | 0;
  }
 } else if ((i2 | 0) == 10 | (i2 | 0) == 8) {
  if ((i6 | 0) >= (i2 | 0)) {
   i15 = -1;
   STACKTOP = i11;
   return i15 | 0;
  }
 }
 i2 = HEAP8[4376 + i6 | 0] | 0;
 HEAP32[i4 >> 2] = i12 + 1;
 HEAP8[i12] = i2;
 HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + 1;
 i15 = 0;
 STACKTOP = i11;
 return i15 | 0;
}
function __ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw(i1, i2, i3, i4, i5, i6, i7, i8, i9, i10) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 i9 = i9 | 0;
 i10 = i10 | 0;
 var i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0;
 i11 = STACKTOP;
 i12 = HEAP32[i4 >> 2] | 0;
 i13 = (i12 | 0) == (i3 | 0);
 do {
  if (i13) {
   i14 = (HEAP32[i10 + 96 >> 2] | 0) == (i1 | 0);
   if (!i14) {
    if ((HEAP32[i10 + 100 >> 2] | 0) != (i1 | 0)) {
     break;
    }
   }
   HEAP32[i4 >> 2] = i3 + 1;
   HEAP8[i3] = i14 ? 43 : 45;
   HEAP32[i5 >> 2] = 0;
   i15 = 0;
   STACKTOP = i11;
   return i15 | 0;
  }
 } while (0);
 i14 = HEAP8[i7] | 0;
 if ((i14 & 1) == 0) {
  i16 = (i14 & 255) >>> 1;
 } else {
  i16 = HEAP32[i7 + 4 >> 2] | 0;
 }
 if ((i16 | 0) != 0 & (i1 | 0) == (i6 | 0)) {
  i6 = HEAP32[i9 >> 2] | 0;
  if ((i6 - i8 | 0) >= 160) {
   i15 = 0;
   STACKTOP = i11;
   return i15 | 0;
  }
  i8 = HEAP32[i5 >> 2] | 0;
  HEAP32[i9 >> 2] = i6 + 4;
  HEAP32[i6 >> 2] = i8;
  HEAP32[i5 >> 2] = 0;
  i15 = 0;
  STACKTOP = i11;
  return i15 | 0;
 }
 i8 = i10 + 104 | 0;
 i6 = i10;
 while (1) {
  i9 = i6 + 4 | 0;
  if ((HEAP32[i6 >> 2] | 0) == (i1 | 0)) {
   i17 = i6;
   break;
  }
  if ((i9 | 0) == (i8 | 0)) {
   i17 = i8;
   break;
  } else {
   i6 = i9;
  }
 }
 i6 = i17 - i10 | 0;
 i10 = i6 >> 2;
 if ((i6 | 0) > 92) {
  i15 = -1;
  STACKTOP = i11;
  return i15 | 0;
 }
 if ((i2 | 0) == 10 | (i2 | 0) == 8) {
  if ((i10 | 0) >= (i2 | 0)) {
   i15 = -1;
   STACKTOP = i11;
   return i15 | 0;
  }
 } else if ((i2 | 0) == 16) {
  if ((i6 | 0) >= 88) {
   if (i13) {
    i15 = -1;
    STACKTOP = i11;
    return i15 | 0;
   }
   if ((i12 - i3 | 0) >= 3) {
    i15 = -1;
    STACKTOP = i11;
    return i15 | 0;
   }
   if ((HEAP8[i12 + -1 | 0] | 0) != 48) {
    i15 = -1;
    STACKTOP = i11;
    return i15 | 0;
   }
   HEAP32[i5 >> 2] = 0;
   i3 = HEAP8[4376 + i10 | 0] | 0;
   HEAP32[i4 >> 2] = i12 + 1;
   HEAP8[i12] = i3;
   i15 = 0;
   STACKTOP = i11;
   return i15 | 0;
  }
 }
 i3 = HEAP8[4376 + i10 | 0] | 0;
 HEAP32[i4 >> 2] = i12 + 1;
 HEAP8[i12] = i3;
 HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + 1;
 i15 = 0;
 STACKTOP = i11;
 return i15 | 0;
}
function __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(i1, i2, i3, i4, i5, i6, i7) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 var i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i9 = i8;
 i10 = HEAP32[i2 >> 2] | 0;
 if ((i10 | 0) == 0) {
  HEAP32[i1 >> 2] = 0;
  STACKTOP = i8;
  return;
 }
 i11 = i5;
 i5 = i3;
 i12 = i11 - i5 | 0;
 i13 = i6 + 12 | 0;
 i6 = HEAP32[i13 >> 2] | 0;
 i14 = (i6 | 0) > (i12 | 0) ? i6 - i12 | 0 : 0;
 i12 = i4;
 i6 = i12 - i5 | 0;
 if ((i6 | 0) > 0) {
  if ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i10 >> 2] | 0) + 48 >> 2] & 31](i10, i3, i6) | 0) != (i6 | 0)) {
   HEAP32[i2 >> 2] = 0;
   HEAP32[i1 >> 2] = 0;
   STACKTOP = i8;
   return;
  }
 }
 do {
  if ((i14 | 0) > 0) {
   if (i14 >>> 0 < 11) {
    i6 = i14 << 1 & 255;
    HEAP8[i9] = i6;
    i15 = i9;
    i16 = i6;
    i17 = i9 + 1 | 0;
   } else {
    i6 = i14 + 16 & -16;
    i3 = __Znwj(i6) | 0;
    HEAP32[i9 + 8 >> 2] = i3;
    i5 = i6 | 1;
    HEAP32[i9 >> 2] = i5;
    HEAP32[i9 + 4 >> 2] = i14;
    i15 = i9;
    i16 = i5 & 255;
    i17 = i3;
   }
   _memset(i17 | 0, i7 | 0, i14 | 0) | 0;
   HEAP8[i17 + i14 | 0] = 0;
   if ((i16 & 1) == 0) {
    i18 = i9 + 1 | 0;
   } else {
    i18 = HEAP32[i9 + 8 >> 2] | 0;
   }
   if ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i10 >> 2] | 0) + 48 >> 2] & 31](i10, i18, i14) | 0) == (i14 | 0)) {
    if ((HEAP8[i15] & 1) == 0) {
     break;
    }
    __ZdlPv(HEAP32[i9 + 8 >> 2] | 0);
    break;
   }
   HEAP32[i2 >> 2] = 0;
   HEAP32[i1 >> 2] = 0;
   if ((HEAP8[i15] & 1) == 0) {
    STACKTOP = i8;
    return;
   }
   __ZdlPv(HEAP32[i9 + 8 >> 2] | 0);
   STACKTOP = i8;
   return;
  }
 } while (0);
 i9 = i11 - i12 | 0;
 if ((i9 | 0) > 0) {
  if ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i10 >> 2] | 0) + 48 >> 2] & 31](i10, i4, i9) | 0) != (i9 | 0)) {
   HEAP32[i2 >> 2] = 0;
   HEAP32[i1 >> 2] = 0;
   STACKTOP = i8;
   return;
  }
 }
 HEAP32[i13 >> 2] = 0;
 HEAP32[i1 >> 2] = i10;
 STACKTOP = i8;
 return;
}
function _mbrtowc(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i6 = i5;
 HEAP32[i6 >> 2] = i1;
 i7 = (i4 | 0) == 0 ? 13704 : i4;
 i4 = HEAP32[i7 >> 2] | 0;
 L1 : do {
  if ((i2 | 0) == 0) {
   if ((i4 | 0) == 0) {
    i8 = 0;
    STACKTOP = i5;
    return i8 | 0;
   }
  } else {
   if ((i1 | 0) == 0) {
    HEAP32[i6 >> 2] = i6;
    i9 = i6;
   } else {
    i9 = i1;
   }
   if ((i3 | 0) == 0) {
    i8 = -2;
    STACKTOP = i5;
    return i8 | 0;
   }
   do {
    if ((i4 | 0) == 0) {
     i10 = HEAP8[i2] | 0;
     i11 = i10 & 255;
     if (i10 << 24 >> 24 > -1) {
      HEAP32[i9 >> 2] = i11;
      i8 = i10 << 24 >> 24 != 0 | 0;
      STACKTOP = i5;
      return i8 | 0;
     } else {
      i10 = i11 + -194 | 0;
      if (i10 >>> 0 > 50) {
       break L1;
      }
      i12 = i3 + -1 | 0;
      i13 = HEAP32[13488 + (i10 << 2) >> 2] | 0;
      i14 = i2 + 1 | 0;
      break;
     }
    } else {
     i12 = i3;
     i13 = i4;
     i14 = i2;
    }
   } while (0);
   L17 : do {
    if ((i12 | 0) == 0) {
     i15 = i13;
    } else {
     i10 = HEAP8[i14] | 0;
     i11 = (i10 & 255) >>> 3;
     if ((i11 + -16 | i11 + (i13 >> 26)) >>> 0 > 7) {
      break L1;
     } else {
      i16 = i12;
      i17 = i10;
      i18 = i13;
      i19 = i14;
     }
     while (1) {
      i19 = i19 + 1 | 0;
      i18 = (i17 & 255) + -128 | i18 << 6;
      i16 = i16 + -1 | 0;
      if ((i18 | 0) >= 0) {
       break;
      }
      if ((i16 | 0) == 0) {
       i15 = i18;
       break L17;
      }
      i17 = HEAP8[i19] | 0;
      if (((i17 & 255) + -128 | 0) >>> 0 > 63) {
       break L1;
      }
     }
     HEAP32[i7 >> 2] = 0;
     HEAP32[i9 >> 2] = i18;
     i8 = i3 - i16 | 0;
     STACKTOP = i5;
     return i8 | 0;
    }
   } while (0);
   HEAP32[i7 >> 2] = i15;
   i8 = -2;
   STACKTOP = i5;
   return i8 | 0;
  }
 } while (0);
 HEAP32[i7 >> 2] = 0;
 HEAP32[(___errno_location() | 0) >> 2] = 84;
 i8 = -1;
 STACKTOP = i5;
 return i8 | 0;
}
function __ZNSt3__19__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i7 = i6;
 i8 = i6 + 12 | 0;
 __ZNKSt3__18ios_base6getlocEv(i8, i2);
 i2 = HEAP32[i8 >> 2] | 0;
 if (!((HEAP32[1456] | 0) == -1)) {
  HEAP32[i7 >> 2] = 5824;
  HEAP32[i7 + 4 >> 2] = 118;
  HEAP32[i7 + 8 >> 2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(5824, i7, 119);
 }
 i9 = (HEAP32[5828 >> 2] | 0) + -1 | 0;
 i10 = HEAP32[i2 + 8 >> 2] | 0;
 if (!((HEAP32[i2 + 12 >> 2] | 0) - i10 >> 2 >>> 0 > i9 >>> 0)) {
  i11 = ___cxa_allocate_exception(4) | 0;
  __ZNSt8bad_castC2Ev(i11);
  ___cxa_throw(i11 | 0, 13792, 107);
 }
 i2 = HEAP32[i10 + (i9 << 2) >> 2] | 0;
 if ((i2 | 0) == 0) {
  i11 = ___cxa_allocate_exception(4) | 0;
  __ZNSt8bad_castC2Ev(i11);
  ___cxa_throw(i11 | 0, 13792, 107);
 }
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[i2 >> 2] | 0) + 48 >> 2] & 7](i2, 4376, 4408 | 0, i3) | 0;
 i3 = HEAP32[i8 >> 2] | 0;
 if (!((HEAP32[1496] | 0) == -1)) {
  HEAP32[i7 >> 2] = 5984;
  HEAP32[i7 + 4 >> 2] = 118;
  HEAP32[i7 + 8 >> 2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(5984, i7, 119);
 }
 i7 = (HEAP32[5988 >> 2] | 0) + -1 | 0;
 i2 = HEAP32[i3 + 8 >> 2] | 0;
 if (!((HEAP32[i3 + 12 >> 2] | 0) - i2 >> 2 >>> 0 > i7 >>> 0)) {
  i12 = ___cxa_allocate_exception(4) | 0;
  __ZNSt8bad_castC2Ev(i12);
  ___cxa_throw(i12 | 0, 13792, 107);
 }
 i3 = HEAP32[i2 + (i7 << 2) >> 2] | 0;
 if ((i3 | 0) == 0) {
  i12 = ___cxa_allocate_exception(4) | 0;
  __ZNSt8bad_castC2Ev(i12);
  ___cxa_throw(i12 | 0, 13792, 107);
 } else {
  HEAP32[i4 >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 12 >> 2] & 127](i3) | 0;
  HEAP32[i5 >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 16 >> 2] & 127](i3) | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i3 >> 2] | 0) + 20 >> 2] & 63](i1, i3);
  __ZNSt3__114__shared_count16__release_sharedEv(HEAP32[i8 >> 2] | 0) | 0;
  STACKTOP = i6;
  return;
 }
}
function ___cxx_global_array_dtor81(i1) {
 i1 = i1 | 0;
 i1 = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(12404 | 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(12392 | 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(12380 | 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(12368 | 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(12356 | 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(12344 | 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(12332 | 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(12320 | 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(12308 | 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(12296 | 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(12284 | 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(12272 | 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(12260 | 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(12248 | 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(12236 | 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(12224 | 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(12212 | 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(12200 | 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(12188 | 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(12176 | 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(12164 | 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(12152 | 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(12140 | 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(12128);
 STACKTOP = i1;
 return;
}
function ___cxx_global_array_dtor56(i1) {
 i1 = i1 | 0;
 i1 = STACKTOP;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(11564 | 0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(11552 | 0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(11540 | 0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(11528 | 0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(11516 | 0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(11504 | 0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(11492 | 0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(11480 | 0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(11468 | 0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(11456 | 0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(11444 | 0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(11432 | 0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(11420 | 0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(11408 | 0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(11396 | 0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(11384 | 0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(11372 | 0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(11360 | 0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(11348 | 0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(11336 | 0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(11324 | 0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(11312 | 0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(11300 | 0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(11288);
 STACKTOP = i1;
 return;
}
function ___cxx_global_array_dtor53(i1) {
 i1 = i1 | 0;
 i1 = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(11252 | 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(11240 | 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(11228 | 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(11216 | 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(11204 | 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(11192 | 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(11180 | 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(11168 | 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(11156 | 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(11144 | 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(11132 | 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(11120 | 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(11108 | 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(11096 | 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(11084 | 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(11072 | 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(11060 | 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(11048 | 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(11036 | 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(11024 | 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(11012 | 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(11e3 | 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(10988 | 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(10976);
 STACKTOP = i1;
 return;
}
function ___cxx_global_array_dtor(i1) {
 i1 = i1 | 0;
 i1 = STACKTOP;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(10924 | 0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(10912 | 0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(10900 | 0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(10888 | 0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(10876 | 0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(10864 | 0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(10852 | 0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(10840 | 0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(10828 | 0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(10816 | 0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(10804 | 0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(10792 | 0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(10780 | 0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(10768 | 0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(10756 | 0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(10744 | 0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(10732 | 0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(10720 | 0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(10708 | 0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(10696 | 0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(10684 | 0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(10672 | 0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(10660 | 0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(10648);
 STACKTOP = i1;
 return;
}
function __ZNSt3__19__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i7 = i6;
 i8 = i6 + 12 | 0;
 __ZNKSt3__18ios_base6getlocEv(i8, i2);
 i2 = HEAP32[i8 >> 2] | 0;
 if (!((HEAP32[1458] | 0) == -1)) {
  HEAP32[i7 >> 2] = 5832;
  HEAP32[i7 + 4 >> 2] = 118;
  HEAP32[i7 + 8 >> 2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(5832, i7, 119);
 }
 i9 = (HEAP32[5836 >> 2] | 0) + -1 | 0;
 i10 = HEAP32[i2 + 8 >> 2] | 0;
 if (!((HEAP32[i2 + 12 >> 2] | 0) - i10 >> 2 >>> 0 > i9 >>> 0)) {
  i11 = ___cxa_allocate_exception(4) | 0;
  __ZNSt8bad_castC2Ev(i11);
  ___cxa_throw(i11 | 0, 13792, 107);
 }
 i2 = HEAP32[i10 + (i9 << 2) >> 2] | 0;
 if ((i2 | 0) == 0) {
  i11 = ___cxa_allocate_exception(4) | 0;
  __ZNSt8bad_castC2Ev(i11);
  ___cxa_throw(i11 | 0, 13792, 107);
 }
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[i2 >> 2] | 0) + 32 >> 2] & 7](i2, 4376, 4408 | 0, i3) | 0;
 i3 = HEAP32[i8 >> 2] | 0;
 if (!((HEAP32[1494] | 0) == -1)) {
  HEAP32[i7 >> 2] = 5976;
  HEAP32[i7 + 4 >> 2] = 118;
  HEAP32[i7 + 8 >> 2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(5976, i7, 119);
 }
 i7 = (HEAP32[5980 >> 2] | 0) + -1 | 0;
 i2 = HEAP32[i3 + 8 >> 2] | 0;
 if (!((HEAP32[i3 + 12 >> 2] | 0) - i2 >> 2 >>> 0 > i7 >>> 0)) {
  i12 = ___cxa_allocate_exception(4) | 0;
  __ZNSt8bad_castC2Ev(i12);
  ___cxa_throw(i12 | 0, 13792, 107);
 }
 i3 = HEAP32[i2 + (i7 << 2) >> 2] | 0;
 if ((i3 | 0) == 0) {
  i12 = ___cxa_allocate_exception(4) | 0;
  __ZNSt8bad_castC2Ev(i12);
  ___cxa_throw(i12 | 0, 13792, 107);
 } else {
  HEAP8[i4] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 12 >> 2] & 127](i3) | 0;
  HEAP8[i5] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 16 >> 2] & 127](i3) | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i3 >> 2] | 0) + 20 >> 2] & 63](i1, i3);
  __ZNSt3__114__shared_count16__release_sharedEv(HEAP32[i8 >> 2] | 0) | 0;
  STACKTOP = i6;
  return;
 }
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEi(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i4 = i3 + 24 | 0;
 i5 = i3;
 i6 = i3 + 8 | 0;
 i7 = i3 + 16 | 0;
 i8 = i3 + 20 | 0;
 HEAP8[i6] = 0;
 HEAP32[i6 + 4 >> 2] = i1;
 i9 = HEAP32[(HEAP32[i1 >> 2] | 0) + -12 >> 2] | 0;
 if ((HEAP32[i1 + (i9 + 16) >> 2] | 0) != 0) {
  __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev(i6);
  STACKTOP = i3;
  return i1 | 0;
 }
 i10 = HEAP32[i1 + (i9 + 72) >> 2] | 0;
 if ((i10 | 0) == 0) {
  i11 = i9;
 } else {
  __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv(i10) | 0;
  i11 = HEAP32[(HEAP32[i1 >> 2] | 0) + -12 >> 2] | 0;
 }
 HEAP8[i6] = 1;
 __ZNSt3__16localeC2ERKS0_(i7, i1 + (i11 + 28) | 0);
 i11 = __ZNKSt3__16locale9use_facetERNS0_2idE(i7, 4552) | 0;
 __ZNSt3__16localeD2Ev(i7);
 i7 = HEAP32[(HEAP32[i1 >> 2] | 0) + -12 >> 2] | 0;
 i10 = HEAP32[i1 + (i7 + 24) >> 2] | 0;
 i9 = i1 + i7 | 0;
 i12 = i1 + (i7 + 76) | 0;
 i13 = HEAP32[i12 >> 2] | 0;
 if ((i13 | 0) == -1) {
  __ZNSt3__16localeC2ERKS0_(i4, i1 + (i7 + 28) | 0);
  i7 = __ZNKSt3__16locale9use_facetERNS0_2idE(i4, 5832) | 0;
  i14 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i7 >> 2] | 0) + 28 >> 2] & 31](i7, 32) | 0;
  __ZNSt3__16localeD2Ev(i4);
  i7 = i14 << 24 >> 24;
  HEAP32[i12 >> 2] = i7;
  i15 = i7;
 } else {
  i15 = i13;
 }
 i13 = i15 & 255;
 i15 = HEAP32[(HEAP32[i11 >> 2] | 0) + 16 >> 2] | 0;
 HEAP32[i5 >> 2] = i10;
 HEAP32[i4 + 0 >> 2] = HEAP32[i5 + 0 >> 2];
 FUNCTION_TABLE_viiiiii[i15 & 31](i8, i11, i4, i9, i13, i2);
 if ((HEAP32[i8 >> 2] | 0) != 0) {
  __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev(i6);
  STACKTOP = i3;
  return i1 | 0;
 }
 i8 = HEAP32[(HEAP32[i1 >> 2] | 0) + -12 >> 2] | 0;
 __ZNSt3__18ios_base5clearEj(i1 + i8 | 0, HEAP32[i1 + (i8 + 16) >> 2] | 5);
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev(i6);
 STACKTOP = i3;
 return i1 | 0;
}
function __ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i4 = i3 + 16 | 0;
 i5 = i3;
 i6 = i3 + 8 | 0;
 i7 = i3 + 12 | 0;
 HEAP8[i5] = 0;
 HEAP32[i5 + 4 >> 2] = i1;
 i8 = HEAP32[(HEAP32[i1 >> 2] | 0) + -12 >> 2] | 0;
 if ((HEAP32[i1 + (i8 + 16) >> 2] | 0) != 0) {
  __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev(i5);
  STACKTOP = i3;
  return i1 | 0;
 }
 i9 = HEAP32[i1 + (i8 + 72) >> 2] | 0;
 if ((i9 | 0) == 0) {
  i10 = i8;
 } else {
  __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv(i9) | 0;
  i10 = HEAP32[(HEAP32[i1 >> 2] | 0) + -12 >> 2] | 0;
 }
 HEAP8[i5] = 1;
 i9 = _strlen(i2 | 0) | 0;
 HEAP32[i6 >> 2] = HEAP32[i1 + (i10 + 24) >> 2];
 if ((HEAP32[i1 + (i10 + 4) >> 2] & 176 | 0) == 32) {
  i11 = i2 + i9 | 0;
 } else {
  i11 = i2;
 }
 i8 = i1 + i10 | 0;
 i12 = i1 + (i10 + 76) | 0;
 i10 = HEAP32[i12 >> 2] | 0;
 if ((i10 | 0) == -1) {
  __ZNKSt3__18ios_base6getlocEv(i4, i8);
  i13 = __ZNKSt3__16locale9use_facetERNS0_2idE(i4, 5832) | 0;
  i14 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i13 >> 2] | 0) + 28 >> 2] & 31](i13, 32) | 0;
  __ZNSt3__16localeD2Ev(i4);
  i13 = i14 << 24 >> 24;
  HEAP32[i12 >> 2] = i13;
  i15 = i8;
  i16 = i13;
 } else {
  i15 = i8;
  i16 = i10;
 }
 i10 = i16 & 255;
 i16 = i2 + i9 | 0;
 HEAP32[i4 + 0 >> 2] = HEAP32[i6 + 0 >> 2];
 __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(i7, i4, i2, i11, i16, i15, i10);
 if ((HEAP32[i7 >> 2] | 0) != 0) {
  __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev(i5);
  STACKTOP = i3;
  return i1 | 0;
 }
 i7 = HEAP32[(HEAP32[i1 >> 2] | 0) + -12 >> 2] | 0;
 __ZNSt3__18ios_base5clearEj(i1 + i7 | 0, HEAP32[i1 + (i7 + 16) >> 2] | 5);
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev(i5);
 STACKTOP = i3;
 return i1 | 0;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 i6 = STACKTOP;
 if ((i1 | 0) == (HEAP32[i2 + 8 >> 2] | 0)) {
  if ((HEAP32[i2 + 4 >> 2] | 0) != (i3 | 0)) {
   STACKTOP = i6;
   return;
  }
  i7 = i2 + 28 | 0;
  if ((HEAP32[i7 >> 2] | 0) == 1) {
   STACKTOP = i6;
   return;
  }
  HEAP32[i7 >> 2] = i4;
  STACKTOP = i6;
  return;
 }
 if ((i1 | 0) != (HEAP32[i2 >> 2] | 0)) {
  i7 = HEAP32[i1 + 8 >> 2] | 0;
  FUNCTION_TABLE_viiiii[HEAP32[(HEAP32[i7 >> 2] | 0) + 24 >> 2] & 3](i7, i2, i3, i4, i5);
  STACKTOP = i6;
  return;
 }
 if ((HEAP32[i2 + 16 >> 2] | 0) != (i3 | 0)) {
  i7 = i2 + 20 | 0;
  if ((HEAP32[i7 >> 2] | 0) != (i3 | 0)) {
   HEAP32[i2 + 32 >> 2] = i4;
   i8 = i2 + 44 | 0;
   if ((HEAP32[i8 >> 2] | 0) == 4) {
    STACKTOP = i6;
    return;
   }
   i9 = i2 + 52 | 0;
   HEAP8[i9] = 0;
   i10 = i2 + 53 | 0;
   HEAP8[i10] = 0;
   i11 = HEAP32[i1 + 8 >> 2] | 0;
   FUNCTION_TABLE_viiiiii[HEAP32[(HEAP32[i11 >> 2] | 0) + 20 >> 2] & 31](i11, i2, i3, i3, 1, i5);
   if ((HEAP8[i10] | 0) == 0) {
    i12 = 0;
    i13 = 13;
   } else {
    if ((HEAP8[i9] | 0) == 0) {
     i12 = 1;
     i13 = 13;
    }
   }
   do {
    if ((i13 | 0) == 13) {
     HEAP32[i7 >> 2] = i3;
     i9 = i2 + 40 | 0;
     HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) + 1;
     if ((HEAP32[i2 + 36 >> 2] | 0) == 1) {
      if ((HEAP32[i2 + 24 >> 2] | 0) == 2) {
       HEAP8[i2 + 54 | 0] = 1;
       if (i12) {
        break;
       }
      } else {
       i13 = 16;
      }
     } else {
      i13 = 16;
     }
     if ((i13 | 0) == 16) {
      if (i12) {
       break;
      }
     }
     HEAP32[i8 >> 2] = 4;
     STACKTOP = i6;
     return;
    }
   } while (0);
   HEAP32[i8 >> 2] = 3;
   STACKTOP = i6;
   return;
  }
 }
 if ((i4 | 0) != 1) {
  STACKTOP = i6;
  return;
 }
 HEAP32[i2 + 32 >> 2] = 1;
 STACKTOP = i6;
 return;
}
function __ZNKSt3__120__time_get_c_storageIwE7__weeksEv(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i1 = STACKTOP;
 if ((HEAP8[6160] | 0) != 0) {
  i2 = HEAP32[1538] | 0;
  STACKTOP = i1;
  return i2 | 0;
 }
 if ((___cxa_guard_acquire(6160) | 0) == 0) {
  i2 = HEAP32[1538] | 0;
  STACKTOP = i1;
  return i2 | 0;
 }
 if ((HEAP8[12808] | 0) == 0) {
  if ((___cxa_guard_acquire(12808) | 0) != 0) {
   _memset(12640, 0, 168) | 0;
   _atexit(123, 0, ___dso_handle | 0) | 0;
   ___cxa_guard_release(12808);
  }
 }
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(12640, 12816) | 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(12652 | 0, 12848) | 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(12664 | 0, 12880) | 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(12676 | 0, 12912) | 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(12688 | 0, 12952) | 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(12700 | 0, 12992) | 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(12712 | 0, 13024) | 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(12724 | 0, 13064) | 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(12736 | 0, 13080) | 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(12748 | 0, 13096) | 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(12760 | 0, 13112) | 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(12772 | 0, 13128) | 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(12784 | 0, 13144) | 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(12796 | 0, 13160) | 0;
 HEAP32[1538] = 12640;
 ___cxa_guard_release(6160);
 i2 = HEAP32[1538] | 0;
 STACKTOP = i1;
 return i2 | 0;
}
function __ZNKSt3__120__time_get_c_storageIcE7__weeksEv(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i1 = STACKTOP;
 if ((HEAP8[6144] | 0) != 0) {
  i2 = HEAP32[1534] | 0;
  STACKTOP = i1;
  return i2 | 0;
 }
 if ((___cxa_guard_acquire(6144) | 0) == 0) {
  i2 = HEAP32[1534] | 0;
  STACKTOP = i1;
  return i2 | 0;
 }
 if ((HEAP8[13344] | 0) == 0) {
  if ((___cxa_guard_acquire(13344) | 0) != 0) {
   _memset(13176, 0, 168) | 0;
   _atexit(122, 0, ___dso_handle | 0) | 0;
   ___cxa_guard_release(13344);
  }
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(13176, 13352) | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(13188 | 0, 13360) | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(13200 | 0, 13368) | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(13212 | 0, 13376) | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(13224 | 0, 13392) | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(13236 | 0, 13408) | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(13248 | 0, 13416) | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(13260 | 0, 13432) | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(13272 | 0, 13440) | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(13284 | 0, 13448) | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(13296 | 0, 13456) | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(13308 | 0, 13464) | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(13320 | 0, 13472) | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(13332 | 0, 13480) | 0;
 HEAP32[1534] = 13176;
 ___cxa_guard_release(6144);
 i2 = HEAP32[1534] | 0;
 STACKTOP = i1;
 return i2 | 0;
}
function __ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_c(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i4 = i3 + 20 | 0;
 i5 = i3 + 24 | 0;
 i6 = i3 + 8 | 0;
 i7 = i3 + 16 | 0;
 i8 = i3;
 HEAP8[i5] = i2;
 HEAP8[i6] = 0;
 HEAP32[i6 + 4 >> 2] = i1;
 i2 = HEAP32[(HEAP32[i1 >> 2] | 0) + -12 >> 2] | 0;
 if ((HEAP32[i1 + (i2 + 16) >> 2] | 0) != 0) {
  __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev(i6);
  STACKTOP = i3;
  return i1 | 0;
 }
 i9 = HEAP32[i1 + (i2 + 72) >> 2] | 0;
 if ((i9 | 0) == 0) {
  i10 = i2;
 } else {
  __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv(i9) | 0;
  i10 = HEAP32[(HEAP32[i1 >> 2] | 0) + -12 >> 2] | 0;
 }
 HEAP8[i6] = 1;
 HEAP32[i7 >> 2] = HEAP32[i1 + (i10 + 24) >> 2];
 i9 = i1 + i10 | 0;
 i2 = HEAP32[i1 + (i10 + 4) >> 2] | 0;
 i11 = i5 + 1 | 0;
 i12 = i1 + (i10 + 76) | 0;
 i10 = HEAP32[i12 >> 2] | 0;
 if ((i10 | 0) == -1) {
  __ZNKSt3__18ios_base6getlocEv(i4, i9);
  i13 = __ZNKSt3__16locale9use_facetERNS0_2idE(i4, 5832) | 0;
  i14 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i13 >> 2] | 0) + 28 >> 2] & 31](i13, 32) | 0;
  __ZNSt3__16localeD2Ev(i4);
  i13 = i14 << 24 >> 24;
  HEAP32[i12 >> 2] = i13;
  i15 = i13;
 } else {
  i15 = i10;
 }
 i10 = i15 & 255;
 i15 = (i2 & 176 | 0) == 32 ? i11 : i5;
 HEAP32[i4 + 0 >> 2] = HEAP32[i7 + 0 >> 2];
 __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(i8, i4, i5, i15, i11, i9, i10);
 if ((HEAP32[i8 >> 2] | 0) != 0) {
  __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev(i6);
  STACKTOP = i3;
  return i1 | 0;
 }
 i8 = HEAP32[(HEAP32[i1 >> 2] | 0) + -12 >> 2] | 0;
 __ZNSt3__18ios_base5clearEj(i1 + i8 | 0, HEAP32[i1 + (i8 + 16) >> 2] | 5);
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev(i6);
 STACKTOP = i3;
 return i1 | 0;
}
function __Z15SubDivideMatrixiPPiPS0_(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 i4 = STACKTOP;
 i5 = i1 >> 1;
 i6 = (i5 | 0) > 0;
 if (i6) {
  i7 = (i5 | 0) < (i1 | 0);
  i8 = i3 + 4 | 0;
  i9 = 0;
  do {
   i10 = HEAP32[i2 + (i9 << 2) >> 2] | 0;
   i11 = HEAP32[(HEAP32[i3 >> 2] | 0) + (i9 << 2) >> 2] | 0;
   i12 = 0;
   do {
    HEAP32[i11 + (i12 << 2) >> 2] = HEAP32[i10 + (i12 << 2) >> 2];
    i12 = i12 + 1 | 0;
   } while ((i12 | 0) != (i5 | 0));
   if (i7) {
    i12 = HEAP32[i2 + (i9 << 2) >> 2] | 0;
    i10 = HEAP32[(HEAP32[i8 >> 2] | 0) + (i9 << 2) >> 2] | 0;
    i11 = i5;
    do {
     HEAP32[i10 + (i11 - i5 << 2) >> 2] = HEAP32[i12 + (i11 << 2) >> 2];
     i11 = i11 + 1 | 0;
    } while ((i11 | 0) != (i1 | 0));
   }
   i9 = i9 + 1 | 0;
  } while ((i9 | 0) != (i5 | 0));
 }
 if ((i5 | 0) >= (i1 | 0)) {
  STACKTOP = i4;
  return 1;
 }
 i9 = i3 + 12 | 0;
 i8 = i3 + 8 | 0;
 if (i6) {
  i13 = i5;
 } else {
  i6 = i5;
  do {
   i3 = HEAP32[i2 + (i6 << 2) >> 2] | 0;
   i7 = HEAP32[(HEAP32[i9 >> 2] | 0) + (i6 - i5 << 2) >> 2] | 0;
   i11 = i5;
   do {
    HEAP32[i7 + (i11 - i5 << 2) >> 2] = HEAP32[i3 + (i11 << 2) >> 2];
    i11 = i11 + 1 | 0;
   } while ((i11 | 0) != (i1 | 0));
   i6 = i6 + 1 | 0;
  } while ((i6 | 0) != (i1 | 0));
  STACKTOP = i4;
  return 1;
 }
 do {
  i6 = HEAP32[i2 + (i13 << 2) >> 2] | 0;
  i11 = HEAP32[(HEAP32[i8 >> 2] | 0) + (i13 - i5 << 2) >> 2] | 0;
  i3 = 0;
  do {
   HEAP32[i11 + (i3 << 2) >> 2] = HEAP32[i6 + (i3 << 2) >> 2];
   i3 = i3 + 1 | 0;
  } while ((i3 | 0) != (i5 | 0));
  i3 = HEAP32[i2 + (i13 << 2) >> 2] | 0;
  i6 = HEAP32[(HEAP32[i9 >> 2] | 0) + (i13 - i5 << 2) >> 2] | 0;
  i11 = i5;
  do {
   HEAP32[i6 + (i11 - i5 << 2) >> 2] = HEAP32[i3 + (i11 << 2) >> 2];
   i11 = i11 + 1 | 0;
  } while ((i11 | 0) != (i1 | 0));
  i13 = i13 + 1 | 0;
 } while ((i13 | 0) != (i1 | 0));
 STACKTOP = i4;
 return 1;
}
function __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0;
 i5 = STACKTOP;
 i6 = HEAP8[i1] | 0;
 if ((i6 & 1) == 0) {
  i7 = (i6 & 255) >>> 1;
 } else {
  i7 = HEAP32[i1 + 4 >> 2] | 0;
 }
 if ((i7 | 0) == 0) {
  STACKTOP = i5;
  return;
 }
 if ((i2 | 0) == (i3 | 0)) {
  i8 = i6;
 } else {
  i7 = i3 + -4 | 0;
  if (i7 >>> 0 > i2 >>> 0) {
   i9 = i2;
   i10 = i7;
   do {
    i7 = HEAP32[i9 >> 2] | 0;
    HEAP32[i9 >> 2] = HEAP32[i10 >> 2];
    HEAP32[i10 >> 2] = i7;
    i9 = i9 + 4 | 0;
    i10 = i10 + -4 | 0;
   } while (i9 >>> 0 < i10 >>> 0);
   i8 = HEAP8[i1] | 0;
  } else {
   i8 = i6;
  }
 }
 if ((i8 & 1) == 0) {
  i11 = i1 + 1 | 0;
  i12 = (i8 & 255) >>> 1;
 } else {
  i11 = HEAP32[i1 + 8 >> 2] | 0;
  i12 = HEAP32[i1 + 4 >> 2] | 0;
 }
 i1 = i3 + -4 | 0;
 i3 = HEAP8[i11] | 0;
 i8 = i3 << 24 >> 24 < 1 | i3 << 24 >> 24 == 127;
 L18 : do {
  if (i1 >>> 0 > i2 >>> 0) {
   i6 = i11 + i12 | 0;
   i10 = i3;
   i9 = i11;
   i7 = i2;
   i13 = i8;
   while (1) {
    if (!i13) {
     if ((i10 << 24 >> 24 | 0) != (HEAP32[i7 >> 2] | 0)) {
      break;
     }
    }
    i14 = (i6 - i9 | 0) > 1 ? i9 + 1 | 0 : i9;
    i15 = i7 + 4 | 0;
    i16 = HEAP8[i14] | 0;
    i17 = i16 << 24 >> 24 < 1 | i16 << 24 >> 24 == 127;
    if (i15 >>> 0 < i1 >>> 0) {
     i10 = i16;
     i9 = i14;
     i7 = i15;
     i13 = i17;
    } else {
     i18 = i16;
     i19 = i17;
     break L18;
    }
   }
   HEAP32[i4 >> 2] = 4;
   STACKTOP = i5;
   return;
  } else {
   i18 = i3;
   i19 = i8;
  }
 } while (0);
 if (i19) {
  STACKTOP = i5;
  return;
 }
 i19 = HEAP32[i1 >> 2] | 0;
 if (!(i18 << 24 >> 24 >>> 0 < i19 >>> 0 | (i19 | 0) == 0)) {
  STACKTOP = i5;
  return;
 }
 HEAP32[i4 >> 2] = 4;
 STACKTOP = i5;
 return;
}
function __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8__appendEj(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0;
 i3 = STACKTOP;
 i4 = i1 + 8 | 0;
 i5 = i1 + 4 | 0;
 i6 = HEAP32[i5 >> 2] | 0;
 i7 = HEAP32[i4 >> 2] | 0;
 i8 = i6;
 if (!(i7 - i8 >> 2 >>> 0 < i2 >>> 0)) {
  i9 = i2;
  i10 = i6;
  do {
   if ((i10 | 0) == 0) {
    i11 = 0;
   } else {
    HEAP32[i10 >> 2] = 0;
    i11 = HEAP32[i5 >> 2] | 0;
   }
   i10 = i11 + 4 | 0;
   HEAP32[i5 >> 2] = i10;
   i9 = i9 + -1 | 0;
  } while ((i9 | 0) != 0);
  STACKTOP = i3;
  return;
 }
 i9 = i1 + 16 | 0;
 i10 = HEAP32[i1 >> 2] | 0;
 i11 = i8 - i10 >> 2;
 i8 = i11 + i2 | 0;
 if (i8 >>> 0 > 1073741823) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(0);
 }
 i6 = i7 - i10 | 0;
 if (i6 >> 2 >>> 0 < 536870911) {
  i10 = i6 >> 1;
  i6 = i10 >>> 0 < i8 >>> 0 ? i8 : i10;
  if ((i6 | 0) == 0) {
   i12 = 0;
   i13 = 0;
  } else {
   i10 = i1 + 128 | 0;
   if ((HEAP8[i10] | 0) == 0 & i6 >>> 0 < 29) {
    HEAP8[i10] = 1;
    i12 = i6;
    i13 = i9;
   } else {
    i14 = i6;
    i15 = 11;
   }
  }
 } else {
  i14 = 1073741823;
  i15 = 11;
 }
 if ((i15 | 0) == 11) {
  i12 = i14;
  i13 = __Znwj(i14 << 2) | 0;
 }
 i14 = i2;
 i2 = i13 + (i11 << 2) | 0;
 do {
  if ((i2 | 0) == 0) {
   i16 = 0;
  } else {
   HEAP32[i2 >> 2] = 0;
   i16 = i2;
  }
  i2 = i16 + 4 | 0;
  i14 = i14 + -1 | 0;
 } while ((i14 | 0) != 0);
 i14 = HEAP32[i1 >> 2] | 0;
 i16 = (HEAP32[i5 >> 2] | 0) - i14 | 0;
 i15 = i13 + (i11 - (i16 >> 2) << 2) | 0;
 _memcpy(i15 | 0, i14 | 0, i16 | 0) | 0;
 HEAP32[i1 >> 2] = i15;
 HEAP32[i5 >> 2] = i2;
 HEAP32[i4 >> 2] = i13 + (i12 << 2);
 if ((i14 | 0) == 0) {
  STACKTOP = i3;
  return;
 }
 if ((i9 | 0) == (i14 | 0)) {
  HEAP8[i1 + 128 | 0] = 0;
  STACKTOP = i3;
  return;
 } else {
  __ZdlPv(i14);
  STACKTOP = i3;
  return;
 }
}
function __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i6 = i5;
 i7 = i5 + 12 | 0;
 __ZNKSt3__18ios_base6getlocEv(i7, i2);
 i2 = HEAP32[i7 >> 2] | 0;
 if (!((HEAP32[1456] | 0) == -1)) {
  HEAP32[i6 >> 2] = 5824;
  HEAP32[i6 + 4 >> 2] = 118;
  HEAP32[i6 + 8 >> 2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(5824, i6, 119);
 }
 i8 = (HEAP32[5828 >> 2] | 0) + -1 | 0;
 i9 = HEAP32[i2 + 8 >> 2] | 0;
 if (!((HEAP32[i2 + 12 >> 2] | 0) - i9 >> 2 >>> 0 > i8 >>> 0)) {
  i10 = ___cxa_allocate_exception(4) | 0;
  __ZNSt8bad_castC2Ev(i10);
  ___cxa_throw(i10 | 0, 13792, 107);
 }
 i2 = HEAP32[i9 + (i8 << 2) >> 2] | 0;
 if ((i2 | 0) == 0) {
  i10 = ___cxa_allocate_exception(4) | 0;
  __ZNSt8bad_castC2Ev(i10);
  ___cxa_throw(i10 | 0, 13792, 107);
 }
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[i2 >> 2] | 0) + 48 >> 2] & 7](i2, 4376, 4402 | 0, i3) | 0;
 i3 = HEAP32[i7 >> 2] | 0;
 if (!((HEAP32[1496] | 0) == -1)) {
  HEAP32[i6 >> 2] = 5984;
  HEAP32[i6 + 4 >> 2] = 118;
  HEAP32[i6 + 8 >> 2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(5984, i6, 119);
 }
 i6 = (HEAP32[5988 >> 2] | 0) + -1 | 0;
 i2 = HEAP32[i3 + 8 >> 2] | 0;
 if (!((HEAP32[i3 + 12 >> 2] | 0) - i2 >> 2 >>> 0 > i6 >>> 0)) {
  i11 = ___cxa_allocate_exception(4) | 0;
  __ZNSt8bad_castC2Ev(i11);
  ___cxa_throw(i11 | 0, 13792, 107);
 }
 i3 = HEAP32[i2 + (i6 << 2) >> 2] | 0;
 if ((i3 | 0) == 0) {
  i11 = ___cxa_allocate_exception(4) | 0;
  __ZNSt8bad_castC2Ev(i11);
  ___cxa_throw(i11 | 0, 13792, 107);
 } else {
  HEAP32[i4 >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 16 >> 2] & 127](i3) | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i3 >> 2] | 0) + 20 >> 2] & 63](i1, i3);
  __ZNSt3__114__shared_count16__release_sharedEv(HEAP32[i7 >> 2] | 0) | 0;
  STACKTOP = i5;
  return;
 }
}
function __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i6 = i5;
 i7 = i5 + 12 | 0;
 __ZNKSt3__18ios_base6getlocEv(i7, i2);
 i2 = HEAP32[i7 >> 2] | 0;
 if (!((HEAP32[1458] | 0) == -1)) {
  HEAP32[i6 >> 2] = 5832;
  HEAP32[i6 + 4 >> 2] = 118;
  HEAP32[i6 + 8 >> 2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(5832, i6, 119);
 }
 i8 = (HEAP32[5836 >> 2] | 0) + -1 | 0;
 i9 = HEAP32[i2 + 8 >> 2] | 0;
 if (!((HEAP32[i2 + 12 >> 2] | 0) - i9 >> 2 >>> 0 > i8 >>> 0)) {
  i10 = ___cxa_allocate_exception(4) | 0;
  __ZNSt8bad_castC2Ev(i10);
  ___cxa_throw(i10 | 0, 13792, 107);
 }
 i2 = HEAP32[i9 + (i8 << 2) >> 2] | 0;
 if ((i2 | 0) == 0) {
  i10 = ___cxa_allocate_exception(4) | 0;
  __ZNSt8bad_castC2Ev(i10);
  ___cxa_throw(i10 | 0, 13792, 107);
 }
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[i2 >> 2] | 0) + 32 >> 2] & 7](i2, 4376, 4402 | 0, i3) | 0;
 i3 = HEAP32[i7 >> 2] | 0;
 if (!((HEAP32[1494] | 0) == -1)) {
  HEAP32[i6 >> 2] = 5976;
  HEAP32[i6 + 4 >> 2] = 118;
  HEAP32[i6 + 8 >> 2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(5976, i6, 119);
 }
 i6 = (HEAP32[5980 >> 2] | 0) + -1 | 0;
 i2 = HEAP32[i3 + 8 >> 2] | 0;
 if (!((HEAP32[i3 + 12 >> 2] | 0) - i2 >> 2 >>> 0 > i6 >>> 0)) {
  i11 = ___cxa_allocate_exception(4) | 0;
  __ZNSt8bad_castC2Ev(i11);
  ___cxa_throw(i11 | 0, 13792, 107);
 }
 i3 = HEAP32[i2 + (i6 << 2) >> 2] | 0;
 if ((i3 | 0) == 0) {
  i11 = ___cxa_allocate_exception(4) | 0;
  __ZNSt8bad_castC2Ev(i11);
  ___cxa_throw(i11 | 0, 13792, 107);
 } else {
  HEAP8[i4] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 16 >> 2] & 127](i3) | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i3 >> 2] | 0) + 20 >> 2] & 63](i1, i3);
  __ZNSt3__114__shared_count16__release_sharedEv(HEAP32[i7 >> 2] | 0) | 0;
  STACKTOP = i5;
  return;
 }
}
function ___dynamic_cast(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 i6 = i5;
 i7 = HEAP32[i1 >> 2] | 0;
 i8 = i1 + (HEAP32[i7 + -8 >> 2] | 0) | 0;
 i9 = HEAP32[i7 + -4 >> 2] | 0;
 HEAP32[i6 >> 2] = i3;
 HEAP32[i6 + 4 >> 2] = i1;
 HEAP32[i6 + 8 >> 2] = i2;
 HEAP32[i6 + 12 >> 2] = i4;
 i4 = i6 + 16 | 0;
 i2 = i6 + 20 | 0;
 i1 = i6 + 24 | 0;
 i7 = i6 + 28 | 0;
 i10 = i6 + 32 | 0;
 i11 = i6 + 40 | 0;
 i12 = (i9 | 0) == (i3 | 0);
 i3 = i4 + 0 | 0;
 i13 = i3 + 36 | 0;
 do {
  HEAP32[i3 >> 2] = 0;
  i3 = i3 + 4 | 0;
 } while ((i3 | 0) < (i13 | 0));
 HEAP16[i4 + 36 >> 1] = 0;
 HEAP8[i4 + 38 | 0] = 0;
 if (i12) {
  HEAP32[i6 + 48 >> 2] = 1;
  FUNCTION_TABLE_viiiiii[HEAP32[(HEAP32[i9 >> 2] | 0) + 20 >> 2] & 31](i9, i6, i8, i8, 1, 0);
  i14 = (HEAP32[i1 >> 2] | 0) == 1 ? i8 : 0;
  STACKTOP = i5;
  return i14 | 0;
 }
 FUNCTION_TABLE_viiiii[HEAP32[(HEAP32[i9 >> 2] | 0) + 24 >> 2] & 3](i9, i6, i8, 1, 0);
 i8 = HEAP32[i6 + 36 >> 2] | 0;
 if ((i8 | 0) == 1) {
  if ((HEAP32[i1 >> 2] | 0) != 1) {
   if ((HEAP32[i11 >> 2] | 0) != 0) {
    i14 = 0;
    STACKTOP = i5;
    return i14 | 0;
   }
   if ((HEAP32[i7 >> 2] | 0) != 1) {
    i14 = 0;
    STACKTOP = i5;
    return i14 | 0;
   }
   if ((HEAP32[i10 >> 2] | 0) != 1) {
    i14 = 0;
    STACKTOP = i5;
    return i14 | 0;
   }
  }
  i14 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i5;
  return i14 | 0;
 } else if ((i8 | 0) == 0) {
  if ((HEAP32[i11 >> 2] | 0) != 1) {
   i14 = 0;
   STACKTOP = i5;
   return i14 | 0;
  }
  if ((HEAP32[i7 >> 2] | 0) != 1) {
   i14 = 0;
   STACKTOP = i5;
   return i14 | 0;
  }
  i14 = (HEAP32[i10 >> 2] | 0) == 1 ? HEAP32[i2 >> 2] | 0 : 0;
  STACKTOP = i5;
  return i14 | 0;
 } else {
  i14 = 0;
  STACKTOP = i5;
  return i14 | 0;
 }
 return 0;
}
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i6 = STACKTOP;
 i7 = HEAP32[i2 + 68 >> 2] | 0;
 if ((i7 | 0) == 0) {
  i8 = ___cxa_allocate_exception(4) | 0;
  __ZNSt8bad_castC2Ev(i8);
  ___cxa_throw(i8 | 0, 13792, 107);
 }
 i8 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i7 >> 2] | 0) + 24 >> 2] & 127](i7) | 0;
 i7 = i2 + 64 | 0;
 if ((HEAP32[i7 >> 2] | 0) != 0) {
  i9 = (i8 | 0) > 0;
  if (i9 | (i3 | 0) == 0 & (i4 | 0) == 0) {
   if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 24 >> 2] & 127](i2) | 0) == 0) {
    if (!(i5 >>> 0 < 3)) {
     i10 = i1;
     HEAP32[i10 >> 2] = 0;
     HEAP32[i10 + 4 >> 2] = 0;
     i10 = i1 + 8 | 0;
     HEAP32[i10 >> 2] = -1;
     HEAP32[i10 + 4 >> 2] = -1;
     STACKTOP = i6;
     return;
    }
    i10 = HEAP32[i7 >> 2] | 0;
    if (i9) {
     i9 = ___muldi3(i8 | 0, ((i8 | 0) < 0) << 31 >> 31 | 0, i3 | 0, i4 | 0) | 0;
     i11 = i9;
    } else {
     i11 = 0;
    }
    if ((_fseek(i10 | 0, i11 | 0, i5 | 0) | 0) == 0) {
     i5 = _ftell(HEAP32[i7 >> 2] | 0) | 0;
     i7 = i2 + 72 | 0;
     i2 = HEAP32[i7 + 4 >> 2] | 0;
     i11 = i1;
     HEAP32[i11 >> 2] = HEAP32[i7 >> 2];
     HEAP32[i11 + 4 >> 2] = i2;
     i2 = i1 + 8 | 0;
     HEAP32[i2 >> 2] = i5;
     HEAP32[i2 + 4 >> 2] = ((i5 | 0) < 0) << 31 >> 31;
     STACKTOP = i6;
     return;
    } else {
     i5 = i1;
     HEAP32[i5 >> 2] = 0;
     HEAP32[i5 + 4 >> 2] = 0;
     i5 = i1 + 8 | 0;
     HEAP32[i5 >> 2] = -1;
     HEAP32[i5 + 4 >> 2] = -1;
     STACKTOP = i6;
     return;
    }
   }
  }
 }
 i5 = i1;
 HEAP32[i5 >> 2] = 0;
 HEAP32[i5 + 4 >> 2] = 0;
 i5 = i1 + 8 | 0;
 HEAP32[i5 >> 2] = -1;
 HEAP32[i5 + 4 >> 2] = -1;
 STACKTOP = i6;
 return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm(i1, i2, i3, i4, i5, i6, i7) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 var i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i9 = i8;
 i10 = i8 + 16 | 0;
 i11 = i8 + 12 | 0;
 __ZNKSt3__18ios_base6getlocEv(i11, i5);
 i5 = HEAP32[i11 >> 2] | 0;
 if (!((HEAP32[1456] | 0) == -1)) {
  HEAP32[i9 >> 2] = 5824;
  HEAP32[i9 + 4 >> 2] = 118;
  HEAP32[i9 + 8 >> 2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(5824, i9, 119);
 }
 i12 = (HEAP32[5828 >> 2] | 0) + -1 | 0;
 i13 = HEAP32[i5 + 8 >> 2] | 0;
 if (!((HEAP32[i5 + 12 >> 2] | 0) - i13 >> 2 >>> 0 > i12 >>> 0)) {
  i14 = ___cxa_allocate_exception(4) | 0;
  __ZNSt8bad_castC2Ev(i14);
  ___cxa_throw(i14 | 0, 13792, 107);
 }
 i5 = HEAP32[i13 + (i12 << 2) >> 2] | 0;
 if ((i5 | 0) == 0) {
  i14 = ___cxa_allocate_exception(4) | 0;
  __ZNSt8bad_castC2Ev(i14);
  ___cxa_throw(i14 | 0, 13792, 107);
 }
 __ZNSt3__114__shared_count16__release_sharedEv(HEAP32[i11 >> 2] | 0) | 0;
 i11 = HEAP32[i4 >> 2] | 0;
 i4 = i2 + 8 | 0;
 i2 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 4 >> 2] & 127](i4) | 0;
 HEAP32[i10 >> 2] = i11;
 i11 = i2 + 288 | 0;
 HEAP32[i9 + 0 >> 2] = HEAP32[i10 + 0 >> 2];
 i10 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb(i3, i9, i2, i11, i5, i6, 0) | 0) - i2 | 0;
 if ((i10 | 0) >= 288) {
  i15 = HEAP32[i3 >> 2] | 0;
  HEAP32[i1 >> 2] = i15;
  STACKTOP = i8;
  return;
 }
 HEAP32[i7 + 16 >> 2] = ((i10 | 0) / 12 | 0 | 0) % 12 | 0;
 i15 = HEAP32[i3 >> 2] | 0;
 HEAP32[i1 >> 2] = i15;
 STACKTOP = i8;
 return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm(i1, i2, i3, i4, i5, i6, i7) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 var i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i9 = i8;
 i10 = i8 + 16 | 0;
 i11 = i8 + 12 | 0;
 __ZNKSt3__18ios_base6getlocEv(i11, i5);
 i5 = HEAP32[i11 >> 2] | 0;
 if (!((HEAP32[1458] | 0) == -1)) {
  HEAP32[i9 >> 2] = 5832;
  HEAP32[i9 + 4 >> 2] = 118;
  HEAP32[i9 + 8 >> 2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(5832, i9, 119);
 }
 i12 = (HEAP32[5836 >> 2] | 0) + -1 | 0;
 i13 = HEAP32[i5 + 8 >> 2] | 0;
 if (!((HEAP32[i5 + 12 >> 2] | 0) - i13 >> 2 >>> 0 > i12 >>> 0)) {
  i14 = ___cxa_allocate_exception(4) | 0;
  __ZNSt8bad_castC2Ev(i14);
  ___cxa_throw(i14 | 0, 13792, 107);
 }
 i5 = HEAP32[i13 + (i12 << 2) >> 2] | 0;
 if ((i5 | 0) == 0) {
  i14 = ___cxa_allocate_exception(4) | 0;
  __ZNSt8bad_castC2Ev(i14);
  ___cxa_throw(i14 | 0, 13792, 107);
 }
 __ZNSt3__114__shared_count16__release_sharedEv(HEAP32[i11 >> 2] | 0) | 0;
 i11 = HEAP32[i4 >> 2] | 0;
 i4 = i2 + 8 | 0;
 i2 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 4 >> 2] & 127](i4) | 0;
 HEAP32[i10 >> 2] = i11;
 i11 = i2 + 288 | 0;
 HEAP32[i9 + 0 >> 2] = HEAP32[i10 + 0 >> 2];
 i10 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb(i3, i9, i2, i11, i5, i6, 0) | 0) - i2 | 0;
 if ((i10 | 0) >= 288) {
  i15 = HEAP32[i3 >> 2] | 0;
  HEAP32[i1 >> 2] = i15;
  STACKTOP = i8;
  return;
 }
 HEAP32[i7 + 16 >> 2] = ((i10 | 0) / 12 | 0 | 0) % 12 | 0;
 i15 = HEAP32[i3 >> 2] | 0;
 HEAP32[i1 >> 2] = i15;
 STACKTOP = i8;
 return;
}
function __Z21ExecuteMultiplicationRK6MatrixS1_PFiiPPiS3_S3_E(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, d8 = 0.0, i9 = 0, i10 = 0, d11 = 0.0;
 i4 = STACKTOP;
 i5 = HEAP32[i1 >> 2] | 0;
 i6 = HEAP32[i2 >> 2] | 0;
 i7 = HEAP32[i1 + 4 >> 2] | 0;
 if ((i5 | 0) == 0 | (i6 | 0) == 0) {
  d8 = 0.0;
  STACKTOP = i4;
  return +d8;
 }
 if ((i7 | 0) != (HEAP32[i2 + 4 >> 2] | 0)) {
  _puts(1064) | 0;
  d8 = 0.0;
  STACKTOP = i4;
  return +d8;
 }
 i2 = i7 >>> 0 > 1073741823 ? -1 : i7 << 2;
 i1 = __Znaj(i2) | 0;
 i9 = (i7 | 0) > 0;
 if (i9) {
  i10 = 0;
  do {
   HEAP32[i1 + (i10 << 2) >> 2] = __Znaj(i2) | 0;
   i10 = i10 + 1 | 0;
  } while ((i10 | 0) != (i7 | 0));
 }
 i10 = _clock() | 0;
 FUNCTION_TABLE_iiiii[i3 & 7](i7, i5, i6, i1) | 0;
 i6 = (_clock() | 0) - i10 | 0;
 if ((HEAP8[48] | 0) != 0) {
  __ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(1184, 8) | 0;
  if (i9) {
   i10 = 0;
   do {
    i5 = i1 + (i10 << 2) | 0;
    i3 = 0;
    do {
     __ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEi(1184, HEAP32[(HEAP32[i5 >> 2] | 0) + (i3 << 2) >> 2] | 0) | 0, 16) | 0;
     i3 = i3 + 1 | 0;
    } while ((i3 | 0) != (i7 | 0));
    __ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(1184, 8) | 0;
    i10 = i10 + 1 | 0;
   } while ((i10 | 0) != (i7 | 0));
  }
  __ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(1184, 8) | 0;
 }
 d11 = +(i6 | 0) / 1.0e6 + 0.0;
 if ((i1 | 0) == 0) {
  d8 = d11;
  STACKTOP = i4;
  return +d8;
 }
 if (i9) {
  i9 = 0;
  do {
   i6 = HEAP32[i1 + (i9 << 2) >> 2] | 0;
   if ((i6 | 0) != 0) {
    __ZdaPv(i6);
   }
   i9 = i9 + 1 | 0;
  } while ((i9 | 0) != (i7 | 0));
 }
 __ZdaPv(i1);
 d8 = d11;
 STACKTOP = i4;
 return +d8;
}
function __ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i5 = STACKTOP;
 if ((i1 | 0) == (HEAP32[i2 + 8 >> 2] | 0)) {
  i6 = i2 + 16 | 0;
  i7 = HEAP32[i6 >> 2] | 0;
  if ((i7 | 0) == 0) {
   HEAP32[i6 >> 2] = i3;
   HEAP32[i2 + 24 >> 2] = i4;
   HEAP32[i2 + 36 >> 2] = 1;
   STACKTOP = i5;
   return;
  }
  if ((i7 | 0) != (i3 | 0)) {
   i7 = i2 + 36 | 0;
   HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + 1;
   HEAP32[i2 + 24 >> 2] = 2;
   HEAP8[i2 + 54 | 0] = 1;
   STACKTOP = i5;
   return;
  }
  i7 = i2 + 24 | 0;
  if ((HEAP32[i7 >> 2] | 0) != 2) {
   STACKTOP = i5;
   return;
  }
  HEAP32[i7 >> 2] = i4;
  STACKTOP = i5;
  return;
 }
 i7 = HEAP32[i1 + 12 >> 2] | 0;
 i6 = i1 + (i7 << 3) + 16 | 0;
 i8 = HEAP32[i1 + 20 >> 2] | 0;
 i9 = i8 >> 8;
 if ((i8 & 1 | 0) == 0) {
  i10 = i9;
 } else {
  i10 = HEAP32[(HEAP32[i3 >> 2] | 0) + i9 >> 2] | 0;
 }
 i9 = HEAP32[i1 + 16 >> 2] | 0;
 FUNCTION_TABLE_viiii[HEAP32[(HEAP32[i9 >> 2] | 0) + 28 >> 2] & 15](i9, i2, i3 + i10 | 0, (i8 & 2 | 0) != 0 ? i4 : 2);
 if ((i7 | 0) <= 1) {
  STACKTOP = i5;
  return;
 }
 i7 = i2 + 54 | 0;
 i8 = i1 + 24 | 0;
 while (1) {
  i1 = HEAP32[i8 + 4 >> 2] | 0;
  i10 = i1 >> 8;
  if ((i1 & 1 | 0) == 0) {
   i11 = i10;
  } else {
   i11 = HEAP32[(HEAP32[i3 >> 2] | 0) + i10 >> 2] | 0;
  }
  i10 = HEAP32[i8 >> 2] | 0;
  FUNCTION_TABLE_viiii[HEAP32[(HEAP32[i10 >> 2] | 0) + 28 >> 2] & 15](i10, i2, i3 + i11 | 0, (i1 & 2 | 0) != 0 ? i4 : 2);
  if ((HEAP8[i7] | 0) != 0) {
   i12 = 16;
   break;
  }
  i1 = i8 + 8 | 0;
  if (i1 >>> 0 < i6 >>> 0) {
   i8 = i1;
  } else {
   i12 = 16;
   break;
  }
 }
 if ((i12 | 0) == 16) {
  STACKTOP = i5;
  return;
 }
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm(i1, i2, i3, i4, i5, i6, i7) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 var i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i9 = i8;
 i10 = i8 + 16 | 0;
 i11 = i8 + 12 | 0;
 __ZNKSt3__18ios_base6getlocEv(i11, i5);
 i5 = HEAP32[i11 >> 2] | 0;
 if (!((HEAP32[1456] | 0) == -1)) {
  HEAP32[i9 >> 2] = 5824;
  HEAP32[i9 + 4 >> 2] = 118;
  HEAP32[i9 + 8 >> 2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(5824, i9, 119);
 }
 i12 = (HEAP32[5828 >> 2] | 0) + -1 | 0;
 i13 = HEAP32[i5 + 8 >> 2] | 0;
 if (!((HEAP32[i5 + 12 >> 2] | 0) - i13 >> 2 >>> 0 > i12 >>> 0)) {
  i14 = ___cxa_allocate_exception(4) | 0;
  __ZNSt8bad_castC2Ev(i14);
  ___cxa_throw(i14 | 0, 13792, 107);
 }
 i5 = HEAP32[i13 + (i12 << 2) >> 2] | 0;
 if ((i5 | 0) == 0) {
  i14 = ___cxa_allocate_exception(4) | 0;
  __ZNSt8bad_castC2Ev(i14);
  ___cxa_throw(i14 | 0, 13792, 107);
 }
 __ZNSt3__114__shared_count16__release_sharedEv(HEAP32[i11 >> 2] | 0) | 0;
 i11 = HEAP32[i4 >> 2] | 0;
 i4 = i2 + 8 | 0;
 i2 = FUNCTION_TABLE_ii[HEAP32[HEAP32[i4 >> 2] >> 2] & 127](i4) | 0;
 HEAP32[i10 >> 2] = i11;
 i11 = i2 + 168 | 0;
 HEAP32[i9 + 0 >> 2] = HEAP32[i10 + 0 >> 2];
 i10 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb(i3, i9, i2, i11, i5, i6, 0) | 0) - i2 | 0;
 if ((i10 | 0) >= 168) {
  i15 = HEAP32[i3 >> 2] | 0;
  HEAP32[i1 >> 2] = i15;
  STACKTOP = i8;
  return;
 }
 HEAP32[i7 + 24 >> 2] = ((i10 | 0) / 12 | 0 | 0) % 7 | 0;
 i15 = HEAP32[i3 >> 2] | 0;
 HEAP32[i1 >> 2] = i15;
 STACKTOP = i8;
 return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm(i1, i2, i3, i4, i5, i6, i7) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 var i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i9 = i8;
 i10 = i8 + 16 | 0;
 i11 = i8 + 12 | 0;
 __ZNKSt3__18ios_base6getlocEv(i11, i5);
 i5 = HEAP32[i11 >> 2] | 0;
 if (!((HEAP32[1458] | 0) == -1)) {
  HEAP32[i9 >> 2] = 5832;
  HEAP32[i9 + 4 >> 2] = 118;
  HEAP32[i9 + 8 >> 2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(5832, i9, 119);
 }
 i12 = (HEAP32[5836 >> 2] | 0) + -1 | 0;
 i13 = HEAP32[i5 + 8 >> 2] | 0;
 if (!((HEAP32[i5 + 12 >> 2] | 0) - i13 >> 2 >>> 0 > i12 >>> 0)) {
  i14 = ___cxa_allocate_exception(4) | 0;
  __ZNSt8bad_castC2Ev(i14);
  ___cxa_throw(i14 | 0, 13792, 107);
 }
 i5 = HEAP32[i13 + (i12 << 2) >> 2] | 0;
 if ((i5 | 0) == 0) {
  i14 = ___cxa_allocate_exception(4) | 0;
  __ZNSt8bad_castC2Ev(i14);
  ___cxa_throw(i14 | 0, 13792, 107);
 }
 __ZNSt3__114__shared_count16__release_sharedEv(HEAP32[i11 >> 2] | 0) | 0;
 i11 = HEAP32[i4 >> 2] | 0;
 i4 = i2 + 8 | 0;
 i2 = FUNCTION_TABLE_ii[HEAP32[HEAP32[i4 >> 2] >> 2] & 127](i4) | 0;
 HEAP32[i10 >> 2] = i11;
 i11 = i2 + 168 | 0;
 HEAP32[i9 + 0 >> 2] = HEAP32[i10 + 0 >> 2];
 i10 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb(i3, i9, i2, i11, i5, i6, 0) | 0) - i2 | 0;
 if ((i10 | 0) >= 168) {
  i15 = HEAP32[i3 >> 2] | 0;
  HEAP32[i1 >> 2] = i15;
  STACKTOP = i8;
  return;
 }
 HEAP32[i7 + 24 >> 2] = ((i10 | 0) / 12 | 0 | 0) % 7 | 0;
 i15 = HEAP32[i3 >> 2] | 0;
 HEAP32[i1 >> 2] = i15;
 STACKTOP = i8;
 return;
}
function __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(i1, i2, i3, i4, i5, i6, i7) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 var i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i9 = i8;
 i10 = HEAP32[i2 >> 2] | 0;
 if ((i10 | 0) == 0) {
  HEAP32[i1 >> 2] = 0;
  STACKTOP = i8;
  return;
 }
 i11 = i5;
 i5 = i3;
 i12 = i11 - i5 >> 2;
 i13 = i6 + 12 | 0;
 i6 = HEAP32[i13 >> 2] | 0;
 i14 = (i6 | 0) > (i12 | 0) ? i6 - i12 | 0 : 0;
 i12 = i4;
 i6 = i12 - i5 | 0;
 i5 = i6 >> 2;
 if ((i6 | 0) > 0) {
  if ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i10 >> 2] | 0) + 48 >> 2] & 31](i10, i3, i5) | 0) != (i5 | 0)) {
   HEAP32[i2 >> 2] = 0;
   HEAP32[i1 >> 2] = 0;
   STACKTOP = i8;
   return;
  }
 }
 do {
  if ((i14 | 0) > 0) {
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEjw(i9, i14, i7);
   if ((HEAP8[i9] & 1) == 0) {
    i15 = i9 + 4 | 0;
   } else {
    i15 = HEAP32[i9 + 8 >> 2] | 0;
   }
   if ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i10 >> 2] | 0) + 48 >> 2] & 31](i10, i15, i14) | 0) == (i14 | 0)) {
    __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(i9);
    break;
   }
   HEAP32[i2 >> 2] = 0;
   HEAP32[i1 >> 2] = 0;
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(i9);
   STACKTOP = i8;
   return;
  }
 } while (0);
 i9 = i11 - i12 | 0;
 i12 = i9 >> 2;
 if ((i9 | 0) > 0) {
  if ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i10 >> 2] | 0) + 48 >> 2] & 31](i10, i4, i12) | 0) != (i12 | 0)) {
   HEAP32[i2 >> 2] = 0;
   HEAP32[i1 >> 2] = 0;
   STACKTOP = i8;
   return;
  }
 }
 HEAP32[i13 >> 2] = 0;
 HEAP32[i1 >> 2] = i10;
 STACKTOP = i8;
 return;
}
function __ZNSt3__111__stdoutbufIwE8overflowEj(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i4 = i3 + 16 | 0;
 i5 = i3;
 i6 = i3 + 4 | 0;
 i7 = i3 + 8 | 0;
 i8 = (i2 | 0) == -1;
 L1 : do {
  if (!i8) {
   HEAP32[i5 >> 2] = i2;
   if ((HEAP8[i1 + 44 | 0] | 0) != 0) {
    if ((_fwrite(i5 | 0, 4, 1, HEAP32[i1 + 32 >> 2] | 0) | 0) == 1) {
     break;
    } else {
     i9 = -1;
    }
    STACKTOP = i3;
    return i9 | 0;
   }
   HEAP32[i6 >> 2] = i4;
   i10 = i5 + 4 | 0;
   i11 = i1 + 36 | 0;
   i12 = i1 + 40 | 0;
   i13 = i4 + 8 | 0;
   i14 = i4;
   i15 = i1 + 32 | 0;
   i16 = i5;
   while (1) {
    i17 = HEAP32[i11 >> 2] | 0;
    i18 = FUNCTION_TABLE_iiiiiiiii[HEAP32[(HEAP32[i17 >> 2] | 0) + 12 >> 2] & 15](i17, HEAP32[i12 >> 2] | 0, i16, i10, i7, i4, i13, i6) | 0;
    if ((HEAP32[i7 >> 2] | 0) == (i16 | 0)) {
     i9 = -1;
     i19 = 12;
     break;
    }
    if ((i18 | 0) == 3) {
     i19 = 7;
     break;
    }
    i17 = (i18 | 0) == 1;
    if (!(i18 >>> 0 < 2)) {
     i9 = -1;
     i19 = 12;
     break;
    }
    i18 = (HEAP32[i6 >> 2] | 0) - i14 | 0;
    if ((_fwrite(i4 | 0, 1, i18 | 0, HEAP32[i15 >> 2] | 0) | 0) != (i18 | 0)) {
     i9 = -1;
     i19 = 12;
     break;
    }
    if (i17) {
     i16 = i17 ? HEAP32[i7 >> 2] | 0 : i16;
    } else {
     break L1;
    }
   }
   if ((i19 | 0) == 7) {
    if ((_fwrite(i16 | 0, 1, 1, HEAP32[i15 >> 2] | 0) | 0) == 1) {
     break;
    } else {
     i9 = -1;
    }
    STACKTOP = i3;
    return i9 | 0;
   } else if ((i19 | 0) == 12) {
    STACKTOP = i3;
    return i9 | 0;
   }
  }
 } while (0);
 i9 = i8 ? 0 : i2;
 STACKTOP = i3;
 return i9 | 0;
}
function __ZNSt3__111__stdoutbufIcE8overflowEi(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i4 = i3 + 16 | 0;
 i5 = i3 + 8 | 0;
 i6 = i3;
 i7 = i3 + 4 | 0;
 i8 = (i2 | 0) == -1;
 L1 : do {
  if (!i8) {
   HEAP8[i5] = i2;
   if ((HEAP8[i1 + 44 | 0] | 0) != 0) {
    if ((_fwrite(i5 | 0, 1, 1, HEAP32[i1 + 32 >> 2] | 0) | 0) == 1) {
     break;
    } else {
     i9 = -1;
    }
    STACKTOP = i3;
    return i9 | 0;
   }
   HEAP32[i6 >> 2] = i4;
   i10 = i5 + 1 | 0;
   i11 = i1 + 36 | 0;
   i12 = i1 + 40 | 0;
   i13 = i4 + 8 | 0;
   i14 = i4;
   i15 = i1 + 32 | 0;
   i16 = i5;
   while (1) {
    i17 = HEAP32[i11 >> 2] | 0;
    i18 = FUNCTION_TABLE_iiiiiiiii[HEAP32[(HEAP32[i17 >> 2] | 0) + 12 >> 2] & 15](i17, HEAP32[i12 >> 2] | 0, i16, i10, i7, i4, i13, i6) | 0;
    if ((HEAP32[i7 >> 2] | 0) == (i16 | 0)) {
     i9 = -1;
     i19 = 12;
     break;
    }
    if ((i18 | 0) == 3) {
     i19 = 7;
     break;
    }
    i17 = (i18 | 0) == 1;
    if (!(i18 >>> 0 < 2)) {
     i9 = -1;
     i19 = 12;
     break;
    }
    i18 = (HEAP32[i6 >> 2] | 0) - i14 | 0;
    if ((_fwrite(i4 | 0, 1, i18 | 0, HEAP32[i15 >> 2] | 0) | 0) != (i18 | 0)) {
     i9 = -1;
     i19 = 12;
     break;
    }
    if (i17) {
     i16 = i17 ? HEAP32[i7 >> 2] | 0 : i16;
    } else {
     break L1;
    }
   }
   if ((i19 | 0) == 7) {
    if ((_fwrite(i16 | 0, 1, 1, HEAP32[i15 >> 2] | 0) | 0) == 1) {
     break;
    } else {
     i9 = -1;
    }
    STACKTOP = i3;
    return i9 | 0;
   } else if ((i19 | 0) == 12) {
    STACKTOP = i3;
    return i9 | 0;
   }
  }
 } while (0);
 i9 = i8 ? 0 : i2;
 STACKTOP = i3;
 return i9 | 0;
}
function __Z25MultMatrixBasicPreprocessiPPiS0_S0_(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0;
 i5 = STACKTOP;
 if ((i1 | 0) > 0) {
  i6 = 0;
 } else {
  STACKTOP = i5;
  return 1;
 }
 while (1) {
  i7 = i6 + 1 | 0;
  if ((i7 | 0) < (i1 | 0)) {
   i8 = HEAP32[i3 + (i6 << 2) >> 2] | 0;
   i9 = i7;
   do {
    i10 = i8 + (i9 << 2) | 0;
    i11 = (HEAP32[i3 + (i9 << 2) >> 2] | 0) + (i6 << 2) | 0;
    i12 = HEAP32[i10 >> 2] | 0;
    HEAP32[i10 >> 2] = HEAP32[i11 >> 2];
    HEAP32[i11 >> 2] = i12;
    i9 = i9 + 1 | 0;
   } while ((i9 | 0) != (i1 | 0));
  }
  if ((i7 | 0) == (i1 | 0)) {
   i13 = 0;
   break;
  } else {
   i6 = i7;
  }
 }
 while (1) {
  i6 = HEAP32[i4 + (i13 << 2) >> 2] | 0;
  i9 = HEAP32[i2 + (i13 << 2) >> 2] | 0;
  i8 = 0;
  do {
   i12 = HEAP32[i3 + (i8 << 2) >> 2] | 0;
   i11 = 0;
   i10 = 0;
   do {
    i10 = (Math_imul(HEAP32[i12 + (i11 << 2) >> 2] | 0, HEAP32[i9 + (i11 << 2) >> 2] | 0) | 0) + i10 | 0;
    i11 = i11 + 1 | 0;
   } while ((i11 | 0) != (i1 | 0));
   HEAP32[i6 + (i8 << 2) >> 2] = i10;
   i8 = i8 + 1 | 0;
  } while ((i8 | 0) != (i1 | 0));
  i8 = i13 + 1 | 0;
  if ((i8 | 0) == (i1 | 0)) {
   i14 = 0;
   break;
  } else {
   i13 = i8;
  }
 }
 while (1) {
  i13 = i14 + 1 | 0;
  if ((i13 | 0) < (i1 | 0)) {
   i2 = HEAP32[i3 + (i14 << 2) >> 2] | 0;
   i4 = i13;
   do {
    i8 = i2 + (i4 << 2) | 0;
    i6 = (HEAP32[i3 + (i4 << 2) >> 2] | 0) + (i14 << 2) | 0;
    i9 = HEAP32[i8 >> 2] | 0;
    HEAP32[i8 >> 2] = HEAP32[i6 >> 2];
    HEAP32[i6 >> 2] = i9;
    i4 = i4 + 1 | 0;
   } while ((i4 | 0) != (i1 | 0));
  }
  if ((i13 | 0) == (i1 | 0)) {
   break;
  } else {
   i14 = i13;
  }
 }
 STACKTOP = i5;
 return 1;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm(i1, i2, i3, i4, i5, i6, i7) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 var i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i8 = i2;
 i9 = i2 + 16 | 0;
 i10 = i2 + 12 | 0;
 __ZNKSt3__18ios_base6getlocEv(i10, i5);
 i5 = HEAP32[i10 >> 2] | 0;
 if (!((HEAP32[1456] | 0) == -1)) {
  HEAP32[i8 >> 2] = 5824;
  HEAP32[i8 + 4 >> 2] = 118;
  HEAP32[i8 + 8 >> 2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(5824, i8, 119);
 }
 i11 = (HEAP32[5828 >> 2] | 0) + -1 | 0;
 i12 = HEAP32[i5 + 8 >> 2] | 0;
 if (!((HEAP32[i5 + 12 >> 2] | 0) - i12 >> 2 >>> 0 > i11 >>> 0)) {
  i13 = ___cxa_allocate_exception(4) | 0;
  __ZNSt8bad_castC2Ev(i13);
  ___cxa_throw(i13 | 0, 13792, 107);
 }
 i5 = HEAP32[i12 + (i11 << 2) >> 2] | 0;
 if ((i5 | 0) == 0) {
  i13 = ___cxa_allocate_exception(4) | 0;
  __ZNSt8bad_castC2Ev(i13);
  ___cxa_throw(i13 | 0, 13792, 107);
 }
 __ZNSt3__114__shared_count16__release_sharedEv(HEAP32[i10 >> 2] | 0) | 0;
 i10 = i7 + 20 | 0;
 HEAP32[i9 >> 2] = HEAP32[i4 >> 2];
 HEAP32[i8 + 0 >> 2] = HEAP32[i9 + 0 >> 2];
 i9 = __ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi(i3, i8, i6, i5, 4) | 0;
 if ((HEAP32[i6 >> 2] & 4 | 0) != 0) {
  i14 = HEAP32[i3 >> 2] | 0;
  HEAP32[i1 >> 2] = i14;
  STACKTOP = i2;
  return;
 }
 if ((i9 | 0) < 69) {
  i15 = i9 + 2e3 | 0;
 } else {
  i15 = (i9 + -69 | 0) >>> 0 < 31 ? i9 + 1900 | 0 : i9;
 }
 HEAP32[i10 >> 2] = i15 + -1900;
 i14 = HEAP32[i3 >> 2] | 0;
 HEAP32[i1 >> 2] = i14;
 STACKTOP = i2;
 return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm(i1, i2, i3, i4, i5, i6, i7) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 var i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i8 = i2;
 i9 = i2 + 16 | 0;
 i10 = i2 + 12 | 0;
 __ZNKSt3__18ios_base6getlocEv(i10, i5);
 i5 = HEAP32[i10 >> 2] | 0;
 if (!((HEAP32[1458] | 0) == -1)) {
  HEAP32[i8 >> 2] = 5832;
  HEAP32[i8 + 4 >> 2] = 118;
  HEAP32[i8 + 8 >> 2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(5832, i8, 119);
 }
 i11 = (HEAP32[5836 >> 2] | 0) + -1 | 0;
 i12 = HEAP32[i5 + 8 >> 2] | 0;
 if (!((HEAP32[i5 + 12 >> 2] | 0) - i12 >> 2 >>> 0 > i11 >>> 0)) {
  i13 = ___cxa_allocate_exception(4) | 0;
  __ZNSt8bad_castC2Ev(i13);
  ___cxa_throw(i13 | 0, 13792, 107);
 }
 i5 = HEAP32[i12 + (i11 << 2) >> 2] | 0;
 if ((i5 | 0) == 0) {
  i13 = ___cxa_allocate_exception(4) | 0;
  __ZNSt8bad_castC2Ev(i13);
  ___cxa_throw(i13 | 0, 13792, 107);
 }
 __ZNSt3__114__shared_count16__release_sharedEv(HEAP32[i10 >> 2] | 0) | 0;
 i10 = i7 + 20 | 0;
 HEAP32[i9 >> 2] = HEAP32[i4 >> 2];
 HEAP32[i8 + 0 >> 2] = HEAP32[i9 + 0 >> 2];
 i9 = __ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi(i3, i8, i6, i5, 4) | 0;
 if ((HEAP32[i6 >> 2] & 4 | 0) != 0) {
  i14 = HEAP32[i3 >> 2] | 0;
  HEAP32[i1 >> 2] = i14;
  STACKTOP = i2;
  return;
 }
 if ((i9 | 0) < 69) {
  i15 = i9 + 2e3 | 0;
 } else {
  i15 = (i9 + -69 | 0) >>> 0 < 31 ? i9 + 1900 | 0 : i9;
 }
 HEAP32[i10 >> 2] = i15 + -1900;
 i14 = HEAP32[i3 >> 2] | 0;
 HEAP32[i1 >> 2] = i14;
 STACKTOP = i2;
 return;
}
function __ZNKSt3__18messagesIcE6do_getEiiiRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i7 = i2;
 HEAP32[i7 + 0 >> 2] = 0;
 HEAP32[i7 + 4 >> 2] = 0;
 HEAP32[i7 + 8 >> 2] = 0;
 i8 = HEAP8[i6] | 0;
 if ((i8 & 1) == 0) {
  i9 = i6 + 1 | 0;
  i10 = (i8 & 255) >>> 1;
  i11 = i6 + 1 | 0;
 } else {
  i8 = HEAP32[i6 + 8 >> 2] | 0;
  i9 = i8;
  i10 = HEAP32[i6 + 4 >> 2] | 0;
  i11 = i8;
 }
 i8 = i9 + i10 | 0;
 if (i11 >>> 0 < i8 >>> 0) {
  i10 = i11;
  do {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc(i7, HEAP8[i10] | 0);
   i10 = i10 + 1 | 0;
  } while ((i10 | 0) != (i8 | 0));
  i8 = (i3 | 0) == -1 ? -1 : i3 << 1;
  if ((HEAP8[i7] & 1) == 0) {
   i12 = i8;
   i13 = 9;
  } else {
   i14 = i8;
   i15 = HEAP32[i7 + 8 >> 2] | 0;
  }
 } else {
  i12 = (i3 | 0) == -1 ? -1 : i3 << 1;
  i13 = 9;
 }
 if ((i13 | 0) == 9) {
  i14 = i12;
  i15 = i7 + 1 | 0;
 }
 i12 = _catgets(i14 | 0, i4 | 0, i5 | 0, i15 | 0) | 0;
 HEAP32[i1 + 0 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 0;
 i15 = _strlen(i12 | 0) | 0;
 i5 = i12 + i15 | 0;
 if ((i15 | 0) > 0) {
  i16 = i12;
 } else {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i7);
  STACKTOP = i2;
  return;
 }
 do {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc(i1, HEAP8[i16] | 0);
  i16 = i16 + 1 | 0;
 } while ((i16 | 0) != (i5 | 0));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i7);
 STACKTOP = i2;
 return;
}
function __Z18ReadMatrixFromFilePcRi(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 192 | 0;
 i4 = i3;
 if ((i1 | 0) == 0) {
  i5 = 0;
  STACKTOP = i3;
  return i5 | 0;
 }
 i6 = i4 + 8 | 0;
 HEAP32[i4 >> 2] = 868;
 i7 = i4 + 108 | 0;
 HEAP32[i7 >> 2] = 888;
 HEAP32[i4 + 4 >> 2] = 0;
 i8 = i4 + 108 | 0;
 __ZNSt3__18ios_base4initEPv(i8, i6);
 HEAP32[i4 + 180 >> 2] = 0;
 HEAP32[i4 + 184 >> 2] = -1;
 HEAP32[i4 >> 2] = 764;
 HEAP32[i4 + 108 >> 2] = 784;
 __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEEC2Ev(i6);
 i9 = i4 + 72 | 0;
 if ((HEAP32[i9 >> 2] | 0) == 0) {
  i10 = _fopen(i1 | 0, 1024) | 0;
  HEAP32[i9 >> 2] = i10;
  if ((i10 | 0) == 0) {
   i11 = 5;
  } else {
   HEAP32[i4 + 96 >> 2] = 8;
  }
 } else {
  i11 = 5;
 }
 if ((i11 | 0) == 5) {
  i10 = HEAP32[(HEAP32[i4 >> 2] | 0) + -12 >> 2] | 0;
  __ZNSt3__18ios_base5clearEj(i4 + i10 | 0, HEAP32[i4 + (i10 + 16) >> 2] | 4);
 }
 i10 = __Z10ReadMatrixRNSt3__113basic_istreamIcNS_11char_traitsIcEEEERi(i4, i2) | 0;
 i2 = HEAP32[i9 >> 2] | 0;
 if ((i2 | 0) == 0) {
  i11 = 9;
 } else {
  i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i6 >> 2] | 0) + 24 >> 2] & 127](i6) | 0;
  if ((_fclose(i2 | 0) | 0) == 0) {
   HEAP32[i9 >> 2] = 0;
   if ((i1 | 0) != 0) {
    i11 = 9;
   }
  } else {
   i11 = 9;
  }
 }
 if ((i11 | 0) == 9) {
  i11 = HEAP32[(HEAP32[i4 >> 2] | 0) + -12 >> 2] | 0;
  __ZNSt3__18ios_base5clearEj(i4 + i11 | 0, HEAP32[i4 + (i11 + 16) >> 2] | 4);
 }
 HEAP32[i4 >> 2] = 764;
 HEAP32[i7 >> 2] = 784;
 __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEED2Ev(i6);
 __ZNSt3__18ios_baseD2Ev(i8);
 i5 = i10;
 STACKTOP = i3;
 return i5 | 0;
}
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i3 = STACKTOP;
 FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 24 >> 2] & 127](i1) | 0;
 i4 = __ZNKSt3__16locale9use_facetERNS0_2idE(i2, 5896) | 0;
 HEAP32[i1 + 68 >> 2] = i4;
 i2 = i1 + 98 | 0;
 i5 = HEAP8[i2] | 0;
 i6 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 28 >> 2] & 127](i4) | 0;
 HEAP8[i2] = i6 & 1;
 if ((i5 & 255 | 0) == (i6 & 1 | 0)) {
  STACKTOP = i3;
  return;
 }
 i5 = i1 + 8 | 0;
 i2 = i1 + 96 | 0;
 HEAP32[i5 + 0 >> 2] = 0;
 HEAP32[i5 + 4 >> 2] = 0;
 HEAP32[i5 + 8 >> 2] = 0;
 HEAP32[i5 + 12 >> 2] = 0;
 HEAP32[i5 + 16 >> 2] = 0;
 HEAP32[i5 + 20 >> 2] = 0;
 i5 = (HEAP8[i2] | 0) != 0;
 if (i6) {
  i6 = i1 + 32 | 0;
  if (i5) {
   i4 = HEAP32[i6 >> 2] | 0;
   if ((i4 | 0) != 0) {
    __ZdaPv(i4);
   }
  }
  i4 = i1 + 97 | 0;
  HEAP8[i2] = HEAP8[i4] | 0;
  i7 = i1 + 60 | 0;
  HEAP32[i1 + 52 >> 2] = HEAP32[i7 >> 2];
  i8 = i1 + 56 | 0;
  HEAP32[i6 >> 2] = HEAP32[i8 >> 2];
  HEAP32[i7 >> 2] = 0;
  HEAP32[i8 >> 2] = 0;
  HEAP8[i4] = 0;
  STACKTOP = i3;
  return;
 }
 if (!i5) {
  i5 = i1 + 32 | 0;
  i4 = HEAP32[i5 >> 2] | 0;
  if ((i4 | 0) != (i1 + 44 | 0)) {
   i8 = HEAP32[i1 + 52 >> 2] | 0;
   HEAP32[i1 + 60 >> 2] = i8;
   HEAP32[i1 + 56 >> 2] = i4;
   HEAP8[i1 + 97 | 0] = 0;
   HEAP32[i5 >> 2] = __Znaj(i8) | 0;
   HEAP8[i2] = 1;
   STACKTOP = i3;
   return;
  }
 }
 i2 = HEAP32[i1 + 52 >> 2] | 0;
 HEAP32[i1 + 60 >> 2] = i2;
 HEAP32[i1 + 56 >> 2] = __Znaj(i2) | 0;
 HEAP8[i1 + 97 | 0] = 1;
 STACKTOP = i3;
 return;
}
function _mbtowc(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i4;
 HEAP32[i5 >> 2] = i1;
 if ((i2 | 0) == 0) {
  i6 = 0;
  STACKTOP = i4;
  return i6 | 0;
 }
 do {
  if ((i3 | 0) != 0) {
   if ((i1 | 0) == 0) {
    HEAP32[i5 >> 2] = i5;
    i7 = i5;
   } else {
    i7 = i1;
   }
   i8 = HEAP8[i2] | 0;
   i9 = i8 & 255;
   if (i8 << 24 >> 24 > -1) {
    HEAP32[i7 >> 2] = i9;
    i6 = i8 << 24 >> 24 != 0 | 0;
    STACKTOP = i4;
    return i6 | 0;
   }
   i8 = i9 + -194 | 0;
   if (!(i8 >>> 0 > 50)) {
    i9 = i2 + 1 | 0;
    i10 = HEAP32[13488 + (i8 << 2) >> 2] | 0;
    if (i3 >>> 0 < 4) {
     if ((i10 & -2147483648 >>> ((i3 * 6 | 0) + -6 | 0) | 0) != 0) {
      break;
     }
    }
    i8 = HEAPU8[i9] | 0;
    i9 = i8 >>> 3;
    if (!((i9 + -16 | i9 + (i10 >> 26)) >>> 0 > 7)) {
     i9 = i8 + -128 | i10 << 6;
     if ((i9 | 0) >= 0) {
      HEAP32[i7 >> 2] = i9;
      i6 = 2;
      STACKTOP = i4;
      return i6 | 0;
     }
     i10 = (HEAPU8[i2 + 2 | 0] | 0) + -128 | 0;
     if (!(i10 >>> 0 > 63)) {
      i8 = i10 | i9 << 6;
      if ((i8 | 0) >= 0) {
       HEAP32[i7 >> 2] = i8;
       i6 = 3;
       STACKTOP = i4;
       return i6 | 0;
      }
      i9 = (HEAPU8[i2 + 3 | 0] | 0) + -128 | 0;
      if (!(i9 >>> 0 > 63)) {
       HEAP32[i7 >> 2] = i9 | i8 << 6;
       i6 = 4;
       STACKTOP = i4;
       return i6 | 0;
      }
     }
    }
   }
  }
 } while (0);
 HEAP32[(___errno_location() | 0) >> 2] = 84;
 i6 = -1;
 STACKTOP = i4;
 return i6 | 0;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0;
 i3 = STACKTOP;
 if (i2 >>> 0 > 4294967279) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
 }
 i4 = HEAP8[i1] | 0;
 if ((i4 & 1) == 0) {
  i5 = 10;
  i6 = i4;
 } else {
  i4 = HEAP32[i1 >> 2] | 0;
  i5 = (i4 & -2) + -1 | 0;
  i6 = i4 & 255;
 }
 if ((i6 & 1) == 0) {
  i7 = (i6 & 255) >>> 1;
 } else {
  i7 = HEAP32[i1 + 4 >> 2] | 0;
 }
 i4 = i7 >>> 0 > i2 >>> 0 ? i7 : i2;
 if (i4 >>> 0 < 11) {
  i8 = 10;
 } else {
  i8 = (i4 + 16 & -16) + -1 | 0;
 }
 if ((i8 | 0) == (i5 | 0)) {
  STACKTOP = i3;
  return;
 }
 do {
  if ((i8 | 0) == 10) {
   i9 = i1 + 1 | 0;
   i10 = 0;
   i11 = HEAP32[i1 + 8 >> 2] | 0;
   i12 = 1;
  } else {
   i4 = i8 + 1 | 0;
   if (i8 >>> 0 > i5 >>> 0) {
    i13 = __Znwj(i4) | 0;
   } else {
    i13 = __Znwj(i4) | 0;
   }
   if ((i6 & 1) == 0) {
    i9 = i13;
    i10 = 1;
    i11 = i1 + 1 | 0;
    i12 = 0;
    break;
   } else {
    i9 = i13;
    i10 = 1;
    i11 = HEAP32[i1 + 8 >> 2] | 0;
    i12 = 1;
    break;
   }
  }
 } while (0);
 if ((i6 & 1) == 0) {
  i14 = (i6 & 255) >>> 1;
 } else {
  i14 = HEAP32[i1 + 4 >> 2] | 0;
 }
 _memcpy(i9 | 0, i11 | 0, i14 + 1 | 0) | 0;
 if (i12) {
  __ZdlPv(i11);
 }
 if (i10) {
  HEAP32[i1 >> 2] = i8 + 1 | 1;
  HEAP32[i1 + 4 >> 2] = i7;
  HEAP32[i1 + 8 >> 2] = i9;
  STACKTOP = i3;
  return;
 } else {
  HEAP8[i1] = i7 << 1;
  STACKTOP = i3;
  return;
 }
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE21__grow_by_and_replaceEjjjjjjPKw(i1, i2, i3, i4, i5, i6, i7, i8) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 var i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0;
 i9 = STACKTOP;
 if ((1073741806 - i2 | 0) >>> 0 < i3 >>> 0) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
 }
 if ((HEAP8[i1] & 1) == 0) {
  i10 = i1 + 4 | 0;
 } else {
  i10 = HEAP32[i1 + 8 >> 2] | 0;
 }
 if (i2 >>> 0 < 536870887) {
  i11 = i3 + i2 | 0;
  i3 = i2 << 1;
  i12 = i11 >>> 0 < i3 >>> 0 ? i3 : i11;
  if (i12 >>> 0 < 2) {
   i13 = 2;
  } else {
   i13 = i12 + 4 & -4;
  }
 } else {
  i13 = 1073741807;
 }
 i12 = __Znwj(i13 << 2) | 0;
 if ((i5 | 0) != 0) {
  _wmemcpy(i12, i10, i5) | 0;
 }
 if ((i7 | 0) != 0) {
  _wmemcpy(i12 + (i5 << 2) | 0, i8, i7) | 0;
 }
 i8 = i4 - i6 | 0;
 if ((i8 | 0) != (i5 | 0)) {
  _wmemcpy(i12 + (i7 + i5 << 2) | 0, i10 + (i6 + i5 << 2) | 0, i8 - i5 | 0) | 0;
 }
 if ((i2 | 0) == 1) {
  i14 = i1 + 8 | 0;
  HEAP32[i14 >> 2] = i12;
  i15 = i13 | 1;
  HEAP32[i1 >> 2] = i15;
  i16 = i8 + i7 | 0;
  i17 = i1 + 4 | 0;
  HEAP32[i17 >> 2] = i16;
  i18 = i12 + (i16 << 2) | 0;
  HEAP32[i18 >> 2] = 0;
  STACKTOP = i9;
  return;
 }
 __ZdlPv(i10);
 i14 = i1 + 8 | 0;
 HEAP32[i14 >> 2] = i12;
 i15 = i13 | 1;
 HEAP32[i1 >> 2] = i15;
 i16 = i8 + i7 | 0;
 i17 = i1 + 4 | 0;
 HEAP32[i17 >> 2] = i16;
 i18 = i12 + (i16 << 2) | 0;
 HEAP32[i18 >> 2] = 0;
 STACKTOP = i9;
 return;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0;
 i3 = STACKTOP;
 if (i2 >>> 0 > 1073741807) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
 }
 i4 = HEAP8[i1] | 0;
 if ((i4 & 1) == 0) {
  i5 = 1;
  i6 = i4;
 } else {
  i4 = HEAP32[i1 >> 2] | 0;
  i5 = (i4 & -2) + -1 | 0;
  i6 = i4 & 255;
 }
 if ((i6 & 1) == 0) {
  i7 = (i6 & 255) >>> 1;
 } else {
  i7 = HEAP32[i1 + 4 >> 2] | 0;
 }
 i4 = i7 >>> 0 > i2 >>> 0 ? i7 : i2;
 if (i4 >>> 0 < 2) {
  i8 = 1;
 } else {
  i8 = (i4 + 4 & -4) + -1 | 0;
 }
 if ((i8 | 0) == (i5 | 0)) {
  STACKTOP = i3;
  return;
 }
 do {
  if ((i8 | 0) == 1) {
   i9 = i1 + 4 | 0;
   i10 = 0;
   i11 = HEAP32[i1 + 8 >> 2] | 0;
   i12 = 1;
  } else {
   i4 = (i8 << 2) + 4 | 0;
   if (i8 >>> 0 > i5 >>> 0) {
    i13 = __Znwj(i4) | 0;
   } else {
    i13 = __Znwj(i4) | 0;
   }
   if ((i6 & 1) == 0) {
    i9 = i13;
    i10 = 1;
    i11 = i1 + 4 | 0;
    i12 = 0;
    break;
   } else {
    i9 = i13;
    i10 = 1;
    i11 = HEAP32[i1 + 8 >> 2] | 0;
    i12 = 1;
    break;
   }
  }
 } while (0);
 if ((i6 & 1) == 0) {
  i14 = (i6 & 255) >>> 1;
 } else {
  i14 = HEAP32[i1 + 4 >> 2] | 0;
 }
 _wmemcpy(i9, i11, i14 + 1 | 0) | 0;
 if (i12) {
  __ZdlPv(i11);
 }
 if (i10) {
  HEAP32[i1 >> 2] = i8 + 1 | 1;
  HEAP32[i1 + 4 >> 2] = i7;
  HEAP32[i1 + 8 >> 2] = i9;
  STACKTOP = i3;
  return;
 } else {
  HEAP8[i1] = i7 << 1;
  STACKTOP = i3;
  return;
 }
}
function __ZNKSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPK2tmcc(i1, i2, i3, i4, i5, i6, i7, i8) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 var i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 i4 = i5 + 100 | 0;
 i9 = i5;
 HEAP8[i4] = 37;
 i10 = i4 + 1 | 0;
 HEAP8[i10] = i7;
 i11 = i4 + 2 | 0;
 HEAP8[i11] = i8;
 HEAP8[i4 + 3 | 0] = 0;
 if (!(i8 << 24 >> 24 == 0)) {
  HEAP8[i10] = i8;
  HEAP8[i11] = i7;
 }
 i7 = _strftime_l(i9 | 0, 100, i4 | 0, i6 | 0, HEAP32[i2 + 8 >> 2] | 0) | 0;
 i2 = i9 + i7 | 0;
 i6 = HEAP32[i3 >> 2] | 0;
 if ((i7 | 0) == 0) {
  i12 = i6;
  HEAP32[i1 >> 2] = i12;
  STACKTOP = i5;
  return;
 } else {
  i13 = i9;
  i14 = i6;
  i15 = i6;
 }
 while (1) {
  i6 = HEAP8[i13] | 0;
  do {
   if ((i14 | 0) == 0) {
    i16 = i15;
    i17 = 0;
   } else {
    i9 = i14 + 24 | 0;
    i7 = HEAP32[i9 >> 2] | 0;
    if ((i7 | 0) == (HEAP32[i14 + 28 >> 2] | 0)) {
     i3 = (FUNCTION_TABLE_iii[HEAP32[(HEAP32[i14 >> 2] | 0) + 52 >> 2] & 31](i14, i6 & 255) | 0) == -1;
     i16 = i3 ? 0 : i15;
     i17 = i3 ? 0 : i14;
     break;
    } else {
     HEAP32[i9 >> 2] = i7 + 1;
     HEAP8[i7] = i6;
     i16 = i15;
     i17 = i14;
     break;
    }
   }
  } while (0);
  i6 = i13 + 1 | 0;
  if ((i6 | 0) == (i2 | 0)) {
   i12 = i16;
   break;
  } else {
   i13 = i6;
   i14 = i17;
   i15 = i16;
  }
 }
 HEAP32[i1 >> 2] = i12;
 STACKTOP = i5;
 return;
}
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEEC2Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 4 | 0;
 i4 = i2;
 HEAP32[i1 >> 2] = 3104;
 i5 = i1 + 4 | 0;
 __ZNSt3__16localeC2Ev(i5);
 i6 = i1 + 8 | 0;
 HEAP32[i6 + 0 >> 2] = 0;
 HEAP32[i6 + 4 >> 2] = 0;
 HEAP32[i6 + 8 >> 2] = 0;
 HEAP32[i6 + 12 >> 2] = 0;
 HEAP32[i6 + 16 >> 2] = 0;
 HEAP32[i6 + 20 >> 2] = 0;
 HEAP32[i1 >> 2] = 904;
 HEAP32[i1 + 32 >> 2] = 0;
 HEAP32[i1 + 36 >> 2] = 0;
 HEAP32[i1 + 40 >> 2] = 0;
 i6 = i1 + 52 | 0;
 i7 = i1 + 68 | 0;
 i8 = i1 + 98 | 0;
 i9 = i6 + 0 | 0;
 i10 = i9 + 44 | 0;
 do {
  HEAP32[i9 >> 2] = 0;
  i9 = i9 + 4 | 0;
 } while ((i9 | 0) < (i10 | 0));
 HEAP16[i6 + 44 >> 1] = 0;
 HEAP8[i6 + 46 | 0] = 0;
 __ZNSt3__16localeC2ERKS0_(i3, i5);
 i6 = __ZNKSt3__16locale9has_facetERNS0_2idE(i3, 5896) | 0;
 __ZNSt3__16localeD2Ev(i3);
 if (!i6) {
  i11 = HEAP32[i1 >> 2] | 0;
  i12 = i11 + 12 | 0;
  i13 = HEAP32[i12 >> 2] | 0;
  FUNCTION_TABLE_iiii[i13 & 31](i1, 0, 4096) | 0;
  STACKTOP = i2;
  return;
 }
 __ZNSt3__16localeC2ERKS0_(i4, i5);
 HEAP32[i7 >> 2] = __ZNKSt3__16locale9use_facetERNS0_2idE(i4, 5896) | 0;
 __ZNSt3__16localeD2Ev(i4);
 i4 = HEAP32[i7 >> 2] | 0;
 HEAP8[i8] = (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 28 >> 2] & 127](i4) | 0) & 1;
 i11 = HEAP32[i1 >> 2] | 0;
 i12 = i11 + 12 | 0;
 i13 = HEAP32[i12 >> 2] | 0;
 FUNCTION_TABLE_iiii[i13 & 31](i1, 0, 4096) | 0;
 STACKTOP = i2;
 return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc(i1, i2, i3, i4, i5, i6, i7, i8) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 var i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0;
 i9 = STACKTOP;
 if ((-18 - i2 | 0) >>> 0 < i3 >>> 0) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
 }
 if ((HEAP8[i1] & 1) == 0) {
  i10 = i1 + 1 | 0;
 } else {
  i10 = HEAP32[i1 + 8 >> 2] | 0;
 }
 if (i2 >>> 0 < 2147483623) {
  i11 = i3 + i2 | 0;
  i3 = i2 << 1;
  i12 = i11 >>> 0 < i3 >>> 0 ? i3 : i11;
  if (i12 >>> 0 < 11) {
   i13 = 11;
  } else {
   i13 = i12 + 16 & -16;
  }
 } else {
  i13 = -17;
 }
 i12 = __Znwj(i13) | 0;
 if ((i5 | 0) != 0) {
  _memcpy(i12 | 0, i10 | 0, i5 | 0) | 0;
 }
 if ((i7 | 0) != 0) {
  _memcpy(i12 + i5 | 0, i8 | 0, i7 | 0) | 0;
 }
 i8 = i4 - i6 | 0;
 if ((i8 | 0) != (i5 | 0)) {
  _memcpy(i12 + (i7 + i5) | 0, i10 + (i6 + i5) | 0, i8 - i5 | 0) | 0;
 }
 if ((i2 | 0) == 10) {
  i14 = i1 + 8 | 0;
  HEAP32[i14 >> 2] = i12;
  i15 = i13 | 1;
  HEAP32[i1 >> 2] = i15;
  i16 = i8 + i7 | 0;
  i17 = i1 + 4 | 0;
  HEAP32[i17 >> 2] = i16;
  i18 = i12 + i16 | 0;
  HEAP8[i18] = 0;
  STACKTOP = i9;
  return;
 }
 __ZdlPv(i10);
 i14 = i1 + 8 | 0;
 HEAP32[i14 >> 2] = i12;
 i15 = i13 | 1;
 HEAP32[i1 >> 2] = i15;
 i16 = i8 + i7 | 0;
 i17 = i1 + 4 | 0;
 HEAP32[i17 >> 2] = i16;
 i18 = i12 + i16 | 0;
 HEAP8[i18] = 0;
 STACKTOP = i9;
 return;
}
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE6setbufEPci(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i4 = STACKTOP;
 i5 = i1 + 8 | 0;
 i6 = i1 + 96 | 0;
 HEAP32[i5 + 0 >> 2] = 0;
 HEAP32[i5 + 4 >> 2] = 0;
 HEAP32[i5 + 8 >> 2] = 0;
 HEAP32[i5 + 12 >> 2] = 0;
 HEAP32[i5 + 16 >> 2] = 0;
 HEAP32[i5 + 20 >> 2] = 0;
 if ((HEAP8[i6] | 0) != 0) {
  i5 = HEAP32[i1 + 32 >> 2] | 0;
  if ((i5 | 0) != 0) {
   __ZdaPv(i5);
  }
 }
 i5 = i1 + 97 | 0;
 if ((HEAP8[i5] | 0) != 0) {
  i7 = HEAP32[i1 + 56 >> 2] | 0;
  if ((i7 | 0) != 0) {
   __ZdaPv(i7);
  }
 }
 i7 = i1 + 52 | 0;
 HEAP32[i7 >> 2] = i3;
 do {
  if (i3 >>> 0 > 8) {
   i8 = HEAP8[i1 + 98 | 0] | 0;
   if (i8 << 24 >> 24 == 0 | (i2 | 0) == 0) {
    HEAP32[i1 + 32 >> 2] = __Znaj(i3) | 0;
    HEAP8[i6] = 1;
    i9 = i8;
    break;
   } else {
    HEAP32[i1 + 32 >> 2] = i2;
    HEAP8[i6] = 0;
    i9 = i8;
    break;
   }
  } else {
   HEAP32[i1 + 32 >> 2] = i1 + 44;
   HEAP32[i7 >> 2] = 8;
   HEAP8[i6] = 0;
   i9 = HEAP8[i1 + 98 | 0] | 0;
  }
 } while (0);
 if (!(i9 << 24 >> 24 == 0)) {
  HEAP32[i1 + 60 >> 2] = 0;
  HEAP32[i1 + 56 >> 2] = 0;
  HEAP8[i5] = 0;
  STACKTOP = i4;
  return i1 | 0;
 }
 i9 = (i3 | 0) < 8 ? 8 : i3;
 HEAP32[i1 + 60 >> 2] = i9;
 if ((i2 | 0) != 0 & i9 >>> 0 > 7) {
  HEAP32[i1 + 56 >> 2] = i2;
  HEAP8[i5] = 0;
  STACKTOP = i4;
  return i1 | 0;
 } else {
  HEAP32[i1 + 56 >> 2] = __Znaj(i9) | 0;
  HEAP8[i5] = 1;
  STACKTOP = i4;
  return i1 | 0;
 }
 return 0;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6appendIPwEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueERS5_E4typeES9_S9_(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i4 = STACKTOP;
 i5 = i2;
 i6 = HEAP8[i1] | 0;
 if ((i6 & 1) == 0) {
  i7 = 1;
  i8 = (i6 & 255) >>> 1;
  i9 = i6;
 } else {
  i6 = HEAP32[i1 >> 2] | 0;
  i7 = (i6 & -2) + -1 | 0;
  i8 = HEAP32[i1 + 4 >> 2] | 0;
  i9 = i6 & 255;
 }
 i6 = i3 - i5 >> 2;
 if ((i6 | 0) == 0) {
  STACKTOP = i4;
  return i1 | 0;
 }
 if ((i7 - i8 | 0) >>> 0 < i6 >>> 0) {
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEjjjjjj(i1, i7, i8 + i6 - i7 | 0, i8, i8, 0, 0);
  i10 = HEAP8[i1] | 0;
 } else {
  i10 = i9;
 }
 if ((i10 & 1) == 0) {
  i11 = i1 + 4 | 0;
 } else {
  i11 = HEAP32[i1 + 8 >> 2] | 0;
 }
 i10 = i11 + (i8 << 2) | 0;
 if ((i2 | 0) == (i3 | 0)) {
  i12 = i10;
 } else {
  i9 = i8 + ((i3 + -4 + (0 - i5) | 0) >>> 2) + 1 | 0;
  i5 = i2;
  i2 = i10;
  while (1) {
   HEAP32[i2 >> 2] = HEAP32[i5 >> 2];
   i5 = i5 + 4 | 0;
   if ((i5 | 0) == (i3 | 0)) {
    break;
   } else {
    i2 = i2 + 4 | 0;
   }
  }
  i12 = i11 + (i9 << 2) | 0;
 }
 HEAP32[i12 >> 2] = 0;
 i12 = i8 + i6 | 0;
 if ((HEAP8[i1] & 1) == 0) {
  HEAP8[i1] = i12 << 1;
  STACKTOP = i4;
  return i1 | 0;
 } else {
  HEAP32[i1 + 4 >> 2] = i12;
  STACKTOP = i4;
  return i1 | 0;
 }
 return 0;
}
function __ZNSt3__110__stdinbufIwE9pbackfailEj(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i4 = i3 + 16 | 0;
 i5 = i3;
 i6 = i3 + 4 | 0;
 i7 = i3 + 8 | 0;
 i8 = i1 + 52 | 0;
 i9 = (HEAP8[i8] | 0) != 0;
 if ((i2 | 0) == -1) {
  if (i9) {
   i10 = -1;
   STACKTOP = i3;
   return i10 | 0;
  }
  i11 = HEAP32[i1 + 48 >> 2] | 0;
  HEAP8[i8] = (i11 | 0) != -1 | 0;
  i10 = i11;
  STACKTOP = i3;
  return i10 | 0;
 }
 i11 = i1 + 48 | 0;
 L8 : do {
  if (i9) {
   HEAP32[i6 >> 2] = HEAP32[i11 >> 2];
   i12 = HEAP32[i1 + 36 >> 2] | 0;
   i13 = FUNCTION_TABLE_iiiiiiiii[HEAP32[(HEAP32[i12 >> 2] | 0) + 12 >> 2] & 15](i12, HEAP32[i1 + 40 >> 2] | 0, i6, i6 + 4 | 0, i7, i4, i4 + 8 | 0, i5) | 0;
   if ((i13 | 0) == 1 | (i13 | 0) == 2) {
    i10 = -1;
    STACKTOP = i3;
    return i10 | 0;
   } else if ((i13 | 0) == 3) {
    HEAP8[i4] = HEAP32[i11 >> 2];
    HEAP32[i5 >> 2] = i4 + 1;
   }
   i13 = i1 + 32 | 0;
   while (1) {
    i12 = HEAP32[i5 >> 2] | 0;
    if (!(i12 >>> 0 > i4 >>> 0)) {
     break L8;
    }
    i14 = i12 + -1 | 0;
    HEAP32[i5 >> 2] = i14;
    if ((_ungetc(HEAP8[i14] | 0, HEAP32[i13 >> 2] | 0) | 0) == -1) {
     i10 = -1;
     break;
    }
   }
   STACKTOP = i3;
   return i10 | 0;
  }
 } while (0);
 HEAP32[i11 >> 2] = i2;
 HEAP8[i8] = 1;
 i10 = i2;
 STACKTOP = i3;
 return i10 | 0;
}
function __ZNSt3__110__stdinbufIcE9pbackfailEi(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i4 = i3 + 16 | 0;
 i5 = i3;
 i6 = i3 + 8 | 0;
 i7 = i3 + 4 | 0;
 i8 = i1 + 52 | 0;
 i9 = (HEAP8[i8] | 0) != 0;
 if ((i2 | 0) == -1) {
  if (i9) {
   i10 = -1;
   STACKTOP = i3;
   return i10 | 0;
  }
  i11 = HEAP32[i1 + 48 >> 2] | 0;
  HEAP8[i8] = (i11 | 0) != -1 | 0;
  i10 = i11;
  STACKTOP = i3;
  return i10 | 0;
 }
 i11 = i1 + 48 | 0;
 L8 : do {
  if (i9) {
   HEAP8[i6] = HEAP32[i11 >> 2];
   i12 = HEAP32[i1 + 36 >> 2] | 0;
   i13 = FUNCTION_TABLE_iiiiiiiii[HEAP32[(HEAP32[i12 >> 2] | 0) + 12 >> 2] & 15](i12, HEAP32[i1 + 40 >> 2] | 0, i6, i6 + 1 | 0, i7, i4, i4 + 8 | 0, i5) | 0;
   if ((i13 | 0) == 3) {
    HEAP8[i4] = HEAP32[i11 >> 2];
    HEAP32[i5 >> 2] = i4 + 1;
   } else if ((i13 | 0) == 1 | (i13 | 0) == 2) {
    i10 = -1;
    STACKTOP = i3;
    return i10 | 0;
   }
   i13 = i1 + 32 | 0;
   while (1) {
    i12 = HEAP32[i5 >> 2] | 0;
    if (!(i12 >>> 0 > i4 >>> 0)) {
     break L8;
    }
    i14 = i12 + -1 | 0;
    HEAP32[i5 >> 2] = i14;
    if ((_ungetc(HEAP8[i14] | 0, HEAP32[i13 >> 2] | 0) | 0) == -1) {
     i10 = -1;
     break;
    }
   }
   STACKTOP = i3;
   return i10 | 0;
  }
 } while (0);
 HEAP32[i11 >> 2] = i2;
 HEAP8[i8] = 1;
 i10 = i2;
 STACKTOP = i3;
 return i10 | 0;
}
function __ZNSt3__125__num_get_signed_integralIlEET_PKcS3_Rji(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i6 = i5;
 if ((i1 | 0) == (i2 | 0)) {
  HEAP32[i3 >> 2] = 4;
  i7 = 0;
  STACKTOP = i5;
  return i7 | 0;
 }
 i8 = ___errno_location() | 0;
 i9 = HEAP32[i8 >> 2] | 0;
 HEAP32[i8 >> 2] = 0;
 if ((HEAP8[5728] | 0) == 0) {
  if ((___cxa_guard_acquire(5728) | 0) != 0) {
   HEAP32[1430] = _newlocale(2147483647, 5736, 0) | 0;
   ___cxa_guard_release(5728);
  }
 }
 i10 = _strtoll_l(i1 | 0, i6 | 0, i4 | 0, HEAP32[1430] | 0) | 0;
 i4 = tempRet0;
 i1 = HEAP32[i8 >> 2] | 0;
 if ((i1 | 0) == 0) {
  HEAP32[i8 >> 2] = i9;
 }
 if ((HEAP32[i6 >> 2] | 0) != (i2 | 0)) {
  HEAP32[i3 >> 2] = 4;
  i7 = 0;
  STACKTOP = i5;
  return i7 | 0;
 }
 do {
  if ((i1 | 0) == 34) {
   HEAP32[i3 >> 2] = 4;
   if ((i4 | 0) > 0 | (i4 | 0) == 0 & i10 >>> 0 > 0) {
    i7 = 2147483647;
    STACKTOP = i5;
    return i7 | 0;
   }
  } else {
   if ((i4 | 0) < -1 | (i4 | 0) == -1 & i10 >>> 0 < 2147483648) {
    HEAP32[i3 >> 2] = 4;
    break;
   }
   if ((i4 | 0) > 0 | (i4 | 0) == 0 & i10 >>> 0 > 2147483647) {
    HEAP32[i3 >> 2] = 4;
    i7 = 2147483647;
    STACKTOP = i5;
    return i7 | 0;
   } else {
    i7 = i10;
    STACKTOP = i5;
    return i7 | 0;
   }
  }
 } while (0);
 i7 = -2147483648;
 STACKTOP = i5;
 return i7 | 0;
}
function __Z21PrintMatrixSideBySideiPPiS0_c(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i5 = STACKTOP;
 __ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(1184, 8) | 0;
 if ((i1 | 0) > 0) {
  i6 = 0;
 } else {
  __ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(1184, 8) | 0;
  STACKTOP = i5;
  return;
 }
 do {
  i7 = i2 + (i6 << 2) | 0;
  i8 = 0;
  do {
   __ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEi(1184, HEAP32[(HEAP32[i7 >> 2] | 0) + (i8 << 2) >> 2] | 0) | 0, 16) | 0;
   i8 = i8 + 1 | 0;
  } while ((i8 | 0) != (i1 | 0));
  __ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_c(1184, i4) | 0, 24) | 0;
  i8 = i3 + (i6 << 2) | 0;
  i7 = 0;
  do {
   __ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEi(1184, HEAP32[(HEAP32[i8 >> 2] | 0) + (i7 << 2) >> 2] | 0) | 0, 16) | 0;
   i7 = i7 + 1 | 0;
  } while ((i7 | 0) != (i1 | 0));
  __ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(1184, 8) | 0;
  i6 = i6 + 1 | 0;
 } while ((i6 | 0) != (i1 | 0));
 __ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(1184, 8) | 0;
 STACKTOP = i5;
 return;
}
function __ZNKSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPK2tmcc(i1, i2, i3, i4, i5, i6, i7, i8) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 var i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 416 | 0;
 i4 = i5 + 8 | 0;
 i9 = i5;
 HEAP32[i9 >> 2] = i4 + 400;
 __ZNKSt3__110__time_put8__do_putEPwRS1_PK2tmcc(i2 + 8 | 0, i4, i9, i6, i7, i8);
 i8 = HEAP32[i9 >> 2] | 0;
 i9 = HEAP32[i3 >> 2] | 0;
 if ((i4 | 0) == (i8 | 0)) {
  i10 = i9;
  HEAP32[i1 >> 2] = i10;
  STACKTOP = i5;
  return;
 } else {
  i11 = i4;
  i12 = i9;
  i13 = i9;
 }
 while (1) {
  i9 = HEAP32[i11 >> 2] | 0;
  if ((i13 | 0) == 0) {
   i14 = i12;
   i15 = 0;
  } else {
   i4 = i13 + 24 | 0;
   i3 = HEAP32[i4 >> 2] | 0;
   if ((i3 | 0) == (HEAP32[i13 + 28 >> 2] | 0)) {
    i16 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i13 >> 2] | 0) + 52 >> 2] & 31](i13, i9) | 0;
   } else {
    HEAP32[i4 >> 2] = i3 + 4;
    HEAP32[i3 >> 2] = i9;
    i16 = i9;
   }
   i9 = (i16 | 0) == -1;
   i14 = i9 ? 0 : i12;
   i15 = i9 ? 0 : i13;
  }
  i9 = i11 + 4 | 0;
  if ((i9 | 0) == (i8 | 0)) {
   i10 = i14;
   break;
  } else {
   i11 = i9;
   i12 = i14;
   i13 = i15;
  }
 }
 HEAP32[i1 >> 2] = i10;
 STACKTOP = i5;
 return;
}
function __ZNSt3__112system_error6__initERKNS_10error_codeENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i4;
 i6 = HEAP32[i2 >> 2] | 0;
 if ((i6 | 0) != 0) {
  i7 = HEAP8[i3] | 0;
  if ((i7 & 1) == 0) {
   i8 = (i7 & 255) >>> 1;
  } else {
   i8 = HEAP32[i3 + 4 >> 2] | 0;
  }
  if ((i8 | 0) == 0) {
   i9 = i6;
  } else {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj(i3, 2856, 2) | 0;
   i9 = HEAP32[i2 >> 2] | 0;
  }
  i6 = HEAP32[i2 + 4 >> 2] | 0;
  FUNCTION_TABLE_viii[HEAP32[(HEAP32[i6 >> 2] | 0) + 24 >> 2] & 3](i5, i6, i9);
  i9 = HEAP8[i5] | 0;
  if ((i9 & 1) == 0) {
   i10 = i5 + 1 | 0;
   i11 = (i9 & 255) >>> 1;
  } else {
   i10 = HEAP32[i5 + 8 >> 2] | 0;
   i11 = HEAP32[i5 + 4 >> 2] | 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj(i3, i10, i11) | 0;
  if (!((HEAP8[i5] & 1) == 0)) {
   __ZdlPv(HEAP32[i5 + 8 >> 2] | 0);
  }
 }
 HEAP32[i1 + 0 >> 2] = HEAP32[i3 + 0 >> 2];
 HEAP32[i1 + 4 >> 2] = HEAP32[i3 + 4 >> 2];
 HEAP32[i1 + 8 >> 2] = HEAP32[i3 + 8 >> 2];
 HEAP32[i3 + 0 >> 2] = 0;
 HEAP32[i3 + 4 >> 2] = 0;
 HEAP32[i3 + 8 >> 2] = 0;
 STACKTOP = i4;
 return;
}
function __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEErsERi(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i4 = i3 + 16 | 0;
 i5 = i3 + 28 | 0;
 i6 = i3 + 24 | 0;
 i7 = i3 + 20 | 0;
 i8 = i3 + 32 | 0;
 i9 = i3 + 8 | 0;
 i10 = i3 + 4 | 0;
 i11 = i3;
 i12 = i3 + 12 | 0;
 __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEE6sentryC2ERS3_b(i8, i1, 0);
 if ((HEAP8[i8] | 0) == 0) {
  STACKTOP = i3;
  return i1 | 0;
 }
 HEAP32[i9 >> 2] = 0;
 __ZNSt3__16localeC2ERKS0_(i11, i1 + ((HEAP32[(HEAP32[i1 >> 2] | 0) + -12 >> 2] | 0) + 28) | 0);
 i8 = __ZNKSt3__16locale9use_facetERNS0_2idE(i11, 4368) | 0;
 i13 = HEAP32[(HEAP32[i1 >> 2] | 0) + -12 >> 2] | 0;
 i14 = i1 + i13 | 0;
 i15 = HEAP32[(HEAP32[i8 >> 2] | 0) + 16 >> 2] | 0;
 HEAP32[i6 >> 2] = HEAP32[i1 + (i13 + 24) >> 2];
 HEAP32[i7 >> 2] = 0;
 HEAP32[i5 + 0 >> 2] = HEAP32[i6 + 0 >> 2];
 HEAP32[i4 + 0 >> 2] = HEAP32[i7 + 0 >> 2];
 FUNCTION_TABLE_viiiiiii[i15 & 63](i12, i8, i5, i4, i14, i9, i10);
 __ZNSt3__16localeD2Ev(i11);
 HEAP32[i2 >> 2] = HEAP32[i10 >> 2];
 i10 = HEAP32[(HEAP32[i1 >> 2] | 0) + -12 >> 2] | 0;
 __ZNSt3__18ios_base5clearEj(i1 + i10 | 0, HEAP32[i1 + (i10 + 16) >> 2] | HEAP32[i9 >> 2]);
 STACKTOP = i3;
 return i1 | 0;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendIPcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueERS5_E4typeES9_S9_(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i4 = STACKTOP;
 i5 = i2;
 i6 = HEAP8[i1] | 0;
 if ((i6 & 1) == 0) {
  i7 = 10;
  i8 = (i6 & 255) >>> 1;
  i9 = i6;
 } else {
  i6 = HEAP32[i1 >> 2] | 0;
  i7 = (i6 & -2) + -1 | 0;
  i8 = HEAP32[i1 + 4 >> 2] | 0;
  i9 = i6 & 255;
 }
 i6 = i3 - i5 | 0;
 if ((i3 | 0) == (i2 | 0)) {
  STACKTOP = i4;
  return i1 | 0;
 }
 if ((i7 - i8 | 0) >>> 0 < i6 >>> 0) {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj(i1, i7, i8 + i6 - i7 | 0, i8, i8, 0, 0);
  i10 = HEAP8[i1] | 0;
 } else {
  i10 = i9;
 }
 if ((i10 & 1) == 0) {
  i11 = i1 + 1 | 0;
 } else {
  i11 = HEAP32[i1 + 8 >> 2] | 0;
 }
 i10 = i3 + (i8 - i5) | 0;
 i5 = i2;
 i2 = i11 + i8 | 0;
 while (1) {
  HEAP8[i2] = HEAP8[i5] | 0;
  i5 = i5 + 1 | 0;
  if ((i5 | 0) == (i3 | 0)) {
   break;
  } else {
   i2 = i2 + 1 | 0;
  }
 }
 HEAP8[i11 + i10 | 0] = 0;
 i10 = i8 + i6 | 0;
 if ((HEAP8[i1] & 1) == 0) {
  HEAP8[i1] = i10 << 1;
  STACKTOP = i4;
  return i1 | 0;
 } else {
  HEAP32[i1 + 4 >> 2] = i10;
  STACKTOP = i4;
  return i1 | 0;
 }
 return 0;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0, i9 = 0;
 i7 = STACKTOP;
 if ((i1 | 0) != (HEAP32[i2 + 8 >> 2] | 0)) {
  i8 = HEAP32[i1 + 8 >> 2] | 0;
  FUNCTION_TABLE_viiiiii[HEAP32[(HEAP32[i8 >> 2] | 0) + 20 >> 2] & 31](i8, i2, i3, i4, i5, i6);
  STACKTOP = i7;
  return;
 }
 HEAP8[i2 + 53 | 0] = 1;
 if ((HEAP32[i2 + 4 >> 2] | 0) != (i4 | 0)) {
  STACKTOP = i7;
  return;
 }
 HEAP8[i2 + 52 | 0] = 1;
 i4 = i2 + 16 | 0;
 i6 = HEAP32[i4 >> 2] | 0;
 if ((i6 | 0) == 0) {
  HEAP32[i4 >> 2] = i3;
  HEAP32[i2 + 24 >> 2] = i5;
  HEAP32[i2 + 36 >> 2] = 1;
  if (!((HEAP32[i2 + 48 >> 2] | 0) == 1 & (i5 | 0) == 1)) {
   STACKTOP = i7;
   return;
  }
  HEAP8[i2 + 54 | 0] = 1;
  STACKTOP = i7;
  return;
 }
 if ((i6 | 0) != (i3 | 0)) {
  i3 = i2 + 36 | 0;
  HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + 1;
  HEAP8[i2 + 54 | 0] = 1;
  STACKTOP = i7;
  return;
 }
 i3 = i2 + 24 | 0;
 i6 = HEAP32[i3 >> 2] | 0;
 if ((i6 | 0) == 2) {
  HEAP32[i3 >> 2] = i5;
  i9 = i5;
 } else {
  i9 = i6;
 }
 if (!((HEAP32[i2 + 48 >> 2] | 0) == 1 & (i9 | 0) == 1)) {
  STACKTOP = i7;
  return;
 }
 HEAP8[i2 + 54 | 0] = 1;
 STACKTOP = i7;
 return;
}
function ___cxx_global_array_dtor120(i1) {
 i1 = i1 | 0;
 i1 = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(13332 | 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(13320 | 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(13308 | 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(13296 | 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(13284 | 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(13272 | 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(13260 | 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(13248 | 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(13236 | 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(13224 | 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(13212 | 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(13200 | 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(13188 | 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(13176);
 STACKTOP = i1;
 return;
}
function ___cxx_global_array_dtor105(i1) {
 i1 = i1 | 0;
 i1 = STACKTOP;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(12796 | 0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(12784 | 0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(12772 | 0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(12760 | 0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(12748 | 0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(12736 | 0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(12724 | 0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(12712 | 0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(12700 | 0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(12688 | 0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(12676 | 0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(12664 | 0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(12652 | 0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(12640);
 STACKTOP = i1;
 return;
}
function __ZNSt3__125__num_get_signed_integralIxEET_PKcS3_Rji(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i6 = i5;
 if ((i1 | 0) == (i2 | 0)) {
  HEAP32[i3 >> 2] = 4;
  i7 = 0;
  i8 = 0;
  tempRet0 = i7;
  STACKTOP = i5;
  return i8 | 0;
 }
 i9 = ___errno_location() | 0;
 i10 = HEAP32[i9 >> 2] | 0;
 HEAP32[i9 >> 2] = 0;
 if ((HEAP8[5728] | 0) == 0) {
  if ((___cxa_guard_acquire(5728) | 0) != 0) {
   HEAP32[1430] = _newlocale(2147483647, 5736, 0) | 0;
   ___cxa_guard_release(5728);
  }
 }
 i11 = _strtoll_l(i1 | 0, i6 | 0, i4 | 0, HEAP32[1430] | 0) | 0;
 i4 = tempRet0;
 i1 = HEAP32[i9 >> 2] | 0;
 if ((i1 | 0) == 0) {
  HEAP32[i9 >> 2] = i10;
 }
 if ((HEAP32[i6 >> 2] | 0) != (i2 | 0)) {
  HEAP32[i3 >> 2] = 4;
  i7 = 0;
  i8 = 0;
  tempRet0 = i7;
  STACKTOP = i5;
  return i8 | 0;
 }
 if ((i1 | 0) == 34) {
  HEAP32[i3 >> 2] = 4;
  i3 = (i4 | 0) > 0 | (i4 | 0) == 0 & i11 >>> 0 > 0;
  tempRet0 = i3 ? 2147483647 : -2147483648;
  STACKTOP = i5;
  return (i3 ? -1 : 0) | 0;
 } else {
  i7 = i4;
  i8 = i11;
  tempRet0 = i7;
  STACKTOP = i5;
  return i8 | 0;
 }
 return 0;
}
function __ZNSt3__16locale5__imp7installEPNS0_5facetEl(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 i4 = STACKTOP;
 __ZNSt3__114__shared_count12__add_sharedEv(i2);
 i5 = i1 + 8 | 0;
 i6 = i1 + 12 | 0;
 i1 = HEAP32[i6 >> 2] | 0;
 i7 = HEAP32[i5 >> 2] | 0;
 i8 = i1 - i7 >> 2;
 do {
  if (i8 >>> 0 > i3 >>> 0) {
   i9 = i7;
  } else {
   i10 = i3 + 1 | 0;
   if (i8 >>> 0 < i10 >>> 0) {
    __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8__appendEj(i5, i10 - i8 | 0);
    i9 = HEAP32[i5 >> 2] | 0;
    break;
   }
   if (i8 >>> 0 > i10 >>> 0) {
    i11 = i7 + (i10 << 2) | 0;
    if ((i1 | 0) == (i11 | 0)) {
     i9 = i7;
    } else {
     HEAP32[i6 >> 2] = i1 + (~((i1 + -4 + (0 - i11) | 0) >>> 2) << 2);
     i9 = i7;
    }
   } else {
    i9 = i7;
   }
  }
 } while (0);
 i7 = HEAP32[i9 + (i3 << 2) >> 2] | 0;
 if ((i7 | 0) == 0) {
  i12 = i9;
  i13 = i12 + (i3 << 2) | 0;
  HEAP32[i13 >> 2] = i2;
  STACKTOP = i4;
  return;
 }
 __ZNSt3__114__shared_count16__release_sharedEv(i7) | 0;
 i12 = HEAP32[i5 >> 2] | 0;
 i13 = i12 + (i3 << 2) | 0;
 HEAP32[i13 >> 2] = i2;
 STACKTOP = i4;
 return;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEjjjjjj(i1, i2, i3, i4, i5, i6, i7) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 var i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0;
 i8 = STACKTOP;
 if ((1073741807 - i2 | 0) >>> 0 < i3 >>> 0) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
 }
 if ((HEAP8[i1] & 1) == 0) {
  i9 = i1 + 4 | 0;
 } else {
  i9 = HEAP32[i1 + 8 >> 2] | 0;
 }
 if (i2 >>> 0 < 536870887) {
  i10 = i3 + i2 | 0;
  i3 = i2 << 1;
  i11 = i10 >>> 0 < i3 >>> 0 ? i3 : i10;
  if (i11 >>> 0 < 2) {
   i12 = 2;
  } else {
   i12 = i11 + 4 & -4;
  }
 } else {
  i12 = 1073741807;
 }
 i11 = __Znwj(i12 << 2) | 0;
 if ((i5 | 0) != 0) {
  _wmemcpy(i11, i9, i5) | 0;
 }
 i10 = i4 - i6 | 0;
 if ((i10 | 0) != (i5 | 0)) {
  _wmemcpy(i11 + (i7 + i5 << 2) | 0, i9 + (i6 + i5 << 2) | 0, i10 - i5 | 0) | 0;
 }
 if ((i2 | 0) == 1) {
  i13 = i1 + 8 | 0;
  HEAP32[i13 >> 2] = i11;
  i14 = i12 | 1;
  HEAP32[i1 >> 2] = i14;
  STACKTOP = i8;
  return;
 }
 __ZdlPv(i9);
 i13 = i1 + 8 | 0;
 HEAP32[i13 >> 2] = i11;
 i14 = i12 | 1;
 HEAP32[i1 >> 2] = i14;
 STACKTOP = i8;
 return;
}
function __ZNSt3__112system_errorC2ENS_10error_codeEPKc(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i5 = i4 + 12 | 0;
 i6 = i4;
 i7 = _strlen(i3 | 0) | 0;
 if (i7 >>> 0 > 4294967279) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
 }
 if (i7 >>> 0 < 11) {
  HEAP8[i6] = i7 << 1;
  i8 = i6 + 1 | 0;
 } else {
  i9 = i7 + 16 & -16;
  i10 = __Znwj(i9) | 0;
  HEAP32[i6 + 8 >> 2] = i10;
  HEAP32[i6 >> 2] = i9 | 1;
  HEAP32[i6 + 4 >> 2] = i7;
  i8 = i10;
 }
 _memcpy(i8 | 0, i3 | 0, i7 | 0) | 0;
 HEAP8[i8 + i7 | 0] = 0;
 __ZNSt3__112system_error6__initERKNS_10error_codeENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(i5, i2, i6);
 __ZNSt13runtime_errorC2ERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE(i1, i5);
 if (!((HEAP8[i5] & 1) == 0)) {
  __ZdlPv(HEAP32[i5 + 8 >> 2] | 0);
 }
 if (!((HEAP8[i6] & 1) == 0)) {
  __ZdlPv(HEAP32[i6 + 8 >> 2] | 0);
 }
 HEAP32[i1 >> 2] = 2872;
 i6 = i2;
 i2 = HEAP32[i6 + 4 >> 2] | 0;
 i5 = i1 + 8 | 0;
 HEAP32[i5 >> 2] = HEAP32[i6 >> 2];
 HEAP32[i5 + 4 >> 2] = i2;
 STACKTOP = i4;
 return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj(i1, i2, i3, i4, i5, i6, i7) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 var i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0;
 i8 = STACKTOP;
 if ((-17 - i2 | 0) >>> 0 < i3 >>> 0) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
 }
 if ((HEAP8[i1] & 1) == 0) {
  i9 = i1 + 1 | 0;
 } else {
  i9 = HEAP32[i1 + 8 >> 2] | 0;
 }
 if (i2 >>> 0 < 2147483623) {
  i10 = i3 + i2 | 0;
  i3 = i2 << 1;
  i11 = i10 >>> 0 < i3 >>> 0 ? i3 : i10;
  if (i11 >>> 0 < 11) {
   i12 = 11;
  } else {
   i12 = i11 + 16 & -16;
  }
 } else {
  i12 = -17;
 }
 i11 = __Znwj(i12) | 0;
 if ((i5 | 0) != 0) {
  _memcpy(i11 | 0, i9 | 0, i5 | 0) | 0;
 }
 i10 = i4 - i6 | 0;
 if ((i10 | 0) != (i5 | 0)) {
  _memcpy(i11 + (i7 + i5) | 0, i9 + (i6 + i5) | 0, i10 - i5 | 0) | 0;
 }
 if ((i2 | 0) == 10) {
  i13 = i1 + 8 | 0;
  HEAP32[i13 >> 2] = i11;
  i14 = i12 | 1;
  HEAP32[i1 >> 2] = i14;
  STACKTOP = i8;
  return;
 }
 __ZdlPv(i9);
 i13 = i1 + 8 | 0;
 HEAP32[i13 >> 2] = i11;
 i14 = i12 | 1;
 HEAP32[i1 >> 2] = i14;
 STACKTOP = i8;
 return;
}
function __ZNSt3__127__num_get_unsigned_integralItEET_PKcS3_Rji(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i6 = i5;
 if ((i1 | 0) == (i2 | 0)) {
  HEAP32[i3 >> 2] = 4;
  i7 = 0;
  STACKTOP = i5;
  return i7 | 0;
 }
 if ((HEAP8[i1] | 0) == 45) {
  HEAP32[i3 >> 2] = 4;
  i7 = 0;
  STACKTOP = i5;
  return i7 | 0;
 }
 i8 = ___errno_location() | 0;
 i9 = HEAP32[i8 >> 2] | 0;
 HEAP32[i8 >> 2] = 0;
 if ((HEAP8[5728] | 0) == 0) {
  if ((___cxa_guard_acquire(5728) | 0) != 0) {
   HEAP32[1430] = _newlocale(2147483647, 5736, 0) | 0;
   ___cxa_guard_release(5728);
  }
 }
 i10 = _strtoull_l(i1 | 0, i6 | 0, i4 | 0, HEAP32[1430] | 0) | 0;
 i4 = tempRet0;
 i1 = HEAP32[i8 >> 2] | 0;
 if ((i1 | 0) == 0) {
  HEAP32[i8 >> 2] = i9;
 }
 if ((HEAP32[i6 >> 2] | 0) != (i2 | 0)) {
  HEAP32[i3 >> 2] = 4;
  i7 = 0;
  STACKTOP = i5;
  return i7 | 0;
 }
 if ((i1 | 0) == 34 | (i4 >>> 0 > 0 | (i4 | 0) == 0 & i10 >>> 0 > 65535)) {
  HEAP32[i3 >> 2] = 4;
  i7 = -1;
  STACKTOP = i5;
  return i7 | 0;
 } else {
  i7 = i10 & 65535;
  STACKTOP = i5;
  return i7 | 0;
 }
 return 0;
}
function __ZNSt3__127__num_get_unsigned_integralImEET_PKcS3_Rji(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i6 = i5;
 if ((i1 | 0) == (i2 | 0)) {
  HEAP32[i3 >> 2] = 4;
  i7 = 0;
  STACKTOP = i5;
  return i7 | 0;
 }
 if ((HEAP8[i1] | 0) == 45) {
  HEAP32[i3 >> 2] = 4;
  i7 = 0;
  STACKTOP = i5;
  return i7 | 0;
 }
 i8 = ___errno_location() | 0;
 i9 = HEAP32[i8 >> 2] | 0;
 HEAP32[i8 >> 2] = 0;
 if ((HEAP8[5728] | 0) == 0) {
  if ((___cxa_guard_acquire(5728) | 0) != 0) {
   HEAP32[1430] = _newlocale(2147483647, 5736, 0) | 0;
   ___cxa_guard_release(5728);
  }
 }
 i10 = _strtoull_l(i1 | 0, i6 | 0, i4 | 0, HEAP32[1430] | 0) | 0;
 i4 = tempRet0;
 i1 = HEAP32[i8 >> 2] | 0;
 if ((i1 | 0) == 0) {
  HEAP32[i8 >> 2] = i9;
 }
 if ((HEAP32[i6 >> 2] | 0) != (i2 | 0)) {
  HEAP32[i3 >> 2] = 4;
  i7 = 0;
  STACKTOP = i5;
  return i7 | 0;
 }
 if ((i1 | 0) == 34 | (i4 >>> 0 > 0 | (i4 | 0) == 0 & i10 >>> 0 > 4294967295)) {
  HEAP32[i3 >> 2] = 4;
  i7 = -1;
  STACKTOP = i5;
  return i7 | 0;
 } else {
  i7 = i10;
  STACKTOP = i5;
  return i7 | 0;
 }
 return 0;
}
function __ZNSt3__127__num_get_unsigned_integralIjEET_PKcS3_Rji(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i6 = i5;
 if ((i1 | 0) == (i2 | 0)) {
  HEAP32[i3 >> 2] = 4;
  i7 = 0;
  STACKTOP = i5;
  return i7 | 0;
 }
 if ((HEAP8[i1] | 0) == 45) {
  HEAP32[i3 >> 2] = 4;
  i7 = 0;
  STACKTOP = i5;
  return i7 | 0;
 }
 i8 = ___errno_location() | 0;
 i9 = HEAP32[i8 >> 2] | 0;
 HEAP32[i8 >> 2] = 0;
 if ((HEAP8[5728] | 0) == 0) {
  if ((___cxa_guard_acquire(5728) | 0) != 0) {
   HEAP32[1430] = _newlocale(2147483647, 5736, 0) | 0;
   ___cxa_guard_release(5728);
  }
 }
 i10 = _strtoull_l(i1 | 0, i6 | 0, i4 | 0, HEAP32[1430] | 0) | 0;
 i4 = tempRet0;
 i1 = HEAP32[i8 >> 2] | 0;
 if ((i1 | 0) == 0) {
  HEAP32[i8 >> 2] = i9;
 }
 if ((HEAP32[i6 >> 2] | 0) != (i2 | 0)) {
  HEAP32[i3 >> 2] = 4;
  i7 = 0;
  STACKTOP = i5;
  return i7 | 0;
 }
 if ((i1 | 0) == 34 | (i4 >>> 0 > 0 | (i4 | 0) == 0 & i10 >>> 0 > 4294967295)) {
  HEAP32[i3 >> 2] = 4;
  i7 = -1;
  STACKTOP = i5;
  return i7 | 0;
 } else {
  i7 = i10;
  STACKTOP = i5;
  return i7 | 0;
 }
 return 0;
}
function __ZNSt3__127__num_get_unsigned_integralIyEET_PKcS3_Rji(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i6 = i5;
 do {
  if ((i1 | 0) == (i2 | 0)) {
   HEAP32[i3 >> 2] = 4;
   i7 = 0;
   i8 = 0;
  } else {
   if ((HEAP8[i1] | 0) == 45) {
    HEAP32[i3 >> 2] = 4;
    i7 = 0;
    i8 = 0;
    break;
   }
   i9 = ___errno_location() | 0;
   i10 = HEAP32[i9 >> 2] | 0;
   HEAP32[i9 >> 2] = 0;
   if ((HEAP8[5728] | 0) == 0) {
    if ((___cxa_guard_acquire(5728) | 0) != 0) {
     HEAP32[1430] = _newlocale(2147483647, 5736, 0) | 0;
     ___cxa_guard_release(5728);
    }
   }
   i11 = _strtoull_l(i1 | 0, i6 | 0, i4 | 0, HEAP32[1430] | 0) | 0;
   i12 = HEAP32[i9 >> 2] | 0;
   if ((i12 | 0) == 0) {
    HEAP32[i9 >> 2] = i10;
   }
   if ((HEAP32[i6 >> 2] | 0) != (i2 | 0)) {
    HEAP32[i3 >> 2] = 4;
    i7 = 0;
    i8 = 0;
    break;
   }
   if ((i12 | 0) == 34) {
    HEAP32[i3 >> 2] = 4;
    i7 = -1;
    i8 = -1;
   } else {
    i7 = tempRet0;
    i8 = i11;
   }
  }
 } while (0);
 tempRet0 = i7;
 STACKTOP = i5;
 return i8 | 0;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i3 = STACKTOP;
 i4 = HEAP8[i1] | 0;
 i5 = (i4 & 1) != 0;
 if (i5) {
  i6 = (HEAP32[i1 >> 2] & -2) + -1 | 0;
  i7 = HEAP32[i1 + 4 >> 2] | 0;
 } else {
  i6 = 1;
  i7 = (i4 & 255) >>> 1;
 }
 if ((i7 | 0) == (i6 | 0)) {
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEjjjjjj(i1, i6, 1, i6, i6, 0, 0);
  if ((HEAP8[i1] & 1) == 0) {
   i8 = 7;
  } else {
   i8 = 8;
  }
 } else {
  if (i5) {
   i8 = 8;
  } else {
   i8 = 7;
  }
 }
 if ((i8 | 0) == 7) {
  HEAP8[i1] = (i7 << 1) + 2;
  i9 = i1 + 4 | 0;
  i10 = i7 + 1 | 0;
  i11 = i9 + (i7 << 2) | 0;
  HEAP32[i11 >> 2] = i2;
  i12 = i9 + (i10 << 2) | 0;
  HEAP32[i12 >> 2] = 0;
  STACKTOP = i3;
  return;
 } else if ((i8 | 0) == 8) {
  i8 = HEAP32[i1 + 8 >> 2] | 0;
  i5 = i7 + 1 | 0;
  HEAP32[i1 + 4 >> 2] = i5;
  i9 = i8;
  i10 = i5;
  i11 = i9 + (i7 << 2) | 0;
  HEAP32[i11 >> 2] = i2;
  i12 = i9 + (i10 << 2) | 0;
  HEAP32[i12 >> 2] = 0;
  STACKTOP = i3;
  return;
 }
}
function __ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0;
 i6 = STACKTOP;
 if ((HEAP32[i2 + 8 >> 2] | 0) != (i1 | 0)) {
  STACKTOP = i6;
  return;
 }
 HEAP8[i2 + 53 | 0] = 1;
 if ((HEAP32[i2 + 4 >> 2] | 0) != (i4 | 0)) {
  STACKTOP = i6;
  return;
 }
 HEAP8[i2 + 52 | 0] = 1;
 i4 = i2 + 16 | 0;
 i1 = HEAP32[i4 >> 2] | 0;
 if ((i1 | 0) == 0) {
  HEAP32[i4 >> 2] = i3;
  HEAP32[i2 + 24 >> 2] = i5;
  HEAP32[i2 + 36 >> 2] = 1;
  if (!((HEAP32[i2 + 48 >> 2] | 0) == 1 & (i5 | 0) == 1)) {
   STACKTOP = i6;
   return;
  }
  HEAP8[i2 + 54 | 0] = 1;
  STACKTOP = i6;
  return;
 }
 if ((i1 | 0) != (i3 | 0)) {
  i3 = i2 + 36 | 0;
  HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + 1;
  HEAP8[i2 + 54 | 0] = 1;
  STACKTOP = i6;
  return;
 }
 i3 = i2 + 24 | 0;
 i1 = HEAP32[i3 >> 2] | 0;
 if ((i1 | 0) == 2) {
  HEAP32[i3 >> 2] = i5;
  i7 = i5;
 } else {
  i7 = i1;
 }
 if (!((HEAP32[i2 + 48 >> 2] | 0) == 1 & (i7 | 0) == 1)) {
  STACKTOP = i6;
  return;
 }
 HEAP8[i2 + 54 | 0] = 1;
 STACKTOP = i6;
 return;
}
function __Z10ReadMatrixRNSt3__113basic_istreamIcNS_11char_traitsIcEEEERi(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i3 = STACKTOP;
 if ((HEAP32[i1 + ((HEAP32[(HEAP32[i1 >> 2] | 0) + -12 >> 2] | 0) + 16) >> 2] & 5 | 0) != 0) {
  i4 = 0;
  STACKTOP = i3;
  return i4 | 0;
 }
 __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEErsERi(i1, i2) | 0;
 i5 = 1 << HEAP32[i2 >> 2];
 HEAP32[i2 >> 2] = i5;
 i2 = i5 >>> 0 > 1073741823 ? -1 : i5 << 2;
 i6 = __Znaj(i2) | 0;
 i7 = (i5 | 0) > 0;
 if (i7) {
  i8 = 0;
 } else {
  i4 = i6;
  STACKTOP = i3;
  return i4 | 0;
 }
 do {
  HEAP32[i6 + (i8 << 2) >> 2] = __Znaj(i2) | 0;
  i8 = i8 + 1 | 0;
 } while ((i8 | 0) != (i5 | 0));
 if (i7) {
  i9 = 0;
 } else {
  i4 = i6;
  STACKTOP = i3;
  return i4 | 0;
 }
 while (1) {
  i7 = HEAP32[i6 + (i9 << 2) >> 2] | 0;
  i8 = 0;
  do {
   __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEErsERi(i1, i7 + (i8 << 2) | 0) | 0;
   i8 = i8 + 1 | 0;
  } while ((i8 | 0) != (i5 | 0));
  i8 = i9 + 1 | 0;
  if ((i8 | 0) == (i5 | 0)) {
   i4 = i6;
   break;
  } else {
   i9 = i8;
  }
 }
 STACKTOP = i3;
 return i4 | 0;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm(i1, i2, i3, i4, i5, i6, i7) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 var i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i9 = i8 + 12 | 0;
 i10 = i8;
 i11 = i8 + 4 | 0;
 i12 = i8 + 8 | 0;
 i13 = i2 + 8 | 0;
 i14 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i13 >> 2] | 0) + 20 >> 2] & 127](i13) | 0;
 HEAP32[i11 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i12 >> 2] = HEAP32[i4 >> 2];
 i4 = HEAP8[i14] | 0;
 if ((i4 & 1) == 0) {
  i15 = i14 + 4 | 0;
  i16 = (i4 & 255) >>> 1;
  i17 = i14 + 4 | 0;
 } else {
  i4 = HEAP32[i14 + 8 >> 2] | 0;
  i15 = i4;
  i16 = HEAP32[i14 + 4 >> 2] | 0;
  i17 = i4;
 }
 i4 = i15 + (i16 << 2) | 0;
 HEAP32[i10 + 0 >> 2] = HEAP32[i11 + 0 >> 2];
 HEAP32[i9 + 0 >> 2] = HEAP32[i12 + 0 >> 2];
 __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_(i1, i2, i10, i9, i5, i6, i7, i17, i4);
 STACKTOP = i8;
 return;
}
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0;
 i4 = STACKTOP;
 i5 = i2 + 64 | 0;
 if ((HEAP32[i5 >> 2] | 0) != 0) {
  if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 24 >> 2] & 127](i2) | 0) == 0) {
   if ((_fseek(HEAP32[i5 >> 2] | 0, HEAP32[i3 + 8 >> 2] | 0, 0) | 0) == 0) {
    i5 = i3;
    i6 = HEAP32[i5 + 4 >> 2] | 0;
    i7 = i2 + 72 | 0;
    HEAP32[i7 >> 2] = HEAP32[i5 >> 2];
    HEAP32[i7 + 4 >> 2] = i6;
    HEAP32[i1 + 0 >> 2] = HEAP32[i3 + 0 >> 2];
    HEAP32[i1 + 4 >> 2] = HEAP32[i3 + 4 >> 2];
    HEAP32[i1 + 8 >> 2] = HEAP32[i3 + 8 >> 2];
    HEAP32[i1 + 12 >> 2] = HEAP32[i3 + 12 >> 2];
    STACKTOP = i4;
    return;
   } else {
    i3 = i1;
    HEAP32[i3 >> 2] = 0;
    HEAP32[i3 + 4 >> 2] = 0;
    i3 = i1 + 8 | 0;
    HEAP32[i3 >> 2] = -1;
    HEAP32[i3 + 4 >> 2] = -1;
    STACKTOP = i4;
    return;
   }
  }
 }
 i3 = i1;
 HEAP32[i3 >> 2] = 0;
 HEAP32[i3 + 4 >> 2] = 0;
 i3 = i1 + 8 | 0;
 HEAP32[i3 >> 2] = -1;
 HEAP32[i3 + 4 >> 2] = -1;
 STACKTOP = i4;
 return;
}
function __ZNSt3__16locale5__impD2Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i2 = STACKTOP;
 HEAP32[i1 >> 2] = 5752;
 i3 = i1 + 12 | 0;
 i4 = HEAP32[i3 >> 2] | 0;
 i5 = i1 + 8 | 0;
 i6 = HEAP32[i5 >> 2] | 0;
 if ((i4 | 0) != (i6 | 0)) {
  i7 = i4;
  i4 = i6;
  i6 = 0;
  while (1) {
   i8 = HEAP32[i4 + (i6 << 2) >> 2] | 0;
   if ((i8 | 0) == 0) {
    i9 = i7;
    i10 = i4;
   } else {
    __ZNSt3__114__shared_count16__release_sharedEv(i8) | 0;
    i9 = HEAP32[i3 >> 2] | 0;
    i10 = HEAP32[i5 >> 2] | 0;
   }
   i6 = i6 + 1 | 0;
   if (!(i6 >>> 0 < i9 - i10 >> 2 >>> 0)) {
    break;
   } else {
    i7 = i9;
    i4 = i10;
   }
  }
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i1 + 144 | 0);
 i10 = HEAP32[i5 >> 2] | 0;
 if ((i10 | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 i5 = HEAP32[i3 >> 2] | 0;
 if ((i5 | 0) != (i10 | 0)) {
  HEAP32[i3 >> 2] = i5 + (~((i5 + -4 + (0 - i10) | 0) >>> 2) << 2);
 }
 if ((i1 + 24 | 0) == (i10 | 0)) {
  HEAP8[i1 + 136 | 0] = 0;
  STACKTOP = i2;
  return;
 } else {
  __ZdlPv(i10);
  STACKTOP = i2;
  return;
 }
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm(i1, i2, i3, i4, i5, i6, i7) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 var i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i9 = i8 + 12 | 0;
 i10 = i8;
 i11 = i8 + 4 | 0;
 i12 = i8 + 8 | 0;
 i13 = i2 + 8 | 0;
 i14 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i13 >> 2] | 0) + 20 >> 2] & 127](i13) | 0;
 HEAP32[i11 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i12 >> 2] = HEAP32[i4 >> 2];
 i4 = HEAP8[i14] | 0;
 if ((i4 & 1) == 0) {
  i15 = i14 + 1 | 0;
  i16 = (i4 & 255) >>> 1;
  i17 = i14 + 1 | 0;
 } else {
  i4 = HEAP32[i14 + 8 >> 2] | 0;
  i15 = i4;
  i16 = HEAP32[i14 + 4 >> 2] | 0;
  i17 = i4;
 }
 i4 = i15 + i16 | 0;
 HEAP32[i10 + 0 >> 2] = HEAP32[i11 + 0 >> 2];
 HEAP32[i9 + 0 >> 2] = HEAP32[i12 + 0 >> 2];
 __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_(i1, i2, i10, i9, i5, i6, i7, i17, i4);
 STACKTOP = i8;
 return;
}
function ___shgetc(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i2 = STACKTOP;
 i3 = i1 + 104 | 0;
 i4 = HEAP32[i3 >> 2] | 0;
 if ((i4 | 0) == 0) {
  i5 = 3;
 } else {
  if ((HEAP32[i1 + 108 >> 2] | 0) < (i4 | 0)) {
   i5 = 3;
  }
 }
 if ((i5 | 0) == 3) {
  i4 = ___uflow(i1) | 0;
  if ((i4 | 0) >= 0) {
   i6 = HEAP32[i3 >> 2] | 0;
   i3 = HEAP32[i1 + 8 >> 2] | 0;
   if ((i6 | 0) == 0) {
    i5 = 8;
   } else {
    i7 = HEAP32[i1 + 4 >> 2] | 0;
    i8 = i6 - (HEAP32[i1 + 108 >> 2] | 0) + -1 | 0;
    if ((i3 - i7 | 0) > (i8 | 0)) {
     HEAP32[i1 + 100 >> 2] = i7 + i8;
    } else {
     i5 = 8;
    }
   }
   if ((i5 | 0) == 8) {
    HEAP32[i1 + 100 >> 2] = i3;
   }
   i5 = HEAP32[i1 + 4 >> 2] | 0;
   if ((i3 | 0) != 0) {
    i8 = i1 + 108 | 0;
    HEAP32[i8 >> 2] = i3 + 1 - i5 + (HEAP32[i8 >> 2] | 0);
   }
   i8 = i5 + -1 | 0;
   if ((HEAPU8[i8] | 0 | 0) == (i4 | 0)) {
    i9 = i4;
    STACKTOP = i2;
    return i9 | 0;
   }
   HEAP8[i8] = i4;
   i9 = i4;
   STACKTOP = i2;
   return i9 | 0;
  }
 }
 HEAP32[i1 + 100 >> 2] = 0;
 i9 = -1;
 STACKTOP = i2;
 return i9 | 0;
}
function __ZNSt3__110__stdinbufIwEC2EP8_IO_FILEP11__mbstate_t(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i4;
 HEAP32[i1 >> 2] = 3168;
 i6 = i1 + 4 | 0;
 __ZNSt3__16localeC2Ev(i6);
 i7 = i1 + 8 | 0;
 HEAP32[i7 + 0 >> 2] = 0;
 HEAP32[i7 + 4 >> 2] = 0;
 HEAP32[i7 + 8 >> 2] = 0;
 HEAP32[i7 + 12 >> 2] = 0;
 HEAP32[i7 + 16 >> 2] = 0;
 HEAP32[i7 + 20 >> 2] = 0;
 HEAP32[i1 >> 2] = 2280;
 HEAP32[i1 + 32 >> 2] = i2;
 HEAP32[i1 + 40 >> 2] = i3;
 HEAP32[i1 + 48 >> 2] = -1;
 HEAP8[i1 + 52 | 0] = 0;
 __ZNSt3__16localeC2ERKS0_(i5, i6);
 i6 = __ZNKSt3__16locale9use_facetERNS0_2idE(i5, 5904) | 0;
 i3 = i1 + 36 | 0;
 HEAP32[i3 >> 2] = i6;
 i2 = i1 + 44 | 0;
 HEAP32[i2 >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i6 >> 2] | 0) + 24 >> 2] & 127](i6) | 0;
 i6 = HEAP32[i3 >> 2] | 0;
 HEAP8[i1 + 53 | 0] = (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i6 >> 2] | 0) + 28 >> 2] & 127](i6) | 0) & 1;
 if ((HEAP32[i2 >> 2] | 0) > 8) {
  __ZNSt3__121__throw_runtime_errorEPKc(2376);
 } else {
  __ZNSt3__16localeD2Ev(i5);
  STACKTOP = i4;
  return;
 }
}
function __ZNSt3__110__stdinbufIcEC2EP8_IO_FILEP11__mbstate_t(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i4;
 HEAP32[i1 >> 2] = 3104;
 i6 = i1 + 4 | 0;
 __ZNSt3__16localeC2Ev(i6);
 i7 = i1 + 8 | 0;
 HEAP32[i7 + 0 >> 2] = 0;
 HEAP32[i7 + 4 >> 2] = 0;
 HEAP32[i7 + 8 >> 2] = 0;
 HEAP32[i7 + 12 >> 2] = 0;
 HEAP32[i7 + 16 >> 2] = 0;
 HEAP32[i7 + 20 >> 2] = 0;
 HEAP32[i1 >> 2] = 2536;
 HEAP32[i1 + 32 >> 2] = i2;
 HEAP32[i1 + 40 >> 2] = i3;
 HEAP32[i1 + 48 >> 2] = -1;
 HEAP8[i1 + 52 | 0] = 0;
 __ZNSt3__16localeC2ERKS0_(i5, i6);
 i6 = __ZNKSt3__16locale9use_facetERNS0_2idE(i5, 5896) | 0;
 i3 = i1 + 36 | 0;
 HEAP32[i3 >> 2] = i6;
 i2 = i1 + 44 | 0;
 HEAP32[i2 >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i6 >> 2] | 0) + 24 >> 2] & 127](i6) | 0;
 i6 = HEAP32[i3 >> 2] | 0;
 HEAP8[i1 + 53 | 0] = (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i6 >> 2] | 0) + 28 >> 2] & 127](i6) | 0) & 1;
 if ((HEAP32[i2 >> 2] | 0) > 8) {
  __ZNSt3__121__throw_runtime_errorEPKc(2376);
 } else {
  __ZNSt3__16localeD2Ev(i5);
  STACKTOP = i4;
  return;
 }
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i3 = STACKTOP;
 i4 = HEAP8[i1] | 0;
 i5 = (i4 & 1) != 0;
 if (i5) {
  i6 = (HEAP32[i1 >> 2] & -2) + -1 | 0;
  i7 = HEAP32[i1 + 4 >> 2] | 0;
 } else {
  i6 = 10;
  i7 = (i4 & 255) >>> 1;
 }
 if ((i7 | 0) == (i6 | 0)) {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj(i1, i6, 1, i6, i6, 0, 0);
  if ((HEAP8[i1] & 1) == 0) {
   i8 = 7;
  } else {
   i8 = 8;
  }
 } else {
  if (i5) {
   i8 = 8;
  } else {
   i8 = 7;
  }
 }
 if ((i8 | 0) == 7) {
  HEAP8[i1] = (i7 << 1) + 2;
  i9 = i1 + 1 | 0;
  i10 = i7 + 1 | 0;
  i11 = i9 + i7 | 0;
  HEAP8[i11] = i2;
  i12 = i9 + i10 | 0;
  HEAP8[i12] = 0;
  STACKTOP = i3;
  return;
 } else if ((i8 | 0) == 8) {
  i8 = HEAP32[i1 + 8 >> 2] | 0;
  i5 = i7 + 1 | 0;
  HEAP32[i1 + 4 >> 2] = i5;
  i9 = i8;
  i10 = i5;
  i11 = i9 + i7 | 0;
  HEAP8[i11] = i2;
  i12 = i9 + i10 | 0;
  HEAP8[i12] = 0;
  STACKTOP = i3;
  return;
 }
}
function __ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i6 = 0;
 i5 = STACKTOP;
 if ((HEAP32[i2 + 8 >> 2] | 0) == (i1 | 0)) {
  if ((HEAP32[i2 + 4 >> 2] | 0) != (i3 | 0)) {
   STACKTOP = i5;
   return;
  }
  i6 = i2 + 28 | 0;
  if ((HEAP32[i6 >> 2] | 0) == 1) {
   STACKTOP = i5;
   return;
  }
  HEAP32[i6 >> 2] = i4;
  STACKTOP = i5;
  return;
 }
 if ((HEAP32[i2 >> 2] | 0) != (i1 | 0)) {
  STACKTOP = i5;
  return;
 }
 if ((HEAP32[i2 + 16 >> 2] | 0) != (i3 | 0)) {
  i1 = i2 + 20 | 0;
  if ((HEAP32[i1 >> 2] | 0) != (i3 | 0)) {
   HEAP32[i2 + 32 >> 2] = i4;
   HEAP32[i1 >> 2] = i3;
   i3 = i2 + 40 | 0;
   HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + 1;
   if ((HEAP32[i2 + 36 >> 2] | 0) == 1) {
    if ((HEAP32[i2 + 24 >> 2] | 0) == 2) {
     HEAP8[i2 + 54 | 0] = 1;
    }
   }
   HEAP32[i2 + 44 >> 2] = 4;
   STACKTOP = i5;
   return;
  }
 }
 if ((i4 | 0) != 1) {
  STACKTOP = i5;
  return;
 }
 HEAP32[i2 + 32 >> 2] = 1;
 STACKTOP = i5;
 return;
}
function _atoi(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0;
 i2 = STACKTOP;
 i3 = i1;
 while (1) {
  i4 = i3 + 1 | 0;
  if ((_isspace(HEAP8[i3] | 0) | 0) == 0) {
   break;
  } else {
   i3 = i4;
  }
 }
 i1 = HEAP8[i3] | 0;
 i5 = i1 << 24 >> 24;
 if ((i5 | 0) == 43) {
  i6 = 0;
  i7 = 5;
 } else if ((i5 | 0) == 45) {
  i6 = 1;
  i7 = 5;
 } else {
  i8 = i3;
  i9 = i1;
  i10 = 0;
 }
 if ((i7 | 0) == 5) {
  i8 = i4;
  i9 = HEAP8[i4] | 0;
  i10 = i6;
 }
 if ((_isdigit(i9 << 24 >> 24 | 0) | 0) == 0) {
  i11 = 0;
  i12 = (i10 | 0) != 0;
  i13 = 0 - i11 | 0;
  i14 = i12 ? i11 : i13;
  STACKTOP = i2;
  return i14 | 0;
 } else {
  i15 = i8;
  i16 = 0;
 }
 while (1) {
  i8 = i15 + 1 | 0;
  i9 = (i16 * 10 | 0) + 48 - (HEAP8[i15] | 0) | 0;
  if ((_isdigit(HEAP8[i8] | 0) | 0) == 0) {
   i11 = i9;
   break;
  } else {
   i15 = i8;
   i16 = i9;
  }
 }
 i12 = (i10 | 0) != 0;
 i13 = 0 - i11 | 0;
 i14 = i12 ? i11 : i13;
 STACKTOP = i2;
 return i14 | 0;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i4 = STACKTOP;
 i5 = HEAP8[i1] | 0;
 if ((i5 & 1) == 0) {
  i6 = 10;
  i7 = i5;
 } else {
  i5 = HEAP32[i1 >> 2] | 0;
  i6 = (i5 & -2) + -1 | 0;
  i7 = i5 & 255;
 }
 if ((i7 & 1) == 0) {
  i8 = (i7 & 255) >>> 1;
 } else {
  i8 = HEAP32[i1 + 4 >> 2] | 0;
 }
 if ((i6 - i8 | 0) >>> 0 < i3 >>> 0) {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc(i1, i6, i3 - i6 + i8 | 0, i8, i8, 0, i3, i2);
  STACKTOP = i4;
  return i1 | 0;
 }
 if ((i3 | 0) == 0) {
  STACKTOP = i4;
  return i1 | 0;
 }
 if ((i7 & 1) == 0) {
  i9 = i1 + 1 | 0;
 } else {
  i9 = HEAP32[i1 + 8 >> 2] | 0;
 }
 _memcpy(i9 + i8 | 0, i2 | 0, i3 | 0) | 0;
 i2 = i8 + i3 | 0;
 if ((HEAP8[i1] & 1) == 0) {
  HEAP8[i1] = i2 << 1;
 } else {
  HEAP32[i1 + 4 >> 2] = i2;
 }
 HEAP8[i9 + i2 | 0] = 0;
 STACKTOP = i4;
 return i1 | 0;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEjc(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i4 = STACKTOP;
 if ((i2 | 0) == 0) {
  STACKTOP = i4;
  return i1 | 0;
 }
 i5 = HEAP8[i1] | 0;
 if ((i5 & 1) == 0) {
  i6 = 10;
  i7 = i5;
 } else {
  i5 = HEAP32[i1 >> 2] | 0;
  i6 = (i5 & -2) + -1 | 0;
  i7 = i5 & 255;
 }
 if ((i7 & 1) == 0) {
  i8 = (i7 & 255) >>> 1;
 } else {
  i8 = HEAP32[i1 + 4 >> 2] | 0;
 }
 if ((i6 - i8 | 0) >>> 0 < i2 >>> 0) {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj(i1, i6, i2 - i6 + i8 | 0, i8, i8, 0, 0);
  i9 = HEAP8[i1] | 0;
 } else {
  i9 = i7;
 }
 if ((i9 & 1) == 0) {
  i10 = i1 + 1 | 0;
 } else {
  i10 = HEAP32[i1 + 8 >> 2] | 0;
 }
 _memset(i10 + i8 | 0, i3 | 0, i2 | 0) | 0;
 i3 = i8 + i2 | 0;
 if ((HEAP8[i1] & 1) == 0) {
  HEAP8[i1] = i3 << 1;
 } else {
  HEAP32[i1 + 4 >> 2] = i3;
 }
 HEAP8[i10 + i3 | 0] = 0;
 STACKTOP = i4;
 return i1 | 0;
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE9do_lengthERS1_PKcS5_j(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0;
 i6 = STACKTOP;
 if ((i5 | 0) == 0 | (i3 | 0) == (i4 | 0)) {
  i7 = 0;
  STACKTOP = i6;
  return i7 | 0;
 }
 i8 = i4;
 i9 = i1 + 8 | 0;
 i1 = i3;
 i3 = 0;
 i10 = 0;
 while (1) {
  i11 = _uselocale(HEAP32[i9 >> 2] | 0) | 0;
  i12 = _mbrlen(i1, i8 - i1 | 0, i2) | 0;
  if ((i11 | 0) != 0) {
   _uselocale(i11 | 0) | 0;
  }
  if ((i12 | 0) == 0) {
   i13 = i1 + 1 | 0;
   i14 = 1;
  } else if ((i12 | 0) == -2 | (i12 | 0) == -1) {
   i7 = i3;
   i15 = 9;
   break;
  } else {
   i13 = i1 + i12 | 0;
   i14 = i12;
  }
  i12 = i14 + i3 | 0;
  i11 = i10 + 1 | 0;
  if (i11 >>> 0 >= i5 >>> 0 | (i13 | 0) == (i4 | 0)) {
   i7 = i12;
   i15 = 9;
   break;
  } else {
   i1 = i13;
   i3 = i12;
   i10 = i11;
  }
 }
 if ((i15 | 0) == 9) {
  STACKTOP = i6;
  return i7 | 0;
 }
 return 0;
}
function __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE5flushEv(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 i4 = HEAP32[(HEAP32[i1 >> 2] | 0) + -12 >> 2] | 0;
 if ((HEAP32[i1 + (i4 + 24) >> 2] | 0) == 0) {
  STACKTOP = i2;
  return i1 | 0;
 }
 HEAP8[i3] = 0;
 HEAP32[i3 + 4 >> 2] = i1;
 if ((HEAP32[i1 + (i4 + 16) >> 2] | 0) == 0) {
  i5 = HEAP32[i1 + (i4 + 72) >> 2] | 0;
  if ((i5 | 0) == 0) {
   i6 = i4;
  } else {
   __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE5flushEv(i5) | 0;
   i6 = HEAP32[(HEAP32[i1 >> 2] | 0) + -12 >> 2] | 0;
  }
  HEAP8[i3] = 1;
  i5 = HEAP32[i1 + (i6 + 24) >> 2] | 0;
  if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i5 >> 2] | 0) + 24 >> 2] & 127](i5) | 0) == -1) {
   i5 = HEAP32[(HEAP32[i1 >> 2] | 0) + -12 >> 2] | 0;
   __ZNSt3__18ios_base5clearEj(i1 + i5 | 0, HEAP32[i1 + (i5 + 16) >> 2] | 1);
  }
 }
 __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE6sentryD2Ev(i3);
 STACKTOP = i2;
 return i1 | 0;
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 i4 = HEAP32[(HEAP32[i1 >> 2] | 0) + -12 >> 2] | 0;
 if ((HEAP32[i1 + (i4 + 24) >> 2] | 0) == 0) {
  STACKTOP = i2;
  return i1 | 0;
 }
 HEAP8[i3] = 0;
 HEAP32[i3 + 4 >> 2] = i1;
 if ((HEAP32[i1 + (i4 + 16) >> 2] | 0) == 0) {
  i5 = HEAP32[i1 + (i4 + 72) >> 2] | 0;
  if ((i5 | 0) == 0) {
   i6 = i4;
  } else {
   __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv(i5) | 0;
   i6 = HEAP32[(HEAP32[i1 >> 2] | 0) + -12 >> 2] | 0;
  }
  HEAP8[i3] = 1;
  i5 = HEAP32[i1 + (i6 + 24) >> 2] | 0;
  if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i5 >> 2] | 0) + 24 >> 2] & 127](i5) | 0) == -1) {
   i5 = HEAP32[(HEAP32[i1 >> 2] | 0) + -12 >> 2] | 0;
   __ZNSt3__18ios_base5clearEj(i1 + i5 | 0, HEAP32[i1 + (i5 + 16) >> 2] | 1);
  }
 }
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev(i3);
 STACKTOP = i2;
 return i1 | 0;
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i7 = i6;
 HEAP32[i5 >> 2] = i3;
 i3 = _uselocale(HEAP32[i1 + 8 >> 2] | 0) | 0;
 i1 = _wcrtomb(i7, 0, i2) | 0;
 if ((i3 | 0) != 0) {
  _uselocale(i3 | 0) | 0;
 }
 if ((i1 | 0) == 0 | (i1 | 0) == -1) {
  i8 = 2;
  STACKTOP = i6;
  return i8 | 0;
 }
 i3 = i1 + -1 | 0;
 i1 = HEAP32[i5 >> 2] | 0;
 if (i3 >>> 0 > (i4 - i1 | 0) >>> 0) {
  i8 = 1;
  STACKTOP = i6;
  return i8 | 0;
 }
 if ((i3 | 0) == 0) {
  i8 = 0;
  STACKTOP = i6;
  return i8 | 0;
 } else {
  i9 = i1;
  i10 = i3;
  i11 = i7;
 }
 while (1) {
  i7 = HEAP8[i11] | 0;
  HEAP32[i5 >> 2] = i9 + 1;
  HEAP8[i9] = i7;
  i7 = i10 + -1 | 0;
  if ((i7 | 0) == 0) {
   i8 = 0;
   break;
  }
  i9 = HEAP32[i5 >> 2] | 0;
  i10 = i7;
  i11 = i11 + 1 | 0;
 }
 STACKTOP = i6;
 return i8 | 0;
}
function __ZNKSt3__110__time_put8__do_putEPwRS1_PK2tmcc(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 i8 = i7 + 112 | 0;
 i9 = i7 + 12 | 0;
 i10 = i7;
 i11 = i7 + 8 | 0;
 HEAP8[i8] = 37;
 i12 = i8 + 1 | 0;
 HEAP8[i12] = i5;
 i13 = i8 + 2 | 0;
 HEAP8[i13] = i6;
 HEAP8[i8 + 3 | 0] = 0;
 if (!(i6 << 24 >> 24 == 0)) {
  HEAP8[i12] = i6;
  HEAP8[i13] = i5;
 }
 _strftime_l(i9 | 0, 100, i8 | 0, i4 | 0, HEAP32[i1 >> 2] | 0) | 0;
 i4 = i10;
 HEAP32[i4 >> 2] = 0;
 HEAP32[i4 + 4 >> 2] = 0;
 HEAP32[i11 >> 2] = i9;
 i9 = (HEAP32[i3 >> 2] | 0) - i2 >> 2;
 i4 = _uselocale(HEAP32[i1 >> 2] | 0) | 0;
 i1 = _mbsrtowcs(i2, i11, i9, i10) | 0;
 if ((i4 | 0) != 0) {
  _uselocale(i4 | 0) | 0;
 }
 if ((i1 | 0) == -1) {
  __ZNSt3__121__throw_runtime_errorEPKc(6712);
 } else {
  HEAP32[i3 >> 2] = i2 + (i1 << 2);
  STACKTOP = i7;
  return;
 }
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i3 = STACKTOP;
 i4 = _strlen(i2 | 0) | 0;
 i5 = HEAP8[i1] | 0;
 if ((i5 & 1) == 0) {
  i6 = i5;
  i7 = 10;
 } else {
  i5 = HEAP32[i1 >> 2] | 0;
  i6 = i5 & 255;
  i7 = (i5 & -2) + -1 | 0;
 }
 i5 = (i6 & 1) == 0;
 if (i7 >>> 0 < i4 >>> 0) {
  if (i5) {
   i8 = (i6 & 255) >>> 1;
  } else {
   i8 = HEAP32[i1 + 4 >> 2] | 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc(i1, i7, i4 - i7 | 0, i8, 0, i8, i4, i2);
  STACKTOP = i3;
  return i1 | 0;
 }
 if (i5) {
  i9 = i1 + 1 | 0;
 } else {
  i9 = HEAP32[i1 + 8 >> 2] | 0;
 }
 _memmove(i9 | 0, i2 | 0, i4 | 0) | 0;
 HEAP8[i9 + i4 | 0] = 0;
 if ((HEAP8[i1] & 1) == 0) {
  HEAP8[i1] = i4 << 1;
  STACKTOP = i3;
  return i1 | 0;
 } else {
  HEAP32[i1 + 4 >> 2] = i4;
  STACKTOP = i3;
  return i1 | 0;
 }
 return 0;
}
function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 i5 = i4;
 if ((i1 | 0) == (i2 | 0)) {
  i6 = 1;
  STACKTOP = i4;
  return i6 | 0;
 }
 if ((i2 | 0) == 0) {
  i6 = 0;
  STACKTOP = i4;
  return i6 | 0;
 }
 i7 = ___dynamic_cast(i2, 13848, 13904, 0) | 0;
 if ((i7 | 0) == 0) {
  i6 = 0;
  STACKTOP = i4;
  return i6 | 0;
 }
 i2 = i5 + 0 | 0;
 i8 = i2 + 56 | 0;
 do {
  HEAP32[i2 >> 2] = 0;
  i2 = i2 + 4 | 0;
 } while ((i2 | 0) < (i8 | 0));
 HEAP32[i5 >> 2] = i7;
 HEAP32[i5 + 8 >> 2] = i1;
 HEAP32[i5 + 12 >> 2] = -1;
 HEAP32[i5 + 48 >> 2] = 1;
 FUNCTION_TABLE_viiii[HEAP32[(HEAP32[i7 >> 2] | 0) + 28 >> 2] & 15](i7, i5, HEAP32[i3 >> 2] | 0, 1);
 if ((HEAP32[i5 + 24 >> 2] | 0) != 1) {
  i6 = 0;
  STACKTOP = i4;
  return i6 | 0;
 }
 HEAP32[i3 >> 2] = HEAP32[i5 + 16 >> 2];
 i6 = 1;
 STACKTOP = i4;
 return i6 | 0;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKwj(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i4 = STACKTOP;
 i5 = HEAP8[i1] | 0;
 if ((i5 & 1) == 0) {
  i6 = 1;
  i7 = i5;
 } else {
  i5 = HEAP32[i1 >> 2] | 0;
  i6 = (i5 & -2) + -1 | 0;
  i7 = i5 & 255;
 }
 i5 = (i7 & 1) == 0;
 if (i6 >>> 0 < i3 >>> 0) {
  if (i5) {
   i8 = (i7 & 255) >>> 1;
  } else {
   i8 = HEAP32[i1 + 4 >> 2] | 0;
  }
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE21__grow_by_and_replaceEjjjjjjPKw(i1, i6, i3 - i6 | 0, i8, 0, i8, i3, i2);
  STACKTOP = i4;
  return i1 | 0;
 }
 if (i5) {
  i9 = i1 + 4 | 0;
 } else {
  i9 = HEAP32[i1 + 8 >> 2] | 0;
 }
 _wmemmove(i9, i2, i3) | 0;
 HEAP32[i9 + (i3 << 2) >> 2] = 0;
 if ((HEAP8[i1] & 1) == 0) {
  HEAP8[i1] = i3 << 1;
  STACKTOP = i4;
  return i1 | 0;
 } else {
  HEAP32[i1 + 4 >> 2] = i3;
  STACKTOP = i4;
  return i1 | 0;
 }
 return 0;
}
function _wcrtomb(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0;
 i3 = STACKTOP;
 if ((i1 | 0) == 0) {
  i4 = 1;
  STACKTOP = i3;
  return i4 | 0;
 }
 if (i2 >>> 0 < 128) {
  HEAP8[i1] = i2;
  i4 = 1;
  STACKTOP = i3;
  return i4 | 0;
 }
 if (i2 >>> 0 < 2048) {
  HEAP8[i1] = i2 >>> 6 | 192;
  HEAP8[i1 + 1 | 0] = i2 & 63 | 128;
  i4 = 2;
  STACKTOP = i3;
  return i4 | 0;
 }
 if (i2 >>> 0 < 55296 | (i2 + -57344 | 0) >>> 0 < 8192) {
  HEAP8[i1] = i2 >>> 12 | 224;
  HEAP8[i1 + 1 | 0] = i2 >>> 6 & 63 | 128;
  HEAP8[i1 + 2 | 0] = i2 & 63 | 128;
  i4 = 3;
  STACKTOP = i3;
  return i4 | 0;
 }
 if ((i2 + -65536 | 0) >>> 0 < 1048576) {
  HEAP8[i1] = i2 >>> 18 | 240;
  HEAP8[i1 + 1 | 0] = i2 >>> 12 & 63 | 128;
  HEAP8[i1 + 2 | 0] = i2 >>> 6 & 63 | 128;
  HEAP8[i1 + 3 | 0] = i2 & 63 | 128;
  i4 = 4;
  STACKTOP = i3;
  return i4 | 0;
 } else {
  HEAP32[(___errno_location() | 0) >> 2] = 84;
  i4 = -1;
  STACKTOP = i3;
  return i4 | 0;
 }
 return 0;
}
function __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE6sentryD2Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 i3 = i1 + 4 | 0;
 i1 = HEAP32[i3 >> 2] | 0;
 i4 = HEAP32[(HEAP32[i1 >> 2] | 0) + -12 >> 2] | 0;
 if ((HEAP32[i1 + (i4 + 24) >> 2] | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 if ((HEAP32[i1 + (i4 + 16) >> 2] | 0) != 0) {
  STACKTOP = i2;
  return;
 }
 if ((HEAP32[i1 + (i4 + 4) >> 2] & 8192 | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 if (__ZSt18uncaught_exceptionv() | 0) {
  STACKTOP = i2;
  return;
 }
 i4 = HEAP32[i3 >> 2] | 0;
 i1 = HEAP32[i4 + ((HEAP32[(HEAP32[i4 >> 2] | 0) + -12 >> 2] | 0) + 24) >> 2] | 0;
 if (!((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 24 >> 2] & 127](i1) | 0) == -1)) {
  STACKTOP = i2;
  return;
 }
 i1 = HEAP32[i3 >> 2] | 0;
 i3 = HEAP32[(HEAP32[i1 >> 2] | 0) + -12 >> 2] | 0;
 __ZNSt3__18ios_base5clearEj(i1 + i3 | 0, HEAP32[i1 + (i3 + 16) >> 2] | 1);
 STACKTOP = i2;
 return;
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 i3 = i1 + 4 | 0;
 i1 = HEAP32[i3 >> 2] | 0;
 i4 = HEAP32[(HEAP32[i1 >> 2] | 0) + -12 >> 2] | 0;
 if ((HEAP32[i1 + (i4 + 24) >> 2] | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 if ((HEAP32[i1 + (i4 + 16) >> 2] | 0) != 0) {
  STACKTOP = i2;
  return;
 }
 if ((HEAP32[i1 + (i4 + 4) >> 2] & 8192 | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 if (__ZSt18uncaught_exceptionv() | 0) {
  STACKTOP = i2;
  return;
 }
 i4 = HEAP32[i3 >> 2] | 0;
 i1 = HEAP32[i4 + ((HEAP32[(HEAP32[i4 >> 2] | 0) + -12 >> 2] | 0) + 24) >> 2] | 0;
 if (!((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 24 >> 2] & 127](i1) | 0) == -1)) {
  STACKTOP = i2;
  return;
 }
 i1 = HEAP32[i3 >> 2] | 0;
 i3 = HEAP32[(HEAP32[i1 >> 2] | 0) + -12 >> 2] | 0;
 __ZNSt3__18ios_base5clearEj(i1 + i3 | 0, HEAP32[i1 + (i3 + 16) >> 2] | 1);
 STACKTOP = i2;
 return;
}
function __ZNSt3__111__stdoutbufIwE4syncEv(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 8 | 0;
 i4 = i2;
 i5 = i1 + 36 | 0;
 i6 = i1 + 40 | 0;
 i7 = i3 + 8 | 0;
 i8 = i3;
 i9 = i1 + 32 | 0;
 while (1) {
  i1 = HEAP32[i5 >> 2] | 0;
  i10 = FUNCTION_TABLE_iiiiii[HEAP32[(HEAP32[i1 >> 2] | 0) + 20 >> 2] & 15](i1, HEAP32[i6 >> 2] | 0, i3, i7, i4) | 0;
  i1 = (HEAP32[i4 >> 2] | 0) - i8 | 0;
  if ((_fwrite(i3 | 0, 1, i1 | 0, HEAP32[i9 >> 2] | 0) | 0) != (i1 | 0)) {
   i11 = -1;
   i12 = 5;
   break;
  }
  if ((i10 | 0) == 2) {
   i11 = -1;
   i12 = 5;
   break;
  } else if ((i10 | 0) != 1) {
   i12 = 4;
   break;
  }
 }
 if ((i12 | 0) == 4) {
  i11 = ((_fflush(HEAP32[i9 >> 2] | 0) | 0) != 0) << 31 >> 31;
  STACKTOP = i2;
  return i11 | 0;
 } else if ((i12 | 0) == 5) {
  STACKTOP = i2;
  return i11 | 0;
 }
 return 0;
}
function __ZNSt3__111__stdoutbufIcE4syncEv(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 8 | 0;
 i4 = i2;
 i5 = i1 + 36 | 0;
 i6 = i1 + 40 | 0;
 i7 = i3 + 8 | 0;
 i8 = i3;
 i9 = i1 + 32 | 0;
 while (1) {
  i1 = HEAP32[i5 >> 2] | 0;
  i10 = FUNCTION_TABLE_iiiiii[HEAP32[(HEAP32[i1 >> 2] | 0) + 20 >> 2] & 15](i1, HEAP32[i6 >> 2] | 0, i3, i7, i4) | 0;
  i1 = (HEAP32[i4 >> 2] | 0) - i8 | 0;
  if ((_fwrite(i3 | 0, 1, i1 | 0, HEAP32[i9 >> 2] | 0) | 0) != (i1 | 0)) {
   i11 = -1;
   i12 = 5;
   break;
  }
  if ((i10 | 0) == 2) {
   i11 = -1;
   i12 = 5;
   break;
  } else if ((i10 | 0) != 1) {
   i12 = 4;
   break;
  }
 }
 if ((i12 | 0) == 4) {
  i11 = ((_fflush(HEAP32[i9 >> 2] | 0) | 0) != 0) << 31 >> 31;
  STACKTOP = i2;
  return i11 | 0;
 } else if ((i12 | 0) == 5) {
  STACKTOP = i2;
  return i11 | 0;
 }
 return 0;
}
function __ZNKSt3__17collateIwE12do_transformEPKwS3_(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i2 = STACKTOP;
 i5 = i3;
 i6 = i4 - i5 | 0;
 i7 = i6 >> 2;
 if (i7 >>> 0 > 1073741807) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(i1);
 }
 if (i7 >>> 0 < 2) {
  HEAP8[i1] = i6 >>> 1;
  i8 = i1 + 4 | 0;
 } else {
  i6 = i7 + 4 & -4;
  i9 = __Znwj(i6 << 2) | 0;
  HEAP32[i1 + 8 >> 2] = i9;
  HEAP32[i1 >> 2] = i6 | 1;
  HEAP32[i1 + 4 >> 2] = i7;
  i8 = i9;
 }
 if ((i3 | 0) == (i4 | 0)) {
  i10 = i8;
  HEAP32[i10 >> 2] = 0;
  STACKTOP = i2;
  return;
 }
 i9 = i4 + -4 + (0 - i5) | 0;
 i5 = i3;
 i3 = i8;
 while (1) {
  HEAP32[i3 >> 2] = HEAP32[i5 >> 2];
  i5 = i5 + 4 | 0;
  if ((i5 | 0) == (i4 | 0)) {
   break;
  } else {
   i3 = i3 + 4 | 0;
  }
 }
 i10 = i8 + ((i9 >>> 2) + 1 << 2) | 0;
 HEAP32[i10 >> 2] = 0;
 STACKTOP = i2;
 return;
}
function __ZNSt3__115__num_get_floatIeEET_PKcS3_Rj(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, d6 = 0.0, i7 = 0, i8 = 0, d9 = 0.0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i4;
 if ((i1 | 0) == (i2 | 0)) {
  HEAP32[i3 >> 2] = 4;
  d6 = 0.0;
  STACKTOP = i4;
  return +d6;
 }
 i7 = ___errno_location() | 0;
 i8 = HEAP32[i7 >> 2] | 0;
 HEAP32[i7 >> 2] = 0;
 if ((HEAP8[5728] | 0) == 0) {
  if ((___cxa_guard_acquire(5728) | 0) != 0) {
   HEAP32[1430] = _newlocale(2147483647, 5736, 0) | 0;
   ___cxa_guard_release(5728);
  }
 }
 d9 = +_strtold_l(i1, i5, HEAP32[1430] | 0);
 i1 = HEAP32[i7 >> 2] | 0;
 if ((i1 | 0) == 0) {
  HEAP32[i7 >> 2] = i8;
 }
 if ((HEAP32[i5 >> 2] | 0) != (i2 | 0)) {
  HEAP32[i3 >> 2] = 4;
  d6 = 0.0;
  STACKTOP = i4;
  return +d6;
 }
 if ((i1 | 0) != 34) {
  d6 = d9;
  STACKTOP = i4;
  return +d6;
 }
 HEAP32[i3 >> 2] = 4;
 d6 = d9;
 STACKTOP = i4;
 return +d6;
}
function __ZNSt3__115__num_get_floatIdEET_PKcS3_Rj(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, d6 = 0.0, i7 = 0, i8 = 0, d9 = 0.0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i4;
 if ((i1 | 0) == (i2 | 0)) {
  HEAP32[i3 >> 2] = 4;
  d6 = 0.0;
  STACKTOP = i4;
  return +d6;
 }
 i7 = ___errno_location() | 0;
 i8 = HEAP32[i7 >> 2] | 0;
 HEAP32[i7 >> 2] = 0;
 if ((HEAP8[5728] | 0) == 0) {
  if ((___cxa_guard_acquire(5728) | 0) != 0) {
   HEAP32[1430] = _newlocale(2147483647, 5736, 0) | 0;
   ___cxa_guard_release(5728);
  }
 }
 d9 = +_strtold_l(i1, i5, HEAP32[1430] | 0);
 i1 = HEAP32[i7 >> 2] | 0;
 if ((i1 | 0) == 0) {
  HEAP32[i7 >> 2] = i8;
 }
 if ((HEAP32[i5 >> 2] | 0) != (i2 | 0)) {
  HEAP32[i3 >> 2] = 4;
  d6 = 0.0;
  STACKTOP = i4;
  return +d6;
 }
 if ((i1 | 0) != 34) {
  d6 = d9;
  STACKTOP = i4;
  return +d6;
 }
 HEAP32[i3 >> 2] = 4;
 d6 = d9;
 STACKTOP = i4;
 return +d6;
}
function __ZNKSt3__17collateIcE12do_transformEPKcS3_(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i2 = STACKTOP;
 i5 = i3;
 i6 = i4 - i5 | 0;
 if (i6 >>> 0 > 4294967279) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(i1);
 }
 if (i6 >>> 0 < 11) {
  HEAP8[i1] = i6 << 1;
  i7 = i1 + 1 | 0;
 } else {
  i8 = i6 + 16 & -16;
  i9 = __Znwj(i8) | 0;
  HEAP32[i1 + 8 >> 2] = i9;
  HEAP32[i1 >> 2] = i8 | 1;
  HEAP32[i1 + 4 >> 2] = i6;
  i7 = i9;
 }
 if ((i3 | 0) == (i4 | 0)) {
  i10 = i7;
  HEAP8[i10] = 0;
  STACKTOP = i2;
  return;
 } else {
  i11 = i3;
  i12 = i7;
 }
 while (1) {
  HEAP8[i12] = HEAP8[i11] | 0;
  i11 = i11 + 1 | 0;
  if ((i11 | 0) == (i4 | 0)) {
   break;
  } else {
   i12 = i12 + 1 | 0;
  }
 }
 i10 = i7 + (i4 + (0 - i5)) | 0;
 HEAP8[i10] = 0;
 STACKTOP = i2;
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0;
 i5 = STACKTOP;
 if ((i1 | 0) != (HEAP32[i2 + 8 >> 2] | 0)) {
  i6 = HEAP32[i1 + 8 >> 2] | 0;
  FUNCTION_TABLE_viiii[HEAP32[(HEAP32[i6 >> 2] | 0) + 28 >> 2] & 15](i6, i2, i3, i4);
  STACKTOP = i5;
  return;
 }
 i6 = i2 + 16 | 0;
 i1 = HEAP32[i6 >> 2] | 0;
 if ((i1 | 0) == 0) {
  HEAP32[i6 >> 2] = i3;
  HEAP32[i2 + 24 >> 2] = i4;
  HEAP32[i2 + 36 >> 2] = 1;
  STACKTOP = i5;
  return;
 }
 if ((i1 | 0) != (i3 | 0)) {
  i3 = i2 + 36 | 0;
  HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + 1;
  HEAP32[i2 + 24 >> 2] = 2;
  HEAP8[i2 + 54 | 0] = 1;
  STACKTOP = i5;
  return;
 }
 i3 = i2 + 24 | 0;
 if ((HEAP32[i3 >> 2] | 0) != 2) {
  STACKTOP = i5;
  return;
 }
 HEAP32[i3 >> 2] = i4;
 STACKTOP = i5;
 return;
}
function __ZNKSt3__17collateIcE10do_compareEPKcS3_S3_S3_(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i1 = STACKTOP;
 L1 : do {
  if ((i4 | 0) == (i5 | 0)) {
   i6 = i2;
   i7 = 6;
  } else {
   i8 = i4;
   i9 = i2;
   while (1) {
    if ((i9 | 0) == (i3 | 0)) {
     i10 = -1;
     break L1;
    }
    i11 = HEAP8[i9] | 0;
    i12 = HEAP8[i8] | 0;
    if (i11 << 24 >> 24 < i12 << 24 >> 24) {
     i10 = -1;
     break L1;
    }
    if (i12 << 24 >> 24 < i11 << 24 >> 24) {
     i10 = 1;
     break L1;
    }
    i11 = i9 + 1 | 0;
    i12 = i8 + 1 | 0;
    if ((i12 | 0) == (i5 | 0)) {
     i6 = i11;
     i7 = 6;
     break;
    } else {
     i8 = i12;
     i9 = i11;
    }
   }
  }
 } while (0);
 if ((i7 | 0) == 6) {
  i10 = (i6 | 0) != (i3 | 0) | 0;
 }
 STACKTOP = i1;
 return i10 | 0;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6xsgetnEPwi(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i4 = STACKTOP;
 if ((i3 | 0) <= 0) {
  i5 = 0;
  STACKTOP = i4;
  return i5 | 0;
 }
 i6 = i1 + 12 | 0;
 i7 = i1 + 16 | 0;
 i8 = i2;
 i2 = 0;
 while (1) {
  i9 = HEAP32[i6 >> 2] | 0;
  if (i9 >>> 0 < (HEAP32[i7 >> 2] | 0) >>> 0) {
   HEAP32[i6 >> 2] = i9 + 4;
   i10 = HEAP32[i9 >> 2] | 0;
  } else {
   i9 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 40 >> 2] & 127](i1) | 0;
   if ((i9 | 0) == -1) {
    i5 = i2;
    i11 = 8;
    break;
   } else {
    i10 = i9;
   }
  }
  HEAP32[i8 >> 2] = i10;
  i9 = i2 + 1 | 0;
  if ((i9 | 0) >= (i3 | 0)) {
   i5 = i9;
   i11 = 8;
   break;
  }
  i8 = i8 + 4 | 0;
  i2 = i9;
 }
 if ((i11 | 0) == 8) {
  STACKTOP = i4;
  return i5 | 0;
 }
 return 0;
}
function __ZNSt3__18ios_base5clearEj(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 8 | 0;
 i5 = i3;
 i6 = (HEAP32[i1 + 24 >> 2] | 0) == 0;
 if (i6) {
  HEAP32[i1 + 16 >> 2] = i2 | 1;
 } else {
  HEAP32[i1 + 16 >> 2] = i2;
 }
 if (((i6 & 1 | i2) & HEAP32[i1 + 20 >> 2] | 0) == 0) {
  STACKTOP = i3;
  return;
 }
 i3 = ___cxa_allocate_exception(16) | 0;
 if ((HEAP8[3448] | 0) == 0) {
  if ((___cxa_guard_acquire(3448) | 0) != 0) {
   HEAP32[860] = 4144;
   _atexit(46, 3440, ___dso_handle | 0) | 0;
   ___cxa_guard_release(3448);
  }
 }
 i1 = i5;
 HEAP32[i1 >> 2] = 1;
 HEAP32[i1 + 4 >> 2] = 3440;
 HEAP32[i4 + 0 >> 2] = HEAP32[i5 + 0 >> 2];
 HEAP32[i4 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
 __ZNSt3__112system_errorC2ENS_10error_codeEPKc(i3, i4, 3496);
 HEAP32[i3 >> 2] = 3464;
 ___cxa_throw(i3 | 0, 3544, 42);
}
function __ZNKSt3__17collateIwE10do_compareEPKwS3_S3_S3_(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i1 = STACKTOP;
 L1 : do {
  if ((i4 | 0) == (i5 | 0)) {
   i6 = i2;
   i7 = 6;
  } else {
   i8 = i4;
   i9 = i2;
   while (1) {
    if ((i9 | 0) == (i3 | 0)) {
     i10 = -1;
     break L1;
    }
    i11 = HEAP32[i9 >> 2] | 0;
    i12 = HEAP32[i8 >> 2] | 0;
    if ((i11 | 0) < (i12 | 0)) {
     i10 = -1;
     break L1;
    }
    if ((i12 | 0) < (i11 | 0)) {
     i10 = 1;
     break L1;
    }
    i11 = i9 + 4 | 0;
    i12 = i8 + 4 | 0;
    if ((i12 | 0) == (i5 | 0)) {
     i6 = i11;
     i7 = 6;
     break;
    } else {
     i8 = i12;
     i9 = i11;
    }
   }
  }
 } while (0);
 if ((i7 | 0) == 6) {
  i10 = (i6 | 0) != (i3 | 0) | 0;
 }
 STACKTOP = i1;
 return i10 | 0;
}
function __ZNSt3__115__num_get_floatIfEET_PKcS3_Rj(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, d6 = 0.0, i7 = 0, i8 = 0, d9 = 0.0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i4;
 if ((i1 | 0) == (i2 | 0)) {
  HEAP32[i3 >> 2] = 4;
  d6 = 0.0;
  STACKTOP = i4;
  return +d6;
 }
 i7 = ___errno_location() | 0;
 i8 = HEAP32[i7 >> 2] | 0;
 HEAP32[i7 >> 2] = 0;
 if ((HEAP8[5728] | 0) == 0) {
  if ((___cxa_guard_acquire(5728) | 0) != 0) {
   HEAP32[1430] = _newlocale(2147483647, 5736, 0) | 0;
   ___cxa_guard_release(5728);
  }
 }
 d9 = +_strtold_l(i1, i5, HEAP32[1430] | 0);
 i1 = HEAP32[i7 >> 2] | 0;
 if ((i1 | 0) == 0) {
  HEAP32[i7 >> 2] = i8;
 }
 if ((HEAP32[i5 >> 2] | 0) != (i2 | 0)) {
  HEAP32[i3 >> 2] = 4;
  d6 = 0.0;
  STACKTOP = i4;
  return +d6;
 }
 if ((i1 | 0) == 34) {
  HEAP32[i3 >> 2] = 4;
 }
 d6 = d9;
 STACKTOP = i4;
 return +d6;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsgetnEPci(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i4 = STACKTOP;
 if ((i3 | 0) <= 0) {
  i5 = 0;
  STACKTOP = i4;
  return i5 | 0;
 }
 i6 = i1 + 12 | 0;
 i7 = i1 + 16 | 0;
 i8 = i2;
 i2 = 0;
 while (1) {
  i9 = HEAP32[i6 >> 2] | 0;
  if (i9 >>> 0 < (HEAP32[i7 >> 2] | 0) >>> 0) {
   HEAP32[i6 >> 2] = i9 + 1;
   i10 = HEAP8[i9] | 0;
  } else {
   i9 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 40 >> 2] & 127](i1) | 0;
   if ((i9 | 0) == -1) {
    i5 = i2;
    i11 = 8;
    break;
   }
   i10 = i9 & 255;
  }
  HEAP8[i8] = i10;
  i9 = i2 + 1 | 0;
  if ((i9 | 0) < (i3 | 0)) {
   i8 = i8 + 1 | 0;
   i2 = i9;
  } else {
   i5 = i9;
   i11 = 8;
   break;
  }
 }
 if ((i11 | 0) == 8) {
  STACKTOP = i4;
  return i5 | 0;
 }
 return 0;
}
function _scalbn(d1, i2) {
 d1 = +d1;
 i2 = i2 | 0;
 var i3 = 0, d4 = 0.0, i5 = 0, i6 = 0, i7 = 0, d8 = 0.0;
 i3 = STACKTOP;
 if ((i2 | 0) > 1023) {
  d4 = d1 * 8.98846567431158e+307;
  i5 = i2 + -1023 | 0;
  if ((i5 | 0) > 1023) {
   i6 = i2 + -2046 | 0;
   i7 = (i6 | 0) > 1023 ? 1023 : i6;
   d8 = d4 * 8.98846567431158e+307;
  } else {
   i7 = i5;
   d8 = d4;
  }
 } else {
  if ((i2 | 0) < -1022) {
   d4 = d1 * 2.2250738585072014e-308;
   i5 = i2 + 1022 | 0;
   if ((i5 | 0) < -1022) {
    i6 = i2 + 2044 | 0;
    i7 = (i6 | 0) < -1022 ? -1022 : i6;
    d8 = d4 * 2.2250738585072014e-308;
   } else {
    i7 = i5;
    d8 = d4;
   }
  } else {
   i7 = i2;
   d8 = d1;
  }
 }
 i2 = _bitshift64Shl(i7 + 1023 | 0, 0, 52) | 0;
 i7 = tempRet0;
 HEAP32[tempDoublePtr >> 2] = i2;
 HEAP32[tempDoublePtr + 4 >> 2] = i7;
 d1 = d8 * +HEAPF64[tempDoublePtr >> 3];
 STACKTOP = i3;
 return +d1;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6xsputnEPKwi(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i4 = STACKTOP;
 if ((i3 | 0) <= 0) {
  i5 = 0;
  STACKTOP = i4;
  return i5 | 0;
 }
 i6 = i1 + 24 | 0;
 i7 = i1 + 28 | 0;
 i8 = i2;
 i2 = 0;
 while (1) {
  i9 = HEAP32[i6 >> 2] | 0;
  if (i9 >>> 0 < (HEAP32[i7 >> 2] | 0) >>> 0) {
   i10 = HEAP32[i8 >> 2] | 0;
   HEAP32[i6 >> 2] = i9 + 4;
   HEAP32[i9 >> 2] = i10;
  } else {
   if ((FUNCTION_TABLE_iii[HEAP32[(HEAP32[i1 >> 2] | 0) + 52 >> 2] & 31](i1, HEAP32[i8 >> 2] | 0) | 0) == -1) {
    i5 = i2;
    i11 = 8;
    break;
   }
  }
  i10 = i2 + 1 | 0;
  if ((i10 | 0) >= (i3 | 0)) {
   i5 = i10;
   i11 = 8;
   break;
  }
  i8 = i8 + 4 | 0;
  i2 = i10;
 }
 if ((i11 | 0) == 8) {
  STACKTOP = i4;
  return i5 | 0;
 }
 return 0;
}
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE9pbackfailEi(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i3 = STACKTOP;
 do {
  if ((HEAP32[i1 + 64 >> 2] | 0) == 0) {
   i4 = -1;
  } else {
   i5 = i1 + 12 | 0;
   i6 = HEAP32[i5 >> 2] | 0;
   if ((HEAP32[i1 + 8 >> 2] | 0) >>> 0 < i6 >>> 0) {
    if ((i2 | 0) == -1) {
     HEAP32[i5 >> 2] = i6 + -1;
     i4 = 0;
     break;
    }
    if ((HEAP32[i1 + 88 >> 2] & 16 | 0) == 0) {
     i7 = i2 & 255;
     i8 = i6 + -1 | 0;
     if (i7 << 24 >> 24 == (HEAP8[i8] | 0)) {
      i9 = i7;
      i10 = i8;
     } else {
      i4 = -1;
      break;
     }
    } else {
     i9 = i2 & 255;
     i10 = i6 + -1 | 0;
    }
    HEAP32[i5 >> 2] = i10;
    HEAP8[i10] = i9;
    i4 = i2;
   } else {
    i4 = -1;
   }
  }
 } while (0);
 STACKTOP = i3;
 return i4 | 0;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsputnEPKci(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i4 = STACKTOP;
 if ((i3 | 0) <= 0) {
  i5 = 0;
  STACKTOP = i4;
  return i5 | 0;
 }
 i6 = i1 + 24 | 0;
 i7 = i1 + 28 | 0;
 i8 = i2;
 i2 = 0;
 while (1) {
  i9 = HEAP32[i6 >> 2] | 0;
  if (i9 >>> 0 < (HEAP32[i7 >> 2] | 0) >>> 0) {
   i10 = HEAP8[i8] | 0;
   HEAP32[i6 >> 2] = i9 + 1;
   HEAP8[i9] = i10;
  } else {
   if ((FUNCTION_TABLE_iii[HEAP32[(HEAP32[i1 >> 2] | 0) + 52 >> 2] & 31](i1, HEAPU8[i8] | 0) | 0) == -1) {
    i5 = i2;
    i11 = 7;
    break;
   }
  }
  i10 = i2 + 1 | 0;
  if ((i10 | 0) < (i3 | 0)) {
   i8 = i8 + 1 | 0;
   i2 = i10;
  } else {
   i5 = i10;
   i11 = 7;
   break;
  }
 }
 if ((i11 | 0) == 7) {
  STACKTOP = i4;
  return i5 | 0;
 }
 return 0;
}
function __ZNKSt3__16locale9use_facetERNS0_2idE(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3;
 i5 = HEAP32[i1 >> 2] | 0;
 if (!((HEAP32[i2 >> 2] | 0) == -1)) {
  HEAP32[i4 >> 2] = i2;
  HEAP32[i4 + 4 >> 2] = 118;
  HEAP32[i4 + 8 >> 2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(i2, i4, 119);
 }
 i4 = (HEAP32[i2 + 4 >> 2] | 0) + -1 | 0;
 i2 = HEAP32[i5 + 8 >> 2] | 0;
 if (!((HEAP32[i5 + 12 >> 2] | 0) - i2 >> 2 >>> 0 > i4 >>> 0)) {
  i6 = ___cxa_allocate_exception(4) | 0;
  __ZNSt8bad_castC2Ev(i6);
  ___cxa_throw(i6 | 0, 13792, 107);
 }
 i5 = HEAP32[i2 + (i4 << 2) >> 2] | 0;
 if ((i5 | 0) == 0) {
  i6 = ___cxa_allocate_exception(4) | 0;
  __ZNSt8bad_castC2Ev(i6);
  ___cxa_throw(i6 | 0, 13792, 107);
 } else {
  STACKTOP = i3;
  return i5 | 0;
 }
 return 0;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1ERKS5_(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i3 = STACKTOP;
 if ((HEAP8[i2] & 1) == 0) {
  HEAP32[i1 + 0 >> 2] = HEAP32[i2 + 0 >> 2];
  HEAP32[i1 + 4 >> 2] = HEAP32[i2 + 4 >> 2];
  HEAP32[i1 + 8 >> 2] = HEAP32[i2 + 8 >> 2];
  STACKTOP = i3;
  return;
 }
 i4 = HEAP32[i2 + 8 >> 2] | 0;
 i5 = HEAP32[i2 + 4 >> 2] | 0;
 if (i5 >>> 0 > 4294967279) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
 }
 if (i5 >>> 0 < 11) {
  HEAP8[i1] = i5 << 1;
  i6 = i1 + 1 | 0;
 } else {
  i2 = i5 + 16 & -16;
  i7 = __Znwj(i2) | 0;
  HEAP32[i1 + 8 >> 2] = i7;
  HEAP32[i1 >> 2] = i2 | 1;
  HEAP32[i1 + 4 >> 2] = i5;
  i6 = i7;
 }
 _memcpy(i6 | 0, i4 | 0, i5 | 0) | 0;
 HEAP8[i6 + i5 | 0] = 0;
 STACKTOP = i3;
 return;
}
function __ZNKSt3__120__time_get_c_storageIwE7__am_pmEv(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i1 = STACKTOP;
 if ((HEAP8[6224] | 0) != 0) {
  i2 = HEAP32[1554] | 0;
  STACKTOP = i1;
  return i2 | 0;
 }
 if ((___cxa_guard_acquire(6224) | 0) == 0) {
  i2 = HEAP32[1554] | 0;
  STACKTOP = i1;
  return i2 | 0;
 }
 if ((HEAP8[10936] | 0) == 0) {
  if ((___cxa_guard_acquire(10936) | 0) != 0) {
   _memset(10648, 0, 288) | 0;
   _atexit(127, 0, ___dso_handle | 0) | 0;
   ___cxa_guard_release(10936);
  }
 }
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(10648, 10944) | 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(10660 | 0, 10960) | 0;
 HEAP32[1554] = 10648;
 ___cxa_guard_release(6224);
 i2 = HEAP32[1554] | 0;
 STACKTOP = i1;
 return i2 | 0;
}
function __ZNKSt3__120__time_get_c_storageIcE7__am_pmEv(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i1 = STACKTOP;
 if ((HEAP8[6208] | 0) != 0) {
  i2 = HEAP32[1550] | 0;
  STACKTOP = i1;
  return i2 | 0;
 }
 if ((___cxa_guard_acquire(6208) | 0) == 0) {
  i2 = HEAP32[1550] | 0;
  STACKTOP = i1;
  return i2 | 0;
 }
 if ((HEAP8[11264] | 0) == 0) {
  if ((___cxa_guard_acquire(11264) | 0) != 0) {
   _memset(10976, 0, 288) | 0;
   _atexit(126, 0, ___dso_handle | 0) | 0;
   ___cxa_guard_release(11264);
  }
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(10976, 11272) | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(10988 | 0, 11280) | 0;
 HEAP32[1550] = 10976;
 ___cxa_guard_release(6208);
 i2 = HEAP32[1550] | 0;
 STACKTOP = i1;
 return i2 | 0;
}
function _realloc(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i3 = STACKTOP;
 do {
  if ((i1 | 0) == 0) {
   i4 = _malloc(i2) | 0;
  } else {
   if (i2 >>> 0 > 4294967231) {
    HEAP32[(___errno_location() | 0) >> 2] = 12;
    i4 = 0;
    break;
   }
   if (i2 >>> 0 < 11) {
    i5 = 16;
   } else {
    i5 = i2 + 11 & -8;
   }
   i6 = _try_realloc_chunk(i1 + -8 | 0, i5) | 0;
   if ((i6 | 0) != 0) {
    i4 = i6 + 8 | 0;
    break;
   }
   i6 = _malloc(i2) | 0;
   if ((i6 | 0) == 0) {
    i4 = 0;
   } else {
    i7 = HEAP32[i1 + -4 >> 2] | 0;
    i8 = (i7 & -8) - ((i7 & 3 | 0) == 0 ? 8 : 4) | 0;
    _memcpy(i6 | 0, i1 | 0, (i8 >>> 0 < i2 >>> 0 ? i8 : i2) | 0) | 0;
    _free(i1);
    i4 = i6;
   }
  }
 } while (0);
 STACKTOP = i3;
 return i4 | 0;
}
function __ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0;
 i5 = STACKTOP;
 if ((HEAP32[i2 + 8 >> 2] | 0) != (i1 | 0)) {
  STACKTOP = i5;
  return;
 }
 i1 = i2 + 16 | 0;
 i6 = HEAP32[i1 >> 2] | 0;
 if ((i6 | 0) == 0) {
  HEAP32[i1 >> 2] = i3;
  HEAP32[i2 + 24 >> 2] = i4;
  HEAP32[i2 + 36 >> 2] = 1;
  STACKTOP = i5;
  return;
 }
 if ((i6 | 0) != (i3 | 0)) {
  i3 = i2 + 36 | 0;
  HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + 1;
  HEAP32[i2 + 24 >> 2] = 2;
  HEAP8[i2 + 54 | 0] = 1;
  STACKTOP = i5;
  return;
 }
 i3 = i2 + 24 | 0;
 if ((HEAP32[i3 >> 2] | 0) != 2) {
  STACKTOP = i5;
  return;
 }
 HEAP32[i3 >> 2] = i4;
 STACKTOP = i5;
 return;
}
function _strcmp(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i3 = STACKTOP;
 i4 = HEAP8[i1] | 0;
 i5 = HEAP8[i2] | 0;
 if (i4 << 24 >> 24 != i5 << 24 >> 24 | i4 << 24 >> 24 == 0 | i5 << 24 >> 24 == 0) {
  i6 = i4;
  i7 = i5;
  i8 = i6 & 255;
  i9 = i7 & 255;
  i10 = i8 - i9 | 0;
  STACKTOP = i3;
  return i10 | 0;
 } else {
  i11 = i1;
  i12 = i2;
 }
 while (1) {
  i2 = i11 + 1 | 0;
  i1 = i12 + 1 | 0;
  i5 = HEAP8[i2] | 0;
  i4 = HEAP8[i1] | 0;
  if (i5 << 24 >> 24 != i4 << 24 >> 24 | i5 << 24 >> 24 == 0 | i4 << 24 >> 24 == 0) {
   i6 = i5;
   i7 = i4;
   break;
  } else {
   i11 = i2;
   i12 = i1;
  }
 }
 i8 = i6 & 255;
 i9 = i7 & 255;
 i10 = i8 - i9 | 0;
 STACKTOP = i3;
 return i10 | 0;
}
function __ZNSt3__111__stdoutbufIcE6xsputnEPKci(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i4 = STACKTOP;
 if ((HEAP8[i1 + 44 | 0] | 0) != 0) {
  i5 = _fwrite(i2 | 0, 1, i3 | 0, HEAP32[i1 + 32 >> 2] | 0) | 0;
  STACKTOP = i4;
  return i5 | 0;
 }
 if ((i3 | 0) > 0) {
  i6 = i2;
  i7 = 0;
 } else {
  i5 = 0;
  STACKTOP = i4;
  return i5 | 0;
 }
 while (1) {
  if ((FUNCTION_TABLE_iii[HEAP32[(HEAP32[i1 >> 2] | 0) + 52 >> 2] & 31](i1, HEAPU8[i6] | 0) | 0) == -1) {
   i5 = i7;
   i8 = 6;
   break;
  }
  i2 = i7 + 1 | 0;
  if ((i2 | 0) < (i3 | 0)) {
   i6 = i6 + 1 | 0;
   i7 = i2;
  } else {
   i5 = i2;
   i8 = 6;
   break;
  }
 }
 if ((i8 | 0) == 6) {
  STACKTOP = i4;
  return i5 | 0;
 }
 return 0;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm(i1, i2, i3, i4, i5, i6, i7) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 var i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i9 = i8 + 12 | 0;
 i10 = i8;
 i11 = i8 + 4 | 0;
 i12 = i8 + 8 | 0;
 HEAP32[i11 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i12 >> 2] = HEAP32[i4 >> 2];
 HEAP32[i10 + 0 >> 2] = HEAP32[i11 + 0 >> 2];
 HEAP32[i9 + 0 >> 2] = HEAP32[i12 + 0 >> 2];
 __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_(i1, i2, i10, i9, i5, i6, i7, 4888, 4920 | 0);
 STACKTOP = i8;
 return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm(i1, i2, i3, i4, i5, i6, i7) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 var i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i9 = i8 + 12 | 0;
 i10 = i8;
 i11 = i8 + 4 | 0;
 i12 = i8 + 8 | 0;
 HEAP32[i11 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i12 >> 2] = HEAP32[i4 >> 2];
 HEAP32[i10 + 0 >> 2] = HEAP32[i11 + 0 >> 2];
 HEAP32[i9 + 0 >> 2] = HEAP32[i12 + 0 >> 2];
 __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_(i1, i2, i10, i9, i5, i6, i7, 4736, 4744 | 0);
 STACKTOP = i8;
 return;
}
function _strtold_l(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, d7 = 0.0, i8 = 0, i9 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 i4 = i3;
 i5 = i4 + 0 | 0;
 i6 = i5 + 112 | 0;
 do {
  HEAP32[i5 >> 2] = 0;
  i5 = i5 + 4 | 0;
 } while ((i5 | 0) < (i6 | 0));
 i5 = i4 + 4 | 0;
 HEAP32[i5 >> 2] = i1;
 i6 = i4 + 8 | 0;
 HEAP32[i6 >> 2] = -1;
 HEAP32[i4 + 44 >> 2] = i1;
 HEAP32[i4 + 76 >> 2] = -1;
 ___shlim(i4, 0);
 d7 = +___floatscan(i4, 2, 1);
 i8 = (HEAP32[i5 >> 2] | 0) - (HEAP32[i6 >> 2] | 0) + (HEAP32[i4 + 108 >> 2] | 0) | 0;
 if ((i2 | 0) == 0) {
  STACKTOP = i3;
  return +d7;
 }
 if ((i8 | 0) == 0) {
  i9 = i1;
 } else {
  i9 = i1 + i8 | 0;
 }
 HEAP32[i2 >> 2] = i9;
 STACKTOP = i3;
 return +d7;
}
function ___remdi3(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 8 | 0;
 i6 = i5 | 0;
 i7 = i2 >> 31 | ((i2 | 0) < 0 ? -1 : 0) << 1;
 i8 = ((i2 | 0) < 0 ? -1 : 0) >> 31 | ((i2 | 0) < 0 ? -1 : 0) << 1;
 i9 = i4 >> 31 | ((i4 | 0) < 0 ? -1 : 0) << 1;
 i10 = ((i4 | 0) < 0 ? -1 : 0) >> 31 | ((i4 | 0) < 0 ? -1 : 0) << 1;
 i11 = _i64Subtract(i7 ^ i1, i8 ^ i2, i7, i8) | 0;
 i2 = tempRet0;
 ___udivmoddi4(i11, i2, _i64Subtract(i9 ^ i3, i10 ^ i4, i9, i10) | 0, tempRet0, i6) | 0;
 i10 = _i64Subtract(HEAP32[i6 >> 2] ^ i7, HEAP32[i6 + 4 >> 2] ^ i8, i7, i8) | 0;
 i8 = tempRet0;
 STACKTOP = i5;
 return (tempRet0 = i8, i10) | 0;
}
function __ZNKSt3__112__do_message7messageEi(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i2 = STACKTOP;
 i4 = _strerror(i3 | 0) | 0;
 i3 = _strlen(i4 | 0) | 0;
 if (i3 >>> 0 > 4294967279) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
 }
 if (i3 >>> 0 < 11) {
  HEAP8[i1] = i3 << 1;
  i5 = i1 + 1 | 0;
  _memcpy(i5 | 0, i4 | 0, i3 | 0) | 0;
  i6 = i5 + i3 | 0;
  HEAP8[i6] = 0;
  STACKTOP = i2;
  return;
 } else {
  i7 = i3 + 16 & -16;
  i8 = __Znwj(i7) | 0;
  HEAP32[i1 + 8 >> 2] = i8;
  HEAP32[i1 >> 2] = i7 | 1;
  HEAP32[i1 + 4 >> 2] = i3;
  i5 = i8;
  _memcpy(i5 | 0, i4 | 0, i3 | 0) | 0;
  i6 = i5 + i3 | 0;
  HEAP8[i6] = 0;
  STACKTOP = i2;
  return;
 }
}
function ___toread(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i2 = STACKTOP;
 i3 = i1 + 74 | 0;
 i4 = HEAP8[i3] | 0;
 HEAP8[i3] = i4 + 255 | i4;
 i4 = i1 + 20 | 0;
 i3 = i1 + 44 | 0;
 if ((HEAP32[i4 >> 2] | 0) >>> 0 > (HEAP32[i3 >> 2] | 0) >>> 0) {
  FUNCTION_TABLE_iiii[HEAP32[i1 + 36 >> 2] & 31](i1, 0, 0) | 0;
 }
 HEAP32[i1 + 16 >> 2] = 0;
 HEAP32[i1 + 28 >> 2] = 0;
 HEAP32[i4 >> 2] = 0;
 i4 = HEAP32[i1 >> 2] | 0;
 if ((i4 & 20 | 0) == 0) {
  i5 = HEAP32[i3 >> 2] | 0;
  HEAP32[i1 + 8 >> 2] = i5;
  HEAP32[i1 + 4 >> 2] = i5;
  i6 = 0;
  STACKTOP = i2;
  return i6 | 0;
 }
 if ((i4 & 4 | 0) == 0) {
  i6 = -1;
  STACKTOP = i2;
  return i6 | 0;
 }
 HEAP32[i1 >> 2] = i4 | 32;
 i6 = -1;
 STACKTOP = i2;
 return i6 | 0;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRf(i1, i2, i3, i4, i5, i6, i7) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 var i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i2 + 12 | 0;
 i9 = i2;
 i10 = i2 + 4 | 0;
 i11 = i2 + 8 | 0;
 HEAP32[i10 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i11 >> 2] = HEAP32[i4 >> 2];
 HEAP32[i9 + 0 >> 2] = HEAP32[i10 + 0 >> 2];
 HEAP32[i8 + 0 >> 2] = HEAP32[i11 + 0 >> 2];
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_(i1, 0, i9, i8, i5, i6, i7);
 STACKTOP = i2;
 return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRe(i1, i2, i3, i4, i5, i6, i7) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 var i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i2 + 12 | 0;
 i9 = i2;
 i10 = i2 + 4 | 0;
 i11 = i2 + 8 | 0;
 HEAP32[i10 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i11 >> 2] = HEAP32[i4 >> 2];
 HEAP32[i9 + 0 >> 2] = HEAP32[i10 + 0 >> 2];
 HEAP32[i8 + 0 >> 2] = HEAP32[i11 + 0 >> 2];
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_(i1, 0, i9, i8, i5, i6, i7);
 STACKTOP = i2;
 return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRd(i1, i2, i3, i4, i5, i6, i7) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 var i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i2 + 12 | 0;
 i9 = i2;
 i10 = i2 + 4 | 0;
 i11 = i2 + 8 | 0;
 HEAP32[i10 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i11 >> 2] = HEAP32[i4 >> 2];
 HEAP32[i9 + 0 >> 2] = HEAP32[i10 + 0 >> 2];
 HEAP32[i8 + 0 >> 2] = HEAP32[i11 + 0 >> 2];
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_(i1, 0, i9, i8, i5, i6, i7);
 STACKTOP = i2;
 return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRf(i1, i2, i3, i4, i5, i6, i7) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 var i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i2 + 12 | 0;
 i9 = i2;
 i10 = i2 + 4 | 0;
 i11 = i2 + 8 | 0;
 HEAP32[i10 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i11 >> 2] = HEAP32[i4 >> 2];
 HEAP32[i9 + 0 >> 2] = HEAP32[i10 + 0 >> 2];
 HEAP32[i8 + 0 >> 2] = HEAP32[i11 + 0 >> 2];
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_(i1, 0, i9, i8, i5, i6, i7);
 STACKTOP = i2;
 return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRe(i1, i2, i3, i4, i5, i6, i7) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 var i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i2 + 12 | 0;
 i9 = i2;
 i10 = i2 + 4 | 0;
 i11 = i2 + 8 | 0;
 HEAP32[i10 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i11 >> 2] = HEAP32[i4 >> 2];
 HEAP32[i9 + 0 >> 2] = HEAP32[i10 + 0 >> 2];
 HEAP32[i8 + 0 >> 2] = HEAP32[i11 + 0 >> 2];
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_(i1, 0, i9, i8, i5, i6, i7);
 STACKTOP = i2;
 return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRd(i1, i2, i3, i4, i5, i6, i7) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 var i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i2 + 12 | 0;
 i9 = i2;
 i10 = i2 + 4 | 0;
 i11 = i2 + 8 | 0;
 HEAP32[i10 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i11 >> 2] = HEAP32[i4 >> 2];
 HEAP32[i9 + 0 >> 2] = HEAP32[i10 + 0 >> 2];
 HEAP32[i8 + 0 >> 2] = HEAP32[i11 + 0 >> 2];
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_(i1, 0, i9, i8, i5, i6, i7);
 STACKTOP = i2;
 return;
}
function __ZNSt3__111__stdoutbufIwE6xsputnEPKwi(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i4 = STACKTOP;
 L1 : do {
  if ((HEAP8[i1 + 44 | 0] | 0) == 0) {
   if ((i3 | 0) > 0) {
    i5 = i2;
    i6 = 0;
    while (1) {
     if ((FUNCTION_TABLE_iii[HEAP32[(HEAP32[i1 >> 2] | 0) + 52 >> 2] & 31](i1, HEAP32[i5 >> 2] | 0) | 0) == -1) {
      i7 = i6;
      break L1;
     }
     i8 = i6 + 1 | 0;
     if ((i8 | 0) < (i3 | 0)) {
      i5 = i5 + 4 | 0;
      i6 = i8;
     } else {
      i7 = i8;
      break;
     }
    }
   } else {
    i7 = 0;
   }
  } else {
   i7 = _fwrite(i2 | 0, 4, i3 | 0, HEAP32[i1 + 32 >> 2] | 0) | 0;
  }
 } while (0);
 STACKTOP = i4;
 return i7 | 0;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_(i1, i2, i3, i4, i5, i6, i7) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 var i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i2 + 12 | 0;
 i9 = i2;
 i10 = i2 + 4 | 0;
 i11 = i2 + 8 | 0;
 HEAP32[i10 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i11 >> 2] = HEAP32[i4 >> 2];
 HEAP32[i9 + 0 >> 2] = HEAP32[i10 + 0 >> 2];
 HEAP32[i8 + 0 >> 2] = HEAP32[i11 + 0 >> 2];
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_(i1, 0, i9, i8, i5, i6, i7);
 STACKTOP = i2;
 return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_(i1, i2, i3, i4, i5, i6, i7) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 var i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i2 + 12 | 0;
 i9 = i2;
 i10 = i2 + 4 | 0;
 i11 = i2 + 8 | 0;
 HEAP32[i10 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i11 >> 2] = HEAP32[i4 >> 2];
 HEAP32[i9 + 0 >> 2] = HEAP32[i10 + 0 >> 2];
 HEAP32[i8 + 0 >> 2] = HEAP32[i11 + 0 >> 2];
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_(i1, 0, i9, i8, i5, i6, i7);
 STACKTOP = i2;
 return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRy(i1, i2, i3, i4, i5, i6, i7) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 var i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i2 + 12 | 0;
 i9 = i2;
 i10 = i2 + 4 | 0;
 i11 = i2 + 8 | 0;
 HEAP32[i10 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i11 >> 2] = HEAP32[i4 >> 2];
 HEAP32[i9 + 0 >> 2] = HEAP32[i10 + 0 >> 2];
 HEAP32[i8 + 0 >> 2] = HEAP32[i11 + 0 >> 2];
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_(i1, 0, i9, i8, i5, i6, i7);
 STACKTOP = i2;
 return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRt(i1, i2, i3, i4, i5, i6, i7) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 var i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i2 + 12 | 0;
 i9 = i2;
 i10 = i2 + 4 | 0;
 i11 = i2 + 8 | 0;
 HEAP32[i10 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i11 >> 2] = HEAP32[i4 >> 2];
 HEAP32[i9 + 0 >> 2] = HEAP32[i10 + 0 >> 2];
 HEAP32[i8 + 0 >> 2] = HEAP32[i11 + 0 >> 2];
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_(i1, 0, i9, i8, i5, i6, i7);
 STACKTOP = i2;
 return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRm(i1, i2, i3, i4, i5, i6, i7) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 var i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i2 + 12 | 0;
 i9 = i2;
 i10 = i2 + 4 | 0;
 i11 = i2 + 8 | 0;
 HEAP32[i10 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i11 >> 2] = HEAP32[i4 >> 2];
 HEAP32[i9 + 0 >> 2] = HEAP32[i10 + 0 >> 2];
 HEAP32[i8 + 0 >> 2] = HEAP32[i11 + 0 >> 2];
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_(i1, 0, i9, i8, i5, i6, i7);
 STACKTOP = i2;
 return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRy(i1, i2, i3, i4, i5, i6, i7) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 var i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i2 + 12 | 0;
 i9 = i2;
 i10 = i2 + 4 | 0;
 i11 = i2 + 8 | 0;
 HEAP32[i10 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i11 >> 2] = HEAP32[i4 >> 2];
 HEAP32[i9 + 0 >> 2] = HEAP32[i10 + 0 >> 2];
 HEAP32[i8 + 0 >> 2] = HEAP32[i11 + 0 >> 2];
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_(i1, 0, i9, i8, i5, i6, i7);
 STACKTOP = i2;
 return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRt(i1, i2, i3, i4, i5, i6, i7) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 var i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i2 + 12 | 0;
 i9 = i2;
 i10 = i2 + 4 | 0;
 i11 = i2 + 8 | 0;
 HEAP32[i10 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i11 >> 2] = HEAP32[i4 >> 2];
 HEAP32[i9 + 0 >> 2] = HEAP32[i10 + 0 >> 2];
 HEAP32[i8 + 0 >> 2] = HEAP32[i11 + 0 >> 2];
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_(i1, 0, i9, i8, i5, i6, i7);
 STACKTOP = i2;
 return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRm(i1, i2, i3, i4, i5, i6, i7) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 var i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i2 + 12 | 0;
 i9 = i2;
 i10 = i2 + 4 | 0;
 i11 = i2 + 8 | 0;
 HEAP32[i10 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i11 >> 2] = HEAP32[i4 >> 2];
 HEAP32[i9 + 0 >> 2] = HEAP32[i10 + 0 >> 2];
 HEAP32[i8 + 0 >> 2] = HEAP32[i11 + 0 >> 2];
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_(i1, 0, i9, i8, i5, i6, i7);
 STACKTOP = i2;
 return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRx(i1, i2, i3, i4, i5, i6, i7) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 var i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i2 + 12 | 0;
 i9 = i2;
 i10 = i2 + 4 | 0;
 i11 = i2 + 8 | 0;
 HEAP32[i10 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i11 >> 2] = HEAP32[i4 >> 2];
 HEAP32[i9 + 0 >> 2] = HEAP32[i10 + 0 >> 2];
 HEAP32[i8 + 0 >> 2] = HEAP32[i11 + 0 >> 2];
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_(i1, 0, i9, i8, i5, i6, i7);
 STACKTOP = i2;
 return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRl(i1, i2, i3, i4, i5, i6, i7) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 var i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i2 + 12 | 0;
 i9 = i2;
 i10 = i2 + 4 | 0;
 i11 = i2 + 8 | 0;
 HEAP32[i10 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i11 >> 2] = HEAP32[i4 >> 2];
 HEAP32[i9 + 0 >> 2] = HEAP32[i10 + 0 >> 2];
 HEAP32[i8 + 0 >> 2] = HEAP32[i11 + 0 >> 2];
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_(i1, 0, i9, i8, i5, i6, i7);
 STACKTOP = i2;
 return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRx(i1, i2, i3, i4, i5, i6, i7) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 var i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i2 + 12 | 0;
 i9 = i2;
 i10 = i2 + 4 | 0;
 i11 = i2 + 8 | 0;
 HEAP32[i10 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i11 >> 2] = HEAP32[i4 >> 2];
 HEAP32[i9 + 0 >> 2] = HEAP32[i10 + 0 >> 2];
 HEAP32[i8 + 0 >> 2] = HEAP32[i11 + 0 >> 2];
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_(i1, 0, i9, i8, i5, i6, i7);
 STACKTOP = i2;
 return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRl(i1, i2, i3, i4, i5, i6, i7) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 var i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i2 + 12 | 0;
 i9 = i2;
 i10 = i2 + 4 | 0;
 i11 = i2 + 8 | 0;
 HEAP32[i10 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i11 >> 2] = HEAP32[i4 >> 2];
 HEAP32[i9 + 0 >> 2] = HEAP32[i10 + 0 >> 2];
 HEAP32[i8 + 0 >> 2] = HEAP32[i11 + 0 >> 2];
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_(i1, 0, i9, i8, i5, i6, i7);
 STACKTOP = i2;
 return;
}
function __ZNSt3__16locale8__globalEv() {
 var i1 = 0, i2 = 0, i3 = 0;
 i1 = STACKTOP;
 if ((HEAP8[5808] | 0) != 0) {
  i2 = HEAP32[1450] | 0;
  STACKTOP = i1;
  return i2 | 0;
 }
 if ((___cxa_guard_acquire(5808) | 0) == 0) {
  i2 = HEAP32[1450] | 0;
  STACKTOP = i1;
  return i2 | 0;
 }
 if ((HEAP8[5784] | 0) == 0) {
  if ((___cxa_guard_acquire(5784) | 0) != 0) {
   __ZNSt3__16locale5__impC2Ej(10176, 1);
   HEAP32[1442] = 10176;
   HEAP32[1444] = 5768;
   ___cxa_guard_release(5784);
  }
 }
 i3 = HEAP32[HEAP32[1444] >> 2] | 0;
 HEAP32[1448] = i3;
 __ZNSt3__114__shared_count12__add_sharedEv(i3);
 HEAP32[1450] = 5792;
 ___cxa_guard_release(5808);
 i2 = HEAP32[1450] | 0;
 STACKTOP = i1;
 return i2 | 0;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i4 = STACKTOP;
 i5 = HEAP8[i1] | 0;
 i6 = (i5 & 1) == 0;
 if (i6) {
  i7 = (i5 & 255) >>> 1;
 } else {
  i7 = HEAP32[i1 + 4 >> 2] | 0;
 }
 if (i7 >>> 0 < i2 >>> 0) {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEjc(i1, i2 - i7 | 0, i3) | 0;
  STACKTOP = i4;
  return;
 }
 if (i6) {
  HEAP8[i1 + i2 + 1 | 0] = 0;
  HEAP8[i1] = i2 << 1;
  STACKTOP = i4;
  return;
 } else {
  HEAP8[(HEAP32[i1 + 8 >> 2] | 0) + i2 | 0] = 0;
  HEAP32[i1 + 4 >> 2] = i2;
  STACKTOP = i4;
  return;
 }
}
function __ZNSt3__117__call_once_proxyINS_5tupleIJNS_12_GLOBAL__N_111__fake_bindEEEEEEvPv(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i2 = STACKTOP;
 i3 = i1 + 4 | 0;
 i4 = HEAPU8[i3] | HEAPU8[i3 + 1 | 0] << 8 | HEAPU8[i3 + 2 | 0] << 16 | HEAPU8[i3 + 3 | 0] << 24;
 i5 = i3 + 4 | 0;
 i3 = HEAPU8[i5] | HEAPU8[i5 + 1 | 0] << 8 | HEAPU8[i5 + 2 | 0] << 16 | HEAPU8[i5 + 3 | 0] << 24;
 i5 = (HEAP32[i1 >> 2] | 0) + (i3 >> 1) | 0;
 if ((i3 & 1 | 0) == 0) {
  i6 = i4;
  FUNCTION_TABLE_vi[i6 & 255](i5);
  STACKTOP = i2;
  return;
 } else {
  i6 = HEAP32[(HEAP32[i5 >> 2] | 0) + i4 >> 2] | 0;
  FUNCTION_TABLE_vi[i6 & 255](i5);
  STACKTOP = i2;
  return;
 }
}
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEED2Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 HEAP32[i1 >> 2] = 904;
 i3 = i1 + 64 | 0;
 i4 = HEAP32[i3 >> 2] | 0;
 if ((i4 | 0) != 0) {
  __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE4syncEv(i1) | 0;
  if ((_fclose(i4 | 0) | 0) == 0) {
   HEAP32[i3 >> 2] = 0;
  }
 }
 if ((HEAP8[i1 + 96 | 0] | 0) != 0) {
  i3 = HEAP32[i1 + 32 >> 2] | 0;
  if ((i3 | 0) != 0) {
   __ZdaPv(i3);
  }
 }
 if ((HEAP8[i1 + 97 | 0] | 0) != 0) {
  i3 = HEAP32[i1 + 56 >> 2] | 0;
  if ((i3 | 0) != 0) {
   __ZdaPv(i3);
  }
 }
 HEAP32[i1 >> 2] = 3104;
 __ZNSt3__16localeD2Ev(i1 + 4 | 0);
 STACKTOP = i2;
 return;
}
function __ZNKSt3__15ctypeIwE11do_scan_notEtPKwS3_(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i1 = STACKTOP;
 L1 : do {
  if ((i3 | 0) == (i4 | 0)) {
   i5 = i3;
  } else {
   i6 = i3;
   while (1) {
    i7 = HEAP32[i6 >> 2] | 0;
    if (!(i7 >>> 0 < 128)) {
     i5 = i6;
     break L1;
    }
    i8 = i6 + 4 | 0;
    if ((HEAP16[(HEAP32[(___ctype_b_loc() | 0) >> 2] | 0) + (i7 << 1) >> 1] & i2) << 16 >> 16 == 0) {
     i5 = i6;
     break L1;
    }
    if ((i8 | 0) == (i4 | 0)) {
     i5 = i4;
     break;
    } else {
     i6 = i8;
    }
   }
  }
 } while (0);
 STACKTOP = i1;
 return i5 | 0;
}
function __ZNSt3__111__call_onceERVmPvPFvS2_E(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0;
 i4 = STACKTOP;
 _pthread_mutex_lock(3008) | 0;
 if ((HEAP32[i1 >> 2] | 0) == 1) {
  do {
   _pthread_cond_wait(3032, 3008) | 0;
  } while ((HEAP32[i1 >> 2] | 0) == 1);
 }
 if ((HEAP32[i1 >> 2] | 0) == 0) {
  HEAP32[i1 >> 2] = 1;
  _pthread_mutex_unlock(3008) | 0;
  FUNCTION_TABLE_vi[i3 & 255](i2);
  _pthread_mutex_lock(3008) | 0;
  HEAP32[i1 >> 2] = -1;
  _pthread_mutex_unlock(3008) | 0;
  _pthread_cond_broadcast(3032) | 0;
  STACKTOP = i4;
  return;
 } else {
  _pthread_mutex_unlock(3008) | 0;
  STACKTOP = i4;
  return;
 }
}
function __ZNKSt3__16locale9has_facetERNS0_2idE(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3;
 i5 = HEAP32[i1 >> 2] | 0;
 if (!((HEAP32[i2 >> 2] | 0) == -1)) {
  HEAP32[i4 >> 2] = i2;
  HEAP32[i4 + 4 >> 2] = 118;
  HEAP32[i4 + 8 >> 2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(i2, i4, 119);
 }
 i4 = (HEAP32[i2 + 4 >> 2] | 0) + -1 | 0;
 i2 = HEAP32[i5 + 8 >> 2] | 0;
 if (!((HEAP32[i5 + 12 >> 2] | 0) - i2 >> 2 >>> 0 > i4 >>> 0)) {
  i6 = 0;
  STACKTOP = i3;
  return i6 | 0;
 }
 i6 = (HEAP32[i2 + (i4 << 2) >> 2] | 0) != 0;
 STACKTOP = i3;
 return i6 | 0;
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE6do_outERS1_PKDsS5_RS5_PcS7_RS7_(i1, i2, i3, i4, i5, i6, i7, i8) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 var i9 = 0, i10 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = i2 + 4 | 0;
 i9 = i2;
 HEAP32[i1 >> 2] = i3;
 HEAP32[i9 >> 2] = i6;
 i10 = __ZNSt3__1L13utf16_to_utf8EPKtS1_RS1_PhS3_RS3_mNS_12codecvt_modeE(i3, i4, i1, i6, i7, i9, 1114111, 0) | 0;
 HEAP32[i5 >> 2] = i3 + ((HEAP32[i1 >> 2] | 0) - i3 >> 1 << 1);
 HEAP32[i8 >> 2] = i6 + ((HEAP32[i9 >> 2] | 0) - i6);
 STACKTOP = i2;
 return i10 | 0;
}
function __ZNKSt3__15ctypeIwE10do_scan_isEtPKwS3_(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0;
 i1 = STACKTOP;
 L1 : do {
  if ((i3 | 0) == (i4 | 0)) {
   i5 = i3;
  } else {
   i6 = i3;
   while (1) {
    i7 = HEAP32[i6 >> 2] | 0;
    if (i7 >>> 0 < 128) {
     if (!((HEAP16[(HEAP32[(___ctype_b_loc() | 0) >> 2] | 0) + (i7 << 1) >> 1] & i2) << 16 >> 16 == 0)) {
      i5 = i6;
      break L1;
     }
    }
    i7 = i6 + 4 | 0;
    if ((i7 | 0) == (i4 | 0)) {
     i5 = i4;
     break;
    } else {
     i6 = i7;
    }
   }
  }
 } while (0);
 STACKTOP = i1;
 return i5 | 0;
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE5do_inERS1_PKcS5_RS5_PDsS7_RS7_(i1, i2, i3, i4, i5, i6, i7, i8) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 var i9 = 0, i10 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = i2 + 4 | 0;
 i9 = i2;
 HEAP32[i1 >> 2] = i3;
 HEAP32[i9 >> 2] = i6;
 i10 = __ZNSt3__1L13utf8_to_utf16EPKhS1_RS1_PtS3_RS3_mNS_12codecvt_modeE(i3, i4, i1, i6, i7, i9, 1114111, 0) | 0;
 HEAP32[i5 >> 2] = i3 + ((HEAP32[i1 >> 2] | 0) - i3);
 HEAP32[i8 >> 2] = i6 + ((HEAP32[i9 >> 2] | 0) - i6 >> 1 << 1);
 STACKTOP = i2;
 return i10 | 0;
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE6do_outERS1_PKDiS5_RS5_PcS7_RS7_(i1, i2, i3, i4, i5, i6, i7, i8) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 var i9 = 0, i10 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = i2 + 4 | 0;
 i9 = i2;
 HEAP32[i1 >> 2] = i3;
 HEAP32[i9 >> 2] = i6;
 i10 = __ZNSt3__1L12ucs4_to_utf8EPKjS1_RS1_PhS3_RS3_mNS_12codecvt_modeE(i3, i4, i1, i6, i7, i9, 1114111, 0) | 0;
 HEAP32[i5 >> 2] = i3 + ((HEAP32[i1 >> 2] | 0) - i3 >> 2 << 2);
 HEAP32[i8 >> 2] = i6 + ((HEAP32[i9 >> 2] | 0) - i6);
 STACKTOP = i2;
 return i10 | 0;
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE5do_inERS1_PKcS5_RS5_PDiS7_RS7_(i1, i2, i3, i4, i5, i6, i7, i8) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 var i9 = 0, i10 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = i2 + 4 | 0;
 i9 = i2;
 HEAP32[i1 >> 2] = i3;
 HEAP32[i9 >> 2] = i6;
 i10 = __ZNSt3__1L12utf8_to_ucs4EPKhS1_RS1_PjS3_RS3_mNS_12codecvt_modeE(i3, i4, i1, i6, i7, i9, 1114111, 0) | 0;
 HEAP32[i5 >> 2] = i3 + ((HEAP32[i1 >> 2] | 0) - i3);
 HEAP32[i8 >> 2] = i6 + ((HEAP32[i9 >> 2] | 0) - i6 >> 2 << 2);
 STACKTOP = i2;
 return i10 | 0;
}
function __ZNKSt3__15ctypeIwE5do_isEPKwS3_Pt(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i1 = STACKTOP;
 if ((i2 | 0) == (i3 | 0)) {
  i5 = i2;
  STACKTOP = i1;
  return i5 | 0;
 } else {
  i6 = i2;
  i7 = i4;
 }
 while (1) {
  i4 = HEAP32[i6 >> 2] | 0;
  if (i4 >>> 0 < 128) {
   i8 = HEAP16[(HEAP32[(___ctype_b_loc() | 0) >> 2] | 0) + (i4 << 1) >> 1] | 0;
  } else {
   i8 = 0;
  }
  HEAP16[i7 >> 1] = i8;
  i4 = i6 + 4 | 0;
  if ((i4 | 0) == (i3 | 0)) {
   i5 = i3;
   break;
  } else {
   i6 = i4;
   i7 = i7 + 2 | 0;
  }
 }
 STACKTOP = i1;
 return i5 | 0;
}
function __ZNSt3__18ios_baseD2Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i2 = STACKTOP;
 HEAP32[i1 >> 2] = 3488;
 i3 = HEAP32[i1 + 40 >> 2] | 0;
 i4 = i1 + 32 | 0;
 i5 = i1 + 36 | 0;
 if ((i3 | 0) != 0) {
  i6 = i3;
  do {
   i6 = i6 + -1 | 0;
   FUNCTION_TABLE_viii[HEAP32[(HEAP32[i4 >> 2] | 0) + (i6 << 2) >> 2] & 3](0, i1, HEAP32[(HEAP32[i5 >> 2] | 0) + (i6 << 2) >> 2] | 0);
  } while ((i6 | 0) != 0);
 }
 __ZNSt3__16localeD2Ev(i1 + 28 | 0);
 _free(HEAP32[i4 >> 2] | 0);
 _free(HEAP32[i5 >> 2] | 0);
 _free(HEAP32[i1 + 48 >> 2] | 0);
 _free(HEAP32[i1 + 60 >> 2] | 0);
 STACKTOP = i2;
 return;
}
function _memcpy(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0;
 if ((i3 | 0) >= 4096) return _emscripten_memcpy_big(i1 | 0, i2 | 0, i3 | 0) | 0;
 i4 = i1 | 0;
 if ((i1 & 3) == (i2 & 3)) {
  while (i1 & 3) {
   if ((i3 | 0) == 0) return i4 | 0;
   HEAP8[i1] = HEAP8[i2] | 0;
   i1 = i1 + 1 | 0;
   i2 = i2 + 1 | 0;
   i3 = i3 - 1 | 0;
  }
  while ((i3 | 0) >= 4) {
   HEAP32[i1 >> 2] = HEAP32[i2 >> 2];
   i1 = i1 + 4 | 0;
   i2 = i2 + 4 | 0;
   i3 = i3 - 4 | 0;
  }
 }
 while ((i3 | 0) > 0) {
  HEAP8[i1] = HEAP8[i2] | 0;
  i1 = i1 + 1 | 0;
  i2 = i2 + 1 | 0;
  i3 = i3 - 1 | 0;
 }
 return i4 | 0;
}
function ___divdi3(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i5 = i2 >> 31 | ((i2 | 0) < 0 ? -1 : 0) << 1;
 i6 = ((i2 | 0) < 0 ? -1 : 0) >> 31 | ((i2 | 0) < 0 ? -1 : 0) << 1;
 i7 = i4 >> 31 | ((i4 | 0) < 0 ? -1 : 0) << 1;
 i8 = ((i4 | 0) < 0 ? -1 : 0) >> 31 | ((i4 | 0) < 0 ? -1 : 0) << 1;
 i9 = _i64Subtract(i5 ^ i1, i6 ^ i2, i5, i6) | 0;
 i2 = tempRet0;
 i1 = i7 ^ i5;
 i5 = i8 ^ i6;
 i6 = _i64Subtract((___udivmoddi4(i9, i2, _i64Subtract(i7 ^ i3, i8 ^ i4, i7, i8) | 0, tempRet0, 0) | 0) ^ i1, tempRet0 ^ i5, i1, i5) | 0;
 return i6 | 0;
}
function _wmemmove(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0;
 i4 = STACKTOP;
 i5 = (i3 | 0) == 0;
 if (i1 - i2 >> 2 >>> 0 < i3 >>> 0) {
  if (!i5) {
   i6 = i3;
   do {
    i6 = i6 + -1 | 0;
    HEAP32[i1 + (i6 << 2) >> 2] = HEAP32[i2 + (i6 << 2) >> 2];
   } while ((i6 | 0) != 0);
  }
 } else {
  if (!i5) {
   i5 = i2;
   i2 = i1;
   i6 = i3;
   while (1) {
    i6 = i6 + -1 | 0;
    HEAP32[i2 >> 2] = HEAP32[i5 >> 2];
    if ((i6 | 0) == 0) {
     break;
    } else {
     i5 = i5 + 4 | 0;
     i2 = i2 + 4 | 0;
    }
   }
  }
 }
 STACKTOP = i4;
 return i1 | 0;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i4 = STACKTOP;
 if (i3 >>> 0 > 1073741807) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
 }
 if (i3 >>> 0 < 2) {
  HEAP8[i1] = i3 << 1;
  i5 = i1 + 4 | 0;
 } else {
  i6 = i3 + 4 & -4;
  i7 = __Znwj(i6 << 2) | 0;
  HEAP32[i1 + 8 >> 2] = i7;
  HEAP32[i1 >> 2] = i6 | 1;
  HEAP32[i1 + 4 >> 2] = i3;
  i5 = i7;
 }
 _wmemcpy(i5, i2, i3) | 0;
 HEAP32[i5 + (i3 << 2) >> 2] = 0;
 STACKTOP = i4;
 return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i4 = STACKTOP;
 if (i3 >>> 0 > 4294967279) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
 }
 if (i3 >>> 0 < 11) {
  HEAP8[i1] = i3 << 1;
  i5 = i1 + 1 | 0;
 } else {
  i6 = i3 + 16 & -16;
  i7 = __Znwj(i6) | 0;
  HEAP32[i1 + 8 >> 2] = i7;
  HEAP32[i1 >> 2] = i6 | 1;
  HEAP32[i1 + 4 >> 2] = i3;
  i5 = i7;
 }
 _memcpy(i5 | 0, i2 | 0, i3 | 0) | 0;
 HEAP8[i5 + i3 | 0] = 0;
 STACKTOP = i4;
 return;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEjw(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i4 = STACKTOP;
 if (i2 >>> 0 > 1073741807) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
 }
 if (i2 >>> 0 < 2) {
  HEAP8[i1] = i2 << 1;
  i5 = i1 + 4 | 0;
 } else {
  i6 = i2 + 4 & -4;
  i7 = __Znwj(i6 << 2) | 0;
  HEAP32[i1 + 8 >> 2] = i7;
  HEAP32[i1 >> 2] = i6 | 1;
  HEAP32[i1 + 4 >> 2] = i2;
  i5 = i7;
 }
 _wmemset(i5, i3, i2) | 0;
 HEAP32[i5 + (i2 << 2) >> 2] = 0;
 STACKTOP = i4;
 return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEjc(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i4 = STACKTOP;
 if (i2 >>> 0 > 4294967279) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
 }
 if (i2 >>> 0 < 11) {
  HEAP8[i1] = i2 << 1;
  i5 = i1 + 1 | 0;
 } else {
  i6 = i2 + 16 & -16;
  i7 = __Znwj(i6) | 0;
  HEAP32[i1 + 8 >> 2] = i7;
  HEAP32[i1 >> 2] = i6 | 1;
  HEAP32[i1 + 4 >> 2] = i2;
  i5 = i7;
 }
 _memset(i5 | 0, i3 | 0, i2 | 0) | 0;
 HEAP8[i5 + i2 | 0] = 0;
 STACKTOP = i4;
 return;
}
function __ZNSt3__110__stdinbufIwE5imbueERKNS_6localeE(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i3 = STACKTOP;
 i4 = __ZNKSt3__16locale9use_facetERNS0_2idE(i2, 5904) | 0;
 i2 = i1 + 36 | 0;
 HEAP32[i2 >> 2] = i4;
 i5 = i1 + 44 | 0;
 HEAP32[i5 >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 24 >> 2] & 127](i4) | 0;
 i4 = HEAP32[i2 >> 2] | 0;
 HEAP8[i1 + 53 | 0] = (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 28 >> 2] & 127](i4) | 0) & 1;
 if ((HEAP32[i5 >> 2] | 0) > 8) {
  __ZNSt3__121__throw_runtime_errorEPKc(2376);
 } else {
  STACKTOP = i3;
  return;
 }
}
function __ZNSt3__110__stdinbufIcE5imbueERKNS_6localeE(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i3 = STACKTOP;
 i4 = __ZNKSt3__16locale9use_facetERNS0_2idE(i2, 5896) | 0;
 i2 = i1 + 36 | 0;
 HEAP32[i2 >> 2] = i4;
 i5 = i1 + 44 | 0;
 HEAP32[i5 >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 24 >> 2] & 127](i4) | 0;
 i4 = HEAP32[i2 >> 2] | 0;
 HEAP8[i1 + 53 | 0] = (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 28 >> 2] & 127](i4) | 0) & 1;
 if ((HEAP32[i5 >> 2] | 0) > 8) {
  __ZNSt3__121__throw_runtime_errorEPKc(2376);
 } else {
  STACKTOP = i3;
  return;
 }
}
function __ZNKSt3__15ctypeIcE10do_toupperEPcPKc(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0;
 i1 = STACKTOP;
 if ((i2 | 0) == (i3 | 0)) {
  i4 = i2;
  STACKTOP = i1;
  return i4 | 0;
 } else {
  i5 = i2;
 }
 while (1) {
  i2 = HEAP8[i5] | 0;
  if (i2 << 24 >> 24 > -1) {
   i6 = HEAP32[(HEAP32[(___ctype_toupper_loc() | 0) >> 2] | 0) + (i2 << 24 >> 24 << 2) >> 2] & 255;
  } else {
   i6 = i2;
  }
  HEAP8[i5] = i6;
  i2 = i5 + 1 | 0;
  if ((i2 | 0) == (i3 | 0)) {
   i4 = i3;
   break;
  } else {
   i5 = i2;
  }
 }
 STACKTOP = i1;
 return i4 | 0;
}
function __ZNKSt3__15ctypeIcE10do_tolowerEPcPKc(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0;
 i1 = STACKTOP;
 if ((i2 | 0) == (i3 | 0)) {
  i4 = i2;
  STACKTOP = i1;
  return i4 | 0;
 } else {
  i5 = i2;
 }
 while (1) {
  i2 = HEAP8[i5] | 0;
  if (i2 << 24 >> 24 > -1) {
   i6 = HEAP32[(HEAP32[(___ctype_tolower_loc() | 0) >> 2] | 0) + (i2 << 24 >> 24 << 2) >> 2] & 255;
  } else {
   i6 = i2;
  }
  HEAP8[i5] = i6;
  i2 = i5 + 1 | 0;
  if ((i2 | 0) == (i3 | 0)) {
   i4 = i3;
   break;
  } else {
   i5 = i2;
  }
 }
 STACKTOP = i1;
 return i4 | 0;
}
function __ZNKSt3__15ctypeIwE9do_narrowEPKwS3_cPc(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i1 = STACKTOP;
 if ((i2 | 0) == (i3 | 0)) {
  i6 = i2;
  STACKTOP = i1;
  return i6 | 0;
 }
 i7 = ((i3 + -4 + (0 - i2) | 0) >>> 2) + 1 | 0;
 i8 = i2;
 i9 = i5;
 while (1) {
  i5 = HEAP32[i8 >> 2] | 0;
  HEAP8[i9] = i5 >>> 0 < 128 ? i5 & 255 : i4;
  i8 = i8 + 4 | 0;
  if ((i8 | 0) == (i3 | 0)) {
   break;
  } else {
   i9 = i9 + 1 | 0;
  }
 }
 i6 = i2 + (i7 << 2) | 0;
 STACKTOP = i1;
 return i6 | 0;
}
function __ZNKSt3__15ctypeIwE10do_toupperEPwPKw(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0;
 i1 = STACKTOP;
 if ((i2 | 0) == (i3 | 0)) {
  i4 = i2;
  STACKTOP = i1;
  return i4 | 0;
 } else {
  i5 = i2;
 }
 while (1) {
  i2 = HEAP32[i5 >> 2] | 0;
  if (i2 >>> 0 < 128) {
   i6 = HEAP32[(HEAP32[(___ctype_toupper_loc() | 0) >> 2] | 0) + (i2 << 2) >> 2] | 0;
  } else {
   i6 = i2;
  }
  HEAP32[i5 >> 2] = i6;
  i2 = i5 + 4 | 0;
  if ((i2 | 0) == (i3 | 0)) {
   i4 = i3;
   break;
  } else {
   i5 = i2;
  }
 }
 STACKTOP = i1;
 return i4 | 0;
}
function __ZNKSt3__15ctypeIwE10do_tolowerEPwPKw(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0;
 i1 = STACKTOP;
 if ((i2 | 0) == (i3 | 0)) {
  i4 = i2;
  STACKTOP = i1;
  return i4 | 0;
 } else {
  i5 = i2;
 }
 while (1) {
  i2 = HEAP32[i5 >> 2] | 0;
  if (i2 >>> 0 < 128) {
   i6 = HEAP32[(HEAP32[(___ctype_tolower_loc() | 0) >> 2] | 0) + (i2 << 2) >> 2] | 0;
  } else {
   i6 = i2;
  }
  HEAP32[i5 >> 2] = i6;
  i2 = i5 + 4 | 0;
  if ((i2 | 0) == (i3 | 0)) {
   i4 = i3;
   break;
  } else {
   i5 = i2;
  }
 }
 STACKTOP = i1;
 return i4 | 0;
}
function __ZNSt13runtime_errorC2ERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i3 = STACKTOP;
 HEAP32[i1 >> 2] = 2704;
 if ((HEAP8[i2] & 1) == 0) {
  i4 = i2 + 1 | 0;
 } else {
  i4 = HEAP32[i2 + 8 >> 2] | 0;
 }
 i2 = _strlen(i4 | 0) | 0;
 i5 = __Znaj(i2 + 13 | 0) | 0;
 HEAP32[i5 + 4 >> 2] = i2;
 HEAP32[i5 >> 2] = i2;
 i6 = i5 + 12 | 0;
 HEAP32[i1 + 4 >> 2] = i6;
 HEAP32[i5 + 8 >> 2] = 0;
 _memcpy(i6 | 0, i4 | 0, i2 + 1 | 0) | 0;
 STACKTOP = i3;
 return;
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE11do_encodingEv(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i2 = STACKTOP;
 i3 = i1 + 8 | 0;
 i1 = _uselocale(HEAP32[i3 >> 2] | 0) | 0;
 i4 = _mbtowc(0, 0, 4) | 0;
 if ((i1 | 0) != 0) {
  _uselocale(i1 | 0) | 0;
 }
 if ((i4 | 0) == 0) {
  i4 = HEAP32[i3 >> 2] | 0;
  if ((i4 | 0) == 0) {
   i5 = 1;
  } else {
   i3 = _uselocale(i4 | 0) | 0;
   if ((i3 | 0) == 0) {
    i5 = 0;
   } else {
    _uselocale(i3 | 0) | 0;
    i5 = 0;
   }
  }
 } else {
  i5 = -1;
 }
 STACKTOP = i2;
 return i5 | 0;
}
function _memset(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i4 = i1 + i3 | 0;
 if ((i3 | 0) >= 20) {
  i2 = i2 & 255;
  i5 = i1 & 3;
  i6 = i2 | i2 << 8 | i2 << 16 | i2 << 24;
  i7 = i4 & ~3;
  if (i5) {
   i5 = i1 + 4 - i5 | 0;
   while ((i1 | 0) < (i5 | 0)) {
    HEAP8[i1] = i2;
    i1 = i1 + 1 | 0;
   }
  }
  while ((i1 | 0) < (i7 | 0)) {
   HEAP32[i1 >> 2] = i6;
   i1 = i1 + 4 | 0;
  }
 }
 while ((i1 | 0) < (i4 | 0)) {
  HEAP8[i1] = i2;
  i1 = i1 + 1 | 0;
 }
 return i1 - i3 | 0;
}
function __Znwj(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i2 = STACKTOP;
 i3 = (i1 | 0) == 0 ? 1 : i1;
 while (1) {
  i4 = _malloc(i3) | 0;
  if ((i4 | 0) != 0) {
   i5 = 6;
   break;
  }
  i1 = HEAP32[3662] | 0;
  HEAP32[3662] = i1 + 0;
  if ((i1 | 0) == 0) {
   i5 = 5;
   break;
  }
  FUNCTION_TABLE_v[i1 & 0]();
 }
 if ((i5 | 0) == 5) {
  i3 = ___cxa_allocate_exception(4) | 0;
  HEAP32[i3 >> 2] = 14664;
  ___cxa_throw(i3 | 0, 14712, 115);
 } else if ((i5 | 0) == 6) {
  STACKTOP = i2;
  return i4 | 0;
 }
 return 0;
}
function __ZNKSt3__17collateIwE7do_hashEPKwS3_(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i1 = STACKTOP;
 if ((i2 | 0) == (i3 | 0)) {
  i4 = 0;
  STACKTOP = i1;
  return i4 | 0;
 } else {
  i5 = 0;
  i6 = i2;
 }
 while (1) {
  i2 = (HEAP32[i6 >> 2] | 0) + (i5 << 4) | 0;
  i7 = i2 & -268435456;
  i8 = (i7 >>> 24 | i7) ^ i2;
  i2 = i6 + 4 | 0;
  if ((i2 | 0) == (i3 | 0)) {
   i4 = i8;
   break;
  } else {
   i5 = i8;
   i6 = i2;
  }
 }
 STACKTOP = i1;
 return i4 | 0;
}
function __ZNKSt3__15ctypeIcE9do_narrowEPKcS3_cPc(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i6 = 0, i7 = 0, i8 = 0;
 i1 = STACKTOP;
 if ((i2 | 0) == (i3 | 0)) {
  i6 = i2;
  STACKTOP = i1;
  return i6 | 0;
 } else {
  i7 = i2;
  i8 = i5;
 }
 while (1) {
  i5 = HEAP8[i7] | 0;
  HEAP8[i8] = i5 << 24 >> 24 > -1 ? i5 : i4;
  i5 = i7 + 1 | 0;
  if ((i5 | 0) == (i3 | 0)) {
   i6 = i3;
   break;
  } else {
   i7 = i5;
   i8 = i8 + 1 | 0;
  }
 }
 STACKTOP = i1;
 return i6 | 0;
}
function __ZNSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 i3 = i1 + 8 | 0;
 i4 = HEAP32[i3 >> 2] | 0;
 if ((HEAP8[5728] | 0) == 0) {
  if ((___cxa_guard_acquire(5728) | 0) != 0) {
   HEAP32[1430] = _newlocale(2147483647, 5736, 0) | 0;
   ___cxa_guard_release(5728);
  }
 }
 if ((i4 | 0) == (HEAP32[1430] | 0)) {
  __ZdlPv(i1);
  STACKTOP = i2;
  return;
 }
 _freelocale(HEAP32[i3 >> 2] | 0);
 __ZdlPv(i1);
 STACKTOP = i2;
 return;
}
function __ZNSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 i3 = i1 + 8 | 0;
 i4 = HEAP32[i3 >> 2] | 0;
 if ((HEAP8[5728] | 0) == 0) {
  if ((___cxa_guard_acquire(5728) | 0) != 0) {
   HEAP32[1430] = _newlocale(2147483647, 5736, 0) | 0;
   ___cxa_guard_release(5728);
  }
 }
 if ((i4 | 0) == (HEAP32[1430] | 0)) {
  __ZdlPv(i1);
  STACKTOP = i2;
  return;
 }
 _freelocale(HEAP32[i3 >> 2] | 0);
 __ZdlPv(i1);
 STACKTOP = i2;
 return;
}
function __ZNKSt3__17collateIcE7do_hashEPKcS3_(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i1 = STACKTOP;
 if ((i2 | 0) == (i3 | 0)) {
  i4 = 0;
  STACKTOP = i1;
  return i4 | 0;
 } else {
  i5 = 0;
  i6 = i2;
 }
 while (1) {
  i2 = (HEAP8[i6] | 0) + (i5 << 4) | 0;
  i7 = i2 & -268435456;
  i8 = (i7 >>> 24 | i7) ^ i2;
  i2 = i6 + 1 | 0;
  if ((i2 | 0) == (i3 | 0)) {
   i4 = i8;
   break;
  } else {
   i5 = i8;
   i6 = i2;
  }
 }
 STACKTOP = i1;
 return i4 | 0;
}
function __ZNKSt3__114error_category10equivalentEiRKNS_15error_conditionE(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i4;
 FUNCTION_TABLE_viii[HEAP32[(HEAP32[i1 >> 2] | 0) + 12 >> 2] & 3](i5, i1, i2);
 if ((HEAP32[i5 + 4 >> 2] | 0) != (HEAP32[i3 + 4 >> 2] | 0)) {
  i6 = 0;
  STACKTOP = i4;
  return i6 | 0;
 }
 i6 = (HEAP32[i5 >> 2] | 0) == (HEAP32[i3 >> 2] | 0);
 STACKTOP = i4;
 return i6 | 0;
}
function __ZNSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 i3 = i1 + 8 | 0;
 i1 = HEAP32[i3 >> 2] | 0;
 if ((HEAP8[5728] | 0) == 0) {
  if ((___cxa_guard_acquire(5728) | 0) != 0) {
   HEAP32[1430] = _newlocale(2147483647, 5736, 0) | 0;
   ___cxa_guard_release(5728);
  }
 }
 if ((i1 | 0) == (HEAP32[1430] | 0)) {
  STACKTOP = i2;
  return;
 }
 _freelocale(HEAP32[i3 >> 2] | 0);
 STACKTOP = i2;
 return;
}
function __ZNSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 i3 = i1 + 8 | 0;
 i1 = HEAP32[i3 >> 2] | 0;
 if ((HEAP8[5728] | 0) == 0) {
  if ((___cxa_guard_acquire(5728) | 0) != 0) {
   HEAP32[1430] = _newlocale(2147483647, 5736, 0) | 0;
   ___cxa_guard_release(5728);
  }
 }
 if ((i1 | 0) == (HEAP32[1430] | 0)) {
  STACKTOP = i2;
  return;
 }
 _freelocale(HEAP32[i3 >> 2] | 0);
 STACKTOP = i2;
 return;
}
function __ZNSt3__18ios_base4initEPv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0;
 i3 = STACKTOP;
 HEAP32[i1 + 24 >> 2] = i2;
 HEAP32[i1 + 16 >> 2] = (i2 | 0) == 0;
 HEAP32[i1 + 20 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = 4098;
 HEAP32[i1 + 12 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 6;
 i2 = i1 + 28 | 0;
 i4 = i1 + 32 | 0;
 i1 = i4 + 40 | 0;
 do {
  HEAP32[i4 >> 2] = 0;
  i4 = i4 + 4 | 0;
 } while ((i4 | 0) < (i1 | 0));
 __ZNSt3__16localeC2Ev(i2);
 STACKTOP = i3;
 return;
}
function __ZNKSt3__15ctypeIwE8do_widenEPKcS3_Pw(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0;
 i1 = STACKTOP;
 if ((i2 | 0) == (i3 | 0)) {
  i5 = i2;
  STACKTOP = i1;
  return i5 | 0;
 } else {
  i6 = i2;
  i7 = i4;
 }
 while (1) {
  HEAP32[i7 >> 2] = HEAP8[i6] | 0;
  i4 = i6 + 1 | 0;
  if ((i4 | 0) == (i3 | 0)) {
   i5 = i3;
   break;
  } else {
   i6 = i4;
   i7 = i7 + 4 | 0;
  }
 }
 STACKTOP = i1;
 return i5 | 0;
}
function __ZNSt3__17codecvtIwc11__mbstate_tED2Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 HEAP32[i1 >> 2] = 5920;
 i3 = i1 + 8 | 0;
 i1 = HEAP32[i3 >> 2] | 0;
 if ((HEAP8[5728] | 0) == 0) {
  if ((___cxa_guard_acquire(5728) | 0) != 0) {
   HEAP32[1430] = _newlocale(2147483647, 5736, 0) | 0;
   ___cxa_guard_release(5728);
  }
 }
 if ((i1 | 0) == (HEAP32[1430] | 0)) {
  STACKTOP = i2;
  return;
 }
 _freelocale(HEAP32[i3 >> 2] | 0);
 STACKTOP = i2;
 return;
}
function __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i6 = 0, i7 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i7 = i6;
 HEAP32[i7 >> 2] = i5;
 i5 = _uselocale(i3 | 0) | 0;
 i3 = _vsnprintf(i1 | 0, i2 | 0, i4 | 0, i7 | 0) | 0;
 if ((i5 | 0) == 0) {
  STACKTOP = i6;
  return i3 | 0;
 }
 _uselocale(i5 | 0) | 0;
 STACKTOP = i6;
 return i3 | 0;
}
function ___uflow(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 if ((HEAP32[i1 + 8 >> 2] | 0) == 0) {
  if ((___toread(i1) | 0) == 0) {
   i4 = 3;
  } else {
   i5 = -1;
  }
 } else {
  i4 = 3;
 }
 if ((i4 | 0) == 3) {
  if ((FUNCTION_TABLE_iiii[HEAP32[i1 + 32 >> 2] & 31](i1, i3, 1) | 0) == 1) {
   i5 = HEAPU8[i3] | 0;
  } else {
   i5 = -1;
  }
 }
 STACKTOP = i2;
 return i5 | 0;
}
function __ZNKSt3__120__time_get_c_storageIwE3__xEv(i1) {
 i1 = i1 | 0;
 i1 = STACKTOP;
 if ((HEAP8[6288] | 0) != 0) {
  STACKTOP = i1;
  return 6272;
 }
 if ((___cxa_guard_acquire(6288) | 0) == 0) {
  STACKTOP = i1;
  return 6272;
 }
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj(6272, 6296, _wcslen(6296) | 0);
 _atexit(129, 6272, ___dso_handle | 0) | 0;
 ___cxa_guard_release(6288);
 STACKTOP = i1;
 return 6272;
}
function __ZNKSt3__120__time_get_c_storageIwE3__rEv(i1) {
 i1 = i1 | 0;
 i1 = STACKTOP;
 if ((HEAP8[6656] | 0) != 0) {
  STACKTOP = i1;
  return 6640;
 }
 if ((___cxa_guard_acquire(6656) | 0) == 0) {
  STACKTOP = i1;
  return 6640;
 }
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj(6640, 6664, _wcslen(6664) | 0);
 _atexit(129, 6640, ___dso_handle | 0) | 0;
 ___cxa_guard_release(6656);
 STACKTOP = i1;
 return 6640;
}
function __ZNKSt3__120__time_get_c_storageIwE3__cEv(i1) {
 i1 = i1 | 0;
 i1 = STACKTOP;
 if ((HEAP8[6504] | 0) != 0) {
  STACKTOP = i1;
  return 6488;
 }
 if ((___cxa_guard_acquire(6504) | 0) == 0) {
  STACKTOP = i1;
  return 6488;
 }
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj(6488, 6512, _wcslen(6512) | 0);
 _atexit(129, 6488, ___dso_handle | 0) | 0;
 ___cxa_guard_release(6504);
 STACKTOP = i1;
 return 6488;
}
function __ZNKSt3__120__time_get_c_storageIwE3__XEv(i1) {
 i1 = i1 | 0;
 i1 = STACKTOP;
 if ((HEAP8[6392] | 0) != 0) {
  STACKTOP = i1;
  return 6376;
 }
 if ((___cxa_guard_acquire(6392) | 0) == 0) {
  STACKTOP = i1;
  return 6376;
 }
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj(6376, 6400, _wcslen(6400) | 0);
 _atexit(129, 6376, ___dso_handle | 0) | 0;
 ___cxa_guard_release(6392);
 STACKTOP = i1;
 return 6376;
}
function __ZNKSt3__15ctypeIcE8do_widenEPKcS3_Pc(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0;
 i1 = STACKTOP;
 if ((i2 | 0) == (i3 | 0)) {
  i5 = i2;
 } else {
  i6 = i2;
  i2 = i4;
  while (1) {
   HEAP8[i2] = HEAP8[i6] | 0;
   i4 = i6 + 1 | 0;
   if ((i4 | 0) == (i3 | 0)) {
    i5 = i3;
    break;
   } else {
    i6 = i4;
    i2 = i2 + 1 | 0;
   }
  }
 }
 STACKTOP = i1;
 return i5 | 0;
}
function copyTempDouble(i1) {
 i1 = i1 | 0;
 HEAP8[tempDoublePtr] = HEAP8[i1];
 HEAP8[tempDoublePtr + 1 | 0] = HEAP8[i1 + 1 | 0];
 HEAP8[tempDoublePtr + 2 | 0] = HEAP8[i1 + 2 | 0];
 HEAP8[tempDoublePtr + 3 | 0] = HEAP8[i1 + 3 | 0];
 HEAP8[tempDoublePtr + 4 | 0] = HEAP8[i1 + 4 | 0];
 HEAP8[tempDoublePtr + 5 | 0] = HEAP8[i1 + 5 | 0];
 HEAP8[tempDoublePtr + 6 | 0] = HEAP8[i1 + 6 | 0];
 HEAP8[tempDoublePtr + 7 | 0] = HEAP8[i1 + 7 | 0];
}
function __ZTv0_n12_NSt3__114basic_ifstreamIcNS_11char_traitsIcEEED0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i2 = STACKTOP;
 i3 = HEAP32[(HEAP32[i1 >> 2] | 0) + -12 >> 2] | 0;
 i4 = i1 + i3 | 0;
 HEAP32[i4 >> 2] = 764;
 i5 = i1 + (i3 + 108) | 0;
 HEAP32[i5 >> 2] = 784;
 __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEED2Ev(i1 + (i3 + 8) | 0);
 __ZNSt3__18ios_baseD2Ev(i5);
 __ZdlPv(i4);
 STACKTOP = i2;
 return;
}
function __ZNSt13runtime_errorD2Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i2 = STACKTOP;
 HEAP32[i1 >> 2] = 2704;
 i3 = i1 + 4 | 0;
 i4 = (HEAP32[i3 >> 2] | 0) + -4 | 0;
 i5 = HEAP32[i4 >> 2] | 0;
 HEAP32[i4 >> 2] = i5 + -1;
 if ((i5 + -1 | 0) >= 0) {
  __ZNSt9exceptionD2Ev(i1 | 0);
  STACKTOP = i2;
  return;
 }
 __ZdaPv((HEAP32[i3 >> 2] | 0) + -12 | 0);
 __ZNSt9exceptionD2Ev(i1 | 0);
 STACKTOP = i2;
 return;
}
function __ZNSt11logic_errorD2Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i2 = STACKTOP;
 HEAP32[i1 >> 2] = 2680;
 i3 = i1 + 4 | 0;
 i4 = (HEAP32[i3 >> 2] | 0) + -4 | 0;
 i5 = HEAP32[i4 >> 2] | 0;
 HEAP32[i4 >> 2] = i5 + -1;
 if ((i5 + -1 | 0) >= 0) {
  __ZNSt9exceptionD2Ev(i1 | 0);
  STACKTOP = i2;
  return;
 }
 __ZdaPv((HEAP32[i3 >> 2] | 0) + -12 | 0);
 __ZNSt9exceptionD2Ev(i1 | 0);
 STACKTOP = i2;
 return;
}
function __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i6 = i5;
 HEAP32[i6 >> 2] = i4;
 i4 = _uselocale(i2 | 0) | 0;
 i2 = _vasprintf(i1 | 0, i3 | 0, i6 | 0) | 0;
 if ((i4 | 0) == 0) {
  STACKTOP = i5;
  return i2 | 0;
 }
 _uselocale(i4 | 0) | 0;
 STACKTOP = i5;
 return i2 | 0;
}
function ___shlim(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i3 = STACKTOP;
 HEAP32[i1 + 104 >> 2] = i2;
 i4 = HEAP32[i1 + 8 >> 2] | 0;
 i5 = HEAP32[i1 + 4 >> 2] | 0;
 i6 = i4 - i5 | 0;
 HEAP32[i1 + 108 >> 2] = i6;
 if ((i2 | 0) != 0 & (i6 | 0) > (i2 | 0)) {
  HEAP32[i1 + 100 >> 2] = i5 + i2;
  STACKTOP = i3;
  return;
 } else {
  HEAP32[i1 + 100 >> 2] = i4;
  STACKTOP = i3;
  return;
 }
}
function __ZNSt3__110__sscanf_lEPKcP15__locale_structS1_z(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i6 = i5;
 HEAP32[i6 >> 2] = i4;
 i4 = _uselocale(i2 | 0) | 0;
 i2 = _vsscanf(i1 | 0, i3 | 0, i6 | 0) | 0;
 if ((i4 | 0) == 0) {
  STACKTOP = i5;
  return i2 | 0;
 }
 _uselocale(i4 | 0) | 0;
 STACKTOP = i5;
 return i2 | 0;
}
function _wmemcpy(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i4 = STACKTOP;
 if ((i3 | 0) == 0) {
  STACKTOP = i4;
  return i1 | 0;
 } else {
  i5 = i3;
  i6 = i2;
  i7 = i1;
 }
 while (1) {
  i5 = i5 + -1 | 0;
  HEAP32[i7 >> 2] = HEAP32[i6 >> 2];
  if ((i5 | 0) == 0) {
   break;
  } else {
   i6 = i6 + 4 | 0;
   i7 = i7 + 4 | 0;
  }
 }
 STACKTOP = i4;
 return i1 | 0;
}
function __ZNSt3__111__stdoutbufIwE5imbueERKNS_6localeE(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0;
 i3 = STACKTOP;
 FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 24 >> 2] & 127](i1) | 0;
 i4 = __ZNKSt3__16locale9use_facetERNS0_2idE(i2, 5904) | 0;
 HEAP32[i1 + 36 >> 2] = i4;
 HEAP8[i1 + 44 | 0] = (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 28 >> 2] & 127](i4) | 0) & 1;
 STACKTOP = i3;
 return;
}
function __ZNSt3__111__stdoutbufIcE5imbueERKNS_6localeE(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0;
 i3 = STACKTOP;
 FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 24 >> 2] & 127](i1) | 0;
 i4 = __ZNKSt3__16locale9use_facetERNS0_2idE(i2, 5896) | 0;
 HEAP32[i1 + 36 >> 2] = i4;
 HEAP8[i1 + 44 | 0] = (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 28 >> 2] & 127](i4) | 0) & 1;
 STACKTOP = i3;
 return;
}
function ___muldsi3(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i3 = i1 & 65535;
 i4 = i2 & 65535;
 i5 = Math_imul(i4, i3) | 0;
 i6 = i1 >>> 16;
 i1 = (i5 >>> 16) + (Math_imul(i4, i6) | 0) | 0;
 i4 = i2 >>> 16;
 i2 = Math_imul(i4, i3) | 0;
 return (tempRet0 = (i1 >>> 16) + (Math_imul(i4, i6) | 0) + (((i1 & 65535) + i2 | 0) >>> 16) | 0, i1 + i2 << 16 | i5 & 65535 | 0) | 0;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE5uflowEv(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0) == -1) {
  i3 = -1;
  STACKTOP = i2;
  return i3 | 0;
 }
 i4 = i1 + 12 | 0;
 i1 = HEAP32[i4 >> 2] | 0;
 HEAP32[i4 >> 2] = i1 + 4;
 i3 = HEAP32[i1 >> 2] | 0;
 STACKTOP = i2;
 return i3 | 0;
}
function __ZNSt13runtime_errorC2EPKc(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i3 = STACKTOP;
 HEAP32[i1 >> 2] = 2704;
 i4 = _strlen(i2 | 0) | 0;
 i5 = __Znaj(i4 + 13 | 0) | 0;
 HEAP32[i5 + 4 >> 2] = i4;
 HEAP32[i5 >> 2] = i4;
 i6 = i5 + 12 | 0;
 HEAP32[i1 + 4 >> 2] = i6;
 HEAP32[i5 + 8 >> 2] = 0;
 _memcpy(i6 | 0, i2 | 0, i4 + 1 | 0) | 0;
 STACKTOP = i3;
 return;
}
function __ZNSt11logic_errorC2EPKc(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i3 = STACKTOP;
 HEAP32[i1 >> 2] = 2680;
 i4 = _strlen(i2 | 0) | 0;
 i5 = __Znaj(i4 + 13 | 0) | 0;
 HEAP32[i5 + 4 >> 2] = i4;
 HEAP32[i5 >> 2] = i4;
 i6 = i5 + 12 | 0;
 HEAP32[i1 + 4 >> 2] = i6;
 HEAP32[i5 + 8 >> 2] = 0;
 _memcpy(i6 | 0, i2 | 0, i4 + 1 | 0) | 0;
 STACKTOP = i3;
 return;
}
function __ZTv0_n12_NSt3__114basic_ifstreamIcNS_11char_traitsIcEEED1Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 i3 = HEAP32[(HEAP32[i1 >> 2] | 0) + -12 >> 2] | 0;
 HEAP32[i1 + i3 >> 2] = 764;
 i4 = i1 + (i3 + 108) | 0;
 HEAP32[i4 >> 2] = 784;
 __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEED2Ev(i1 + (i3 + 8) | 0);
 __ZNSt3__18ios_baseD2Ev(i4);
 STACKTOP = i2;
 return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5uflowEv(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0) == -1) {
  i3 = -1;
  STACKTOP = i2;
  return i3 | 0;
 }
 i4 = i1 + 12 | 0;
 i1 = HEAP32[i4 >> 2] | 0;
 HEAP32[i4 >> 2] = i1 + 1;
 i3 = HEAPU8[i1] | 0;
 STACKTOP = i2;
 return i3 | 0;
}
function __ZNSt13runtime_errorD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i2 = STACKTOP;
 HEAP32[i1 >> 2] = 2704;
 i3 = i1 + 4 | 0;
 i4 = (HEAP32[i3 >> 2] | 0) + -4 | 0;
 i5 = HEAP32[i4 >> 2] | 0;
 HEAP32[i4 >> 2] = i5 + -1;
 if ((i5 + -1 | 0) < 0) {
  __ZdaPv((HEAP32[i3 >> 2] | 0) + -12 | 0);
 }
 __ZNSt9exceptionD2Ev(i1 | 0);
 __ZdlPv(i1);
 STACKTOP = i2;
 return;
}
function __ZNKSt3__18messagesIwE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0;
 i3 = STACKTOP;
 if ((HEAP8[i2] & 1) == 0) {
  i4 = i2 + 1 | 0;
 } else {
  i4 = HEAP32[i2 + 8 >> 2] | 0;
 }
 i2 = _catopen(i4 | 0, 1) | 0;
 STACKTOP = i3;
 return i2 >>> ((i2 | 0) != (-1 | 0) | 0) | 0;
}
function __ZNKSt3__18messagesIcE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0;
 i3 = STACKTOP;
 if ((HEAP8[i2] & 1) == 0) {
  i4 = i2 + 1 | 0;
 } else {
  i4 = HEAP32[i2 + 8 >> 2] | 0;
 }
 i2 = _catopen(i4 | 0, 1) | 0;
 STACKTOP = i3;
 return i2 >>> ((i2 | 0) != (-1 | 0) | 0) | 0;
}
function __ZNSt12length_errorD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i2 = STACKTOP;
 HEAP32[i1 >> 2] = 2680;
 i3 = i1 + 4 | 0;
 i4 = (HEAP32[i3 >> 2] | 0) + -4 | 0;
 i5 = HEAP32[i4 >> 2] | 0;
 HEAP32[i4 >> 2] = i5 + -1;
 if ((i5 + -1 | 0) < 0) {
  __ZdaPv((HEAP32[i3 >> 2] | 0) + -12 | 0);
 }
 __ZNSt9exceptionD2Ev(i1 | 0);
 __ZdlPv(i1);
 STACKTOP = i2;
 return;
}
function __ZNSt11logic_errorD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i2 = STACKTOP;
 HEAP32[i1 >> 2] = 2680;
 i3 = i1 + 4 | 0;
 i4 = (HEAP32[i3 >> 2] | 0) + -4 | 0;
 i5 = HEAP32[i4 >> 2] | 0;
 HEAP32[i4 >> 2] = i5 + -1;
 if ((i5 + -1 | 0) < 0) {
  __ZdaPv((HEAP32[i3 >> 2] | 0) + -12 | 0);
 }
 __ZNSt9exceptionD2Ev(i1 | 0);
 __ZdlPv(i1);
 STACKTOP = i2;
 return;
}
function __ZNSt3__114__shared_count16__release_sharedEv(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i2 = STACKTOP;
 i3 = i1 + 4 | 0;
 i4 = HEAP32[i3 >> 2] | 0;
 HEAP32[i3 >> 2] = i4 + -1;
 if ((i4 | 0) != 0) {
  i5 = 0;
  STACKTOP = i2;
  return i5 | 0;
 }
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[i1 >> 2] | 0) + 8 >> 2] & 255](i1);
 i5 = 1;
 STACKTOP = i2;
 return i5 | 0;
}
function _memmove(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0;
 if ((i2 | 0) < (i1 | 0) & (i1 | 0) < (i2 + i3 | 0)) {
  i4 = i1;
  i2 = i2 + i3 | 0;
  i1 = i1 + i3 | 0;
  while ((i3 | 0) > 0) {
   i1 = i1 - 1 | 0;
   i2 = i2 - 1 | 0;
   i3 = i3 - 1 | 0;
   HEAP8[i1] = HEAP8[i2] | 0;
  }
  i1 = i4;
 } else {
  _memcpy(i1, i2, i3) | 0;
 }
 return i1 | 0;
}
function __ZNKSt3__120__time_get_c_storageIcE3__rEv(i1) {
 i1 = i1 | 0;
 i1 = STACKTOP;
 if ((HEAP8[6616] | 0) == 0) {
  if ((___cxa_guard_acquire(6616) | 0) != 0) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj(6600, 6624, 11);
   _atexit(128, 6600, ___dso_handle | 0) | 0;
   ___cxa_guard_release(6616);
  }
 }
 STACKTOP = i1;
 return 6600;
}
function __ZNKSt3__120__time_get_c_storageIcE3__cEv(i1) {
 i1 = i1 | 0;
 i1 = STACKTOP;
 if ((HEAP8[6456] | 0) == 0) {
  if ((___cxa_guard_acquire(6456) | 0) != 0) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj(6440, 6464, 20);
   _atexit(128, 6440, ___dso_handle | 0) | 0;
   ___cxa_guard_release(6456);
  }
 }
 STACKTOP = i1;
 return 6440;
}
function __ZNKSt3__120__time_get_c_storageIcE3__xEv(i1) {
 i1 = i1 | 0;
 i1 = STACKTOP;
 if ((HEAP8[6248] | 0) == 0) {
  if ((___cxa_guard_acquire(6248) | 0) != 0) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj(6232, 6256, 8);
   _atexit(128, 6232, ___dso_handle | 0) | 0;
   ___cxa_guard_release(6248);
  }
 }
 STACKTOP = i1;
 return 6232;
}
function __ZNKSt3__120__time_get_c_storageIcE3__XEv(i1) {
 i1 = i1 | 0;
 i1 = STACKTOP;
 if ((HEAP8[6352] | 0) == 0) {
  if ((___cxa_guard_acquire(6352) | 0) != 0) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj(6336, 6360, 8);
   _atexit(128, 6336, ___dso_handle | 0) | 0;
   ___cxa_guard_release(6352);
  }
 }
 STACKTOP = i1;
 return 6336;
}
function __ZNSt3__18ios_base4InitD2Ev(i1) {
 i1 = i1 | 0;
 i1 = STACKTOP;
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv(1184) | 0;
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv(1360) | 0;
 __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE5flushEv(1536) | 0;
 __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE5flushEv(1712) | 0;
 STACKTOP = i1;
 return;
}
function __ZNKSt3__119__iostream_category7messageEi(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0;
 i4 = STACKTOP;
 if ((i3 | 0) == 1) {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj(i1, 3400, 35);
  STACKTOP = i4;
  return;
 } else {
  __ZNKSt3__112__do_message7messageEi(i1, i2, i3);
  STACKTOP = i4;
  return;
 }
}
function _llvm_cttz_i32(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = HEAP8[cttz_i8 + (i1 & 255) | 0] | 0;
 if ((i2 | 0) < 8) return i2 | 0;
 i2 = HEAP8[cttz_i8 + (i1 >> 8 & 255) | 0] | 0;
 if ((i2 | 0) < 8) return i2 + 8 | 0;
 i2 = HEAP8[cttz_i8 + (i1 >> 16 & 255) | 0] | 0;
 if ((i2 | 0) < 8) return i2 + 16 | 0;
 return (HEAP8[cttz_i8 + (i1 >>> 24) | 0] | 0) + 24 | 0;
}
function _llvm_ctlz_i32(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = HEAP8[ctlz_i8 + (i1 >>> 24) | 0] | 0;
 if ((i2 | 0) < 8) return i2 | 0;
 i2 = HEAP8[ctlz_i8 + (i1 >> 16 & 255) | 0] | 0;
 if ((i2 | 0) < 8) return i2 + 8 | 0;
 i2 = HEAP8[ctlz_i8 + (i1 >> 8 & 255) | 0] | 0;
 if ((i2 | 0) < 8) return i2 + 16 | 0;
 return (HEAP8[ctlz_i8 + (i1 & 255) | 0] | 0) + 24 | 0;
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE13do_max_lengthEv(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 i3 = HEAP32[i1 + 8 >> 2] | 0;
 if ((i3 | 0) == 0) {
  i4 = 1;
 } else {
  i1 = _uselocale(i3 | 0) | 0;
  if ((i1 | 0) == 0) {
   i4 = 4;
  } else {
   _uselocale(i1 | 0) | 0;
   i4 = 4;
  }
 }
 STACKTOP = i2;
 return i4 | 0;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE7seekoffExNS_8ios_base7seekdirEj(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i6 = i1;
 HEAP32[i6 >> 2] = 0;
 HEAP32[i6 + 4 >> 2] = 0;
 i6 = i1 + 8 | 0;
 HEAP32[i6 >> 2] = -1;
 HEAP32[i6 + 4 >> 2] = -1;
 return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i6 = i1;
 HEAP32[i6 >> 2] = 0;
 HEAP32[i6 + 4 >> 2] = 0;
 i6 = i1 + 8 | 0;
 HEAP32[i6 >> 2] = -1;
 HEAP32[i6 + 4 >> 2] = -1;
 return;
}
function __ZNKSt3__114error_category10equivalentERKNS_10error_codeEi(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0;
 i4 = STACKTOP;
 if ((HEAP32[i2 + 4 >> 2] | 0) != (i1 | 0)) {
  i5 = 0;
  STACKTOP = i4;
  return i5 | 0;
 }
 i5 = (HEAP32[i2 >> 2] | 0) == (i3 | 0);
 STACKTOP = i4;
 return i5 | 0;
}
function _wmemset(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0;
 i4 = STACKTOP;
 if ((i3 | 0) != 0) {
  i5 = i3;
  i3 = i1;
  while (1) {
   i5 = i5 + -1 | 0;
   HEAP32[i3 >> 2] = i2;
   if ((i5 | 0) == 0) {
    break;
   } else {
    i3 = i3 + 4 | 0;
   }
  }
 }
 STACKTOP = i4;
 return i1 | 0;
}
function __ZNKSt3__15ctypeIwE5do_isEtw(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0;
 i1 = STACKTOP;
 if (!(i3 >>> 0 < 128)) {
  i4 = 0;
  STACKTOP = i1;
  return i4 | 0;
 }
 i4 = (HEAP16[(HEAP32[(___ctype_b_loc() | 0) >> 2] | 0) + (i3 << 1) >> 1] & i2) << 16 >> 16 != 0;
 STACKTOP = i1;
 return i4 | 0;
}
function dynCall_viiiiiiiii(i1, i2, i3, i4, i5, i6, i7, i8, i9, i10) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 i9 = i9 | 0;
 i10 = i10 | 0;
 FUNCTION_TABLE_viiiiiiiii[i1 & 3](i2 | 0, i3 | 0, i4 | 0, i5 | 0, i6 | 0, i7 | 0, i8 | 0, i9 | 0, i10 | 0);
}
function __ZNKSt3__15ctypeIcE10do_tolowerEc(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 i1 = STACKTOP;
 if (!(i2 << 24 >> 24 > -1)) {
  i3 = i2;
  STACKTOP = i1;
  return i3 | 0;
 }
 i3 = HEAP32[(HEAP32[(___ctype_tolower_loc() | 0) >> 2] | 0) + (i2 << 24 >> 24 << 2) >> 2] & 255;
 STACKTOP = i1;
 return i3 | 0;
}
function __ZNKSt3__15ctypeIcE10do_toupperEc(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 i1 = STACKTOP;
 if (!(i2 << 24 >> 24 > -1)) {
  i3 = i2;
  STACKTOP = i1;
  return i3 | 0;
 }
 i3 = HEAP32[(HEAP32[(___ctype_toupper_loc() | 0) >> 2] | 0) + ((i2 & 255) << 2) >> 2] & 255;
 STACKTOP = i1;
 return i3 | 0;
}
function __ZNSt3__114basic_ifstreamIcNS_11char_traitsIcEEED0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 HEAP32[i1 >> 2] = 764;
 HEAP32[i1 + 108 >> 2] = 784;
 __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEED2Ev(i1 + 8 | 0);
 __ZNSt3__18ios_baseD2Ev(i1 + 108 | 0);
 __ZdlPv(i1);
 STACKTOP = i2;
 return;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0;
 i3 = STACKTOP;
 i4 = __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKwj(i1, i2, _wcslen(i2) | 0) | 0;
 STACKTOP = i3;
 return i4 | 0;
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE9do_lengthERS1_PKcS5_j(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i2 = STACKTOP;
 i1 = __ZNSt3__1L20utf8_to_utf16_lengthEPKhS1_jmNS_12codecvt_modeE(i3, i4, i5, 1114111, 0) | 0;
 STACKTOP = i2;
 return i1 | 0;
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE9do_lengthERS1_PKcS5_j(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i2 = STACKTOP;
 i1 = __ZNSt3__1L19utf8_to_ucs4_lengthEPKhS1_jmNS_12codecvt_modeE(i3, i4, i5, 1114111, 0) | 0;
 STACKTOP = i2;
 return i1 | 0;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE7seekposENS_4fposI11__mbstate_tEEj(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i4 = i1;
 HEAP32[i4 >> 2] = 0;
 HEAP32[i4 + 4 >> 2] = 0;
 i4 = i1 + 8 | 0;
 HEAP32[i4 >> 2] = -1;
 HEAP32[i4 + 4 >> 2] = -1;
 return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i4 = i1;
 HEAP32[i4 >> 2] = 0;
 HEAP32[i4 + 4 >> 2] = 0;
 i4 = i1 + 8 | 0;
 HEAP32[i4 >> 2] = -1;
 HEAP32[i4 + 4 >> 2] = -1;
 return;
}
function dynCall_iiiiiiiii(i1, i2, i3, i4, i5, i6, i7, i8, i9) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 i9 = i9 | 0;
 return FUNCTION_TABLE_iiiiiiiii[i1 & 15](i2 | 0, i3 | 0, i4 | 0, i5 | 0, i6 | 0, i7 | 0, i8 | 0, i9 | 0) | 0;
}
function ___uremdi3(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 8 | 0;
 i6 = i5 | 0;
 ___udivmoddi4(i1, i2, i3, i4, i6) | 0;
 STACKTOP = i5;
 return (tempRet0 = HEAP32[i6 + 4 >> 2] | 0, HEAP32[i6 >> 2] | 0) | 0;
}
function __ZNKSt3__15ctypeIwE10do_toupperEw(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 i1 = STACKTOP;
 if (!(i2 >>> 0 < 128)) {
  i3 = i2;
  STACKTOP = i1;
  return i3 | 0;
 }
 i3 = HEAP32[(HEAP32[(___ctype_toupper_loc() | 0) >> 2] | 0) + (i2 << 2) >> 2] | 0;
 STACKTOP = i1;
 return i3 | 0;
}
function __ZNKSt3__15ctypeIwE10do_tolowerEw(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 i1 = STACKTOP;
 if (!(i2 >>> 0 < 128)) {
  i3 = i2;
  STACKTOP = i1;
  return i3 | 0;
 }
 i3 = HEAP32[(HEAP32[(___ctype_tolower_loc() | 0) >> 2] | 0) + (i2 << 2) >> 2] | 0;
 STACKTOP = i1;
 return i3 | 0;
}
function __ZNSt3__114basic_ifstreamIcNS_11char_traitsIcEEED1Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 HEAP32[i1 >> 2] = 764;
 HEAP32[i1 + 108 >> 2] = 784;
 __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEED2Ev(i1 + 8 | 0);
 __ZNSt3__18ios_baseD2Ev(i1 + 108 | 0);
 STACKTOP = i2;
 return;
}
function dynCall_viiiiiiii(i1, i2, i3, i4, i5, i6, i7, i8, i9) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 i9 = i9 | 0;
 FUNCTION_TABLE_viiiiiiii[i1 & 7](i2 | 0, i3 | 0, i4 | 0, i5 | 0, i6 | 0, i7 | 0, i8 | 0, i9 | 0);
}
function ___muldi3(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0;
 i5 = i1;
 i1 = i3;
 i3 = ___muldsi3(i5, i1) | 0;
 i6 = tempRet0;
 return (tempRet0 = (Math_imul(i2, i1) | 0) + (Math_imul(i4, i5) | 0) + i6 | i6 & 0, i3 | 0 | 0) | 0;
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE6do_outERS1_PKcS5_RS5_PcS7_RS7_(i1, i2, i3, i4, i5, i6, i7, i8) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 HEAP32[i5 >> 2] = i3;
 HEAP32[i8 >> 2] = i6;
 return 3;
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE5do_inERS1_PKcS5_RS5_PcS7_RS7_(i1, i2, i3, i4, i5, i6, i7, i8) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 HEAP32[i5 >> 2] = i3;
 HEAP32[i8 >> 2] = i6;
 return 3;
}
function __ZTv0_n12_NSt3__113basic_ostreamIwNS_11char_traitsIwEEED0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 i3 = HEAP32[(HEAP32[i1 >> 2] | 0) + -12 >> 2] | 0;
 __ZNSt3__18ios_baseD2Ev(i1 + (i3 + 4) | 0);
 __ZdlPv(i1 + i3 | 0);
 STACKTOP = i2;
 return;
}
function __ZTv0_n12_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 i3 = HEAP32[(HEAP32[i1 >> 2] | 0) + -12 >> 2] | 0;
 __ZNSt3__18ios_baseD2Ev(i1 + (i3 + 4) | 0);
 __ZdlPv(i1 + i3 | 0);
 STACKTOP = i2;
 return;
}
function __ZTv0_n12_NSt3__113basic_istreamIwNS_11char_traitsIwEEED0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 i3 = HEAP32[(HEAP32[i1 >> 2] | 0) + -12 >> 2] | 0;
 __ZNSt3__18ios_baseD2Ev(i1 + (i3 + 8) | 0);
 __ZdlPv(i1 + i3 | 0);
 STACKTOP = i2;
 return;
}
function __ZTv0_n12_NSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 i3 = HEAP32[(HEAP32[i1 >> 2] | 0) + -12 >> 2] | 0;
 __ZNSt3__18ios_baseD2Ev(i1 + (i3 + 8) | 0);
 __ZdlPv(i1 + i3 | 0);
 STACKTOP = i2;
 return;
}
function __ZNSt3__15ctypeIcED0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 HEAP32[i1 >> 2] = 5848;
 i3 = HEAP32[i1 + 8 >> 2] | 0;
 if ((i3 | 0) != 0) {
  if ((HEAP8[i1 + 12 | 0] | 0) != 0) {
   __ZdaPv(i3);
  }
 }
 __ZdlPv(i1);
 STACKTOP = i2;
 return;
}
function dynCall_viiiiiii(i1, i2, i3, i4, i5, i6, i7, i8) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 FUNCTION_TABLE_viiiiiii[i1 & 63](i2 | 0, i3 | 0, i4 | 0, i5 | 0, i6 | 0, i7 | 0, i8 | 0);
}
function dynCall_viiiiiid(i1, i2, i3, i4, i5, i6, i7, d8) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 d8 = +d8;
 FUNCTION_TABLE_viiiiiid[i1 & 3](i2 | 0, i3 | 0, i4 | 0, i5 | 0, i6 | 0, i7 | 0, +d8);
}
function __ZNSt3__15ctypeIcED2Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 HEAP32[i1 >> 2] = 5848;
 i3 = HEAP32[i1 + 8 >> 2] | 0;
 if ((i3 | 0) != 0) {
  if ((HEAP8[i1 + 12 | 0] | 0) != 0) {
   __ZdaPv(i3);
  }
 }
 STACKTOP = i2;
 return;
}
function __ZNSt3__16locale5facet16__on_zero_sharedEv(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 if ((i1 | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[i1 >> 2] | 0) + 4 >> 2] & 255](i1);
 STACKTOP = i2;
 return;
}
function __ZNSt3__16localeC2Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 i3 = HEAP32[(__ZNSt3__16locale8__globalEv() | 0) >> 2] | 0;
 HEAP32[i1 >> 2] = i3;
 __ZNSt3__114__shared_count12__add_sharedEv(i3);
 STACKTOP = i2;
 return;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 if ((HEAP8[i1] & 1) == 0) {
  STACKTOP = i2;
  return;
 }
 __ZdlPv(HEAP32[i1 + 8 >> 2] | 0);
 STACKTOP = i2;
 return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 if ((HEAP8[i1] & 1) == 0) {
  STACKTOP = i2;
  return;
 }
 __ZdlPv(HEAP32[i1 + 8 >> 2] | 0);
 STACKTOP = i2;
 return;
}
function _bitshift64Ashr(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 if ((i3 | 0) < 32) {
  tempRet0 = i2 >> i3;
  return i1 >>> i3 | (i2 & (1 << i3) - 1) << 32 - i3;
 }
 tempRet0 = (i2 | 0) < 0 ? -1 : 0;
 return i2 >> i3 - 32 | 0;
}
function __ZNSt3__18ios_base33__set_badbit_and_consider_rethrowEv(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = i1 + 16 | 0;
 HEAP32[i2 >> 2] = HEAP32[i2 >> 2] | 1;
 if ((HEAP32[i1 + 20 >> 2] & 1 | 0) == 0) {
  return;
 } else {
  ___cxa_rethrow();
 }
}
function __ZNKSt3__18numpunctIwE12do_falsenameEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i2 = STACKTOP;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj(i1, 6112, _wcslen(6112) | 0);
 STACKTOP = i2;
 return;
}
function dynCall_viiiiii(i1, i2, i3, i4, i5, i6, i7) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 FUNCTION_TABLE_viiiiii[i1 & 31](i2 | 0, i3 | 0, i4 | 0, i5 | 0, i6 | 0, i7 | 0);
}
function __ZNKSt3__18numpunctIwE11do_truenameEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i2 = STACKTOP;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj(i1, 6080, _wcslen(6080) | 0);
 STACKTOP = i2;
 return;
}
function __ZNSt3__16localeC2ERKS0_(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0;
 i3 = STACKTOP;
 i4 = HEAP32[i2 >> 2] | 0;
 HEAP32[i1 >> 2] = i4;
 __ZNSt3__114__shared_count12__add_sharedEv(i4);
 STACKTOP = i3;
 return;
}
function __ZTv0_n12_NSt3__113basic_ostreamIwNS_11char_traitsIwEEED1Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 __ZNSt3__18ios_baseD2Ev(i1 + ((HEAP32[(HEAP32[i1 >> 2] | 0) + -12 >> 2] | 0) + 4) | 0);
 STACKTOP = i2;
 return;
}
function __ZTv0_n12_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 __ZNSt3__18ios_baseD2Ev(i1 + ((HEAP32[(HEAP32[i1 >> 2] | 0) + -12 >> 2] | 0) + 4) | 0);
 STACKTOP = i2;
 return;
}
function __ZTv0_n12_NSt3__113basic_istreamIwNS_11char_traitsIwEEED1Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 __ZNSt3__18ios_baseD2Ev(i1 + ((HEAP32[(HEAP32[i1 >> 2] | 0) + -12 >> 2] | 0) + 8) | 0);
 STACKTOP = i2;
 return;
}
function __ZTv0_n12_NSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 __ZNSt3__18ios_baseD2Ev(i1 + ((HEAP32[(HEAP32[i1 >> 2] | 0) + -12 >> 2] | 0) + 8) | 0);
 STACKTOP = i2;
 return;
}
function __ZNSt3__18numpunctIwED0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 HEAP32[i1 >> 2] = 6040;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i1 + 16 | 0);
 __ZdlPv(i1);
 STACKTOP = i2;
 return;
}
function __ZNSt3__18numpunctIcED0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 HEAP32[i1 >> 2] = 6e3;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i1 + 12 | 0);
 __ZdlPv(i1);
 STACKTOP = i2;
 return;
}
function __ZNKSt3__18numpunctIwE11do_groupingEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 i3 = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1ERKS5_(i1, i2 + 16 | 0);
 STACKTOP = i3;
 return;
}
function __ZNKSt3__18numpunctIcE11do_groupingEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 i3 = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1ERKS5_(i1, i2 + 12 | 0);
 STACKTOP = i3;
 return;
}
function copyTempFloat(i1) {
 i1 = i1 | 0;
 HEAP8[tempDoublePtr] = HEAP8[i1];
 HEAP8[tempDoublePtr + 1 | 0] = HEAP8[i1 + 1 | 0];
 HEAP8[tempDoublePtr + 2 | 0] = HEAP8[i1 + 2 | 0];
 HEAP8[tempDoublePtr + 3 | 0] = HEAP8[i1 + 3 | 0];
}
function _bitshift64Shl(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 if ((i3 | 0) < 32) {
  tempRet0 = i2 << i3 | (i1 & (1 << i3) - 1 << 32 - i3) >>> 32 - i3;
  return i1 << i3;
 }
 tempRet0 = i1 << i3 - 32;
 return 0;
}
function __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(i1) {
 i1 = i1 | 0;
 i1 = ___cxa_allocate_exception(8) | 0;
 __ZNSt11logic_errorC2EPKc(i1, 3080);
 HEAP32[i1 >> 2] = 2760;
 ___cxa_throw(i1 | 0, 2800, 19);
}
function __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(i1) {
 i1 = i1 | 0;
 i1 = ___cxa_allocate_exception(8) | 0;
 __ZNSt11logic_errorC2EPKc(i1, 5712);
 HEAP32[i1 >> 2] = 2760;
 ___cxa_throw(i1 | 0, 2800, 19);
}
function dynCall_viiiiid(i1, i2, i3, i4, i5, i6, d7) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 d7 = +d7;
 FUNCTION_TABLE_viiiiid[i1 & 7](i2 | 0, i3 | 0, i4 | 0, i5 | 0, i6 | 0, +d7);
}
function _i64Subtract(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0;
 i5 = i2 - i4 >>> 0;
 i5 = i2 - i4 - (i3 >>> 0 > i1 >>> 0 | 0) >>> 0;
 return (tempRet0 = i5, i1 - i3 >>> 0 | 0) | 0;
}
function _bitshift64Lshr(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 if ((i3 | 0) < 32) {
  tempRet0 = i2 >>> i3;
  return i1 >>> i3 | (i2 & (1 << i3) - 1) << 32 - i3;
 }
 tempRet0 = 0;
 return i2 >>> i3 - 32 | 0;
}
function __ZNKSt3__110moneypunctIwLb1EE16do_negative_signEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i2 = STACKTOP;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEjw(i1, 1, 45);
 STACKTOP = i2;
 return;
}
function __ZNKSt3__110moneypunctIwLb0EE16do_negative_signEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i2 = STACKTOP;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEjw(i1, 1, 45);
 STACKTOP = i2;
 return;
}
function __ZNKSt3__110moneypunctIcLb1EE16do_negative_signEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i2 = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEjc(i1, 1, 45);
 STACKTOP = i2;
 return;
}
function __ZNKSt3__110moneypunctIcLb0EE16do_negative_signEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i2 = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEjc(i1, 1, 45);
 STACKTOP = i2;
 return;
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE9do_lengthERS1_PKcS5_j(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i2 = i4 - i3 | 0;
 return (i2 >>> 0 < i5 >>> 0 ? i2 : i5) | 0;
}
function _wcslen(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 i3 = i1;
 while (1) {
  if ((HEAP32[i3 >> 2] | 0) == 0) {
   break;
  } else {
   i3 = i3 + 4 | 0;
  }
 }
 STACKTOP = i2;
 return i3 - i1 >> 2 | 0;
}
function __ZNKSt3__18numpunctIcE12do_falsenameEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i2 = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj(i1, 6104, 5);
 STACKTOP = i2;
 return;
}
function __ZNSt3__18numpunctIwED2Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 HEAP32[i1 >> 2] = 6040;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i1 + 16 | 0);
 STACKTOP = i2;
 return;
}
function __ZNKSt3__18numpunctIcE11do_truenameEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i2 = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj(i1, 6072, 4);
 STACKTOP = i2;
 return;
}
function dynCall_iiiiii(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 return FUNCTION_TABLE_iiiiii[i1 & 15](i2 | 0, i3 | 0, i4 | 0, i5 | 0, i6 | 0) | 0;
}
function __ZNSt3__18numpunctIcED2Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 HEAP32[i1 >> 2] = 6e3;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i1 + 12 | 0);
 STACKTOP = i2;
 return;
}
function __ZNKSt3__110moneypunctIwLb1EE16do_positive_signEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i2 = STACKTOP;
 HEAP32[i1 + 0 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 0;
 STACKTOP = i2;
 return;
}
function __ZNKSt3__110moneypunctIwLb0EE16do_positive_signEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i2 = STACKTOP;
 HEAP32[i1 + 0 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 0;
 STACKTOP = i2;
 return;
}
function __ZNKSt3__110moneypunctIcLb1EE16do_positive_signEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i2 = STACKTOP;
 HEAP32[i1 + 0 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 0;
 STACKTOP = i2;
 return;
}
function __ZNKSt3__110moneypunctIcLb0EE16do_positive_signEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i2 = STACKTOP;
 HEAP32[i1 + 0 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 0;
 STACKTOP = i2;
 return;
}
function __ZNKSt3__110moneypunctIwLb1EE14do_curr_symbolEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i2 = STACKTOP;
 HEAP32[i1 + 0 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 0;
 STACKTOP = i2;
 return;
}
function __ZNKSt3__110moneypunctIwLb0EE14do_curr_symbolEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i2 = STACKTOP;
 HEAP32[i1 + 0 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 0;
 STACKTOP = i2;
 return;
}
function __ZNKSt3__110moneypunctIcLb1EE14do_curr_symbolEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i2 = STACKTOP;
 HEAP32[i1 + 0 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 0;
 STACKTOP = i2;
 return;
}
function __ZNKSt3__110moneypunctIcLb0EE14do_curr_symbolEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i2 = STACKTOP;
 HEAP32[i1 + 0 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 0;
 STACKTOP = i2;
 return;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 HEAP32[i1 >> 2] = 3168;
 __ZNSt3__16localeD2Ev(i1 + 4 | 0);
 __ZdlPv(i1);
 STACKTOP = i2;
 return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 HEAP32[i1 >> 2] = 3104;
 __ZNSt3__16localeD2Ev(i1 + 4 | 0);
 __ZdlPv(i1);
 STACKTOP = i2;
 return;
}
function __ZNKSt3__110moneypunctIwLb1EE11do_groupingEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i2 = STACKTOP;
 HEAP32[i1 + 0 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 0;
 STACKTOP = i2;
 return;
}
function __ZNKSt3__110moneypunctIwLb0EE11do_groupingEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i2 = STACKTOP;
 HEAP32[i1 + 0 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 0;
 STACKTOP = i2;
 return;
}
function __ZNKSt3__110moneypunctIcLb1EE11do_groupingEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i2 = STACKTOP;
 HEAP32[i1 + 0 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 0;
 STACKTOP = i2;
 return;
}
function __ZNKSt3__110moneypunctIcLb0EE11do_groupingEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i2 = STACKTOP;
 HEAP32[i1 + 0 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 0;
 STACKTOP = i2;
 return;
}
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEED0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEED2Ev(i1);
 __ZdlPv(i1);
 STACKTOP = i2;
 return;
}
function __ZNKSt3__110moneypunctIwLb1EE13do_pos_formatEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP8[i1] = 67109634;
 HEAP8[i1 + 1 | 0] = 262147;
 HEAP8[i1 + 2 | 0] = 1024;
 HEAP8[i1 + 3 | 0] = 4;
 return;
}
function __ZNKSt3__110moneypunctIwLb1EE13do_neg_formatEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP8[i1] = 67109634;
 HEAP8[i1 + 1 | 0] = 262147;
 HEAP8[i1 + 2 | 0] = 1024;
 HEAP8[i1 + 3 | 0] = 4;
 return;
}
function __ZNKSt3__110moneypunctIwLb0EE13do_pos_formatEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP8[i1] = 67109634;
 HEAP8[i1 + 1 | 0] = 262147;
 HEAP8[i1 + 2 | 0] = 1024;
 HEAP8[i1 + 3 | 0] = 4;
 return;
}
function __ZNKSt3__110moneypunctIwLb0EE13do_neg_formatEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP8[i1] = 67109634;
 HEAP8[i1 + 1 | 0] = 262147;
 HEAP8[i1 + 2 | 0] = 1024;
 HEAP8[i1 + 3 | 0] = 4;
 return;
}
function __ZNKSt3__110moneypunctIcLb1EE13do_pos_formatEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP8[i1] = 67109634;
 HEAP8[i1 + 1 | 0] = 262147;
 HEAP8[i1 + 2 | 0] = 1024;
 HEAP8[i1 + 3 | 0] = 4;
 return;
}
function __ZNKSt3__110moneypunctIcLb1EE13do_neg_formatEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP8[i1] = 67109634;
 HEAP8[i1 + 1 | 0] = 262147;
 HEAP8[i1 + 2 | 0] = 1024;
 HEAP8[i1 + 3 | 0] = 4;
 return;
}
function __ZNKSt3__110moneypunctIcLb0EE13do_pos_formatEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP8[i1] = 67109634;
 HEAP8[i1 + 1 | 0] = 262147;
 HEAP8[i1 + 2 | 0] = 1024;
 HEAP8[i1 + 3 | 0] = 4;
 return;
}
function __ZNKSt3__110moneypunctIcLb0EE13do_neg_formatEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP8[i1] = 67109634;
 HEAP8[i1 + 1 | 0] = 262147;
 HEAP8[i1 + 2 | 0] = 1024;
 HEAP8[i1 + 3 | 0] = 4;
 return;
}
function dynCall_viiiii(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 FUNCTION_TABLE_viiiii[i1 & 3](i2 | 0, i3 | 0, i4 | 0, i5 | 0, i6 | 0);
}
function _mbrlen(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0;
 i4 = STACKTOP;
 i5 = _mbrtowc(0, i1, i2, (i3 | 0) != 0 ? i3 : 13696) | 0;
 STACKTOP = i4;
 return i5 | 0;
}
function _i64Add(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0;
 i5 = i1 + i3 >>> 0;
 return (tempRet0 = i2 + i4 + (i5 >>> 0 < i1 >>> 0 | 0) >>> 0, i5 | 0) | 0;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED1Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 HEAP32[i1 >> 2] = 3168;
 __ZNSt3__16localeD2Ev(i1 + 4 | 0);
 STACKTOP = i2;
 return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED1Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 HEAP32[i1 >> 2] = 3104;
 __ZNSt3__16localeD2Ev(i1 + 4 | 0);
 STACKTOP = i2;
 return;
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 HEAP32[i5 >> 2] = i3;
 return 3;
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE10do_unshiftERS1_PcS4_RS4_(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 HEAP32[i5 >> 2] = i3;
 return 3;
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 HEAP32[i5 >> 2] = i3;
 return 3;
}
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEED1Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEED2Ev(i1);
 STACKTOP = i2;
 return;
}
function __ZNSt3__110__stdinbufIwE9underflowEv(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 i3 = __ZNSt3__110__stdinbufIwE9__getcharEb(i1, 0) | 0;
 STACKTOP = i2;
 return i3 | 0;
}
function __ZNSt3__110__stdinbufIcE9underflowEv(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 i3 = __ZNSt3__110__stdinbufIcE9__getcharEb(i1, 0) | 0;
 STACKTOP = i2;
 return i3 | 0;
}
function __ZNSt3__121__throw_runtime_errorEPKc(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = ___cxa_allocate_exception(8) | 0;
 __ZNSt13runtime_errorC2EPKc(i2, i1);
 ___cxa_throw(i2 | 0, 2840, 21);
}
function dynCall_iiiii(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 return FUNCTION_TABLE_iiiii[i1 & 7](i2 | 0, i3 | 0, i4 | 0, i5 | 0) | 0;
}
function __ZNSt3__111__stdoutbufIwED0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 HEAP32[i1 >> 2] = 3168;
 __ZNSt3__16localeD2Ev(i1 + 4 | 0);
 __ZdlPv(i1);
 STACKTOP = i2;
 return;
}
function __ZNSt3__111__stdoutbufIcED0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 HEAP32[i1 >> 2] = 3104;
 __ZNSt3__16localeD2Ev(i1 + 4 | 0);
 __ZdlPv(i1);
 STACKTOP = i2;
 return;
}
function __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEED0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 __ZNSt3__18ios_baseD2Ev(i1 + 4 | 0);
 __ZdlPv(i1);
 STACKTOP = i2;
 return;
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 __ZNSt3__18ios_baseD2Ev(i1 + 4 | 0);
 __ZdlPv(i1);
 STACKTOP = i2;
 return;
}
function __ZNSt3__113basic_istreamIwNS_11char_traitsIwEEED0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 __ZNSt3__18ios_baseD2Ev(i1 + 8 | 0);
 __ZdlPv(i1);
 STACKTOP = i2;
 return;
}
function __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 __ZNSt3__18ios_baseD2Ev(i1 + 8 | 0);
 __ZdlPv(i1);
 STACKTOP = i2;
 return;
}
function __ZNSt3__110__stdinbufIwED0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 HEAP32[i1 >> 2] = 3168;
 __ZNSt3__16localeD2Ev(i1 + 4 | 0);
 __ZdlPv(i1);
 STACKTOP = i2;
 return;
}
function __ZNSt3__110__stdinbufIwE5uflowEv(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 i3 = __ZNSt3__110__stdinbufIwE9__getcharEb(i1, 1) | 0;
 STACKTOP = i2;
 return i3 | 0;
}
function __ZNSt3__110__stdinbufIcED0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 HEAP32[i1 >> 2] = 3104;
 __ZNSt3__16localeD2Ev(i1 + 4 | 0);
 __ZdlPv(i1);
 STACKTOP = i2;
 return;
}
function __ZNSt3__110__stdinbufIcE5uflowEv(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 i3 = __ZNSt3__110__stdinbufIcE9__getcharEb(i1, 1) | 0;
 STACKTOP = i2;
 return i3 | 0;
}
function b5(i1, i2, i3, i4, i5, i6, i7, i8, i9) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 i9 = i9 | 0;
 abort(5);
}
function __ZNSt3__17codecvtIwc11__mbstate_tED0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 __ZNSt3__17codecvtIwc11__mbstate_tED2Ev(i1);
 __ZdlPv(i1);
 STACKTOP = i2;
 return;
}
function b11(i1, i2, i3, i4, i5, i6, i7, i8) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 abort(11);
 return 0;
}
function dynCall_viiii(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 FUNCTION_TABLE_viiii[i1 & 15](i2 | 0, i3 | 0, i4 | 0, i5 | 0);
}
function __ZNSt3__16localeD2Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 __ZNSt3__114__shared_count16__release_sharedEv(HEAP32[i1 >> 2] | 0) | 0;
 STACKTOP = i2;
 return;
}
function __ZNKSt3__114error_category23default_error_conditionEi(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 HEAP32[i1 >> 2] = i3;
 HEAP32[i1 + 4 >> 2] = i2;
 return;
}
function __ZNKSt3__18messagesIwE8do_closeEi(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i1 = STACKTOP;
 _catclose(((i2 | 0) == -1 ? -1 : i2 << 1) | 0) | 0;
 STACKTOP = i1;
 return;
}
function __ZNKSt3__18messagesIcE8do_closeEi(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i1 = STACKTOP;
 _catclose(((i2 | 0) == -1 ? -1 : i2 << 1) | 0) | 0;
 STACKTOP = i1;
 return;
}
function __ZNKSt3__18ios_base6getlocEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 i3 = STACKTOP;
 __ZNSt3__16localeC2ERKS0_(i1, i2 + 28 | 0);
 STACKTOP = i3;
 return;
}
function __ZNSt3__111__stdoutbufIwED1Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 HEAP32[i1 >> 2] = 3168;
 __ZNSt3__16localeD2Ev(i1 + 4 | 0);
 STACKTOP = i2;
 return;
}
function __ZNSt3__111__stdoutbufIcED1Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 HEAP32[i1 >> 2] = 3104;
 __ZNSt3__16localeD2Ev(i1 + 4 | 0);
 STACKTOP = i2;
 return;
}
function __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEED1Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 __ZNSt3__18ios_baseD2Ev(i1 + 4 | 0);
 STACKTOP = i2;
 return;
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 __ZNSt3__18ios_baseD2Ev(i1 + 4 | 0);
 STACKTOP = i2;
 return;
}
function __ZNSt3__113basic_istreamIwNS_11char_traitsIwEEED1Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 __ZNSt3__18ios_baseD2Ev(i1 + 8 | 0);
 STACKTOP = i2;
 return;
}
function __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 __ZNSt3__18ios_baseD2Ev(i1 + 8 | 0);
 STACKTOP = i2;
 return;
}
function __ZNSt3__110__stdinbufIwED1Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 HEAP32[i1 >> 2] = 3168;
 __ZNSt3__16localeD2Ev(i1 + 4 | 0);
 STACKTOP = i2;
 return;
}
function __ZNSt3__110__stdinbufIcED1Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 HEAP32[i1 >> 2] = 3104;
 __ZNSt3__16localeD2Ev(i1 + 4 | 0);
 STACKTOP = i2;
 return;
}
function __ZNSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 __ZdlPv(i1);
 STACKTOP = i2;
 return;
}
function __ZNSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 __ZdlPv(i1);
 STACKTOP = i2;
 return;
}
function __ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 __ZdlPv(i1);
 STACKTOP = i2;
 return;
}
function __ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 __ZdlPv(i1);
 STACKTOP = i2;
 return;
}
function __ZNSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 __ZdlPv(i1);
 STACKTOP = i2;
 return;
}
function __ZNSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 __ZdlPv(i1);
 STACKTOP = i2;
 return;
}
function b13(i1, i2, i3, i4, i5, i6, i7, i8) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 abort(13);
}
function __ZNSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 __ZdlPv(i1);
 STACKTOP = i2;
 return;
}
function __ZNSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 __ZdlPv(i1);
 STACKTOP = i2;
 return;
}
function __ZNSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 __ZdlPv(i1);
 STACKTOP = i2;
 return;
}
function __ZNSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 __ZdlPv(i1);
 STACKTOP = i2;
 return;
}
function _rand_r(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = (Math_imul(HEAP32[i1 >> 2] | 0, 31010991) | 0) + 1735287159 & 2147483647;
 HEAP32[i1 >> 2] = i2;
 return i2 | 0;
}
function ___udivdi3(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0;
 i5 = ___udivmoddi4(i1, i2, i3, i4, 0) | 0;
 return i5 | 0;
}
function __ZNSt3__18ios_base7failureD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 __ZNSt3__112system_errorD2Ev(i1);
 __ZdlPv(i1);
 STACKTOP = i2;
 return;
}
function runPostSets() {
 HEAP32[686] = __ZTISt9exception;
 HEAP32[712] = __ZTISt9exception;
 HEAP32[3450] = __ZTISt9exception;
 HEAP32[3680] = __ZTISt9exception;
}
function dynCall_iiii(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 return FUNCTION_TABLE_iiii[i1 & 31](i2 | 0, i3 | 0, i4 | 0) | 0;
}
function __ZNSt3__16locale2id6__initEv(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = HEAP32[1454] | 0;
 HEAP32[1454] = i2 + 1;
 HEAP32[i1 + 4 >> 2] = i2 + 1;
 return;
}
function __ZNSt3__16locale5__impD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 __ZNSt3__16locale5__impD2Ev(i1);
 __ZdlPv(i1);
 STACKTOP = i2;
 return;
}
function __GLOBAL__I_a() {
 var i1 = 0;
 i1 = STACKTOP;
 __ZNSt3__18ios_base4InitC2Ev(0);
 _atexit(117, 1800, ___dso_handle | 0) | 0;
 STACKTOP = i1;
 return;
}
function __ZNSt3__114__shared_count12__add_sharedEv(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = i1 + 4 | 0;
 HEAP32[i2 >> 2] = (HEAP32[i2 >> 2] | 0) + 1;
 return;
}
function __ZNSt3__112system_errorD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 __ZNSt13runtime_errorD2Ev(i1);
 __ZdlPv(i1);
 STACKTOP = i2;
 return;
}
function __ZSt17__throw_bad_allocv() {
 var i1 = 0;
 i1 = ___cxa_allocate_exception(4) | 0;
 HEAP32[i1 >> 2] = 14664;
 ___cxa_throw(i1 | 0, 14712, 115);
}
function b1(i1, i2, i3, i4, i5, i6, i7) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 abort(1);
}
function __ZNSt3__18ios_baseD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 __ZNSt3__18ios_baseD2Ev(i1);
 __ZdlPv(i1);
 STACKTOP = i2;
 return;
}
function dynCall_viii(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 FUNCTION_TABLE_viii[i1 & 3](i2 | 0, i3 | 0, i4 | 0);
}
function __ZNSt3__18ios_base7failureD2Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 __ZNSt3__112system_errorD2Ev(i1);
 STACKTOP = i2;
 return;
}
function __ZNSt9bad_allocD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 __ZNSt9exceptionD2Ev(i1 | 0);
 __ZdlPv(i1);
 STACKTOP = i2;
 return;
}
function b7(i1, i2, i3, i4, i5, i6, d7) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 d7 = +d7;
 abort(7);
}
function __ZNSt8bad_castD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 __ZNSt9exceptionD2Ev(i1 | 0);
 __ZdlPv(i1);
 STACKTOP = i2;
 return;
}
function stackAlloc(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + i1 | 0;
 STACKTOP = STACKTOP + 7 & -8;
 return i2 | 0;
}
function _scalbnl(d1, i2) {
 d1 = +d1;
 i2 = i2 | 0;
 var i3 = 0, d4 = 0.0;
 i3 = STACKTOP;
 d4 = +_scalbn(d1, i2);
 STACKTOP = i3;
 return +d4;
}
function __ZNKSt3__15ctypeIwE9do_narrowEwc(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 return (i2 >>> 0 < 128 ? i2 & 255 : i3) | 0;
}
function __ZNSt3__112system_errorD2Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 __ZNSt13runtime_errorD2Ev(i1);
 STACKTOP = i2;
 return;
}
function __ZNKSt3__15ctypeIcE9do_narrowEcc(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 return (i2 << 24 >> 24 > -1 ? i2 : i3) | 0;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6setbufEPwi(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 return i1 | 0;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6setbufEPci(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 return i1 | 0;
}
function __ZN10__cxxabiv121__vmi_class_type_infoD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 __ZdlPv(i1);
 STACKTOP = i2;
 return;
}
function __ZN10__cxxabiv120__si_class_type_infoD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 __ZdlPv(i1);
 STACKTOP = i2;
 return;
}
function __ZNSt3__17codecvtIDsc11__mbstate_tED0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 __ZdlPv(i1);
 STACKTOP = i2;
 return;
}
function __ZNSt3__17codecvtIDic11__mbstate_tED0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 __ZdlPv(i1);
 STACKTOP = i2;
 return;
}
function __ZNSt3__117__widen_from_utf8ILj32EED0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 __ZdlPv(i1);
 STACKTOP = i2;
 return;
}
function __ZNSt3__17codecvtIcc11__mbstate_tED0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 __ZdlPv(i1);
 STACKTOP = i2;
 return;
}
function __ZNSt3__116__narrow_to_utf8ILj32EED0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 __ZdlPv(i1);
 STACKTOP = i2;
 return;
}
function __ZN10__cxxabiv117__class_type_infoD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 __ZdlPv(i1);
 STACKTOP = i2;
 return;
}
function b14(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 abort(14);
}
function __ZNSt9bad_allocD2Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 __ZNSt9exceptionD2Ev(i1 | 0);
 STACKTOP = i2;
 return;
}
function dynCall_iii(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 return FUNCTION_TABLE_iii[i1 & 31](i2 | 0, i3 | 0) | 0;
}
function __ZNSt8bad_castD2Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 __ZNSt9exceptionD2Ev(i1 | 0);
 STACKTOP = i2;
 return;
}
function __ZNSt3__119__iostream_categoryD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 __ZdlPv(i1);
 STACKTOP = i2;
 return;
}
function __ZNSt3__110moneypunctIwLb1EED0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 __ZdlPv(i1);
 STACKTOP = i2;
 return;
}
function __ZNSt3__110moneypunctIwLb0EED0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 __ZdlPv(i1);
 STACKTOP = i2;
 return;
}
function __ZNSt3__110moneypunctIcLb1EED0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 __ZdlPv(i1);
 STACKTOP = i2;
 return;
}
function __ZNSt3__110moneypunctIcLb0EED0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 __ZdlPv(i1);
 STACKTOP = i2;
 return;
}
function b9(i1, i2, i3, i4, i5, d6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 d6 = +d6;
 abort(9);
}
function __ZdlPv(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 if ((i1 | 0) != 0) {
  _free(i1);
 }
 STACKTOP = i2;
 return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13do_date_orderEv(i1) {
 i1 = i1 | 0;
 return 2;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13do_date_orderEv(i1) {
 i1 = i1 | 0;
 return 2;
}
function b16(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 abort(16);
 return 0;
}
function _strlen(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = i1;
 while (HEAP8[i2] | 0) {
  i2 = i2 + 1 | 0;
 }
 return i2 - i1 | 0;
}
function __Znaj(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 i3 = __Znwj(i1) | 0;
 STACKTOP = i2;
 return i3 | 0;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE5imbueERKNS_6localeE(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return;
}
function setThrew(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 if ((__THREW__ | 0) == 0) {
  __THREW__ = i1;
  threwValue = i2;
 }
}
function __ZNSt3__16locale5facetD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 __ZdlPv(i1);
 STACKTOP = i2;
 return;
}
function __ZNSt3__18messagesIwED0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 __ZdlPv(i1);
 STACKTOP = i2;
 return;
}
function __ZNSt3__18messagesIcED0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 __ZdlPv(i1);
 STACKTOP = i2;
 return;
}
function dynCall_vii(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 FUNCTION_TABLE_vii[i1 & 63](i2 | 0, i3 | 0);
}
function __ZNSt3__17collateIwED0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 __ZdlPv(i1);
 STACKTOP = i2;
 return;
}
function __ZNSt3__17collateIcED0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 __ZdlPv(i1);
 STACKTOP = i2;
 return;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9pbackfailEj(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return -1;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9pbackfailEi(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return -1;
}
function __ZNSt3__15ctypeIwED0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 __ZdlPv(i1);
 STACKTOP = i2;
 return;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE8overflowEj(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return -1;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE8overflowEi(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return -1;
}
function b2(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 abort(2);
}
function __ZNSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev(i1) {
 i1 = i1 | 0;
 return;
}
function __ZNSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev(i1) {
 i1 = i1 | 0;
 return;
}
function __ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev(i1) {
 i1 = i1 | 0;
 return;
}
function __ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev(i1) {
 i1 = i1 | 0;
 return;
}
function __ZNSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev(i1) {
 i1 = i1 | 0;
 return;
}
function __ZNSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev(i1) {
 i1 = i1 | 0;
 return;
}
function __ZNSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev(i1) {
 i1 = i1 | 0;
 return;
}
function __ZNSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev(i1) {
 i1 = i1 | 0;
 return;
}
function __ZNSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev(i1) {
 i1 = i1 | 0;
 return;
}
function __ZNSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev(i1) {
 i1 = i1 | 0;
 return;
}
function b12(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 abort(12);
 return 0;
}
function dynCall_ii(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return FUNCTION_TABLE_ii[i1 & 127](i2 | 0) | 0;
}
function ___clang_call_terminate(i1) {
 i1 = i1 | 0;
 ___cxa_begin_catch(i1 | 0) | 0;
 __ZSt9terminatev();
}
function __ZNKSt3__18numpunctIwE16do_thousands_sepEv(i1) {
 i1 = i1 | 0;
 return HEAP32[i1 + 12 >> 2] | 0;
}
function __ZNKSt3__15ctypeIwE8do_widenEc(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return i2 << 24 >> 24 | 0;
}
function __ZNKSt3__18numpunctIwE16do_decimal_pointEv(i1) {
 i1 = i1 | 0;
 return HEAP32[i1 + 8 >> 2] | 0;
}
function __ZdaPv(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 __ZdlPv(i1);
 STACKTOP = i2;
 return;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9underflowEv(i1) {
 i1 = i1 | 0;
 return -1;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9underflowEv(i1) {
 i1 = i1 | 0;
 return -1;
}
function __ZNKSt3__18numpunctIcE16do_thousands_sepEv(i1) {
 i1 = i1 | 0;
 return HEAP8[i1 + 9 | 0] | 0;
}
function __ZNKSt3__18numpunctIcE16do_decimal_pointEv(i1) {
 i1 = i1 | 0;
 return HEAP8[i1 + 8 | 0] | 0;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9showmanycEv(i1) {
 i1 = i1 | 0;
 return 0;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9showmanycEv(i1) {
 i1 = i1 | 0;
 return 0;
}
function __ZNKSt3__110moneypunctIwLb1EE16do_thousands_sepEv(i1) {
 i1 = i1 | 0;
 return 2147483647;
}
function __ZNKSt3__110moneypunctIwLb1EE16do_decimal_pointEv(i1) {
 i1 = i1 | 0;
 return 2147483647;
}
function __ZNKSt3__110moneypunctIwLb0EE16do_thousands_sepEv(i1) {
 i1 = i1 | 0;
 return 2147483647;
}
function __ZNKSt3__110moneypunctIwLb0EE16do_decimal_pointEv(i1) {
 i1 = i1 | 0;
 return 2147483647;
}
function b17(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 abort(17);
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE4syncEv(i1) {
 i1 = i1 | 0;
 return 0;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE4syncEv(i1) {
 i1 = i1 | 0;
 return 0;
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE16do_always_noconvEv(i1) {
 i1 = i1 | 0;
 return 0;
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE16do_always_noconvEv(i1) {
 i1 = i1 | 0;
 return 0;
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE16do_always_noconvEv(i1) {
 i1 = i1 | 0;
 return 0;
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE16do_always_noconvEv(i1) {
 i1 = i1 | 0;
 return 1;
}
function dynCall_vi(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 FUNCTION_TABLE_vi[i1 & 255](i2 | 0);
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE13do_max_lengthEv(i1) {
 i1 = i1 | 0;
 return 4;
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE13do_max_lengthEv(i1) {
 i1 = i1 | 0;
 return 4;
}
function __ZNKSt3__15ctypeIcE8do_widenEc(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return i2 | 0;
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE13do_max_lengthEv(i1) {
 i1 = i1 | 0;
 return 1;
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE11do_encodingEv(i1) {
 i1 = i1 | 0;
 return 0;
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE11do_encodingEv(i1) {
 i1 = i1 | 0;
 return 0;
}
function __ZNKSt3__110moneypunctIcLb1EE16do_thousands_sepEv(i1) {
 i1 = i1 | 0;
 return 127;
}
function __ZNKSt3__110moneypunctIcLb1EE16do_decimal_pointEv(i1) {
 i1 = i1 | 0;
 return 127;
}
function __ZNKSt3__110moneypunctIcLb0EE16do_thousands_sepEv(i1) {
 i1 = i1 | 0;
 return 127;
}
function __ZNKSt3__110moneypunctIcLb0EE16do_decimal_pointEv(i1) {
 i1 = i1 | 0;
 return 127;
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE11do_encodingEv(i1) {
 i1 = i1 | 0;
 return 1;
}
function __ZNKSt13runtime_error4whatEv(i1) {
 i1 = i1 | 0;
 return HEAP32[i1 + 4 >> 2] | 0;
}
function b0(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 abort(0);
 return 0;
}
function __ZNKSt11logic_error4whatEv(i1) {
 i1 = i1 | 0;
 return HEAP32[i1 + 4 >> 2] | 0;
}
function __ZNKSt3__110moneypunctIwLb1EE14do_frac_digitsEv(i1) {
 i1 = i1 | 0;
 return 0;
}
function __ZNKSt3__110moneypunctIwLb0EE14do_frac_digitsEv(i1) {
 i1 = i1 | 0;
 return 0;
}
function __ZNKSt3__110moneypunctIcLb1EE14do_frac_digitsEv(i1) {
 i1 = i1 | 0;
 return 0;
}
function __ZNKSt3__110moneypunctIcLb0EE14do_frac_digitsEv(i1) {
 i1 = i1 | 0;
 return 0;
}
function __ZNSt8bad_castC2Ev(i1) {
 i1 = i1 | 0;
 HEAP32[i1 >> 2] = 13720;
 return;
}
function __ZNKSt3__119__iostream_category4nameEv(i1) {
 i1 = i1 | 0;
 return 3384;
}
function __ZNK10__cxxabiv116__shim_type_info5noop2Ev(i1) {
 i1 = i1 | 0;
 return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop1Ev(i1) {
 i1 = i1 | 0;
 return;
}
function b8(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 abort(8);
}
function __ZN10__cxxabiv116__shim_type_infoD2Ev(i1) {
 i1 = i1 | 0;
 return;
}
function b15(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 abort(15);
 return 0;
}
function __ZNSt3__119__iostream_categoryD1Ev(i1) {
 i1 = i1 | 0;
 return;
}
function __ZNSt3__110moneypunctIwLb1EED1Ev(i1) {
 i1 = i1 | 0;
 return;
}
function __ZNSt3__110moneypunctIwLb0EED1Ev(i1) {
 i1 = i1 | 0;
 return;
}
function __ZNSt3__110moneypunctIcLb1EED1Ev(i1) {
 i1 = i1 | 0;
 return;
}
function __ZNSt3__110moneypunctIcLb0EED1Ev(i1) {
 i1 = i1 | 0;
 return;
}
function __ZNSt3__114error_categoryD2Ev(i1) {
 i1 = i1 | 0;
 return;
}
function __ZNSt3__114__shared_countD2Ev(i1) {
 i1 = i1 | 0;
 return;
}
function __ZNKSt9bad_alloc4whatEv(i1) {
 i1 = i1 | 0;
 return 14680;
}
function dynCall_v(i1) {
 i1 = i1 | 0;
 FUNCTION_TABLE_v[i1 & 0]();
}
function __ZNKSt8bad_cast4whatEv(i1) {
 i1 = i1 | 0;
 return 13736;
}
function __ZNSt3__16locale5facetD2Ev(i1) {
 i1 = i1 | 0;
 return;
}
function __ZNSt3__112__do_nothingEPv(i1) {
 i1 = i1 | 0;
 return;
}
function __ZNSt3__18messagesIwED1Ev(i1) {
 i1 = i1 | 0;
 return;
}
function __ZNSt3__18messagesIcED1Ev(i1) {
 i1 = i1 | 0;
 return;
}
function __ZNSt3__17collateIwED1Ev(i1) {
 i1 = i1 | 0;
 return;
}
function __ZNSt3__17collateIcED1Ev(i1) {
 i1 = i1 | 0;
 return;
}
function b4(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 abort(4);
}
function __ZNSt9type_infoD2Ev(i1) {
 i1 = i1 | 0;
 return;
}
function stackRestore(i1) {
 i1 = i1 | 0;
 STACKTOP = i1;
}
function setTempRet9(i1) {
 i1 = i1 | 0;
 tempRet9 = i1;
}
function setTempRet8(i1) {
 i1 = i1 | 0;
 tempRet8 = i1;
}
function setTempRet7(i1) {
 i1 = i1 | 0;
 tempRet7 = i1;
}
function setTempRet6(i1) {
 i1 = i1 | 0;
 tempRet6 = i1;
}
function setTempRet5(i1) {
 i1 = i1 | 0;
 tempRet5 = i1;
}
function setTempRet4(i1) {
 i1 = i1 | 0;
 tempRet4 = i1;
}
function setTempRet3(i1) {
 i1 = i1 | 0;
 tempRet3 = i1;
}
function setTempRet2(i1) {
 i1 = i1 | 0;
 tempRet2 = i1;
}
function setTempRet1(i1) {
 i1 = i1 | 0;
 tempRet1 = i1;
}
function setTempRet0(i1) {
 i1 = i1 | 0;
 tempRet0 = i1;
}
function b6(i1) {
 i1 = i1 | 0;
 abort(6);
 return 0;
}
function _rand() {
 return _rand_r(___rand_seed) | 0;
}
function stackSave() {
 return STACKTOP | 0;
}
function b3(i1) {
 i1 = i1 | 0;
 abort(3);
}
function b10() {
 abort(10);
}

// EMSCRIPTEN_END_FUNCS
  var FUNCTION_TABLE_iiii = [b0,__ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE6setbufEPci,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsgetnEPci,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsputnEPKci,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6setbufEPwi,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6xsgetnEPwi,__ZNSt3__111__stdoutbufIwE6xsputnEPKwi,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6xsputnEPKwi,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6setbufEPci,__ZNSt3__111__stdoutbufIcE6xsputnEPKci,__ZNKSt3__114error_category10equivalentEiRKNS_15error_conditionE,__ZNKSt3__114error_category10equivalentERKNS_10error_codeEi,__ZNKSt3__17collateIcE7do_hashEPKcS3_,__ZNKSt3__17collateIwE7do_hashEPKwS3_,__ZNKSt3__18messagesIcE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE,__ZNKSt3__18messagesIwE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE,__ZNKSt3__15ctypeIcE10do_toupperEPcPKc,__ZNKSt3__15ctypeIcE10do_tolowerEPcPKc,__ZNKSt3__15ctypeIcE9do_narrowEcc,__ZNKSt3__15ctypeIwE5do_isEtw,__ZNKSt3__15ctypeIwE10do_toupperEPwPKw,__ZNKSt3__15ctypeIwE10do_tolowerEPwPKw,__ZNKSt3__15ctypeIwE9do_narrowEwc,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv,b0,b0,b0,b0,b0
  ,b0,b0,b0];
  var FUNCTION_TABLE_viiiiiii = [b1,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRb,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRl,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRx,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRt,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRm,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRy,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRf,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRd,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRe,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRb,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRl,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRx,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRt,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRm,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRy,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRf,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRd,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRe,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcx,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcy,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwx,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwy,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm
  ,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEcRKNS_12basic_stringIcS3_NS_9allocatorIcEEEE,__ZNKSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwRKNS_12basic_stringIwS3_NS_9allocatorIwEEEE,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1];
  var FUNCTION_TABLE_viiiii = [b2,__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib];
  var FUNCTION_TABLE_vi = [b3,__ZNSt3__114basic_ifstreamIcNS_11char_traitsIcEEED1Ev,__ZNSt3__114basic_ifstreamIcNS_11char_traitsIcEEED0Ev,__ZTv0_n12_NSt3__114basic_ifstreamIcNS_11char_traitsIcEEED1Ev,__ZTv0_n12_NSt3__114basic_ifstreamIcNS_11char_traitsIcEEED0Ev,__ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev,__ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev,__ZTv0_n12_NSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev,__ZTv0_n12_NSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev,__ZNSt3__113basic_filebufIcNS_11char_traitsIcEEED1Ev,__ZNSt3__113basic_filebufIcNS_11char_traitsIcEEED0Ev,__ZNSt3__111__stdoutbufIwED1Ev,__ZNSt3__111__stdoutbufIwED0Ev,__ZNSt3__110__stdinbufIwED1Ev,__ZNSt3__110__stdinbufIwED0Ev,__ZNSt3__111__stdoutbufIcED1Ev,__ZNSt3__111__stdoutbufIcED0Ev,__ZNSt3__110__stdinbufIcED1Ev,__ZNSt3__110__stdinbufIcED0Ev,__ZNSt11logic_errorD2Ev,__ZNSt11logic_errorD0Ev,__ZNSt13runtime_errorD2Ev,__ZNSt13runtime_errorD0Ev,__ZNSt12length_errorD0Ev,__ZNSt3__112system_errorD2Ev,__ZNSt3__112system_errorD0Ev,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED1Ev,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED0Ev,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED1Ev
  ,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED0Ev,__ZNSt3__113basic_istreamIwNS_11char_traitsIwEEED1Ev,__ZNSt3__113basic_istreamIwNS_11char_traitsIwEEED0Ev,__ZTv0_n12_NSt3__113basic_istreamIwNS_11char_traitsIwEEED1Ev,__ZTv0_n12_NSt3__113basic_istreamIwNS_11char_traitsIwEEED0Ev,__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev,__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev,__ZTv0_n12_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev,__ZTv0_n12_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev,__ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEED1Ev,__ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEED0Ev,__ZTv0_n12_NSt3__113basic_ostreamIwNS_11char_traitsIwEEED1Ev,__ZTv0_n12_NSt3__113basic_ostreamIwNS_11char_traitsIwEEED0Ev,__ZNSt3__18ios_base7failureD2Ev,__ZNSt3__18ios_base7failureD0Ev,__ZNSt3__18ios_baseD2Ev,__ZNSt3__18ios_baseD0Ev,__ZNSt3__119__iostream_categoryD1Ev,__ZNSt3__119__iostream_categoryD0Ev,__ZNSt3__17collateIcED1Ev,__ZNSt3__17collateIcED0Ev,__ZNSt3__16locale5facet16__on_zero_sharedEv,__ZNSt3__17collateIwED1Ev,__ZNSt3__17collateIwED0Ev,__ZNSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev,__ZNSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,__ZNSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,__ZNSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,__ZNSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev,__ZNSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev
  ,__ZNSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,__ZNSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,__ZNSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev,__ZNSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,__ZNSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,__ZNSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,__ZNSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev,__ZNSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,__ZNSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,__ZNSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,__ZNSt3__110moneypunctIcLb0EED1Ev,__ZNSt3__110moneypunctIcLb0EED0Ev,__ZNSt3__110moneypunctIcLb1EED1Ev,__ZNSt3__110moneypunctIcLb1EED0Ev,__ZNSt3__110moneypunctIwLb0EED1Ev,__ZNSt3__110moneypunctIwLb0EED0Ev,__ZNSt3__110moneypunctIwLb1EED1Ev,__ZNSt3__110moneypunctIwLb1EED0Ev,__ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev,__ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,__ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,__ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,__ZNSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev,__ZNSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,__ZNSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,__ZNSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,__ZNSt3__18messagesIcED1Ev,__ZNSt3__18messagesIcED0Ev,__ZNSt3__18messagesIwED1Ev,__ZNSt3__18messagesIwED0Ev
  ,__ZNSt3__16locale5__impD2Ev,__ZNSt3__16locale5__impD0Ev,__ZNSt3__15ctypeIcED2Ev,__ZNSt3__15ctypeIcED0Ev,__ZNSt3__17codecvtIwc11__mbstate_tED2Ev,__ZNSt3__17codecvtIwc11__mbstate_tED0Ev,__ZNSt3__18numpunctIcED2Ev,__ZNSt3__18numpunctIcED0Ev,__ZNSt3__18numpunctIwED2Ev,__ZNSt3__18numpunctIwED0Ev,__ZNSt3__16locale5facetD2Ev,__ZNSt3__16locale5facetD0Ev,__ZNSt3__15ctypeIwED0Ev,__ZNSt3__17codecvtIcc11__mbstate_tED0Ev,__ZNSt3__17codecvtIDsc11__mbstate_tED0Ev,__ZNSt3__17codecvtIDic11__mbstate_tED0Ev,__ZNSt3__116__narrow_to_utf8ILj32EED0Ev,__ZNSt3__117__widen_from_utf8ILj32EED0Ev,__ZNSt8bad_castD2Ev,__ZNSt8bad_castD0Ev,__ZN10__cxxabiv116__shim_type_infoD2Ev,__ZN10__cxxabiv117__class_type_infoD0Ev,__ZNK10__cxxabiv116__shim_type_info5noop1Ev,__ZNK10__cxxabiv116__shim_type_info5noop2Ev,__ZN10__cxxabiv120__si_class_type_infoD0Ev,__ZN10__cxxabiv121__vmi_class_type_infoD0Ev,__ZNSt9bad_allocD2Ev,__ZNSt9bad_allocD0Ev,__ZNSt3__18ios_base4InitD2Ev,__ZNSt3__16locale2id6__initEv
  ,__ZNSt3__117__call_once_proxyINS_5tupleIJNS_12_GLOBAL__N_111__fake_bindEEEEEEvPv,__ZNSt3__112__do_nothingEPv,_free,___cxx_global_array_dtor120,___cxx_global_array_dtor105,___cxx_global_array_dtor81,___cxx_global_array_dtor56,___cxx_global_array_dtor53,___cxx_global_array_dtor,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev,__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3];
  var FUNCTION_TABLE_vii = [b4,__ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE,__ZNSt3__111__stdoutbufIwE5imbueERKNS_6localeE,__ZNSt3__110__stdinbufIwE5imbueERKNS_6localeE,__ZNSt3__111__stdoutbufIcE5imbueERKNS_6localeE,__ZNSt3__110__stdinbufIcE5imbueERKNS_6localeE,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE5imbueERKNS_6localeE,__ZNKSt3__110moneypunctIcLb0EE11do_groupingEv,__ZNKSt3__110moneypunctIcLb0EE14do_curr_symbolEv,__ZNKSt3__110moneypunctIcLb0EE16do_positive_signEv,__ZNKSt3__110moneypunctIcLb0EE16do_negative_signEv,__ZNKSt3__110moneypunctIcLb0EE13do_pos_formatEv,__ZNKSt3__110moneypunctIcLb0EE13do_neg_formatEv,__ZNKSt3__110moneypunctIcLb1EE11do_groupingEv,__ZNKSt3__110moneypunctIcLb1EE14do_curr_symbolEv,__ZNKSt3__110moneypunctIcLb1EE16do_positive_signEv,__ZNKSt3__110moneypunctIcLb1EE16do_negative_signEv,__ZNKSt3__110moneypunctIcLb1EE13do_pos_formatEv,__ZNKSt3__110moneypunctIcLb1EE13do_neg_formatEv,__ZNKSt3__110moneypunctIwLb0EE11do_groupingEv,__ZNKSt3__110moneypunctIwLb0EE14do_curr_symbolEv,__ZNKSt3__110moneypunctIwLb0EE16do_positive_signEv,__ZNKSt3__110moneypunctIwLb0EE16do_negative_signEv,__ZNKSt3__110moneypunctIwLb0EE13do_pos_formatEv,__ZNKSt3__110moneypunctIwLb0EE13do_neg_formatEv,__ZNKSt3__110moneypunctIwLb1EE11do_groupingEv,__ZNKSt3__110moneypunctIwLb1EE14do_curr_symbolEv,__ZNKSt3__110moneypunctIwLb1EE16do_positive_signEv
  ,__ZNKSt3__110moneypunctIwLb1EE16do_negative_signEv,__ZNKSt3__110moneypunctIwLb1EE13do_pos_formatEv,__ZNKSt3__110moneypunctIwLb1EE13do_neg_formatEv,__ZNKSt3__18messagesIcE8do_closeEi,__ZNKSt3__18messagesIwE8do_closeEi,__ZNKSt3__18numpunctIcE11do_groupingEv,__ZNKSt3__18numpunctIcE11do_truenameEv,__ZNKSt3__18numpunctIcE12do_falsenameEv,__ZNKSt3__18numpunctIwE11do_groupingEv,__ZNKSt3__18numpunctIwE11do_truenameEv,__ZNKSt3__18numpunctIwE12do_falsenameEv,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4];
  var FUNCTION_TABLE_viiiiiiiii = [b5,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc,b5];
  var FUNCTION_TABLE_ii = [b6,__ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE4syncEv,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9showmanycEv,__ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE9underflowEv,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5uflowEv,__ZNSt3__111__stdoutbufIwE4syncEv,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9showmanycEv,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9underflowEv,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE5uflowEv,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE4syncEv,__ZNSt3__110__stdinbufIwE9underflowEv,__ZNSt3__110__stdinbufIwE5uflowEv,__ZNSt3__111__stdoutbufIcE4syncEv,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9underflowEv,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE4syncEv,__ZNSt3__110__stdinbufIcE9underflowEv,__ZNSt3__110__stdinbufIcE5uflowEv,__ZNKSt11logic_error4whatEv,__ZNKSt13runtime_error4whatEv,__ZNKSt3__119__iostream_category4nameEv,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13do_date_orderEv,__ZNKSt3__120__time_get_c_storageIcE7__weeksEv,__ZNKSt3__120__time_get_c_storageIcE8__monthsEv,__ZNKSt3__120__time_get_c_storageIcE7__am_pmEv,__ZNKSt3__120__time_get_c_storageIcE3__cEv,__ZNKSt3__120__time_get_c_storageIcE3__rEv,__ZNKSt3__120__time_get_c_storageIcE3__xEv,__ZNKSt3__120__time_get_c_storageIcE3__XEv,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13do_date_orderEv
  ,__ZNKSt3__120__time_get_c_storageIwE7__weeksEv,__ZNKSt3__120__time_get_c_storageIwE8__monthsEv,__ZNKSt3__120__time_get_c_storageIwE7__am_pmEv,__ZNKSt3__120__time_get_c_storageIwE3__cEv,__ZNKSt3__120__time_get_c_storageIwE3__rEv,__ZNKSt3__120__time_get_c_storageIwE3__xEv,__ZNKSt3__120__time_get_c_storageIwE3__XEv,__ZNKSt3__110moneypunctIcLb0EE16do_decimal_pointEv,__ZNKSt3__110moneypunctIcLb0EE16do_thousands_sepEv,__ZNKSt3__110moneypunctIcLb0EE14do_frac_digitsEv,__ZNKSt3__110moneypunctIcLb1EE16do_decimal_pointEv,__ZNKSt3__110moneypunctIcLb1EE16do_thousands_sepEv,__ZNKSt3__110moneypunctIcLb1EE14do_frac_digitsEv,__ZNKSt3__110moneypunctIwLb0EE16do_decimal_pointEv,__ZNKSt3__110moneypunctIwLb0EE16do_thousands_sepEv,__ZNKSt3__110moneypunctIwLb0EE14do_frac_digitsEv,__ZNKSt3__110moneypunctIwLb1EE16do_decimal_pointEv,__ZNKSt3__110moneypunctIwLb1EE16do_thousands_sepEv,__ZNKSt3__110moneypunctIwLb1EE14do_frac_digitsEv,__ZNKSt3__17codecvtIwc11__mbstate_tE11do_encodingEv,__ZNKSt3__17codecvtIwc11__mbstate_tE16do_always_noconvEv,__ZNKSt3__17codecvtIwc11__mbstate_tE13do_max_lengthEv,__ZNKSt3__18numpunctIcE16do_decimal_pointEv,__ZNKSt3__18numpunctIcE16do_thousands_sepEv,__ZNKSt3__18numpunctIwE16do_decimal_pointEv,__ZNKSt3__18numpunctIwE16do_thousands_sepEv,__ZNKSt3__17codecvtIcc11__mbstate_tE11do_encodingEv,__ZNKSt3__17codecvtIcc11__mbstate_tE16do_always_noconvEv,__ZNKSt3__17codecvtIcc11__mbstate_tE13do_max_lengthEv,__ZNKSt3__17codecvtIDsc11__mbstate_tE11do_encodingEv
  ,__ZNKSt3__17codecvtIDsc11__mbstate_tE16do_always_noconvEv,__ZNKSt3__17codecvtIDsc11__mbstate_tE13do_max_lengthEv,__ZNKSt3__17codecvtIDic11__mbstate_tE11do_encodingEv,__ZNKSt3__17codecvtIDic11__mbstate_tE16do_always_noconvEv,__ZNKSt3__17codecvtIDic11__mbstate_tE13do_max_lengthEv,__ZNKSt8bad_cast4whatEv,__ZNKSt9bad_alloc4whatEv,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6];
  var FUNCTION_TABLE_viiiiiid = [b7,__ZNKSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEce,__ZNKSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwe,b7];
  var FUNCTION_TABLE_viii = [b8,__ZNKSt3__114error_category23default_error_conditionEi,__ZNKSt3__119__iostream_category7messageEi,b8];
  var FUNCTION_TABLE_viiiiid = [b9,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcd,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEce,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwd,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwe,b9,b9,b9];
  var FUNCTION_TABLE_v = [b10];
  var FUNCTION_TABLE_iiiiiiiii = [b11,__ZNKSt3__17codecvtIwc11__mbstate_tE6do_outERS1_PKwS5_RS5_PcS7_RS7_,__ZNKSt3__17codecvtIwc11__mbstate_tE5do_inERS1_PKcS5_RS5_PwS7_RS7_,__ZNKSt3__17codecvtIcc11__mbstate_tE6do_outERS1_PKcS5_RS5_PcS7_RS7_,__ZNKSt3__17codecvtIcc11__mbstate_tE5do_inERS1_PKcS5_RS5_PcS7_RS7_,__ZNKSt3__17codecvtIDsc11__mbstate_tE6do_outERS1_PKDsS5_RS5_PcS7_RS7_,__ZNKSt3__17codecvtIDsc11__mbstate_tE5do_inERS1_PKcS5_RS5_PDsS7_RS7_,__ZNKSt3__17codecvtIDic11__mbstate_tE6do_outERS1_PKDiS5_RS5_PcS7_RS7_,__ZNKSt3__17codecvtIDic11__mbstate_tE5do_inERS1_PKcS5_RS5_PDiS7_RS7_,b11,b11,b11,b11,b11,b11,b11];
  var FUNCTION_TABLE_iiiii = [b12,__ZNKSt3__15ctypeIcE8do_widenEPKcS3_Pc,__ZNKSt3__15ctypeIwE5do_isEPKwS3_Pt,__ZNKSt3__15ctypeIwE10do_scan_isEtPKwS3_,__ZNKSt3__15ctypeIwE11do_scan_notEtPKwS3_,__ZNKSt3__15ctypeIwE8do_widenEPKcS3_Pw,__Z25MultMatrixBasicPreprocessiPPiS0_S0_,__Z8StrasseniPPiS0_S0_];
  var FUNCTION_TABLE_viiiiiiii = [b13,__ZNKSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPK2tmcc,__ZNKSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPK2tmcc,__ZNKSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe,__ZNKSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIcS3_NS_9allocatorIcEEEE,__ZNKSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe,__ZNKSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIwS3_NS_9allocatorIwEEEE,b13];
  var FUNCTION_TABLE_viiiiii = [b14,__ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE7seekoffExNS_8ios_base7seekdirEj,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcb,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcl,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcm,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPKv,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwb,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwl,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwm,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPKv,__ZNKSt3__18messagesIcE6do_getEiiiRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE,__ZNKSt3__18messagesIwE6do_getEiiiRKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEE,__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14];
  var FUNCTION_TABLE_iii = [b15,__ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE9pbackfailEi,__ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE8overflowEi,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9pbackfailEj,__ZNSt3__111__stdoutbufIwE8overflowEj,__ZNSt3__110__stdinbufIwE9pbackfailEj,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE8overflowEj,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9pbackfailEi,__ZNSt3__111__stdoutbufIcE8overflowEi,__ZNSt3__110__stdinbufIcE9pbackfailEi,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE8overflowEi,__ZNKSt3__15ctypeIcE10do_toupperEc,__ZNKSt3__15ctypeIcE10do_tolowerEc,__ZNKSt3__15ctypeIcE8do_widenEc,__ZNKSt3__15ctypeIwE10do_toupperEw,__ZNKSt3__15ctypeIwE10do_tolowerEw,__ZNKSt3__15ctypeIwE8do_widenEc,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
  ,b15,b15,b15];
  var FUNCTION_TABLE_iiiiii = [b16,__ZNKSt3__17collateIcE10do_compareEPKcS3_S3_S3_,__ZNKSt3__17collateIwE10do_compareEPKwS3_S3_S3_,__ZNKSt3__15ctypeIcE9do_narrowEPKcS3_cPc,__ZNKSt3__17codecvtIwc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,__ZNKSt3__17codecvtIwc11__mbstate_tE9do_lengthERS1_PKcS5_j,__ZNKSt3__15ctypeIwE9do_narrowEPKwS3_cPc,__ZNKSt3__17codecvtIcc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,__ZNKSt3__17codecvtIcc11__mbstate_tE9do_lengthERS1_PKcS5_j,__ZNKSt3__17codecvtIDsc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,__ZNKSt3__17codecvtIDsc11__mbstate_tE9do_lengthERS1_PKcS5_j,__ZNKSt3__17codecvtIDic11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,__ZNKSt3__17codecvtIDic11__mbstate_tE9do_lengthERS1_PKcS5_j,b16,b16,b16];
  var FUNCTION_TABLE_viiii = [b17,__ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE7seekposENS_4fposI11__mbstate_tEEj,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj,__ZNKSt3__17collateIcE12do_transformEPKcS3_,__ZNKSt3__17collateIwE12do_transformEPKwS3_,__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b17,b17,b17,b17,b17,b17,b17];

  return { _i64Subtract: _i64Subtract, _free: _free, _main: _main, _rand_r: _rand_r, _realloc: _realloc, _i64Add: _i64Add, _memmove: _memmove, _memset: _memset, _malloc: _malloc, _memcpy: _memcpy, _strlen: _strlen, _rand: _rand, _bitshift64Shl: _bitshift64Shl, __GLOBAL__I_a: __GLOBAL__I_a, runPostSets: runPostSets, stackAlloc: stackAlloc, stackSave: stackSave, stackRestore: stackRestore, setThrew: setThrew, setTempRet0: setTempRet0, setTempRet1: setTempRet1, setTempRet2: setTempRet2, setTempRet3: setTempRet3, setTempRet4: setTempRet4, setTempRet5: setTempRet5, setTempRet6: setTempRet6, setTempRet7: setTempRet7, setTempRet8: setTempRet8, setTempRet9: setTempRet9, dynCall_iiii: dynCall_iiii, dynCall_viiiiiii: dynCall_viiiiiii, dynCall_viiiii: dynCall_viiiii, dynCall_vi: dynCall_vi, dynCall_vii: dynCall_vii, dynCall_viiiiiiiii: dynCall_viiiiiiiii, dynCall_ii: dynCall_ii, dynCall_viiiiiid: dynCall_viiiiiid, dynCall_viii: dynCall_viii, dynCall_viiiiid: dynCall_viiiiid, dynCall_v: dynCall_v, dynCall_iiiiiiiii: dynCall_iiiiiiiii, dynCall_iiiii: dynCall_iiiii, dynCall_viiiiiiii: dynCall_viiiiiiii, dynCall_viiiiii: dynCall_viiiiii, dynCall_iii: dynCall_iii, dynCall_iiiiii: dynCall_iiiiii, dynCall_viiii: dynCall_viiii };
})
// EMSCRIPTEN_END_ASM
({ "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array }, { "abort": abort, "assert": assert, "asmPrintInt": asmPrintInt, "asmPrintFloat": asmPrintFloat, "min": Math_min, "invoke_iiii": invoke_iiii, "invoke_viiiiiii": invoke_viiiiiii, "invoke_viiiii": invoke_viiiii, "invoke_vi": invoke_vi, "invoke_vii": invoke_vii, "invoke_viiiiiiiii": invoke_viiiiiiiii, "invoke_ii": invoke_ii, "invoke_viiiiiid": invoke_viiiiiid, "invoke_viii": invoke_viii, "invoke_viiiiid": invoke_viiiiid, "invoke_v": invoke_v, "invoke_iiiiiiiii": invoke_iiiiiiiii, "invoke_iiiii": invoke_iiiii, "invoke_viiiiiiii": invoke_viiiiiiii, "invoke_viiiiii": invoke_viiiiii, "invoke_iii": invoke_iii, "invoke_iiiiii": invoke_iiiiii, "invoke_viiii": invoke_viiii, "_fabs": _fabs, "_vsscanf": _vsscanf, "__ZSt9terminatev": __ZSt9terminatev, "___cxa_guard_acquire": ___cxa_guard_acquire, "_sscanf": _sscanf, "__ZSt18uncaught_exceptionv": __ZSt18uncaught_exceptionv, "___ctype_toupper_loc": ___ctype_toupper_loc, "__addDays": __addDays, "_fsync": _fsync, "_sbrk": _sbrk, "___cxa_begin_catch": ___cxa_begin_catch, "_emscripten_memcpy_big": _emscripten_memcpy_big, "_sysconf": _sysconf, "_close": _close, "_clock": _clock, "_fileno": _fileno, "_fread": _fread, "_puts": _puts, "_write": _write, "__isLeapYear": __isLeapYear, "_ftell": _ftell, "__ZNSt9exceptionD2Ev": __ZNSt9exceptionD2Ev, "___cxa_does_inherit": ___cxa_does_inherit, "__exit": __exit, "___cxa_rethrow": ___cxa_rethrow, "_catclose": _catclose, "_send": _send, "___cxa_is_number_type": ___cxa_is_number_type, "___cxa_free_exception": ___cxa_free_exception, "___cxa_find_matching_catch": ___cxa_find_matching_catch, "_isxdigit_l": _isxdigit_l, "___cxa_guard_release": ___cxa_guard_release, "_strerror_r": _strerror_r, "___setErrNo": ___setErrNo, "_newlocale": _newlocale, "_isdigit_l": _isdigit_l, "___resumeException": ___resumeException, "_freelocale": _freelocale, "_printf": _printf, "_sprintf": _sprintf, "_vasprintf": _vasprintf, "_vsnprintf": _vsnprintf, "_strtoull_l": _strtoull_l, "_read": _read, "_fwrite": _fwrite, "_time": _time, "_pthread_mutex_lock": _pthread_mutex_lock, "_catopen": _catopen, "_exit": _exit, "___ctype_b_loc": ___ctype_b_loc, "_fmod": _fmod, "_lseek": _lseek, "___cxa_allocate_exception": ___cxa_allocate_exception, "_strtoll": _strtoll, "_pwrite": _pwrite, "_open": _open, "_uselocale": _uselocale, "_snprintf": _snprintf, "__scanString": __scanString, "___cxa_end_catch": ___cxa_end_catch, "_strtoull": _strtoull, "_strftime": _strftime, "_fseek": _fseek, "_isxdigit": _isxdigit, "_fclose": _fclose, "_pthread_cond_broadcast": _pthread_cond_broadcast, "_recv": _recv, "_fgetc": _fgetc, "__parseInt64": __parseInt64, "__getFloat": __getFloat, "_abort": _abort, "_isspace": _isspace, "_fopen": _fopen, "_pthread_cond_wait": _pthread_cond_wait, "_ungetc": _ungetc, "_fflush": _fflush, "_strftime_l": _strftime_l, "_fprintf": _fprintf, "__reallyNegative": __reallyNegative, "_catgets": _catgets, "_asprintf": _asprintf, "_strtoll_l": _strtoll_l, "__arraySum": __arraySum, "___ctype_tolower_loc": ___ctype_tolower_loc, "_fputs": _fputs, "_pthread_mutex_unlock": _pthread_mutex_unlock, "_pread": _pread, "_mkport": _mkport, "___errno_location": ___errno_location, "_copysign": _copysign, "_fputc": _fputc, "___cxa_throw": ___cxa_throw, "_isdigit": _isdigit, "_strerror": _strerror, "__formatString": __formatString, "_atexit": _atexit, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "cttz_i8": cttz_i8, "ctlz_i8": ctlz_i8, "___rand_seed": ___rand_seed, "NaN": NaN, "Infinity": Infinity, "__ZTISt9exception": __ZTISt9exception, "___dso_handle": ___dso_handle, "_stderr": _stderr, "_stdin": _stdin, "_stdout": _stdout }, buffer);
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _free = Module["_free"] = asm["_free"];
var _main = Module["_main"] = asm["_main"];
var _rand_r = Module["_rand_r"] = asm["_rand_r"];
var _realloc = Module["_realloc"] = asm["_realloc"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _memmove = Module["_memmove"] = asm["_memmove"];
var _memset = Module["_memset"] = asm["_memset"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _strlen = Module["_strlen"] = asm["_strlen"];
var _rand = Module["_rand"] = asm["_rand"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var __GLOBAL__I_a = Module["__GLOBAL__I_a"] = asm["__GLOBAL__I_a"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_viiiiiii = Module["dynCall_viiiiiii"] = asm["dynCall_viiiiiii"];
var dynCall_viiiii = Module["dynCall_viiiii"] = asm["dynCall_viiiii"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_viiiiiiiii = Module["dynCall_viiiiiiiii"] = asm["dynCall_viiiiiiiii"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_viiiiiid = Module["dynCall_viiiiiid"] = asm["dynCall_viiiiiid"];
var dynCall_viii = Module["dynCall_viii"] = asm["dynCall_viii"];
var dynCall_viiiiid = Module["dynCall_viiiiid"] = asm["dynCall_viiiiid"];
var dynCall_v = Module["dynCall_v"] = asm["dynCall_v"];
var dynCall_iiiiiiiii = Module["dynCall_iiiiiiiii"] = asm["dynCall_iiiiiiiii"];
var dynCall_iiiii = Module["dynCall_iiiii"] = asm["dynCall_iiiii"];
var dynCall_viiiiiiii = Module["dynCall_viiiiiiii"] = asm["dynCall_viiiiiiii"];
var dynCall_viiiiii = Module["dynCall_viiiiii"] = asm["dynCall_viiiiii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_iiiiii = Module["dynCall_iiiiii"] = asm["dynCall_iiiiii"];
var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];

Runtime.stackAlloc = function(size) { return asm['stackAlloc'](size) };
Runtime.stackSave = function() { return asm['stackSave']() };
Runtime.stackRestore = function(top) { asm['stackRestore'](top) };


// TODO: strip out parts of this we do not need

//======= begin closure i64 code =======

// Copyright 2009 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Defines a Long class for representing a 64-bit two's-complement
 * integer value, which faithfully simulates the behavior of a Java "long". This
 * implementation is derived from LongLib in GWT.
 *
 */

var i64Math = (function() { // Emscripten wrapper
  var goog = { math: {} };


  /**
   * Constructs a 64-bit two's-complement integer, given its low and high 32-bit
   * values as *signed* integers.  See the from* functions below for more
   * convenient ways of constructing Longs.
   *
   * The internal representation of a long is the two given signed, 32-bit values.
   * We use 32-bit pieces because these are the size of integers on which
   * Javascript performs bit-operations.  For operations like addition and
   * multiplication, we split each number into 16-bit pieces, which can easily be
   * multiplied within Javascript's floating-point representation without overflow
   * or change in sign.
   *
   * In the algorithms below, we frequently reduce the negative case to the
   * positive case by negating the input(s) and then post-processing the result.
   * Note that we must ALWAYS check specially whether those values are MIN_VALUE
   * (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as
   * a positive number, it overflows back into a negative).  Not handling this
   * case would often result in infinite recursion.
   *
   * @param {number} low  The low (signed) 32 bits of the long.
   * @param {number} high  The high (signed) 32 bits of the long.
   * @constructor
   */
  goog.math.Long = function(low, high) {
    /**
     * @type {number}
     * @private
     */
    this.low_ = low | 0;  // force into 32 signed bits.

    /**
     * @type {number}
     * @private
     */
    this.high_ = high | 0;  // force into 32 signed bits.
  };


  // NOTE: Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the
  // from* methods on which they depend.


  /**
   * A cache of the Long representations of small integer values.
   * @type {!Object}
   * @private
   */
  goog.math.Long.IntCache_ = {};


  /**
   * Returns a Long representing the given (32-bit) integer value.
   * @param {number} value The 32-bit integer in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromInt = function(value) {
    if (-128 <= value && value < 128) {
      var cachedObj = goog.math.Long.IntCache_[value];
      if (cachedObj) {
        return cachedObj;
      }
    }

    var obj = new goog.math.Long(value | 0, value < 0 ? -1 : 0);
    if (-128 <= value && value < 128) {
      goog.math.Long.IntCache_[value] = obj;
    }
    return obj;
  };


  /**
   * Returns a Long representing the given value, provided that it is a finite
   * number.  Otherwise, zero is returned.
   * @param {number} value The number in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromNumber = function(value) {
    if (isNaN(value) || !isFinite(value)) {
      return goog.math.Long.ZERO;
    } else if (value <= -goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MIN_VALUE;
    } else if (value + 1 >= goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MAX_VALUE;
    } else if (value < 0) {
      return goog.math.Long.fromNumber(-value).negate();
    } else {
      return new goog.math.Long(
          (value % goog.math.Long.TWO_PWR_32_DBL_) | 0,
          (value / goog.math.Long.TWO_PWR_32_DBL_) | 0);
    }
  };


  /**
   * Returns a Long representing the 64-bit integer that comes by concatenating
   * the given high and low bits.  Each is assumed to use 32 bits.
   * @param {number} lowBits The low 32-bits.
   * @param {number} highBits The high 32-bits.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromBits = function(lowBits, highBits) {
    return new goog.math.Long(lowBits, highBits);
  };


  /**
   * Returns a Long representation of the given string, written using the given
   * radix.
   * @param {string} str The textual representation of the Long.
   * @param {number=} opt_radix The radix in which the text is written.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromString = function(str, opt_radix) {
    if (str.length == 0) {
      throw Error('number format error: empty string');
    }

    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }

    if (str.charAt(0) == '-') {
      return goog.math.Long.fromString(str.substring(1), radix).negate();
    } else if (str.indexOf('-') >= 0) {
      throw Error('number format error: interior "-" character: ' + str);
    }

    // Do several (8) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 8));

    var result = goog.math.Long.ZERO;
    for (var i = 0; i < str.length; i += 8) {
      var size = Math.min(8, str.length - i);
      var value = parseInt(str.substring(i, i + size), radix);
      if (size < 8) {
        var power = goog.math.Long.fromNumber(Math.pow(radix, size));
        result = result.multiply(power).add(goog.math.Long.fromNumber(value));
      } else {
        result = result.multiply(radixToPower);
        result = result.add(goog.math.Long.fromNumber(value));
      }
    }
    return result;
  };


  // NOTE: the compiler should inline these constant values below and then remove
  // these variables, so there should be no runtime penalty for these.


  /**
   * Number used repeated below in calculations.  This must appear before the
   * first call to any from* function below.
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_16_DBL_ = 1 << 16;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_24_DBL_ = 1 << 24;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_32_DBL_ =
      goog.math.Long.TWO_PWR_16_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_31_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ / 2;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_48_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_64_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_32_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_63_DBL_ =
      goog.math.Long.TWO_PWR_64_DBL_ / 2;


  /** @type {!goog.math.Long} */
  goog.math.Long.ZERO = goog.math.Long.fromInt(0);


  /** @type {!goog.math.Long} */
  goog.math.Long.ONE = goog.math.Long.fromInt(1);


  /** @type {!goog.math.Long} */
  goog.math.Long.NEG_ONE = goog.math.Long.fromInt(-1);


  /** @type {!goog.math.Long} */
  goog.math.Long.MAX_VALUE =
      goog.math.Long.fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0);


  /** @type {!goog.math.Long} */
  goog.math.Long.MIN_VALUE = goog.math.Long.fromBits(0, 0x80000000 | 0);


  /**
   * @type {!goog.math.Long}
   * @private
   */
  goog.math.Long.TWO_PWR_24_ = goog.math.Long.fromInt(1 << 24);


  /** @return {number} The value, assuming it is a 32-bit integer. */
  goog.math.Long.prototype.toInt = function() {
    return this.low_;
  };


  /** @return {number} The closest floating-point representation to this value. */
  goog.math.Long.prototype.toNumber = function() {
    return this.high_ * goog.math.Long.TWO_PWR_32_DBL_ +
           this.getLowBitsUnsigned();
  };


  /**
   * @param {number=} opt_radix The radix in which the text should be written.
   * @return {string} The textual representation of this value.
   */
  goog.math.Long.prototype.toString = function(opt_radix) {
    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }

    if (this.isZero()) {
      return '0';
    }

    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        // We need to change the Long value before it can be negated, so we remove
        // the bottom-most digit in this base and then recurse to do the rest.
        var radixLong = goog.math.Long.fromNumber(radix);
        var div = this.div(radixLong);
        var rem = div.multiply(radixLong).subtract(this);
        return div.toString(radix) + rem.toInt().toString(radix);
      } else {
        return '-' + this.negate().toString(radix);
      }
    }

    // Do several (6) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 6));

    var rem = this;
    var result = '';
    while (true) {
      var remDiv = rem.div(radixToPower);
      var intval = rem.subtract(remDiv.multiply(radixToPower)).toInt();
      var digits = intval.toString(radix);

      rem = remDiv;
      if (rem.isZero()) {
        return digits + result;
      } else {
        while (digits.length < 6) {
          digits = '0' + digits;
        }
        result = '' + digits + result;
      }
    }
  };


  /** @return {number} The high 32-bits as a signed value. */
  goog.math.Long.prototype.getHighBits = function() {
    return this.high_;
  };


  /** @return {number} The low 32-bits as a signed value. */
  goog.math.Long.prototype.getLowBits = function() {
    return this.low_;
  };


  /** @return {number} The low 32-bits as an unsigned value. */
  goog.math.Long.prototype.getLowBitsUnsigned = function() {
    return (this.low_ >= 0) ?
        this.low_ : goog.math.Long.TWO_PWR_32_DBL_ + this.low_;
  };


  /**
   * @return {number} Returns the number of bits needed to represent the absolute
   *     value of this Long.
   */
  goog.math.Long.prototype.getNumBitsAbs = function() {
    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        return 64;
      } else {
        return this.negate().getNumBitsAbs();
      }
    } else {
      var val = this.high_ != 0 ? this.high_ : this.low_;
      for (var bit = 31; bit > 0; bit--) {
        if ((val & (1 << bit)) != 0) {
          break;
        }
      }
      return this.high_ != 0 ? bit + 33 : bit + 1;
    }
  };


  /** @return {boolean} Whether this value is zero. */
  goog.math.Long.prototype.isZero = function() {
    return this.high_ == 0 && this.low_ == 0;
  };


  /** @return {boolean} Whether this value is negative. */
  goog.math.Long.prototype.isNegative = function() {
    return this.high_ < 0;
  };


  /** @return {boolean} Whether this value is odd. */
  goog.math.Long.prototype.isOdd = function() {
    return (this.low_ & 1) == 1;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long equals the other.
   */
  goog.math.Long.prototype.equals = function(other) {
    return (this.high_ == other.high_) && (this.low_ == other.low_);
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long does not equal the other.
   */
  goog.math.Long.prototype.notEquals = function(other) {
    return (this.high_ != other.high_) || (this.low_ != other.low_);
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than the other.
   */
  goog.math.Long.prototype.lessThan = function(other) {
    return this.compare(other) < 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than or equal to the other.
   */
  goog.math.Long.prototype.lessThanOrEqual = function(other) {
    return this.compare(other) <= 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than the other.
   */
  goog.math.Long.prototype.greaterThan = function(other) {
    return this.compare(other) > 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than or equal to the other.
   */
  goog.math.Long.prototype.greaterThanOrEqual = function(other) {
    return this.compare(other) >= 0;
  };


  /**
   * Compares this Long with the given one.
   * @param {goog.math.Long} other Long to compare against.
   * @return {number} 0 if they are the same, 1 if the this is greater, and -1
   *     if the given one is greater.
   */
  goog.math.Long.prototype.compare = function(other) {
    if (this.equals(other)) {
      return 0;
    }

    var thisNeg = this.isNegative();
    var otherNeg = other.isNegative();
    if (thisNeg && !otherNeg) {
      return -1;
    }
    if (!thisNeg && otherNeg) {
      return 1;
    }

    // at this point, the signs are the same, so subtraction will not overflow
    if (this.subtract(other).isNegative()) {
      return -1;
    } else {
      return 1;
    }
  };


  /** @return {!goog.math.Long} The negation of this value. */
  goog.math.Long.prototype.negate = function() {
    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.MIN_VALUE;
    } else {
      return this.not().add(goog.math.Long.ONE);
    }
  };


  /**
   * Returns the sum of this and the given Long.
   * @param {goog.math.Long} other Long to add to this one.
   * @return {!goog.math.Long} The sum of this and the given Long.
   */
  goog.math.Long.prototype.add = function(other) {
    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.

    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;

    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 + b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 + b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 + b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 + b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };


  /**
   * Returns the difference of this and the given Long.
   * @param {goog.math.Long} other Long to subtract from this.
   * @return {!goog.math.Long} The difference of this and the given Long.
   */
  goog.math.Long.prototype.subtract = function(other) {
    return this.add(other.negate());
  };


  /**
   * Returns the product of this and the given long.
   * @param {goog.math.Long} other Long to multiply with this.
   * @return {!goog.math.Long} The product of this and the other.
   */
  goog.math.Long.prototype.multiply = function(other) {
    if (this.isZero()) {
      return goog.math.Long.ZERO;
    } else if (other.isZero()) {
      return goog.math.Long.ZERO;
    }

    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return other.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return this.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    }

    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().multiply(other.negate());
      } else {
        return this.negate().multiply(other).negate();
      }
    } else if (other.isNegative()) {
      return this.multiply(other.negate()).negate();
    }

    // If both longs are small, use float multiplication
    if (this.lessThan(goog.math.Long.TWO_PWR_24_) &&
        other.lessThan(goog.math.Long.TWO_PWR_24_)) {
      return goog.math.Long.fromNumber(this.toNumber() * other.toNumber());
    }

    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.
    // We can skip products that would overflow.

    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;

    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 * b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 * b00;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c16 += a00 * b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 * b00;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a16 * b16;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a00 * b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };


  /**
   * Returns this Long divided by the given one.
   * @param {goog.math.Long} other Long by which to divide.
   * @return {!goog.math.Long} This Long divided by the given one.
   */
  goog.math.Long.prototype.div = function(other) {
    if (other.isZero()) {
      throw Error('division by zero');
    } else if (this.isZero()) {
      return goog.math.Long.ZERO;
    }

    if (this.equals(goog.math.Long.MIN_VALUE)) {
      if (other.equals(goog.math.Long.ONE) ||
          other.equals(goog.math.Long.NEG_ONE)) {
        return goog.math.Long.MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE
      } else if (other.equals(goog.math.Long.MIN_VALUE)) {
        return goog.math.Long.ONE;
      } else {
        // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.
        var halfThis = this.shiftRight(1);
        var approx = halfThis.div(other).shiftLeft(1);
        if (approx.equals(goog.math.Long.ZERO)) {
          return other.isNegative() ? goog.math.Long.ONE : goog.math.Long.NEG_ONE;
        } else {
          var rem = this.subtract(other.multiply(approx));
          var result = approx.add(rem.div(other));
          return result;
        }
      }
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.ZERO;
    }

    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().div(other.negate());
      } else {
        return this.negate().div(other).negate();
      }
    } else if (other.isNegative()) {
      return this.div(other.negate()).negate();
    }

    // Repeat the following until the remainder is less than other:  find a
    // floating-point that approximates remainder / other *from below*, add this
    // into the result, and subtract it from the remainder.  It is critical that
    // the approximate value is less than or equal to the real value so that the
    // remainder never becomes negative.
    var res = goog.math.Long.ZERO;
    var rem = this;
    while (rem.greaterThanOrEqual(other)) {
      // Approximate the result of division. This may be a little greater or
      // smaller than the actual value.
      var approx = Math.max(1, Math.floor(rem.toNumber() / other.toNumber()));

      // We will tweak the approximate result by changing it in the 48-th digit or
      // the smallest non-fractional digit, whichever is larger.
      var log2 = Math.ceil(Math.log(approx) / Math.LN2);
      var delta = (log2 <= 48) ? 1 : Math.pow(2, log2 - 48);

      // Decrease the approximation until it is smaller than the remainder.  Note
      // that if it is too large, the product overflows and is negative.
      var approxRes = goog.math.Long.fromNumber(approx);
      var approxRem = approxRes.multiply(other);
      while (approxRem.isNegative() || approxRem.greaterThan(rem)) {
        approx -= delta;
        approxRes = goog.math.Long.fromNumber(approx);
        approxRem = approxRes.multiply(other);
      }

      // We know the answer can't be zero... and actually, zero would cause
      // infinite recursion since we would make no progress.
      if (approxRes.isZero()) {
        approxRes = goog.math.Long.ONE;
      }

      res = res.add(approxRes);
      rem = rem.subtract(approxRem);
    }
    return res;
  };


  /**
   * Returns this Long modulo the given one.
   * @param {goog.math.Long} other Long by which to mod.
   * @return {!goog.math.Long} This Long modulo the given one.
   */
  goog.math.Long.prototype.modulo = function(other) {
    return this.subtract(this.div(other).multiply(other));
  };


  /** @return {!goog.math.Long} The bitwise-NOT of this value. */
  goog.math.Long.prototype.not = function() {
    return goog.math.Long.fromBits(~this.low_, ~this.high_);
  };


  /**
   * Returns the bitwise-AND of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to AND.
   * @return {!goog.math.Long} The bitwise-AND of this and the other.
   */
  goog.math.Long.prototype.and = function(other) {
    return goog.math.Long.fromBits(this.low_ & other.low_,
                                   this.high_ & other.high_);
  };


  /**
   * Returns the bitwise-OR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to OR.
   * @return {!goog.math.Long} The bitwise-OR of this and the other.
   */
  goog.math.Long.prototype.or = function(other) {
    return goog.math.Long.fromBits(this.low_ | other.low_,
                                   this.high_ | other.high_);
  };


  /**
   * Returns the bitwise-XOR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to XOR.
   * @return {!goog.math.Long} The bitwise-XOR of this and the other.
   */
  goog.math.Long.prototype.xor = function(other) {
    return goog.math.Long.fromBits(this.low_ ^ other.low_,
                                   this.high_ ^ other.high_);
  };


  /**
   * Returns this Long with bits shifted to the left by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the left by the given amount.
   */
  goog.math.Long.prototype.shiftLeft = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var low = this.low_;
      if (numBits < 32) {
        var high = this.high_;
        return goog.math.Long.fromBits(
            low << numBits,
            (high << numBits) | (low >>> (32 - numBits)));
      } else {
        return goog.math.Long.fromBits(0, low << (numBits - 32));
      }
    }
  };


  /**
   * Returns this Long with bits shifted to the right by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount.
   */
  goog.math.Long.prototype.shiftRight = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >> numBits);
      } else {
        return goog.math.Long.fromBits(
            high >> (numBits - 32),
            high >= 0 ? 0 : -1);
      }
    }
  };


  /**
   * Returns this Long with bits shifted to the right by the given amount, with
   * the new top bits matching the current sign bit.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount, with
   *     zeros placed into the new leading bits.
   */
  goog.math.Long.prototype.shiftRightUnsigned = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >>> numBits);
      } else if (numBits == 32) {
        return goog.math.Long.fromBits(high, 0);
      } else {
        return goog.math.Long.fromBits(high >>> (numBits - 32), 0);
      }
    }
  };

  //======= begin jsbn =======

  var navigator = { appName: 'Modern Browser' }; // polyfill a little

  // Copyright (c) 2005  Tom Wu
  // All Rights Reserved.
  // http://www-cs-students.stanford.edu/~tjw/jsbn/

  /*
   * Copyright (c) 2003-2005  Tom Wu
   * All Rights Reserved.
   *
   * Permission is hereby granted, free of charge, to any person obtaining
   * a copy of this software and associated documentation files (the
   * "Software"), to deal in the Software without restriction, including
   * without limitation the rights to use, copy, modify, merge, publish,
   * distribute, sublicense, and/or sell copies of the Software, and to
   * permit persons to whom the Software is furnished to do so, subject to
   * the following conditions:
   *
   * The above copyright notice and this permission notice shall be
   * included in all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS-IS" AND WITHOUT WARRANTY OF ANY KIND, 
   * EXPRESS, IMPLIED OR OTHERWISE, INCLUDING WITHOUT LIMITATION, ANY 
   * WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.  
   *
   * IN NO EVENT SHALL TOM WU BE LIABLE FOR ANY SPECIAL, INCIDENTAL,
   * INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY KIND, OR ANY DAMAGES WHATSOEVER
   * RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER OR NOT ADVISED OF
   * THE POSSIBILITY OF DAMAGE, AND ON ANY THEORY OF LIABILITY, ARISING OUT
   * OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
   *
   * In addition, the following condition applies:
   *
   * All redistributions must retain an intact copy of this copyright notice
   * and disclaimer.
   */

  // Basic JavaScript BN library - subset useful for RSA encryption.

  // Bits per digit
  var dbits;

  // JavaScript engine analysis
  var canary = 0xdeadbeefcafe;
  var j_lm = ((canary&0xffffff)==0xefcafe);

  // (public) Constructor
  function BigInteger(a,b,c) {
    if(a != null)
      if("number" == typeof a) this.fromNumber(a,b,c);
      else if(b == null && "string" != typeof a) this.fromString(a,256);
      else this.fromString(a,b);
  }

  // return new, unset BigInteger
  function nbi() { return new BigInteger(null); }

  // am: Compute w_j += (x*this_i), propagate carries,
  // c is initial carry, returns final carry.
  // c < 3*dvalue, x < 2*dvalue, this_i < dvalue
  // We need to select the fastest one that works in this environment.

  // am1: use a single mult and divide to get the high bits,
  // max digit bits should be 26 because
  // max internal value = 2*dvalue^2-2*dvalue (< 2^53)
  function am1(i,x,w,j,c,n) {
    while(--n >= 0) {
      var v = x*this[i++]+w[j]+c;
      c = Math.floor(v/0x4000000);
      w[j++] = v&0x3ffffff;
    }
    return c;
  }
  // am2 avoids a big mult-and-extract completely.
  // Max digit bits should be <= 30 because we do bitwise ops
  // on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)
  function am2(i,x,w,j,c,n) {
    var xl = x&0x7fff, xh = x>>15;
    while(--n >= 0) {
      var l = this[i]&0x7fff;
      var h = this[i++]>>15;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x7fff)<<15)+w[j]+(c&0x3fffffff);
      c = (l>>>30)+(m>>>15)+xh*h+(c>>>30);
      w[j++] = l&0x3fffffff;
    }
    return c;
  }
  // Alternately, set max digit bits to 28 since some
  // browsers slow down when dealing with 32-bit numbers.
  function am3(i,x,w,j,c,n) {
    var xl = x&0x3fff, xh = x>>14;
    while(--n >= 0) {
      var l = this[i]&0x3fff;
      var h = this[i++]>>14;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x3fff)<<14)+w[j]+c;
      c = (l>>28)+(m>>14)+xh*h;
      w[j++] = l&0xfffffff;
    }
    return c;
  }
  if(j_lm && (navigator.appName == "Microsoft Internet Explorer")) {
    BigInteger.prototype.am = am2;
    dbits = 30;
  }
  else if(j_lm && (navigator.appName != "Netscape")) {
    BigInteger.prototype.am = am1;
    dbits = 26;
  }
  else { // Mozilla/Netscape seems to prefer am3
    BigInteger.prototype.am = am3;
    dbits = 28;
  }

  BigInteger.prototype.DB = dbits;
  BigInteger.prototype.DM = ((1<<dbits)-1);
  BigInteger.prototype.DV = (1<<dbits);

  var BI_FP = 52;
  BigInteger.prototype.FV = Math.pow(2,BI_FP);
  BigInteger.prototype.F1 = BI_FP-dbits;
  BigInteger.prototype.F2 = 2*dbits-BI_FP;

  // Digit conversions
  var BI_RM = "0123456789abcdefghijklmnopqrstuvwxyz";
  var BI_RC = new Array();
  var rr,vv;
  rr = "0".charCodeAt(0);
  for(vv = 0; vv <= 9; ++vv) BI_RC[rr++] = vv;
  rr = "a".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;
  rr = "A".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;

  function int2char(n) { return BI_RM.charAt(n); }
  function intAt(s,i) {
    var c = BI_RC[s.charCodeAt(i)];
    return (c==null)?-1:c;
  }

  // (protected) copy this to r
  function bnpCopyTo(r) {
    for(var i = this.t-1; i >= 0; --i) r[i] = this[i];
    r.t = this.t;
    r.s = this.s;
  }

  // (protected) set from integer value x, -DV <= x < DV
  function bnpFromInt(x) {
    this.t = 1;
    this.s = (x<0)?-1:0;
    if(x > 0) this[0] = x;
    else if(x < -1) this[0] = x+DV;
    else this.t = 0;
  }

  // return bigint initialized to value
  function nbv(i) { var r = nbi(); r.fromInt(i); return r; }

  // (protected) set from string and radix
  function bnpFromString(s,b) {
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 256) k = 8; // byte array
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else { this.fromRadix(s,b); return; }
    this.t = 0;
    this.s = 0;
    var i = s.length, mi = false, sh = 0;
    while(--i >= 0) {
      var x = (k==8)?s[i]&0xff:intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-") mi = true;
        continue;
      }
      mi = false;
      if(sh == 0)
        this[this.t++] = x;
      else if(sh+k > this.DB) {
        this[this.t-1] |= (x&((1<<(this.DB-sh))-1))<<sh;
        this[this.t++] = (x>>(this.DB-sh));
      }
      else
        this[this.t-1] |= x<<sh;
      sh += k;
      if(sh >= this.DB) sh -= this.DB;
    }
    if(k == 8 && (s[0]&0x80) != 0) {
      this.s = -1;
      if(sh > 0) this[this.t-1] |= ((1<<(this.DB-sh))-1)<<sh;
    }
    this.clamp();
    if(mi) BigInteger.ZERO.subTo(this,this);
  }

  // (protected) clamp off excess high words
  function bnpClamp() {
    var c = this.s&this.DM;
    while(this.t > 0 && this[this.t-1] == c) --this.t;
  }

  // (public) return string representation in given radix
  function bnToString(b) {
    if(this.s < 0) return "-"+this.negate().toString(b);
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else return this.toRadix(b);
    var km = (1<<k)-1, d, m = false, r = "", i = this.t;
    var p = this.DB-(i*this.DB)%k;
    if(i-- > 0) {
      if(p < this.DB && (d = this[i]>>p) > 0) { m = true; r = int2char(d); }
      while(i >= 0) {
        if(p < k) {
          d = (this[i]&((1<<p)-1))<<(k-p);
          d |= this[--i]>>(p+=this.DB-k);
        }
        else {
          d = (this[i]>>(p-=k))&km;
          if(p <= 0) { p += this.DB; --i; }
        }
        if(d > 0) m = true;
        if(m) r += int2char(d);
      }
    }
    return m?r:"0";
  }

  // (public) -this
  function bnNegate() { var r = nbi(); BigInteger.ZERO.subTo(this,r); return r; }

  // (public) |this|
  function bnAbs() { return (this.s<0)?this.negate():this; }

  // (public) return + if this > a, - if this < a, 0 if equal
  function bnCompareTo(a) {
    var r = this.s-a.s;
    if(r != 0) return r;
    var i = this.t;
    r = i-a.t;
    if(r != 0) return (this.s<0)?-r:r;
    while(--i >= 0) if((r=this[i]-a[i]) != 0) return r;
    return 0;
  }

  // returns bit length of the integer x
  function nbits(x) {
    var r = 1, t;
    if((t=x>>>16) != 0) { x = t; r += 16; }
    if((t=x>>8) != 0) { x = t; r += 8; }
    if((t=x>>4) != 0) { x = t; r += 4; }
    if((t=x>>2) != 0) { x = t; r += 2; }
    if((t=x>>1) != 0) { x = t; r += 1; }
    return r;
  }

  // (public) return the number of bits in "this"
  function bnBitLength() {
    if(this.t <= 0) return 0;
    return this.DB*(this.t-1)+nbits(this[this.t-1]^(this.s&this.DM));
  }

  // (protected) r = this << n*DB
  function bnpDLShiftTo(n,r) {
    var i;
    for(i = this.t-1; i >= 0; --i) r[i+n] = this[i];
    for(i = n-1; i >= 0; --i) r[i] = 0;
    r.t = this.t+n;
    r.s = this.s;
  }

  // (protected) r = this >> n*DB
  function bnpDRShiftTo(n,r) {
    for(var i = n; i < this.t; ++i) r[i-n] = this[i];
    r.t = Math.max(this.t-n,0);
    r.s = this.s;
  }

  // (protected) r = this << n
  function bnpLShiftTo(n,r) {
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<cbs)-1;
    var ds = Math.floor(n/this.DB), c = (this.s<<bs)&this.DM, i;
    for(i = this.t-1; i >= 0; --i) {
      r[i+ds+1] = (this[i]>>cbs)|c;
      c = (this[i]&bm)<<bs;
    }
    for(i = ds-1; i >= 0; --i) r[i] = 0;
    r[ds] = c;
    r.t = this.t+ds+1;
    r.s = this.s;
    r.clamp();
  }

  // (protected) r = this >> n
  function bnpRShiftTo(n,r) {
    r.s = this.s;
    var ds = Math.floor(n/this.DB);
    if(ds >= this.t) { r.t = 0; return; }
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<bs)-1;
    r[0] = this[ds]>>bs;
    for(var i = ds+1; i < this.t; ++i) {
      r[i-ds-1] |= (this[i]&bm)<<cbs;
      r[i-ds] = this[i]>>bs;
    }
    if(bs > 0) r[this.t-ds-1] |= (this.s&bm)<<cbs;
    r.t = this.t-ds;
    r.clamp();
  }

  // (protected) r = this - a
  function bnpSubTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]-a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c -= a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c -= a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c -= a.s;
    }
    r.s = (c<0)?-1:0;
    if(c < -1) r[i++] = this.DV+c;
    else if(c > 0) r[i++] = c;
    r.t = i;
    r.clamp();
  }

  // (protected) r = this * a, r != this,a (HAC 14.12)
  // "this" should be the larger one if appropriate.
  function bnpMultiplyTo(a,r) {
    var x = this.abs(), y = a.abs();
    var i = x.t;
    r.t = i+y.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < y.t; ++i) r[i+x.t] = x.am(0,y[i],r,i,0,x.t);
    r.s = 0;
    r.clamp();
    if(this.s != a.s) BigInteger.ZERO.subTo(r,r);
  }

  // (protected) r = this^2, r != this (HAC 14.16)
  function bnpSquareTo(r) {
    var x = this.abs();
    var i = r.t = 2*x.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < x.t-1; ++i) {
      var c = x.am(i,x[i],r,2*i,0,1);
      if((r[i+x.t]+=x.am(i+1,2*x[i],r,2*i+1,c,x.t-i-1)) >= x.DV) {
        r[i+x.t] -= x.DV;
        r[i+x.t+1] = 1;
      }
    }
    if(r.t > 0) r[r.t-1] += x.am(i,x[i],r,2*i,0,1);
    r.s = 0;
    r.clamp();
  }

  // (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)
  // r != q, this != m.  q or r may be null.
  function bnpDivRemTo(m,q,r) {
    var pm = m.abs();
    if(pm.t <= 0) return;
    var pt = this.abs();
    if(pt.t < pm.t) {
      if(q != null) q.fromInt(0);
      if(r != null) this.copyTo(r);
      return;
    }
    if(r == null) r = nbi();
    var y = nbi(), ts = this.s, ms = m.s;
    var nsh = this.DB-nbits(pm[pm.t-1]);	// normalize modulus
    if(nsh > 0) { pm.lShiftTo(nsh,y); pt.lShiftTo(nsh,r); }
    else { pm.copyTo(y); pt.copyTo(r); }
    var ys = y.t;
    var y0 = y[ys-1];
    if(y0 == 0) return;
    var yt = y0*(1<<this.F1)+((ys>1)?y[ys-2]>>this.F2:0);
    var d1 = this.FV/yt, d2 = (1<<this.F1)/yt, e = 1<<this.F2;
    var i = r.t, j = i-ys, t = (q==null)?nbi():q;
    y.dlShiftTo(j,t);
    if(r.compareTo(t) >= 0) {
      r[r.t++] = 1;
      r.subTo(t,r);
    }
    BigInteger.ONE.dlShiftTo(ys,t);
    t.subTo(y,y);	// "negative" y so we can replace sub with am later
    while(y.t < ys) y[y.t++] = 0;
    while(--j >= 0) {
      // Estimate quotient digit
      var qd = (r[--i]==y0)?this.DM:Math.floor(r[i]*d1+(r[i-1]+e)*d2);
      if((r[i]+=y.am(0,qd,r,j,0,ys)) < qd) {	// Try it out
        y.dlShiftTo(j,t);
        r.subTo(t,r);
        while(r[i] < --qd) r.subTo(t,r);
      }
    }
    if(q != null) {
      r.drShiftTo(ys,q);
      if(ts != ms) BigInteger.ZERO.subTo(q,q);
    }
    r.t = ys;
    r.clamp();
    if(nsh > 0) r.rShiftTo(nsh,r);	// Denormalize remainder
    if(ts < 0) BigInteger.ZERO.subTo(r,r);
  }

  // (public) this mod a
  function bnMod(a) {
    var r = nbi();
    this.abs().divRemTo(a,null,r);
    if(this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r,r);
    return r;
  }

  // Modular reduction using "classic" algorithm
  function Classic(m) { this.m = m; }
  function cConvert(x) {
    if(x.s < 0 || x.compareTo(this.m) >= 0) return x.mod(this.m);
    else return x;
  }
  function cRevert(x) { return x; }
  function cReduce(x) { x.divRemTo(this.m,null,x); }
  function cMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }
  function cSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

  Classic.prototype.convert = cConvert;
  Classic.prototype.revert = cRevert;
  Classic.prototype.reduce = cReduce;
  Classic.prototype.mulTo = cMulTo;
  Classic.prototype.sqrTo = cSqrTo;

  // (protected) return "-1/this % 2^DB"; useful for Mont. reduction
  // justification:
  //         xy == 1 (mod m)
  //         xy =  1+km
  //   xy(2-xy) = (1+km)(1-km)
  // x[y(2-xy)] = 1-k^2m^2
  // x[y(2-xy)] == 1 (mod m^2)
  // if y is 1/x mod m, then y(2-xy) is 1/x mod m^2
  // should reduce x and y(2-xy) by m^2 at each step to keep size bounded.
  // JS multiply "overflows" differently from C/C++, so care is needed here.
  function bnpInvDigit() {
    if(this.t < 1) return 0;
    var x = this[0];
    if((x&1) == 0) return 0;
    var y = x&3;		// y == 1/x mod 2^2
    y = (y*(2-(x&0xf)*y))&0xf;	// y == 1/x mod 2^4
    y = (y*(2-(x&0xff)*y))&0xff;	// y == 1/x mod 2^8
    y = (y*(2-(((x&0xffff)*y)&0xffff)))&0xffff;	// y == 1/x mod 2^16
    // last step - calculate inverse mod DV directly;
    // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints
    y = (y*(2-x*y%this.DV))%this.DV;		// y == 1/x mod 2^dbits
    // we really want the negative inverse, and -DV < y < DV
    return (y>0)?this.DV-y:-y;
  }

  // Montgomery reduction
  function Montgomery(m) {
    this.m = m;
    this.mp = m.invDigit();
    this.mpl = this.mp&0x7fff;
    this.mph = this.mp>>15;
    this.um = (1<<(m.DB-15))-1;
    this.mt2 = 2*m.t;
  }

  // xR mod m
  function montConvert(x) {
    var r = nbi();
    x.abs().dlShiftTo(this.m.t,r);
    r.divRemTo(this.m,null,r);
    if(x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r,r);
    return r;
  }

  // x/R mod m
  function montRevert(x) {
    var r = nbi();
    x.copyTo(r);
    this.reduce(r);
    return r;
  }

  // x = x/R mod m (HAC 14.32)
  function montReduce(x) {
    while(x.t <= this.mt2)	// pad x so am has enough room later
      x[x.t++] = 0;
    for(var i = 0; i < this.m.t; ++i) {
      // faster way of calculating u0 = x[i]*mp mod DV
      var j = x[i]&0x7fff;
      var u0 = (j*this.mpl+(((j*this.mph+(x[i]>>15)*this.mpl)&this.um)<<15))&x.DM;
      // use am to combine the multiply-shift-add into one call
      j = i+this.m.t;
      x[j] += this.m.am(0,u0,x,i,0,this.m.t);
      // propagate carry
      while(x[j] >= x.DV) { x[j] -= x.DV; x[++j]++; }
    }
    x.clamp();
    x.drShiftTo(this.m.t,x);
    if(x.compareTo(this.m) >= 0) x.subTo(this.m,x);
  }

  // r = "x^2/R mod m"; x != r
  function montSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

  // r = "xy/R mod m"; x,y != r
  function montMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }

  Montgomery.prototype.convert = montConvert;
  Montgomery.prototype.revert = montRevert;
  Montgomery.prototype.reduce = montReduce;
  Montgomery.prototype.mulTo = montMulTo;
  Montgomery.prototype.sqrTo = montSqrTo;

  // (protected) true iff this is even
  function bnpIsEven() { return ((this.t>0)?(this[0]&1):this.s) == 0; }

  // (protected) this^e, e < 2^32, doing sqr and mul with "r" (HAC 14.79)
  function bnpExp(e,z) {
    if(e > 0xffffffff || e < 1) return BigInteger.ONE;
    var r = nbi(), r2 = nbi(), g = z.convert(this), i = nbits(e)-1;
    g.copyTo(r);
    while(--i >= 0) {
      z.sqrTo(r,r2);
      if((e&(1<<i)) > 0) z.mulTo(r2,g,r);
      else { var t = r; r = r2; r2 = t; }
    }
    return z.revert(r);
  }

  // (public) this^e % m, 0 <= e < 2^32
  function bnModPowInt(e,m) {
    var z;
    if(e < 256 || m.isEven()) z = new Classic(m); else z = new Montgomery(m);
    return this.exp(e,z);
  }

  // protected
  BigInteger.prototype.copyTo = bnpCopyTo;
  BigInteger.prototype.fromInt = bnpFromInt;
  BigInteger.prototype.fromString = bnpFromString;
  BigInteger.prototype.clamp = bnpClamp;
  BigInteger.prototype.dlShiftTo = bnpDLShiftTo;
  BigInteger.prototype.drShiftTo = bnpDRShiftTo;
  BigInteger.prototype.lShiftTo = bnpLShiftTo;
  BigInteger.prototype.rShiftTo = bnpRShiftTo;
  BigInteger.prototype.subTo = bnpSubTo;
  BigInteger.prototype.multiplyTo = bnpMultiplyTo;
  BigInteger.prototype.squareTo = bnpSquareTo;
  BigInteger.prototype.divRemTo = bnpDivRemTo;
  BigInteger.prototype.invDigit = bnpInvDigit;
  BigInteger.prototype.isEven = bnpIsEven;
  BigInteger.prototype.exp = bnpExp;

  // public
  BigInteger.prototype.toString = bnToString;
  BigInteger.prototype.negate = bnNegate;
  BigInteger.prototype.abs = bnAbs;
  BigInteger.prototype.compareTo = bnCompareTo;
  BigInteger.prototype.bitLength = bnBitLength;
  BigInteger.prototype.mod = bnMod;
  BigInteger.prototype.modPowInt = bnModPowInt;

  // "constants"
  BigInteger.ZERO = nbv(0);
  BigInteger.ONE = nbv(1);

  // jsbn2 stuff

  // (protected) convert from radix string
  function bnpFromRadix(s,b) {
    this.fromInt(0);
    if(b == null) b = 10;
    var cs = this.chunkSize(b);
    var d = Math.pow(b,cs), mi = false, j = 0, w = 0;
    for(var i = 0; i < s.length; ++i) {
      var x = intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-" && this.signum() == 0) mi = true;
        continue;
      }
      w = b*w+x;
      if(++j >= cs) {
        this.dMultiply(d);
        this.dAddOffset(w,0);
        j = 0;
        w = 0;
      }
    }
    if(j > 0) {
      this.dMultiply(Math.pow(b,j));
      this.dAddOffset(w,0);
    }
    if(mi) BigInteger.ZERO.subTo(this,this);
  }

  // (protected) return x s.t. r^x < DV
  function bnpChunkSize(r) { return Math.floor(Math.LN2*this.DB/Math.log(r)); }

  // (public) 0 if this == 0, 1 if this > 0
  function bnSigNum() {
    if(this.s < 0) return -1;
    else if(this.t <= 0 || (this.t == 1 && this[0] <= 0)) return 0;
    else return 1;
  }

  // (protected) this *= n, this >= 0, 1 < n < DV
  function bnpDMultiply(n) {
    this[this.t] = this.am(0,n-1,this,0,0,this.t);
    ++this.t;
    this.clamp();
  }

  // (protected) this += n << w words, this >= 0
  function bnpDAddOffset(n,w) {
    if(n == 0) return;
    while(this.t <= w) this[this.t++] = 0;
    this[w] += n;
    while(this[w] >= this.DV) {
      this[w] -= this.DV;
      if(++w >= this.t) this[this.t++] = 0;
      ++this[w];
    }
  }

  // (protected) convert to radix string
  function bnpToRadix(b) {
    if(b == null) b = 10;
    if(this.signum() == 0 || b < 2 || b > 36) return "0";
    var cs = this.chunkSize(b);
    var a = Math.pow(b,cs);
    var d = nbv(a), y = nbi(), z = nbi(), r = "";
    this.divRemTo(d,y,z);
    while(y.signum() > 0) {
      r = (a+z.intValue()).toString(b).substr(1) + r;
      y.divRemTo(d,y,z);
    }
    return z.intValue().toString(b) + r;
  }

  // (public) return value as integer
  function bnIntValue() {
    if(this.s < 0) {
      if(this.t == 1) return this[0]-this.DV;
      else if(this.t == 0) return -1;
    }
    else if(this.t == 1) return this[0];
    else if(this.t == 0) return 0;
    // assumes 16 < DB < 32
    return ((this[1]&((1<<(32-this.DB))-1))<<this.DB)|this[0];
  }

  // (protected) r = this + a
  function bnpAddTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]+a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c += a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c += a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += a.s;
    }
    r.s = (c<0)?-1:0;
    if(c > 0) r[i++] = c;
    else if(c < -1) r[i++] = this.DV+c;
    r.t = i;
    r.clamp();
  }

  BigInteger.prototype.fromRadix = bnpFromRadix;
  BigInteger.prototype.chunkSize = bnpChunkSize;
  BigInteger.prototype.signum = bnSigNum;
  BigInteger.prototype.dMultiply = bnpDMultiply;
  BigInteger.prototype.dAddOffset = bnpDAddOffset;
  BigInteger.prototype.toRadix = bnpToRadix;
  BigInteger.prototype.intValue = bnIntValue;
  BigInteger.prototype.addTo = bnpAddTo;

  //======= end jsbn =======

  // Emscripten wrapper
  var Wrapper = {
    abs: function(l, h) {
      var x = new goog.math.Long(l, h);
      var ret;
      if (x.isNegative()) {
        ret = x.negate();
      } else {
        ret = x;
      }
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
    },
    ensureTemps: function() {
      if (Wrapper.ensuredTemps) return;
      Wrapper.ensuredTemps = true;
      Wrapper.two32 = new BigInteger();
      Wrapper.two32.fromString('4294967296', 10);
      Wrapper.two64 = new BigInteger();
      Wrapper.two64.fromString('18446744073709551616', 10);
      Wrapper.temp1 = new BigInteger();
      Wrapper.temp2 = new BigInteger();
    },
    lh2bignum: function(l, h) {
      var a = new BigInteger();
      a.fromString(h.toString(), 10);
      var b = new BigInteger();
      a.multiplyTo(Wrapper.two32, b);
      var c = new BigInteger();
      c.fromString(l.toString(), 10);
      var d = new BigInteger();
      c.addTo(b, d);
      return d;
    },
    stringify: function(l, h, unsigned) {
      var ret = new goog.math.Long(l, h).toString();
      if (unsigned && ret[0] == '-') {
        // unsign slowly using jsbn bignums
        Wrapper.ensureTemps();
        var bignum = new BigInteger();
        bignum.fromString(ret, 10);
        ret = new BigInteger();
        Wrapper.two64.addTo(bignum, ret);
        ret = ret.toString(10);
      }
      return ret;
    },
    fromString: function(str, base, min, max, unsigned) {
      Wrapper.ensureTemps();
      var bignum = new BigInteger();
      bignum.fromString(str, base);
      var bigmin = new BigInteger();
      bigmin.fromString(min, 10);
      var bigmax = new BigInteger();
      bigmax.fromString(max, 10);
      if (unsigned && bignum.compareTo(BigInteger.ZERO) < 0) {
        var temp = new BigInteger();
        bignum.addTo(Wrapper.two64, temp);
        bignum = temp;
      }
      var error = false;
      if (bignum.compareTo(bigmin) < 0) {
        bignum = bigmin;
        error = true;
      } else if (bignum.compareTo(bigmax) > 0) {
        bignum = bigmax;
        error = true;
      }
      var ret = goog.math.Long.fromString(bignum.toString()); // min-max checks should have clamped this to a range goog.math.Long can handle well
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
      if (error) throw 'range error';
    }
  };
  return Wrapper;
})();

//======= end closure i64 code =======



// === Auto-generated postamble setup entry stuff ===

if (memoryInitializer) {
  if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
    var data = Module['readBinary'](memoryInitializer);
    HEAPU8.set(data, STATIC_BASE);
  } else {
    addRunDependency('memory initializer');
    Browser.asyncLoad(memoryInitializer, function(data) {
      HEAPU8.set(data, STATIC_BASE);
      removeRunDependency('memory initializer');
    }, function(data) {
      throw 'could not load memory initializer ' + memoryInitializer;
    });
  }
}

function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var preloadStartTime = null;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun'] && shouldRunNow) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = Module.callMain = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString("/bin/this.program"), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);

  initialStackTop = STACKTOP;

  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
    if (!Module['noExitRuntime']) {
      exit(ret);
    }
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
      throw e;
    }
  } finally {
    calledMain = true;
  }
}




function run(args) {
  args = args || Module['arguments'];

  if (preloadStartTime === null) preloadStartTime = Date.now();

  if (runDependencies > 0) {
    Module.printErr('run() called, but dependencies remain, so not running');
    return;
  }

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    ensureInitRuntime();

    preMain();

    if (ENVIRONMENT_IS_WEB && preloadStartTime !== null) {
      Module.printErr('pre-main prep time: ' + (Date.now() - preloadStartTime) + ' ms');
    }

    if (Module['_main'] && shouldRunNow) {
      Module['callMain'](args);
    }

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      if (!ABORT) doRun();
    }, 1);
  } else {
    doRun();
  }
}
Module['run'] = Module.run = run;

function exit(status) {
  ABORT = true;
  EXITSTATUS = status;
  STACKTOP = initialStackTop;

  // exit the runtime
  exitRuntime();

  // TODO We should handle this differently based on environment.
  // In the browser, the best we can do is throw an exception
  // to halt execution, but in node we could process.exit and
  // I'd imagine SM shell would have something equivalent.
  // This would let us set a proper exit status (which
  // would be great for checking test exit statuses).
  // https://github.com/kripken/emscripten/issues/1371

  // throw an exception to halt the current execution
  throw new ExitStatus(status);
}
Module['exit'] = Module.exit = exit;

function abort(text) {
  if (text) {
    Module.print(text);
    Module.printErr(text);
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '\nIf this abort() is unexpected, build with -s ASSERTIONS=1 which can give more information.';

  throw 'abort() at ' + stackTrace() + extra;
}
Module['abort'] = Module.abort = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}


run();

// {{POST_RUN_ADDITIONS}}






// {{MODULE_ADDITIONS}}






